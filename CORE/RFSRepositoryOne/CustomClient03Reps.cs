using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Text;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;using RFSRepository;
using OfficeOpenXml.Drawing.Chart;
using System.Xml;


namespace RFSRepositoryOne
{
    public class CustomClient03Reps
    {
        Host _host = new Host();


        //Model FundAccountingRpt
        public class CSRFeeReport
        {
            public int FeeType { get; set; }
            public int AgentPK { get; set; }
            public int FundPK { get; set; }
            public string FundName { get; set; }
            public string CSRName { get; set; }
            public decimal ManagementFeeRate { get; set; }
            public decimal CSRFee { get; set; }
            public string ManagementFeeType { get; set; }
            public string SharingFeeType { get; set; }
            public string Currency { get; set; }
            public string Date { get; set; }
            public decimal NAV { get; set; }
            public decimal unit { get; set; }
            public decimal AUM { get; set; }
            public decimal MFee { get; set; }
            public decimal GrossShare { get; set; }
            public decimal Pph23 { get; set; }

        }


        private class ReportDailyNAVdanAUM
        {
            public string FundName { get; set; }
            public string Date { get; set; }
            public string BankCustodi { get; set; }
            public string FundType { get; set; }
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }
            public decimal TotalUnit { get; set; }
            public string SInvestCode { get; set; }
            public string FundID { get; set; }


        }

        public class FifoBondPosition
        {
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string Instrument { get; set; }
            public decimal Volume { get; set; }
            public decimal AcqPrice { get; set; }
            public DateTime AcqDate { get; set; }
        }

        public class RevenueClientSummary
        {
            public string FundName { get; set; }
            public string FundClientName { get; set; }
            public decimal AUM { get; set; }
            public DateTime StartDate { get; set; }
            public DateTime LastDate { get; set; }
            public decimal ActualFee { get; set; }
            public decimal Revenue { get; set; }


        }

        private class ListofEquityFund
        {
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }
            public string Fund { get; set; }
            public string InstrumentName { get; set; }
            public string InstrumentID { get; set; }
            public decimal Lot { get; set; }
            public decimal Volume { get; set; }
            public string FundID { get; set; }
            public decimal LastPrice { get; set; }
            public decimal Value { get; set; }
            public decimal AvgCost { get; set; }
            public decimal Cost { get; set; }
        }

        private class BondPortofolio
        {
            public string FundID { get; set; }
            public string FundName { get; set; }
            public DateTime Date { get; set; }
            public decimal Nominal { get; set; }
            public decimal InterestAmount { get; set; }
            public decimal Tax { get; set; }
            public decimal InterestAmountBalance { get; set; }
            public decimal Intrate { get; set; }
            public decimal YrtoMat { get; set; }
            public string Rating { get; set; }
            public decimal OurRef { get; set; }
            public decimal Yield { get; set; }
            public decimal FairYieldIBPA { get; set; }
            public decimal FairPriceIBPA { get; set; }

        }

        private class KebijakanInvestasi
        {
            public decimal HAJJ { get; set; }
            public decimal GURU { get; set; }
            public decimal METI { get; set; }
            public decimal SHARE { get; set; }
            public decimal SCHOLAR { get; set; }
            public decimal COMM { get; set; }
            public decimal CARE { get; set; }
            public decimal NEXTG { get; set; }
            public decimal SUPPORT { get; set; }
            public decimal WEALTH { get; set; }
            public decimal INSPIRE { get; set; }
            public decimal FELLOWSHIP { get; set; }
            public decimal MONEY { get; set; }
            public decimal PLAN { get; set; }
            public decimal COMM2 { get; set; }
            public decimal MONEYSYARIAH { get; set; }
            public decimal ClosePrice { get; set; }
            public string InstrumentID { get; set; }
            public DateTime ValueDate { get; set; }
            public decimal GREEN { get; set; }
            public decimal INFRA { get; set; }
            public decimal LIFE { get; set; }
            public decimal BRIGHT { get; set; }
            public decimal GOVT { get; set; }
            public decimal ASNA { get; set; }
            public decimal DEDICATE { get; set; }
            public decimal GENERATE { get; set; }
            public decimal CREATE { get; set; }
            public decimal GENERATE2 { get; set; }
            public decimal HEALTH { get; set; }
            public decimal PRIME { get; set; }
            public decimal ASA { get; set; }
            public decimal CASH { get; set; }

            public decimal PRO1 { get; set; }
            public decimal PRO2 { get; set; }
            public decimal PROSY1 { get; set; }
            public decimal PROSY2 { get; set; }
            public decimal PROSY3 { get; set; }
            public decimal PRO3 { get; set; }
            public decimal PRO4 { get; set; }
            public decimal PRO5 { get; set; }
            public decimal PRO6 { get; set; }
            public decimal PRO7 { get; set; }
            public decimal PRO8 { get; set; }
            public decimal PRO9 { get; set; }
            public decimal PRO10 { get; set; }
            public decimal PRO11 { get; set; }
            public decimal PRO12 { get; set; }
            public decimal PRO13 { get; set; }
            public decimal PRO14 { get; set; }
            public decimal PRO15 { get; set; }
            public decimal PRO16 { get; set; }
            public decimal PRO17 { get; set; }
            public decimal PRO18 { get; set; }


        }

        private class CashProjection
        {
            public string Name { get; set; }
            public string ID { get; set; }
            public decimal CashIncludeTD { get; set; }
            public decimal Tnol { get; set; }
            public decimal Tsatu { get; set; }
            public decimal Tdua { get; set; }
            public decimal Ttiga { get; set; }
            public DateTime ValueDate { get; set; }
            public DateTime ValueDate1 { get; set; }
            public DateTime ValueDate2 { get; set; }
            public DateTime ValueDate3 { get; set; }
        }

        private class BondSummary
        {
            public string FundID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public DateTime MaturityDate { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal Balance { get; set; }
            public string AnotherRating { get; set; }
            public decimal InternalClosePrice { get; set; }
            public decimal ClosePrice { get; set; }
            public string IssuerID { get; set; }
        }


        //Model UnitRegistry
        public class LaporanAkunBulananClient
        {
            public decimal StartBalance { get; set; }
            public decimal StartNAV { get; set; }
            public decimal EndingNAV { get; set; }
            public DateTime DateStartBalance { get; set; }
            public string FundName { get; set; }
            public string Name { get; set; }
            public string Address { get; set; }
            public DateTime ValueDate { get; set; }
            public string Transaction { get; set; }
            public decimal Unit { get; set; }
            public decimal NAV { get; set; }
            public decimal Amount { get; set; }
            public string ZipCode { get; set; }
            public int FundClientPK { get; set; }
            public int FundPK { get; set; }
            public decimal TotalRedmAmount { get; set; }
            public decimal TotalSubsAmount { get; set; }
            public string attn { get; set; }
        }

        public class FundBalanceByCategories
        {
            public string FundName { get; set; }
            public decimal Nav { get; set; }
            public string ClientName { get; set; }
            public string InvestorType { get; set; }
            public decimal CashBalance { get; set; }
            public decimal UnitBalance { get; set; }
            public DateTime Date { get; set; }
            public string Branch { get; set; }

        }

        public class FundBalanceDetail
        {
            public string FundName { get; set; }
            public decimal Unit { get; set; }
            public string ClientName { get; set; }
            public string Branch { get; set; }
            public decimal AvgNav { get; set; }
            public decimal CloseNav { get; set; }
            public decimal AmountClosingNAV { get; set; }
            public decimal AmountAvgNAV { get; set; }
            public decimal Unrealized { get; set; }

        }

        public class DailySubscriptionInstruction
        {
            public int ClientSubscriptionPK { get; set; }
            public string FundName { get; set; }
            public string ClientName { get; set; }
            public string ClientID { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal CashAmount { get; set; }
            public decimal TotalUnitAmount { get; set; }
            public string ContactPerson { get; set; }
            public string FaxNo { get; set; }
            public string PhoneNo { get; set; }
            public string Remark { get; set; }
            public string BankAccountName { get; set; }
            public decimal NetAmount { get; set; }
            public string SID { get; set; }
            public DateTime NAVDate { get; set; }

        }

        public class DailyRedemptionInstruction
        {
            public int ClientRedemptionPK { get; set; }
            public string FundName { get; set; }
            public DateTime NAVDate { get; set; }
            public string Name { get; set; }
            public string ClientID { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal CashAmount { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal TotalCashAmount { get; set; }
            public string ContactPerson { get; set; }
            public string FaxNo { get; set; }
            public string PhoneNo { get; set; }
            public string Remark { get; set; }
            public string SID { get; set; }
            public string BankBranchID { get; set; }
            public DateTime PaymentDate { get; set; }
            public string BeneficiaryName { get; set; }
        }

        public class DailySwitchingInstruction
        {
            public int ClientSwitchingPK { get; set; }
            public string NAVDate { get; set; }
            public string Name { get; set; }
            public string ClientID { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal GrossUnit { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal FeePercent { get; set; }
            public decimal FeePercentUnit { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal Fee { get; set; }
            public decimal Net { get; set; }
            public decimal UnitNet { get; set; }
            public string BankBranchID { get; set; }
            public string Remark { get; set; }
            public string FundNameFrom { get; set; }
            public string ContactPersonFrom { get; set; }
            public string FaxNoFrom { get; set; }
            public string PhoneNoFrom { get; set; }
            public string IDFrom { get; set; }
            public string TypeFrom { get; set; }
            public string CityFrom { get; set; }
            public string BankAccountNameFrom { get; set; }
            public string TransferFromNoFrom { get; set; }
            public string AddressFrom { get; set; }
            public string FundNameTo { get; set; }
            public string CityTo { get; set; }
            public string TypeTo { get; set; }
            public string ContactPersonTo { get; set; }
            public string FaxNoTo { get; set; }
            public string PhoneNoTo { get; set; }
            public string IDTo { get; set; }
            public string BankAccountNameTo { get; set; }
            public string TransferFromNoTo { get; set; }
            public string AddressTo { get; set; }
            public decimal NetAmount { get; set; }
            public string SID { get; set; }
            public string PaymentDate { get; set; }
            public decimal NetUnit { get; set; }

        }

        public class CustomerPortfolioAllFundClient
        {
            public int FundClientPK { get; set; }
            public int FundPK { get; set; }
            public string FundName { get; set; }
            public decimal Unit { get; set; }
            public decimal Nav { get; set; }
            public decimal CloseNav { get; set; }
            public string ClientID { get; set; }
            public string ClientName { get; set; }
            public string CIF { get; set; }
            public string CurrencyID { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal CashBalance { get; set; }
            public decimal Balance { get; set; }
            public decimal Charge { get; set; }
            public string Description { get; set; }
            public decimal AvgNav { get; set; }
            public decimal FundValue { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Unrealized { get; set; }
            public string Address { get; set; }
            public decimal UnrealizedPercent { get; set; }
            public DateTime ValueDate { get; set; }

        }

        public class LaporanAUMInstitusiSID
        {
            public string FundID { get; set; }
            public decimal Unit { get; set; }
            public decimal Nav { get; set; }
            public string ClientName { get; set; }
            public string SID { get; set; }
            public DateTime ValueDate { get; set; }

        }

        public class LaporanAUMperTipeFund
        {
            public string FundID { get; set; }
            public decimal Aum { get; set; }
            public string FundName { get; set; }
            public string FundType { get; set; }
            public DateTime ValueDate { get; set; }
            public string SInvestCode { get; set; }
        }

        private class ListInstrumentByAccountRpt
        {
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string ID { get; set; }
            public string Name { get; set; }
            public decimal PreviousBaseBalance { get; set; }
            public decimal BaseDebitMutasi { get; set; }
            public decimal BaseCreditMutasi { get; set; }
            public decimal CurrentBaseBalance { get; set; }

        }


        private class ListDepartmentByAccountRpt
        {
            public string DepartmentID { get; set; }
            public string DepartmentName { get; set; }
            public string ID { get; set; }
            public string Name { get; set; }
            public decimal PreviousBaseBalance { get; set; }
            public decimal BaseDebitMutasi { get; set; }
            public decimal BaseCreditMutasi { get; set; }
            public decimal CurrentBaseBalance { get; set; }

        }

        public class GLPiutang
        {
            public decimal StartBalance { get; set; }
            public int journalPK { get; set; }
            public int FundJournalPK { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public string CashierID { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public int AccountType { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal Amount { get; set; }
            public decimal Debit { get; set; }
            public decimal Credit { get; set; }
            public decimal Rate { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string CurrencyID { get; set; }
            public string OfficeID { get; set; }
            public string DepartmentID { get; set; }
            public string AgentID { get; set; }
            public string ConsigneeID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            
            public string FundID { get; set; }
            public string FundClientID { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }

        }

        public class LaporanPengumumanPembagianDividen
        {
            public decimal Nominal { get; set; }
            public DateTime ValueDate { get; set; }
            public DateTime ExDate { get; set; }
            public DateTime PaymentDate { get; set; }
            public int FundPK { get; set; }
            public string FundName { get; set; } 
            public string BankName { get; set; } 
            public string ContactPerson { get; set; }
            public string Fax1 { get; set; }
            public string Phone1 { get; set; }
            public string ClientName { get; set; }
            public string NoRek { get; set; }
            public string BankClientName { get; set; }
            public string BankAccountName { get; set; }
            public string BankAccountNo { get; set; }
            public string BranchCashRef { get; set; }

        } 
 
                                        
        public class FinancialStatement
        {
            public string ID { get; set; }
            public string Name { get; set; }
            public string InstrumentID { get; set; }
            public string AgentID { get; set; }
            public string DepartmentID { get; set; }
            public string PeriodID { get; set; }
            public int GroupsPK { get; set; }
            public int ParentPK { get; set; }
            public decimal January { get; set; }
            public decimal February { get; set; }
            public decimal March { get; set; }
            public decimal April { get; set; }
            public decimal May { get; set; }
            public decimal June { get; set; }
            public decimal July { get; set; }
            public decimal August { get; set; }
            public decimal September { get; set; }
            public decimal October { get; set; }
            public decimal November { get; set; }
            public decimal Desember { get; set; }

        }
        public class DailySecurityTransactionInstruction
        {
            public decimal No { get; set; }
            public string BS { get; set; }
            public DateTime TradeDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public string FundName { get; set; }
            public string CustodianID { get; set; }
            public string ContactPerson { get; set; }
            public string Fax { get; set; }
            public string SecurityCode { get; set; }
            public decimal Quantity { get; set; }
            public decimal PriceShares { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal BrokerageFee { get; set; }
            public string ParamFundID { get; set; }
            public decimal VAT { get; set; }
            public decimal Levy { get; set; }
            public decimal SalesTax { get; set; }
            public decimal TotalBeforeTax { get; set; }
            public decimal TaxBrokerageFee { get; set; }
            public decimal TotalPayment { get; set; }
            public string Broker { get; set; }
        }


        public class DailySecurityTransactionBond
        {
            public string FundName { get; set; }
            public DateTime TradeDate { get; set; }
            public DateTime LastCouponDate { get; set; }
            public DateTime NextCouponDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public DateTime MaturityDate { get; set; }
            public string SettlementType { get; set; }
            public string InstrumentID { get; set; }
            public string CounterpartName { get; set; }
            public string CashAccount { get; set; }
            public string BS { get; set; }
            public decimal FaceValue { get; set; }
            public decimal PricePercent { get; set; }
            public decimal PriceIDR { get; set; }
            public decimal AccruedInterestDays { get; set; }
            public decimal AccruedInterestPercent { get; set; }
            public decimal AccruedInterestIDR { get; set; }
            public decimal TaxCapitalGain { get; set; }
            public decimal TaxAccruedInt { get; set; }
            public decimal TaxGainInt { get; set; }
            public decimal HoldingPeriodTax { get; set; }
            public decimal TotalPayment { get; set; }



        }

        public class FFSSetup_03
        {
            public DateTime Date { get; set; }
            public int FundPK { get; set; }
            public string Col1 { get; set; }
            public string Col2 { get; set; }
            public string Col3 { get; set; }
            public string Col4 { get; set; }
            public string Col5 { get; set; }
            public string Col6 { get; set; }
            public string Col7 { get; set; }
            public string Col8 { get; set; }
            public string Col9 { get; set; }
            public string Col10 { get; set; }
            public string Col11 { get; set; }
            public string Col12 { get; set; }
            public string Col13 { get; set; }
            public string Col14 { get; set; }
            public string Col15 { get; set; }
            public string Col16 { get; set; }
            public string Col17 { get; set; }
            public string Col18 { get; set; }
            public string Col19 { get; set; }
            public string Col20 { get; set; }
            public string Col21 { get; set; }
            public string Col22 { get; set; }
            public string Col23 { get; set; }
            public int Col24 { get; set; }
            public string Col25 { get; set; }
            public string Col26 { get; set; }
            public string Col27 { get; set; }
            public int Image { get; set; }
            public string FundID { get; set; }
            public string IndexID { get; set; }


            public decimal AUM { get; set; }
            public decimal Nav { get; set; }
            public decimal Unit { get; set; }

            public string InstrumentType { get; set; }
            public decimal ExposurePercent { get; set; }
            public string SectorName { get; set; }

            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }

            public decimal CloseInd { get; set; }
            public int IndexPK { get; set; }


            public decimal ReturnLastMonth { get; set; }
            public decimal Return3Month { get; set; }
            public decimal Return6Month { get; set; }

            public decimal ReturnLast1Year { get; set; }
            public decimal ReturnYTD { get; set; }
            public decimal ReturnInception { get; set; }

            public decimal RateIndex { get; set; }
            public decimal ReturnLastMonthIndex { get; set; }
            public decimal Return3Monthindex { get; set; }
            public decimal Return6Monthindex { get; set; }
            public decimal ReturnLast1YearIndex { get; set; }
            public decimal ReturnYTDIndex { get; set; }
            public decimal ReturnInceptionIndex { get; set; }

            public decimal MinSubs { get; set; }
            public DateTime TanggalPeluncuran { get; set; }
            public string JenisReksadana { get; set; }
            public string MataUang { get; set; }
            public string BankCustodian { get; set; }
            public decimal BiayaPembelian { get; set; }
            public decimal BiayaPenjualankembali { get; set; }
            public string FundName { get; set; }


            public decimal Rate { get; set; }
            public decimal RateBINDO { get; set; }
            public decimal InceptionIndex { get; set; }

            public DateTime DateFromZWorkingDays { get; set; }
            public decimal ReturnInceptionNAV { get; set; }

        }

        public class PVRRpt
        {
            public int Row { get; set; }
            public decimal Balance { get; set; }
            public string FundName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string Name { get; set; }
            public string HariBursa { get; set; }
            public string Issuer { get; set; }
            public string EffectiveDate { get; set; }
            public int Type { get; set; }
            public decimal UnitQuantity { get; set; }
            public decimal AverageCost { get; set; }
            public decimal BookValue { get; set; }
            public decimal MarketPrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal UnrealizedProfitLoss { get; set; }
            public decimal PercentProfilLoss { get; set; }
            public decimal PercentJCI { get; set; }
            public decimal Lot { get; set; }
            public string MarketCap { get; set; }
            public string Sector { get; set; }
            public string MaturityDate { get; set; }
            public string BondType { get; set; }
            public string TimeDeposit { get; set; }
            public string BICode { get; set; }
            public string Branch { get; set; }
            public string TradeDate { get; set; }
            public decimal Nominal { get; set; }
            public decimal Rate { get; set; }
            public decimal CouponRate { get; set; }
            public decimal AccTD { get; set; }
            public decimal Beta { get; set; }
            public string BondRating { get; set; }


        }


        private class PortfolioValuationReport
        {
            public string SecurityCode { get; set; }
            public string SecurityDescription { get; set; }
            public string TimeDeposit { get; set; }
            public string BICode { get; set; }
            public string Branch { get; set; }
            public string InstrumentTypeName { get; set; }
            public decimal QtyOfUnit { get; set; }
            public decimal Lot { get; set; }
            public decimal AverageCost { get; set; }
            public decimal BookValue { get; set; }
            public decimal MarketPrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal UnrealizedProfitLoss { get; set; }
            public decimal PercentFR { get; set; }
            public decimal Nominal { get; set; }
            public decimal RateGross { get; set; }
            public decimal AccIntTD { get; set; }
            public string TradeDate { get; set; }
            public string MaturityDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public int InstrumentTypePK { get; set; }
            public string Date { get; set; }
        }

        public class EquitySummary
        {
            public string FundID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public decimal Lot { get; set; }
            public decimal CostPrice { get; set; }
            public decimal CostValue { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal MarketPrice { get; set; }
            public string IssuerID { get; set; }

        }


        public class HistoricalInstrumentTransaction
        {
            public string TrxType { get; set; }
            public DateTime TransactionDate { get; set; }
            public DateTime SettledDate { get; set; }
            public string InstrumentID { get; set; }
            public string FundID { get; set; }
            public string Broker { get; set; }
            public string TransactionType { get; set; }
            public decimal Price { get; set; }
            public decimal Lot { get; set; }
            public decimal Commission { get; set; }
            public decimal Levy { get; set; }
            public decimal VAT { get; set; }
            public decimal WHT { get; set; }
            public decimal Total { get; set; }
            public decimal Volume { get; set; }
            public decimal Amount { get; set; }
            public decimal AccInterest { get; set; }
            public decimal TaxOnInterest { get; set; }
            public decimal TaxOnGain { get; set; }
            public decimal AnotherTotal { get; set; }
            public string InstrumentTypeName { get; set; }
            public int GroupType { get; set; }
            public DateTime PlacementDate { get; set; }
            public DateTime MaturityDate { get; set; }
            public string Bank { get; set; }
            public string BankBranch { get; set; }
            public decimal InterestRate { get; set; }
            public decimal Tenor { get; set; }
            public string InterestDaysType { get; set; }
            public decimal Principal { get; set; }
            public string Breakable { get; set; }
            public decimal InterestDaysTypeValue { get; set; }
        }


        public class DailyDealBoard03
        {
            public string BankPK { get; set; }
            public string BankID { get; set; }
            public string FundPK { get; set; }
            public string BankName { get; set; }
            public string Attn { get; set; }
            public string Fax { get; set; }
            public string Phone { get; set; }
            public DateTime Date { get; set; }
            public string FundName { get; set; }
            public int Baris { get; set; }
            public int TotalSent { get; set; }
            public string TransactionType { get; set; }
            public string DetailTrx { get; set; }

        }


        public class NewBonds
        {
            public string FundID { get; set; }
            public string InstrumentID { get; set; }
        }


        public class ReportSubscriptionRedemptionAPERD
        {
            public string Fund { get; set; }
            public DateTime ValueDate { get; set; }
            public string Type { get; set; }
            public string FundClientName { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }
        }

        public class CSRReport
        {
            public int AgentPK { get; set; }
            public int FundPK { get; set; }
            public decimal BegBalance { get; set; }
            public string AgentName { get; set; }
            public string FundName { get; set; }
            public string January { get; set; }
            public string February { get; set; }
            public string March { get; set; }
            public string April { get; set; }
            public string May { get; set; }

            public string June { get; set; }
            public string July { get; set; }
            public string August { get; set; }
            public string September { get; set; }
            public string October { get; set; }
            public string November { get; set; }
            public string December { get; set; }

        }


        public class DividenAndCouponFund
        {
            public string FundName { get; set; }
            public DateTime ExDate { get; set; }
            public DateTime PayDate { get; set; }
            public string SecurityName { get; set; }
            public decimal DividenRate { get; set; }
            public decimal BalancedNominal { get; set; }
            public decimal Coupon { get; set; }
            public string QuotationCurrency { get; set; }
            public string PortfolioCurrency { get; set; }
            public decimal NAVperUnitExDate { get; set; }
            public decimal NAVperUnitPayDate { get; set; }
        }


        public class TotalBondAndEquityTransaction
        {
            public string BrokerID { get; set; }
            public string BrokerName { get; set; }
            public string Period { get; set; }
            public decimal TotalTransaction { get; set; }
            public string PercentageTransaction { get; set; }
            public decimal JAN { get; set; }
            public decimal FEB { get; set; }
            public decimal MAR { get; set; }
            public decimal APR { get; set; }
            public decimal MAY { get; set; }
            public decimal JUN { get; set; }
            public decimal JUL { get; set; }
            public decimal AUG { get; set; }
            public decimal SEP { get; set; }
            public decimal OCT { get; set; }
            public decimal NOV { get; set; }
            public decimal DEC { get; set; }
        }

        public class ManagementFeeByFundType
        {
            public string ReksadanaType { get; set; }
            public string FundID { get; set; }
            public string PeriodID { get; set; }
            public decimal Jan { get; set; }
            public decimal Feb { get; set; }
            public decimal Mar { get; set; }
            public decimal Apr { get; set; }
            public decimal May { get; set; }
            public decimal Jun { get; set; }
            public decimal Jul { get; set; }
            public decimal Aug { get; set; }
            public decimal Sep { get; set; }
            public decimal Oct { get; set; }
            public decimal Nov { get; set; }
            public decimal Dec { get; set; }
            public int paramMonth { get; set; }

        }

        public class RevenueByFundClient
        {
            public string InvestorType { get; set; }
            public string Nasabah { get; set; }
            public string TimMarketing { get; set; }
            public decimal Revenue { get; set; }
        }

        public class FundUnitPositionInvestment
        {
            public DateTime Date { get; set; }
            public decimal NAVToday { get; set; }
            public string Fund { get; set; }
            public string Client { get; set; }
            public string ClientCategory { get; set; }
            public decimal AvgNAV { get; set; }
            public decimal Unit { get; set; }
            public decimal Cost { get; set; }
            public decimal TodayValue { get; set; }
            public decimal GL { get; set; }
            public decimal GLPercent { get; set; }
        }


        public class ExposureAllFund
        {
            public string FundID { get; set; }
            public string ExposureID { get; set; }
            public string Parameter { get; set; }
            public decimal ExpPercent { get; set; }
            public decimal MaxPercent { get; set; }
            public decimal MinPercent { get; set; }
            public decimal Value { get; set; }
            public decimal TotalAUM { get; set; }
            public string TypeMutualFund { get; set; }
            public string BankCustodian { get; set; }
            public DateTime OJKEffectiveDate { get; set; }
        }

        public class OpenFundDistributionByClientCategory
        {
            public string FundName { get; set; }
            public string Category { get; set; }
            public decimal AUM { get; set; }
            public decimal Unit { get; set; }
            public decimal AUMPercent { get; set; }

        }


        public class MasterDeposito
        {
            public int BankBuku { get; set; }
            public string BankSesuaiUniverse { get; set; }
            public decimal Rate { get; set; }
            public decimal TD { get; set; }
            public decimal DOC { get; set; }

            public string FundID { get; set; }
            public string BankID { get; set; }
            public string Category { get; set; }
            public DateTime PlacementDate { get; set; }
            public DateTime MaturityDate { get; set; }
            public int Tenor { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal Balance { get; set; }

        }

        public class CSRPerYayasan
        {
            public string Name { get; set; }
            public DateTime TanggalJournal { get; set; }
            public string AgentID { get; set; }
            public string Deskripsi { get; set; }
            public decimal DanaAlokasi { get; set; }
            public decimal PPH23 { get; set; }
            public decimal TotalAfterTax { get; set; }
        }

        public class NOAExistingAndNonExisting
        {
            public string Month { get; set; }
            public decimal Existing { get; set; }
            public decimal TotalNOA { get; set; }
            public string FundClient { get; set; }
            public string Fund { get; set; }
            public decimal Unit { get; set; }
            public decimal NAV { get; set; }
        }


        public Boolean Settlement_ListingRpt(string _userID, InvestmentListing _listing)
        {

            if (_listing.ParamInstType == "2")
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }
                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"Select DATEDIFF (day,IV.ValueDate ,IV.SettlementDate ) HoldingPeriod,DATEDIFF (day,IV.LastCouponDate ,IV.SettlementDate ) TenorDays,IV.TrxTypeID,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,MV.DescOne SettlementModeDesc,MV.DescTwo SettlementModeDescTwo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.EntryUsersID CheckedBy,IV.ApprovedUsersID ApprovedBy,IV.valueDate,I.ID InstrumentID,   
                            F.ID FundID,IT.Name InstrumentType,isnull( AcqDate1,'') AcqDate1,isnull(AcqDate2,'') AcqDate2,isnull(AcqDate3,'') AcqDate3,isnull(AcqDate4,'') AcqDate4,isnull(AcqDate5,'') AcqDate5,BC.BankAccountNo BankAccountNo,IV.*  
                            from Investment IV   
                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK in (2,3,8,9,13,15) and IV.statusSettlement = 2  " + _paramSettlementPK + @"
                            --" + _paramFund + @" 
                            order by RefNo ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Bond");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.LastCouponDate = Convert.ToDateTime(dr0["LastCouponDate"]);
                                            rSingle.NextCouponDate = Convert.ToDateTime(dr0["NextCouponDate"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.AcqPrice = dr0["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);
                                            rSingle.AcqPrice1 = dr0["AcqPrice1"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice1"]);
                                            rSingle.AcqDate1 = Convert.ToDateTime(dr0["AcqDate1"]);
                                            rSingle.AcqPrice2 = dr0["AcqPrice2"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice2"]);
                                            rSingle.AcqDate2 = Convert.ToDateTime(dr0["AcqDate2"]);
                                            rSingle.AcqPrice3 = dr0["AcqPrice3"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice3"]);
                                            rSingle.AcqDate3 = Convert.ToDateTime(dr0["AcqDate3"]);
                                            rSingle.AcqPrice4 = dr0["AcqPrice4"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice4"]);
                                            rSingle.AcqDate4 = Convert.ToDateTime(dr0["AcqDate4"]);
                                            rSingle.AcqPrice5 = dr0["AcqPrice5"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice5"]);
                                            rSingle.AcqDate5 = Convert.ToDateTime(dr0["AcqDate5"]);
                                            rSingle.IncomeTaxGainAmount = Convert.ToDecimal(dr0["IncomeTaxGainAmount"]);
                                            rSingle.IncomeTaxInterestAmount = Convert.ToDecimal(dr0["IncomeTaxInterestAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.AccruedInterest = dr0["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                            rSingle.SettlementModeDesc = dr0["SettlementModeDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDesc"]);
                                            rSingle.SettlementModeDescTwo = dr0["SettlementModeDescTwo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SettlementModeDescTwo"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            //rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.TenorDays = Convert.ToInt32(dr0["TenorDays"]);
                                            rSingle.HoldingPeriod = Convert.ToInt32(dr0["HoldingPeriod"]);
                                            rSingle.IncomeTaxInterestPercent = dr0["IncomeTaxInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxInterestPercent"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                             from r in rList
                                             group r by new { r.FundName, r.InstrumentID, r.Reference, r.BankAccountNo, r.BankCustodianContactPerson, r.BankCustodianFaxNo, r.BankCustodianPhone } into rGroup
                                             select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //int _rowHeader = incRowExcel;
                                            //int _rowLine1 = 0;
                                            //int _rowLine2 = 0;

                                            int _endRowDetail = incRowExcel;

                                            //incRowExcel++;

                                            //area header


                                            //ThickBox Border


                                            incRowExcel++;
                                            int _startRowDetail = incRowExcel;

                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "DAILY TRANSACTION FORM";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            incRowExcel++;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Reff. Number ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Reference;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND NAME ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            incRowExcel++;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account No. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankAccountNo;
                                            incRowExcel++;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "ATTN. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankCustodianContactPerson;
                                            incRowExcel++;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankCustodianFaxNo;
                                            incRowExcel++;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Telp No. ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankCustodianPhone;
                                            incRowExcel++;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Value = "Security ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = "BOND";
                                            incRowExcel = incRowExcel + 3;


                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //ThickBox Border

                                                //int RowO = incRowExcel;
                                                //int RowI = incRowExcel + 1;
                                                incRowExcel++;



                                                //ThickBox Border

                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Type of transaction (B / S) ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TrxTypeID;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "RVP / DVP ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                if (rsDetail.SettlementModeDesc == "DVP" || rsDetail.SettlementModeDesc == "RVP")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "Versus Payment";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "Payment";
                                                }
                                                //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Trade Date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Payment Date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Delivery Date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Broker Name ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.CounterpartName;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Code ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Issuer / Instrument ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                //int _startRowDetail = incRowExcel;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Face value ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "IDR";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Last Coupon Date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.LastCouponDate;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Next Coupon Date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NextCouponDate;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Price ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DonePrice + " %";
                                                //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Proceed ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneAmount;
                                                worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Interest rate (Indicative) ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InterestPercent + " %";
                                                //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Value = "Accrued Days ";
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TenorDays + " DAYS";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Accrued Interest ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "IDR ";
                                                worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.AccruedInterest;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tax Holding Period ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "IDR ";
                                                worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.IncomeTaxInterestAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tax on Capital Gain ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "IDR ";
                                                worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.IncomeTaxGainAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Net Proceed ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = "IDR ";
                                                worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acqusition date ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqDate;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AcqDate;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AcqDate;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Holding period ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.HoldingPeriod + " DAYS";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Acqusition price ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqPrice + " %";
                                                //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tax rate ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IncomeTaxInterestPercent + " %";
                                                //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,0%";
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;

                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Value = "Payment instruction ";
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = ":";

                                                if (rsDetail.TrxTypeID == "SELL")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Please receive on";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.SettlementDate;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 8].Value = "IDR ";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;

                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 9].Value = "to ";
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.CounterpartName;
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel = incRowExcel + 3;


                                                }
                                                else if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Please transfer on";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.InstructionDate;
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 8].Value = "IDR ";
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;

                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Sub. Reg. 2.1.2.008 ";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.CounterpartName;
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;

                                                    worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Please Make Tax Payment to be submitted to Kas Negara.";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;
                                                }
                                                incRowExcel = incRowExcel + 2;

                                                worksheet.Cells["D" + incRowExcel + ":E" + (incRowExcel)].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Approved By";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                incRowExcel = incRowExcel + 6;
                                                worksheet.Cells["A" + incRowExcel + ":D" + (incRowExcel)].Value = "(Thomas/ Suharni / Belinda / Dody)";
                                                worksheet.Cells["A" + incRowExcel + ":D" + (incRowExcel)].Merge = true;
                                                incRowExcel++;

                                                //    //Row D = 5   Reff. Number : 11/RD-I-MONEY-FI/IV/2017 rsDetail.InstrumentName
                                                //    incRowExcel++;
                                                //    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                                //    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //    worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;



                                                //    incRowExcel++;
                                                //    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //    worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();

                                                //    int RowE = incRowExcel + 1;
                                                //    decimal _purchaseAmount = rsDetail.Amount;
                                                //    decimal _recalNetProceeds = rsDetail.TotalAmount;
                                                //    incRowExcel++;

                                                //    //area detail
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstructionDate;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    _rowLine1 = incRowExcel;
                                                //    incRowExcel++;

                                                //    worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Attention ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianContactPerson;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Fax No ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Reference ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Re ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = "Bond Transaction -	" + rsDetail.InstrumentID;
                                                //    _rowLine2 = incRowExcel;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Dear Sir,";
                                                //    incRowExcel++;
                                                //    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Here with we would like to confirm having bond transaction with following details :";
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Bond Name ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Type of Transaction ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementModeDesc + "(" + rsDetail.SettlementModeDescTwo + ")";
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Nominal (IDR) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Price (%) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.DonePrice;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Current Coupon (%) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InterestPercent;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "CounterParty ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    //worksheet.Cells[incRowExcel, 1].Value = "care of ";
                                                //    //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    //worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    //worksheet.Cells[incRowExcel, 3].Value = rsDetail.CounterpartName;
                                                //    //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    //incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Trade Date ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Settlement Date ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    int RowF = incRowExcel;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Acq Price (%) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Acq Date ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    incRowExcel++;

                                                //    if (rsDetail.AcqPrice1 != 0)
                                                //    {

                                                //        worksheet.Cells[incRowExcel, 1].Value = "Acq Price 1 (%) ";
                                                //        worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //        worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice1;
                                                //        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                //        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        incRowExcel++;
                                                //        worksheet.Cells[incRowExcel, 1].Value = "Acq Date 1 ";
                                                //        worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //        worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate1;
                                                //        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        incRowExcel++;
                                                //    }

                                                //    if (rsDetail.AcqPrice2 != 0)
                                                //    {

                                                //        worksheet.Cells[incRowExcel, 1].Value = "Acq Price 2 (%) ";
                                                //        worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //        worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqPrice2;
                                                //        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                //        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        incRowExcel++;
                                                //        worksheet.Cells[incRowExcel, 1].Value = "Acq Date 2 ";
                                                //        worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //        worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDate2;
                                                //        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        incRowExcel++;
                                                //    }
                                                //    if (rsDetail.AcqPrice3 != 0)
                                                //    {
                                                //        worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //        worksheet.Cells[RowF, 5].Value = "Acq Price 3 (%) ";
                                                //        worksheet.Cells[RowF, 6].Value = ":";
                                                //        worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice3;
                                                //        worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                //        worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        RowF++;
                                                //        worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //        worksheet.Cells[RowF, 5].Value = "Acq Date 3 ";
                                                //        worksheet.Cells[RowF, 6].Value = ":";
                                                //        worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //        worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate3;
                                                //        worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        RowF++;

                                                //    }
                                                //    if (rsDetail.AcqPrice4 != 0)
                                                //    {
                                                //        worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //        worksheet.Cells[RowF, 5].Value = "Acq Price 4 (%) ";
                                                //        worksheet.Cells[RowF, 6].Value = ":";
                                                //        worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice4;
                                                //        worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                //        worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        RowF++;
                                                //        worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //        worksheet.Cells[RowF, 5].Value = "Acq Date 4 ";
                                                //        worksheet.Cells[RowF, 6].Value = ":";
                                                //        worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //        worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate4;
                                                //        worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        RowF++;
                                                //    }
                                                //    if (rsDetail.AcqPrice5 != 0)
                                                //    {
                                                //        worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //        worksheet.Cells[RowF, 5].Value = "Acq Price 5 (%) ";
                                                //        worksheet.Cells[RowF, 6].Value = ":";
                                                //        worksheet.Cells[RowF, 7].Value = rsDetail.AcqPrice5;
                                                //        worksheet.Cells[RowF, 7].Style.Numberformat.Format = "#,##0.0000";
                                                //        worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        RowF++;
                                                //        worksheet.Cells["E" + RowF + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //        worksheet.Cells[RowF, 5].Value = "Acq Date 5 ";
                                                //        worksheet.Cells[RowF, 6].Value = ":";
                                                //        worksheet.Cells[RowF, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                //        worksheet.Cells[RowF, 7].Value = rsDetail.AcqDate5;
                                                //        worksheet.Cells[RowF, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //        RowF++;
                                                //    }

                                                //    incRowExcel = incRowExcel + 2;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Purchase Amount (IDR) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Value = _purchaseAmount;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Interest Amount (IDR) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccruedInterest;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Tax. Capital Gain (IDR) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    if (rsDetail.SettlementModeDesc == "RVP")
                                                //    {
                                                //        worksheet.Cells[incRowExcel, 3].Value = rsDetail.IncomeTaxGainAmount * -1;
                                                //    }
                                                //    else
                                                //    {
                                                //        worksheet.Cells[incRowExcel, 3].Value = rsDetail.IncomeTaxGainAmount;
                                                //    }

                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                //    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                //    incRowExcel++;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Net Proceeds (IDR) ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //    worksheet.Cells[incRowExcel, 3].Value = _recalNetProceeds;
                                                //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                //    incRowExcel = incRowExcel + 2;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                                //    worksheet.Cells[incRowExcel, 3].Value = _listing.Message;
                                                //    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //    worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                //    worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                //    worksheet.Cells["C" + incRowExcel + ":F" + (incRowExcel + 4)].Merge = true;
                                                //    incRowExcel = incRowExcel + 6;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Please Confirm Upon Settlement";
                                                //    incRowExcel = incRowExcel + 2;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                                //    worksheet.Cells["D" + incRowExcel + ":E" + (incRowExcel)].Merge = true;
                                                //    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //    worksheet.Cells[incRowExcel, 4].Value = "Approved By";
                                                //    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //    incRowExcel = incRowExcel + 5;
                                                //    worksheet.Cells[incRowExcel, 1].Value = "(    ";
                                                //    worksheet.Cells[incRowExcel, 2].Value = ")";
                                                //    worksheet.Cells[incRowExcel, 3].Value = "(    ";
                                                //    worksheet.Cells[incRowExcel, 4].Value = ")     (";
                                                //    worksheet.Cells[incRowExcel, 6].Value = ")";
                                                //    incRowExcel++;

                                                //    worksheet.Cells["A" + _rowLine1 + ":G" + _rowLine1].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //    worksheet.Cells["A" + _rowLine2 + ":G" + _rowLine2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                //    incRowExcel = incRowExcel + 4;


                                                //incRowExcel++;
                                            }
                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }



                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 4;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 10;
                                        worksheet.Column(9).Width = 40;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            else if (_listing.ParamInstType == "1")
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            cmd.CommandText = @" Select MV.DescOne SettlementModeDesc,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName, 
                                            F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,BB.Name BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,BC.BankAccountName,BC.BankAccountNo BankBranchAccountNo,IV.* 
                                            from Investment IV  
                                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2  
                                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 1 and IV.statusSettlement = 2
                                            " + _paramSettlementPK + _paramFund + @" order by TrxType ";

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.CounterpartID = dr0["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.BankAccountName = dr0["BankAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.LevyAmount = dr0["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["LevyAmount"]);
                                            rSingle.KPEIAmount = dr0["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KPEIAmount"]);
                                            rSingle.VATAmount = dr0["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["VATAmount"]);
                                            rSingle.WHTAmount = dr0["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["WHTAmount"]);
                                            rSingle.IncomeTaxSellAmount = dr0["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxSellAmount"]);
                                            rSingle.SettlementModeDesc = Convert.ToString(dr0["SettlementModeDesc"]);
                                            rSingle.BankBranchAccountNo = dr0["BankBranchAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchAccountNo"]);
                                            rList.Add(rSingle);

                                        }


                                        var GroupByValueDate =
                                               from r in rList
                                               group r by new { r.ValueDate, r.FundID, r.FundName, r.SettlementDate, r.BankCustodianName, r.ContactPerson, r.FaxNo, r.BankBranchAccountNo } into rGroup
                                               select rGroup;

                                        int incRowExcel = 0;
                                        var _trxTypeID = "BUY";
                                        var _trxTypeIDBuy = "BUY";
                                        var _settlementModeDesc = "";
                                        var _bankCustodianName = "";
                                        var _bankAccountNo = "";


                                        foreach (var rsHeader in GroupByValueDate)
                                        {
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "REFERENCE";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 12].Value = "Reference No ";
                                            ////worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13].Value = ":";
                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.Reference;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian  ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankCustodianName;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "Reference No ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = "Cash Acc No ";
                                            //worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13].Value = ":";
                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Contact Person ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ContactPerson;
                                            //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "Trade Date ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 15].Value = "Settlement Date       :";
                                            //worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 16].Value = ":";
                                            //worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 16].Value = (rsHeader.Key.SettlementDate);
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax no ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FaxNo;
                                            //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "Securities Acc. ";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Value = ":";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankBranchAccountNo;
                                            //worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "From ";
                                            //worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = ":";
                                            //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundID;
                                            //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = "Settlement Date ";
                                            //worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13].Value = ":";
                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            //worksheet.Cells[incRowExcel, 14].Value = (rsHeader.Key.SettlementDate);
                                            //worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Re ";
                                            //worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 2].Value = ":";
                                            //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = "SETTLEMENT INSTRUCTION";
                                            incRowExcel++;




                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "B / S";
                                            worksheet.Cells[incRowExcel, 3].Value = "Security Code";
                                            worksheet.Cells[incRowExcel, 4].Value = "Reference No.";
                                            worksheet.Cells[incRowExcel, 5].Value = "Quantity";
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "Price/Shares";
                                            worksheet.Cells[incRowExcel, 8].Value = "Gross Amount";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Brokerage Fee (IDR)";
                                            worksheet.Cells[incRowExcel, 11].Value = "VAT (IDR)";
                                            worksheet.Cells[incRowExcel, 12].Value = "Levy (IDR)";
                                            worksheet.Cells[incRowExcel, 13].Value = "Sales Tax (IDR)";
                                            worksheet.Cells[incRowExcel, 14].Value = "Tot. Before Tax";
                                            worksheet.Cells[incRowExcel, 15].Value = "Brokerage Fee Tax 2%";
                                            worksheet.Cells[incRowExcel, 16].Value = "Total Payment (IDR)";
                                            worksheet.Cells[incRowExcel, 17].Value = "Broker";

                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            string _range = "A" + incRowExcel + ":Q" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 18;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int RowBuy = 0;



                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (_trxTypeID != rsDetail.TrxTypeID)
                                                {
                                                    RowBuy = incRowExcel;
                                                    incRowExcel++;
                                                }
                                                decimal _totalSettleForBuy = 0;
                                                decimal _totalSettleForSell = 0;
                                                _totalSettleForBuy = rsDetail.DoneAmount + rsDetail.CommissionAmount + rsDetail.LevyAmount + rsDetail.VATAmount + rsDetail.KPEIAmount;
                                                _totalSettleForSell = rsDetail.DoneAmount + rsDetail.WHTAmount - rsDetail.CommissionAmount - rsDetail.LevyAmount - rsDetail.VATAmount - rsDetail.KPEIAmount - rsDetail.IncomeTaxSellAmount;
                                                _range = "A" + incRowExcel + ":Q" + incRowExcel;

                                                if (_trxTypeID == rsDetail.TrxTypeID && _trxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    if (rsDetail.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "B";

                                                    }
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.DoneVolume;
                                                    worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.DonePrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.DoneAmount;
                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.CommissionAmount;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.LevyAmount;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.VATAmount;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    if (rsDetail.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Value = 0;

                                                    }
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    if (rsDetail.TrxTypeID == "BUY")
                                                    {
                                                        worksheet.Cells[incRowExcel, 14].Value = _totalSettleForBuy;

                                                    }

                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.WHTAmount;
                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.CounterpartID + "-" + rsDetail.CounterpartName;
                                                    _endRowDetail = incRowExcel;
                                                    _no++;
                                                    incRowExcel++;



                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    if (rsDetail.TrxTypeID == "SELL")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "S";

                                                    }
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.DoneVolume;
                                                    worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.DonePrice;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.DoneAmount;
                                                    worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.CommissionAmount;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.LevyAmount;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.VATAmount;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    if (rsDetail.TrxTypeID == "SELL")
                                                    {
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.IncomeTaxSellAmount;

                                                    }
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                    if (rsDetail.TrxTypeID == "SELL")
                                                    {
                                                        worksheet.Cells[incRowExcel, 14].Value = _totalSettleForSell;

                                                    }

                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.WHTAmount;
                                                    worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.CounterpartID + "-" + rsDetail.CounterpartName;
                                                    _endRowDetail = incRowExcel;
                                                    _no++;
                                                    incRowExcel++;
                                                }


                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 18;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }

                                                //area detail


                                                _trxTypeID = rsDetail.TrxTypeID;
                                                _settlementModeDesc = rsDetail.SettlementModeDesc;
                                                _bankCustodianName = rsDetail.BankCustodianName;
                                                _bankAccountNo = rsDetail.BankAccountNo;

                                                if (_trxTypeID == "BUY")
                                                {
                                                    _trxTypeIDBuy = "BUY";
                                                }

                                            }
                                            //THICK BOX DETAIL
                                            if (_trxTypeIDBuy == "BUY")
                                            {
                                                if (RowBuy == 0)
                                                {
                                                    RowBuy = _no + _startRowDetail - 1;
                                                }

                                                _endRowDetail = RowBuy - 1;

                                                worksheet.Cells[RowBuy, 7].Value = "Total " + "BUY" + " (IDR) :";

                                                worksheet.Cells[RowBuy, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                worksheet.Cells["H" + RowBuy + ":I" + RowBuy].Merge = true;
                                                worksheet.Cells[RowBuy, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[RowBuy, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                worksheet.Cells[RowBuy, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[RowBuy, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[RowBuy, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                worksheet.Cells[RowBuy, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                worksheet.Cells[RowBuy, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowBuy, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";

                                                worksheet.Cells[RowBuy, 7].Calculate();
                                                worksheet.Cells[RowBuy, 8].Calculate();
                                                worksheet.Cells[RowBuy, 10].Calculate();
                                                worksheet.Cells[RowBuy, 11].Calculate();
                                                worksheet.Cells[RowBuy, 12].Calculate();
                                                worksheet.Cells[RowBuy, 13].Calculate();
                                                worksheet.Cells[RowBuy, 14].Calculate();
                                                worksheet.Cells[RowBuy, 15].Calculate();
                                                worksheet.Cells[RowBuy, 16].Calculate();
                                            }

                                            if (_trxTypeID == "SELL")
                                            {
                                                _endRowDetail = incRowExcel - 1;
                                                int RowSell = incRowExcel;
                                                int _totalSell = RowBuy + 1;
                                                worksheet.Cells[incRowExcel, 7].Value = "Total " + "SELL" + " (IDR) :";

                                                worksheet.Cells[RowSell, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 8].Formula = "SUM(H" + _totalSell + ":H" + _endRowDetail + ")";
                                                worksheet.Cells["H" + RowSell + ":I" + RowSell].Merge = true;
                                                worksheet.Cells[RowSell, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 10].Formula = "SUM(J" + _totalSell + ":J" + _endRowDetail + ")";
                                                worksheet.Cells[RowSell, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 11].Formula = "SUM(K" + _totalSell + ":K" + _endRowDetail + ")";
                                                worksheet.Cells[RowSell, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 12].Formula = "SUM(L" + _totalSell + ":L" + _endRowDetail + ")";
                                                worksheet.Cells[RowSell, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 13].Formula = "SUM(M" + _totalSell + ":M" + _endRowDetail + ")";
                                                worksheet.Cells[RowSell, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 14].Formula = "SUM(N" + _totalSell + ":N" + _endRowDetail + ")";
                                                worksheet.Cells[RowSell, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 15].Formula = "SUM(O" + _totalSell + ":O" + _endRowDetail + ")";
                                                worksheet.Cells[RowSell, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[RowSell, 16].Formula = "SUM(P" + _totalSell + ":P" + _endRowDetail + ")";

                                                worksheet.Cells[RowSell, 7].Calculate();
                                                worksheet.Cells[RowSell, 8].Calculate();
                                                worksheet.Cells[RowSell, 10].Calculate();
                                                worksheet.Cells[RowSell, 11].Calculate();
                                                worksheet.Cells[RowSell, 12].Calculate();
                                                worksheet.Cells[RowSell, 13].Calculate();
                                                worksheet.Cells[RowSell, 14].Calculate();
                                                worksheet.Cells[RowSell, 15].Calculate();
                                                worksheet.Cells[RowSell, 16].Calculate();

                                            }

                                            if (_trxTypeID == "BUY")
                                            {
                                                int _endRowTransaction = incRowExcel;
                                                int _startRowTransaction = _endRowTransaction + 3 - _no;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 7].Value = "Net Transaction :";

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + RowBuy + ":H" + _endRowTransaction + ")";
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + RowBuy + ":J" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + RowBuy + ":K" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + RowBuy + ":L" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + RowBuy + ":M" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + RowBuy + ":N" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + RowBuy + ":O" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + RowBuy + ":P" + _endRowTransaction + ")";

                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                            }
                                            if (_trxTypeID == "SELL")
                                            {
                                                int _endRowTransaction = incRowExcel;
                                                int _startRowTransaction = _endRowTransaction + 3 - _no;
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 7].Value = "Net Transaction :";

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + RowBuy + "+H" + _endRowTransaction + ")";
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + RowBuy + "+J" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + RowBuy + "+K" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + RowBuy + "+L" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + RowBuy + "+M" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + RowBuy + "+N" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + RowBuy + "+O" + _endRowTransaction + ")";
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + RowBuy + "+P" + _endRowTransaction + ")";

                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                            }



                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["M" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["N" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["N" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["O" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["O" + _startRowDetail + ":O" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["O" + _startRowDetail + ":O" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["O" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["P" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["P" + _startRowDetail + ":P" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["P" + _startRowDetail + ":P" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["P" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["Q" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["Q" + _startRowDetail + ":Q" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["Q" + _startRowDetail + ":Q" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["Q" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Settlement Inst. :";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Versus Payment ";
                                            worksheet.Cells[incRowExcel, 9].Value = "Free Of Payment ";
                                            worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                            if (_settlementModeDesc == "RVP" || _settlementModeDesc == "DVP")
                                            {
                                                worksheet.Cells[incRowExcel, 5].Value = "X";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 8].Value = "X";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }

                                            incRowExcel = incRowExcel + 6;
                                            int _side = incRowExcel;
                                            worksheet.Cells[incRowExcel, 12].Value = "Please receive the settlement Amount at: ";
                                            worksheet.Cells["L" + incRowExcel + ":P" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 12].Value = "Bank Name";
                                            worksheet.Cells[incRowExcel, 13].Value = "  :  ";
                                            worksheet.Cells[incRowExcel, 14].Value = _bankCustodianName;
                                            worksheet.Cells["N" + incRowExcel + ":P" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 12].Value = "Acc. Name";
                                            worksheet.Cells[incRowExcel, 13].Value = "  :  ";
                                            worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["N" + incRowExcel + ":P" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 12].Value = "Acc. No";
                                            worksheet.Cells[incRowExcel, 13].Value = "  :  ";
                                            worksheet.Cells[incRowExcel, 14].Value = _bankAccountNo;
                                            worksheet.Cells["N" + incRowExcel + ":P" + incRowExcel].Merge = true;
                                            int _endside = incRowExcel;
                                            incRowExcel = incRowExcel + 10;

                                            worksheet.Cells[incRowExcel, 3].Value = "Authorized by,";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 6].Value = "Approved By";
                                            //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 5;
                                            worksheet.Cells[incRowExcel, 3].Value = "(    ";
                                            worksheet.Cells[incRowExcel, 5].Value = ")";
                                            worksheet.Cells[incRowExcel, 6].Value = "(    ";
                                            worksheet.Cells[incRowExcel, 8].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = true;
                                            worksheet.Cells["L" + _side + ":P" + _side].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["L" + _endside + ":P" + _endside].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["P" + _side + ":P" + _endside].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["L" + _side + ":L" + _endside].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            _no++;
                                        }


                                        string _rangeA = "A1:R" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 18];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 5;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 5;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 30;
                                        worksheet.Column(15).Width = 35;
                                        worksheet.Column(16).Width = 35;
                                        worksheet.Column(17).Width = 55;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&34 DAILY SECURITY TRANSACTION INSTRUCTION";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }


            else if (_listing.ParamInstType == "3")
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _bitIsMature = "";
                            string _paramFund = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (_listing.BitIsMature == true)
                            {
                                _bitIsMature = @"union all

                                Select  A.Reference,A.Tenor,C.PTPCode PlacementBankCode,A.BankAccountNo,A.BankCustodianName,A.BankCustodianContactPerson,A.BankCustodianFaxNo,A.BankCustodianPhone,A.ContactPerson,A.FaxNo,A.Phone,A.InstrumentName,A.FundName,A.valueDate,A.InstrumentID,  
                                A.FundID,A.InstrumentType,A.BankBranchName ,A.TrxTypeID,A.InstructionDate,A.MaturityDate,A.Amount,A.DoneAmount,A.OrderPrice,0 BreakInterestPercent,A.InterestPercent,A.ValueDate,A.AcqDate,A.AccruedInterest,A.SettlementDate,B.BankAccountNo BankBranchAccountNo,B.ID BankBranchID,C.InterestDays TenorDays,B.PTPCode BranchCode,B.BankAccountNo AccountNo, 'No' Breakable,B.BankAccountName TargetAccName
                                from InvestmentMature A
                                left join BankBranch B on A.BankBranchCode = B.PTPCode and B.status = 2
                                left join Bank C on C.BankPK = B.BankPK and C.status = 2
                                where Selected = 1 ";
                            }
                            else
                            {
                                _bitIsMature = "";
                            }
                            //                            cmd.CommandText = @"Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BB.ClearingCode,BC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Phone,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,   
                            //                                             F.ID FundID,IT.Name InstrumentType,C.ID CounterpartID,IV.*  
                            //                                             from Investment IV   
                            //                                             left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                            //                                             left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            //                                             left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            //                                             left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            //                                             left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            //                                             left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            //                                             left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2   
                            //                                             Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  and IV.selectedSettlement = 1 "
                            //                                             + _paramFund + @" order by Refno ";


                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                            )
                            and status = 2

                            Select Reference, DATEDIFF (day,IV.ValueDate ,IV.MaturityDate ) Tenor,C.PTPCode PlacementBankCode,FC.BankAccountNo,BB.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1 Phone,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,  
                            F.ID FundID,IT.Name InstrumentType,C.Name BankBranchName,IV.TrxTypeID,IV.InstructionDate,IV.MaturityDate,IV.Amount,IV.DoneAmount,IV.OrderPrice,IV.BreakInterestPercent BreakInterestPercent,IV.InterestPercent InterestPercent,IV.ValueDate,IV.AcqDate,IV.AccruedInterest ,IV.SettlementDate , BC.BankAccountNo BankBranchAccountNo,BC.ID BankBranchID,BB.InterestDays TenorDays,B.PTPCode BranchCode,B.BankAccountNo AccountNo,Case When IV.BitBreakable = 1 then 'YES' else 'no' End Breakable,B.BankAccountName TargetAccName
                            from Investment IV   
                            left join BankBranch B on IV.BankBranchPK = B.BankBranchPK and B.status = 2   
                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2  
                            left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status = 2  
                            left join Bank BB on BB.BankPK = BC.BankPK and BB.status = 2 
                            left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.status = 2 
                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2  
                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2  
                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
                            left join Bank C on B.BankPK = C.BankPK and C.status = 2    
                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2  
                            " + _paramFund + _paramSettlementPK + _bitIsMature;

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Deposito");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DoneAmount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.OrderPrice = dr0["OrderPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.BreakInterestPercent = dr0["BreakInterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BreakInterestPercent"]);
                                            rSingle.BankBranchName = dr0["BankBranchName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.Phone = dr0["Phone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Phone"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.PlacementBankCode = dr0["PlacementBankCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PlacementBankCode"]);
                                            rSingle.AccountNo = dr0["AccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountNo"]);
                                            rSingle.BranchCode = dr0["BranchCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BranchCode"]);
                                            rSingle.Breakable = dr0["Breakable"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Breakable"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.Tenor = dr0["Tenor"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["Tenor"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.TargetAccName = dr0["TargetAccName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TargetAccName"]);
                                            if (rSingle.TrxTypeID == "LIQUIDATE")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            }
                                            else if (rSingle.TrxTypeID == "ROLLOVER")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                            }
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            rSingle.BankBranchAccountNo = dr0["BankBranchAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchAccountNo"]);
                                            rSingle.BankBranchID = dr0["BankBranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchID"]);
                                            rSingle.TenorDays = dr0["TenorDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["TenorDays"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            //rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.InstrumentID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            int _rowLine1 = 0;
                                            int _rowLine2 = 0;
                                            int _rowLineA = 0;
                                            int _rowLineB = 0;
                                            int _rowLineC = 0;
                                            int _rowLineD = 0;
                                            int _rowLineE = 0;
                                            int _rowLineF = 0;
                                            int _rowLineG = 0;
                                            int _rowLineAA = 0;
                                            int _endRowDetail = incRowExcel;

                                            //incRowExcel++;



                                            // Untuk Cetak Tebal
                                            //string _range = "A" + incRowExcel + ":F" + incRowExcel;
                                            //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            //{
                                            //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            //    r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            //    r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            //    r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //    r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            //    //r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                            //    r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //    r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            //    r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            //}
                                            //incRowExcel++;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                int _rowHeader = incRowExcel;
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                decimal _purchaseAmount = (rsDetail.Amount * rsDetail.OrderPrice);
                                                decimal _recalNetProceeds = (_purchaseAmount + rsDetail.AccruedInterest);

                                                //worksheet.Cells["A" + _rowHeader + ":F" + _rowHeader].Merge = true;               
                                                //worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;

                                                //worksheet.Cells["A" + _rowHeader + ":J" + _rowHeader].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                incRowExcel = incRowExcel + 2;
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchName;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Attn." + rsDetail.BankBranchName + "(" + rsDetail.ContactPerson + ")";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Fax " + " - " + rsDetail.FaxNo;
                                                worksheet.Cells[incRowExcel, 7].Value = "Telp " + " - " + rsDetail.Phone;


                                                _rowLine1 = incRowExcel;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "To ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Attn." + rsDetail.BankCustodianContactPerson + "(" + rsDetail.BankCustodianPhone + ")";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 3].Value = "Fax " + " - " + rsDetail.BankCustodianFaxNo;
                                                worksheet.Cells[incRowExcel, 7].Value = "Telp " + " - " + rsDetail.BankCustodianPhone;


                                                _rowLine2 = incRowExcel;
                                                incRowExcel = incRowExcel + 3;
                                                worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 7].Value = "A/C No.";
                                                worksheet.Cells[incRowExcel, 8].Value = " : ";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BankAccountNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = "Ref No.";
                                                worksheet.Cells[incRowExcel, 8].Value = " : ";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Reference;

                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel++;
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "PLEASE EXECUTE THE FOLLOWING INSTRUCTION :";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Benefary Bank ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchName;
                                                worksheet.Cells[incRowExcel, 7].Value = "Placement Bank Code";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PlacementBankCode;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                _rowLineA = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "In Favoring of ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 7].Value = "Branch Code";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BranchCode;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                _rowLineAA = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Target Acc. Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TargetAccName;
                                                worksheet.Cells[incRowExcel, 7].Value = "Account No";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AccountNo;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                _rowLineB = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Amount (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = "Interest Rate ";
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestPercent;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.BreakInterestPercent;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestPercent;
                                                }

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                _rowLineC = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Value Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7].Value = "Tenor ";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Tenor;
                                                //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                _rowLineD = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Maturity Date ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                }
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = "# Of Days ";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TenorDays;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 7].Value = "Breakable ";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Breakable;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;



                                                _rowLineE = incRowExcel;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1].Value = "Remarks ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells["C" + incRowExcel + ":F" + (incRowExcel + 4)].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = _listing.Message;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                incRowExcel = incRowExcel + 6;
                                                //worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "New Placement ";
                                                worksheet.Cells[incRowExcel, 7].Value = "Rollover ";
                                                worksheet.Cells[incRowExcel, 9].Value = "Liquidate ";
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 4].Value = "X";
                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Value = "X";
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Value = "X";
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }

                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 7].Value = "Principal Only ";
                                                worksheet.Cells[incRowExcel, 9].Value = "Principal + Interest ";
                                                incRowExcel = incRowExcel + 6;
                                                var _principalText = "";
                                                if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    _principalText = "Principal and Interest";
                                                }
                                                else
                                                {
                                                    _principalText = "Interest";
                                                }
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Upon maturity, if there is no further instruction, please transfer the " + _principalText + " to : ";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Bank Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                _rowLineF = incRowExcel;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Account Number ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                _rowLineG = incRowExcel;
                                                //incRowExcel = incRowExcel + 2;
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "and interest to  ";
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Bank Name ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                //_rowLineH = incRowExcel;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Account Number ";
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                //_rowLineI = incRowExcel;
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 4;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Sincerely Yours";
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 2].Value = "Acknowledged by";
                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 4].Value = "Confirmed by";
                                                //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 6].Value = "Verified by";
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = "         Sincerely Yours                                           Acknowledged by                                                                               Confirmed by";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "                                                                                " + rsDetail.BankCustodianName + "                                               Beneficiary Bank";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 7;
                                                worksheet.Cells[incRowExcel, 1].Value = "      Suharni/Belinda/Dody                                Authorized Person                                                                             Authorized Person";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                //worksheet.Cells[incRowExcel, 2].Value = "(                          )";
                                                //worksheet.Cells[incRowExcel, 4].Value = "(                          )";
                                                //worksheet.Cells[incRowExcel, 6].Value = "(                          )";


                                                //BORDER 
                                                worksheet.Cells["A" + _rowLineA + ":J" + _rowLineA].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineA + ":J" + _rowLineA].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineB + ":J" + _rowLineB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineC + ":J" + _rowLineC].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineD + ":J" + _rowLineD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineE + ":J" + _rowLineE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _rowLineAA + ":J" + _rowLineAA].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["A" + _rowLineA + ":A" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["I" + _rowLineA + ":I" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["C" + _rowLineA + ":C" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["D" + _rowLineA + ":D" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["G" + _rowLineA + ":G" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["H" + _rowLineA + ":H" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["K" + _rowLineA + ":K" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["H" + _rowLineA + ":H" + _rowLineE].Style.Border.Left.Style = ExcelBorderStyle.Medium;

                                                //worksheet.Cells["C" + _rowLineF + ":F" + _rowLineF].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["C" + _rowLineF + ":C" + _rowLineG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["F" + _rowLineF + ":F" + _rowLineG].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["C" + _rowLineG + ":F" + _rowLineG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //worksheet.Cells["C" + _rowLineH + ":F" + _rowLineH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["C" + _rowLineH + ":C" + _rowLineI].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["F" + _rowLineH + ":F" + _rowLineI].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["C" + _rowLineI + ":F" + _rowLineI].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                worksheet.Row(incRowExcel).PageBreak = true;

                                                //incRowExcel++;
                                            }


                                            string _rangeA = "A1:J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 16;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            }
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 28;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 18;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            else
            {
                return false;
            }

        }

        public string FundClient_GenerateNewClientID(int _investorType, int _fundClientPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //INSIGHT
                        cmd.CommandText = @" 							
                                
                        Declare @InvestorType int
                        Declare @CompanyType int
                        Declare @Code  nvarchar(100)   
                        Declare @NewClientID  nvarchar(100)    
                        Declare @MaxClientID  int

                        --4 : INSURANCE
                        --6 : PENSION

                        select @InvestorType = InvestorType,@CompanyType = Tipe from FundClient where FundClientPK = @FundClientPK and status = 1
                        select @MaxClientID =  isnull(max(convert(int,right(ID,4))),0)  + 1 from FundClient where  status in (1,2) and FundClientPK > 375
                        and InvestorType = @InvestorType

                        IF @InvestorType = 1
                        BEGIN
	                        select @Code = 'ID'
                        END
                        ELSE
                        BEGIN
	                        select @Code = 'IS'
                        END        
					
                        declare @LENdigit int

                        select @LENdigit = LEN(@maxClientID) 
						
                        If @LENdigit = 1
                        BEGIN
                        set @NewClientID =   @Code + '000' + CAST(@MaxClientID as nvarchar) 
                        END
                        If @LENdigit = 2
                        BEGIN
                        set @NewClientID =   @Code + '00' + CAST(@MaxClientID as nvarchar) 
                        END
                        If @LENdigit = 3
                        BEGIN
                        set @NewClientID =   @Code + '0' + CAST(@MaxClientID as nvarchar) 
                        END
                        If @LENdigit = 4
                        BEGIN
                         set @NewClientID =  @Code + CAST(@MaxClientID as nvarchar) 
                        END
                        Select @NewClientID NewClientID
                       ";
                        cmd.Parameters.AddWithValue("@FundClientPK", _fundClientPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["NewClientID"]);
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        private static string DefaultReportFooterLeftTextDisclaimer()
        {
            return //"&12 " + "PT SUCOR SEKURITAS  \n " +
                 "&12 " + "Laporan in tidak memerlukan tanda tangan karena dicetak secara komputerisasi \n " +
                 "&12 " + "This is a computer generated report, no signatures required";
            //return "&8 Time : " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss");
        }
        //Report
        
        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {

            //INSIGHT
            #region Report Daily NAV dan AUM
            if (_FundAccountingRpt.ReportName.Equals("Report Daily NAV dan AUM"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                            @"



declare @DateMinOne datetime
set @DateMinOne = dbo.FWorkingDay(@datefrom,-1)

declare @FCP table
(
Date datetime,
DateFCP datetime,
FundPK int,
UnitAmount numeric(18,8)
)

declare @CloseNav table
(
Date datetime,
DateCloseNav datetime,
FundPK int,
Nav numeric(18,8),
AUM numeric(22,4)
)


insert into @FCP
select dateadd(day,1,A.Date),B.Date,B.FundPK,sum(UnitAmount) from ZDT_WorkingDays A
left join FundClientPosition B on case when dbo.CheckTodayIsHoliday(A.Date) = 1 then dbo.FWorkingDay(A.Date,-1) else A.Date end = B.Date
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
where A.date between @DateMinOne and @dateto 
and B.FundPK = 1 " + _paramFundFrom +
@"group by A.Date,B.Date,B.FundPK
order by A.Date,B.Date,B.FundPK


insert into @CloseNav
select A.Date,B.Date,B.FundPK,B.Nav,B.AUM from ZDT_WorkingDays A
left join CloseNAV B on case when dbo.CheckTodayIsHoliday(A.Date) = 1 then dbo.FWorkingDay(A.Date, -1) else A.Date end = B.Date and B.status = 2
where A.Date BETWEEN @DateFrom AND  @DateTo
and B.FundPK = 1 " + _paramFundFrom + @"


SELECT B.ID FundID, B.Name FundName, B.SInvestCode,A.Date,A.Nav,AUM,isnull(F.UnitAmount, 0) TotalUnit
,ISNULL(D.ID, '') BankCustodi
,ISNULL(E.DescOne, '') FundType
 FROM @CloseNav A
LEFT JOIN Fund B on A.FundPK = B.FundPK and B.Status in (1, 2)
LEFT JOIN dbo.BankBranch C ON B.BankBranchPK = C.BankBranchPK AND C.Status IN(1,2)
LEFT JOIN dbo.Bank D ON C.BankPK = D.BankPK AND D.status IN(1,2)
LEFT JOIN dbo.MasterValue E ON B.Type = E.Code AND E.status IN(1,2) AND E.id = 'FundType'
LEFT JOIN @FCP F on A.FundPK = F.FundPK and A.Date = case when B.IssueDate = A.Date then F.DateFCP
                                                               when B.Type <> 10 then F.Date

                                                                    else F.DateFCP end
where A.Date BETWEEN @DateFrom AND  @DateTo
and A.FundPK = 1 " + _paramFundFrom + @"
order by B.Name,A.Date Asc";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportDailyNAVdanAUM" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportDailyNAVdanAUM" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportDailyNAVdanAUM";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ReportDailyNAVdanAUM");

                                        int incRowExcel = 1;

                                        //worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();                                                                 
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportDailyNAVdanAUM> rList = new List<ReportDailyNAVdanAUM>();
                                        while (dr0.Read())
                                        {
                                            ReportDailyNAVdanAUM rSingle = new ReportDailyNAVdanAUM();
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.SInvestCode = Convert.ToString(dr0["SInvestCode"]);
                                            rSingle.BankCustodi = Convert.ToString(dr0["BankCustodi"]);
                                            rSingle.TotalUnit = Convert.ToDecimal(dr0["TotalUnit"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //worksheet.Cells[incRowExcel, 1].Value = "Bersama ini kami sampaikan data NAB dan dana kelolaan. ";
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 2].Value = "Report Daily NAV dan AUM";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 3].Value = "Fund ID";
                                            worksheet.Cells[incRowExcel, 4].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 5].Value = "Sinvest Code";
                                            worksheet.Cells[incRowExcel, 6].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 7].Value = "Bank Custodi";
                                            worksheet.Cells[incRowExcel, 8].Value = "NAV/UP";
                                            worksheet.Cells[incRowExcel, 9].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 10].Value = "Unit Penyertaan";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["J" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Row(incRowExcel).Height = 28;
                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.Date);
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SInvestCode;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.FundType;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BankCustodi;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TotalUnit;
                                                worksheet.Cells[incRowExcel, 10].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;


                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + first.ToString() + ":I" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + first.ToString() + ":J" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 REPORT DAILY NAV DAN AUM ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region List of Equity Fund
            else if (_FundAccountingRpt.ReportName.Equals("List of Equity Fund"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramInstrument = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            //Ini untuk instrument

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            cmd.CommandText =

                               @"
                                select C.ID FundID,B.Name InstrumentName, B.ID InstrumentID,ValueDate,A.Lot,Volume from Investment A
                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                                left join Fund C on A.FundPK = C.FundPK and C.status = 2
                                where A.ValueDate = @DateTo and A.StatusInvestment = 2 " + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ListofEquityFund" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ListofEquityFund" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ListofEquityFund";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ListofEquityFund");

                                        int incRowExcel = 1;
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 2].Value = _paramFund;
                                        //worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 2].Value = "LIST OF EQUITY HOLD";
                                        //worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();  
                                        //worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel++;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ListofEquityFund> rList = new List<ListofEquityFund>();
                                        while (dr0.Read())
                                        {
                                            ListofEquityFund rSingle = new ListofEquityFund();
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.Lot = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
                                            rSingle.Volume = dr0["Volume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Volume"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.LastPrice = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
                                            rSingle.Value = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
                                            rSingle.AvgCost = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
                                            rSingle.Cost = dr0["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Lot"]);
                                          
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.FundID } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundID;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "LIST OF EQUITY HOLD";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();  
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Code";
                                            worksheet.Cells[incRowExcel, 4].Value = "Last Price";
                                            worksheet.Cells[incRowExcel, 5].Value = "Volume (Unit)";
                                            worksheet.Cells[incRowExcel, 6].Value = "Volume (Lot)";
                                            worksheet.Cells[incRowExcel, 7].Value = "MV";
                                            worksheet.Cells[incRowExcel, 8].Value = "Avg Book cost";
                                            worksheet.Cells[incRowExcel, 9].Value = "COST 2014";

                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(186, 186, 186));
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 255, 255));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells["I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.LastPrice;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Volume;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Lot;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Value;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AvgCost;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Cost;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thick;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;


                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thick;

                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + first.ToString() + ":E" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + first.ToString() + ":G" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 List of Equity Fund ";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion 

            #region Bond Portofolio
            else if (_FundAccountingRpt.ReportName.Equals("Bond Portofolio"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";
                            string _paramInstrument = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            //ini untuk instrument

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            cmd.CommandText =

                            @"select A.Date,B.ID FundID,B.Name FundNAme, C.Name InstrumentName, A.Balance Nominal,isnull(A.InterestPercent,0) Interest,
                              A.CostValue InterestAmount,A.TrxAmount Tax,A.CostValue InterestAmountBalance from fundposition A
                              left join fund B on A.fundPK = B.FundPK and B.status = 2
                              left join Instrument C on A.instrumentPK = C.instrumentPK and C.status = 2
                              where A.Date = @ValueDateTo " + _paramFundFrom;


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BondPortofolio" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BondPortofolio" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "BondPortofolio";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("BondPortofolio");

                                        int incRowExcel = 1;

                                        //worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();                                                                 
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BondPortofolio> rList = new List<BondPortofolio>();
                                        while (dr0.Read())
                                        {
                                            BondPortofolio rSingle = new BondPortofolio();
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                            rSingle.Intrate = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.YrtoMat = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.Rating = Convert.ToString(dr0["FundID"]); 
                                            rSingle.OurRef = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.Yield = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.FairYieldIBPA = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.FairPriceIBPA = Convert.ToDecimal(dr0["Interest"]);
                                            rSingle.InterestAmount = Convert.ToDecimal(dr0["InterestAmount"]);
                                            rSingle.Tax = Convert.ToDecimal(dr0["Tax"]);
                                            rSingle.InterestAmountBalance = Convert.ToDecimal(dr0["InterestAmountBalance"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.FundID } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundID + " - " + "Bond Portofolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "As of";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "Code";
                                            worksheet.Cells[incRowExcel, 2].Value = "Description";
                                            worksheet.Cells[incRowExcel, 3].Value = "Mature";
                                            worksheet.Cells[incRowExcel, 4].Value = "Int.rate";
                                            worksheet.Cells[incRowExcel, 5].Value = "Yr to Mat";
                                            worksheet.Cells[incRowExcel, 6].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 7].Value = "Rating";
                                            worksheet.Cells[incRowExcel, 8].Value = "Our Reff";
                                            worksheet.Cells[incRowExcel, 9].Value = "Yield";
                                            worksheet.Cells[incRowExcel, 10].Value = "Fair Yield IBPA";
                                            worksheet.Cells[incRowExcel, 11].Value = "Fair Price IBPA";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["J" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Date;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Intrate;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.YrtoMat;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Nominal;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Rating;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.OurRef;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Yield;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.FairYieldIBPA;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.FairPriceIBPA;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Size = 11;


                                                incRowExcel++;
                                                no++;



                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;


                                            int RowQ = incRowExcel;
                                            int RowZ = incRowExcel + 2;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Cash Available ";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV Total ";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV per Unit ";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Return YTD ";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Return YoY";
                                            worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 11];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 50;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 BondPortofolio ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Kebijakan Investasi
            else if (_FundAccountingRpt.ReportName.Equals("Kebijakan Investasi"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";


                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                           
                            cmd.CommandText = @"
                            select top 10 a.ValueDate, A.Reference,A.TrxTypeID,B.ID InstrumentID,isnull(D.ID,'') CounterpartID,A.InterestPercent,
                            isnull(C.ClosePriceValue,0) ClosePrice,A.DonePrice from investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            left join ClosePrice C on B.InstrumentPK = C.InstrumentPK and C.status = 2
                            left join Counterpart D on A.CounterpartPK = D.CounterpartPK and D.status = 2
                            where A.ValueDate between @ValuedateFrom and @ValuedateTo and A.StatusSettlement = 2 " + _paramFundFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "KebijakanInvestasi" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "KebijakanInvestasi" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "KebijakanInvestasi";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("KebijakanInvestasi");

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<KebijakanInvestasi> rList = new List<KebijakanInvestasi>();
                                        while (dr0.Read())
                                        {
                                            KebijakanInvestasi rSingle = new KebijakanInvestasi();
                                            rSingle.HAJJ = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.METI = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.GURU = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.SHARE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.SCHOLAR = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.COMM = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.CARE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.NEXTG = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.WEALTH = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.INSPIRE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.FELLOWSHIP = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.MONEY = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PLAN = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.COMM2 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.GREEN = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.INFRA = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.LIFE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.BRIGHT = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.GOVT = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.ASNA = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.DEDICATE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.GENERATE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.CREATE = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.GENERATE2 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.HEALTH = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRIME = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.ASA = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.CASH = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO1 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO2 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PROSY1 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PROSY2 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PROSY3 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO3 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO4 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO5 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO6 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO7 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO8 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO9 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO10 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO11 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO12 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO13 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO14 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO15 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO16 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO17 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.PRO18 = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.MONEYSYARIAH = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rList.Add(rSingle);
                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ValueDate, r.InstrumentID ascending
                                            group r by new { r.ValueDate } into rGroup
                                            select rGroup;

                                        var GroupDetails =
                                            from r in rList
                                            orderby r.ValueDate, r.InstrumentID ascending
                                            group r by new
                                            {
                                                r.ValueDate,
                                                r.InstrumentID,
                                                r.HAJJ,
                                                r.GURU,
                                                r.METI,
                                                r.SHARE,
                                                r.SCHOLAR,
                                                r.COMM,
                                                r.CARE,
                                                r.NEXTG,
                                                r.SUPPORT,
                                                r.WEALTH,
                                                r.INSPIRE,
                                                r.FELLOWSHIP,
                                                r.MONEY,
                                                r.PLAN,
                                                r.COMM2,
                                                r.MONEYSYARIAH,
                                                r.GREEN,
                                                r.INFRA,
                                                r.LIFE,
                                                r.BRIGHT,
                                                r.GOVT,
                                                r.ASNA,
                                                r.DEDICATE,
                                                r.GENERATE,
                                                r.CREATE,
                                                r.GENERATE2,
                                                r.HEALTH,
                                                r.PRIME,
                                                r.ASA,
                                                r.CASH,
                                                r.PRO1,
                                                r.PRO2,
                                                r.PRO3,
                                                r.PROSY1,
                                                r.PROSY2,
                                                r.PROSY3,
                                                r.PRO4,
                                                r.PRO5,
                                                r.PRO6,
                                                r.PRO7,
                                                r.PRO8,
                                                r.PRO9,
                                                r.PRO10,
                                                r.PRO11,
                                                r.PRO12,
                                                r.PRO13,
                                                r.PRO14,
                                                r.PRO15,
                                                r.PRO16,
                                                r.PRO17,
                                                r.PRO18,
                                            } into rGroupDetails
                                            select rGroupDetails;

                                        int incRowExcel = 1;

                                        //ThickBox Border HEADER
                                        worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "I-HAJJ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "GURU";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "METI";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "I-SHARE";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "I-SCHOLAR";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "I-COMM";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "I-CARE";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "I-NEXT G";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "I-SUPPORT";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "I-WEALTH";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "I-INSPIRE";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "I-FELLOWSHIP";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "I-MONEY";
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Value = "I-PLAN";
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 16].Value = "I-COMM2";
                                        worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 17].Value = "I-MONEY SYARIAH";
                                        worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 18].Value = "I-GREEN";
                                        worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 19].Value = "I-INFRA";
                                        worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 20].Value = "I-LIFE";
                                        worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 21].Value = "I-BRIGHT";
                                        worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 22].Value = "I-GOVT";
                                        worksheet.Cells[incRowExcel, 22].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 23].Value = "I-ASNA";
                                        worksheet.Cells[incRowExcel, 23].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 24].Value = "I-DEDICATE";
                                        worksheet.Cells[incRowExcel, 24].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 25].Value = "I-GENERATE";
                                        worksheet.Cells[incRowExcel, 25].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 26].Value = "I-CREATE";
                                        worksheet.Cells[incRowExcel, 26].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 27].Value = "I-GENERATE2";
                                        worksheet.Cells[incRowExcel, 27].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 28].Value = "I-HEALTH";
                                        worksheet.Cells[incRowExcel, 28].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 29].Value = "I-PRIME";
                                        worksheet.Cells[incRowExcel, 29].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 30].Value = "I-ASA";
                                        worksheet.Cells[incRowExcel, 30].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 30].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 31].Value = "I-CASH";
                                        worksheet.Cells[incRowExcel, 31].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 32].Value = "PRO1";
                                        worksheet.Cells[incRowExcel, 32].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 33].Value = "PRO2";
                                        worksheet.Cells[incRowExcel, 33].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 33].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 34].Value = "PROSY 1";
                                        worksheet.Cells[incRowExcel, 34].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 35].Value = "PROSY 2";
                                        worksheet.Cells[incRowExcel, 35].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 35].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 36].Value = "PROSY 3";
                                        worksheet.Cells[incRowExcel, 36].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 36].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 37].Value = "PRO3";
                                        worksheet.Cells[incRowExcel, 37].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 38].Value = "PRO4";
                                        worksheet.Cells[incRowExcel, 38].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 39].Value = "PRO5";
                                        worksheet.Cells[incRowExcel, 39].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 40].Value = "PRO6";
                                        worksheet.Cells[incRowExcel, 40].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 41].Value = "PRO7";
                                        worksheet.Cells[incRowExcel, 41].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 41].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 42].Value = "PRO8";
                                        worksheet.Cells[incRowExcel, 42].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 42].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 43].Value = "PRO9";
                                        worksheet.Cells[incRowExcel, 43].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 43].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 44].Value = "PRO10";
                                        worksheet.Cells[incRowExcel, 44].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 44].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 45].Value = "PRO11";
                                        worksheet.Cells[incRowExcel, 45].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 45].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 46].Value = "PRO12";
                                        worksheet.Cells[incRowExcel, 46].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 47].Value = "PRO13";
                                        worksheet.Cells[incRowExcel, 47].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 47].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 48].Value = "PRO14";
                                        worksheet.Cells[incRowExcel, 48].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 48].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 49].Value = "PRO15";
                                        worksheet.Cells[incRowExcel, 49].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 49].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 50].Value = "PRO16";
                                        worksheet.Cells[incRowExcel, 50].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 50].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 51].Value = "PRO17";
                                        worksheet.Cells[incRowExcel, 51].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 51].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 52].Value = "PRO18";
                                        worksheet.Cells[incRowExcel, 52].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 52].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsDetail in GroupDetails)
                                        {
                                            //ThickBox Border HEADER
                                            worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":AZ" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //area detail

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.Key.InstrumentID;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Key.HAJJ;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Key.GURU;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Key.METI;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Key.SHARE;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Key.SCHOLAR;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.Key.COMM;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.Key.CARE;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.Key.NEXTG;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.Key.SUPPORT;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.Key.WEALTH;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.Key.INSPIRE;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.Key.FELLOWSHIP;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail.Key.MONEY;
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 15].Value = rsDetail.Key.PLAN;
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 16].Value = rsDetail.Key.COMM2;
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 17].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 18].Value = rsDetail.Key.GURU;
                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 19].Value = rsDetail.Key.GURU;
                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 20].Value = rsDetail.Key.GURU;
                                            worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 21].Value = rsDetail.Key.METI;
                                            worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 22].Value = rsDetail.Key.SHARE;
                                            worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 23].Value = rsDetail.Key.SCHOLAR;
                                            worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 24].Value = rsDetail.Key.COMM;
                                            worksheet.Cells[incRowExcel, 24].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 25].Value = rsDetail.Key.CARE;
                                            worksheet.Cells[incRowExcel, 25].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 26].Value = rsDetail.Key.NEXTG;
                                            worksheet.Cells[incRowExcel, 26].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 27].Value = rsDetail.Key.SUPPORT;
                                            worksheet.Cells[incRowExcel, 27].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 28].Value = rsDetail.Key.WEALTH;
                                            worksheet.Cells[incRowExcel, 28].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 29].Value = rsDetail.Key.INSPIRE;
                                            worksheet.Cells[incRowExcel, 29].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 30].Value = rsDetail.Key.FELLOWSHIP;
                                            worksheet.Cells[incRowExcel, 30].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 31].Value = rsDetail.Key.MONEY;
                                            worksheet.Cells[incRowExcel, 31].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 32].Value = rsDetail.Key.PLAN;
                                            worksheet.Cells[incRowExcel, 32].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 34].Value = rsDetail.Key.COMM2;
                                            worksheet.Cells[incRowExcel, 34].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 35].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 35].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 36].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 36].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 37].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 37].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 38].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 38].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 39].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 39].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 40].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 40].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 41].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 41].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 42].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 42].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 43].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 43].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 44].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 44].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 45].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 45].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 46].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 46].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 47].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 47].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 48].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 48].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 49].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 49].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 50].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 50].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 52].Value = rsDetail.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 52].Style.Numberformat.Format = "#,##0";


                                            _endRowDetail = incRowExcel;
                                            incRowExcel++;
                                        }
                                        incRowExcel = incRowExcel + 2;

                                        // --- //

                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Value = "Kebijakan Investasi ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        //incRowExcel++;

                                        //ThickBox Border HEADER


                                        worksheet.Cells["A" + incRowExcel + ":AC" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + incRowExcel + ":AC" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Value = "I-HAJJ";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Value = "GURU";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 4].Value = "METI";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 5].Value = "I-SHARE";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 6].Value = "I-SCHOLAR";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 7].Value = "I-COMM";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 8].Value = "I-CARE";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 9].Value = "I-NEXT G";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 10].Value = "I-SUPPORT";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 11].Value = "I-WEALTH";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 12].Value = "I-INSPIRE";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 13].Value = "I-FELLOWSHIP";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 14].Value = "I-MONEY";
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 15].Value = "I-PLAN";
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 16].Value = "I-COMM2";
                                        worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 17].Value = "I-MONEY SYARIAH";
                                        worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 18].Value = "I-GREEN";
                                        worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 19].Value = "I-INFRA";
                                        worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 20].Value = "I-LIFE";
                                        worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 21].Value = "I-BRIGHT";
                                        worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 22].Value = "I-GOVT";
                                        worksheet.Cells[incRowExcel, 22].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 23].Value = "I-ASNA";
                                        worksheet.Cells[incRowExcel, 23].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 24].Value = "I-DEDICATE";
                                        worksheet.Cells[incRowExcel, 24].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 25].Value = "I-GENERATE";
                                        worksheet.Cells[incRowExcel, 25].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 26].Value = "I-CREATE";
                                        worksheet.Cells[incRowExcel, 26].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 27].Value = "I-GENERATE2";
                                        worksheet.Cells[incRowExcel, 27].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 28].Value = "I-HEALTH";
                                        worksheet.Cells[incRowExcel, 28].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 29].Value = "I-PRIME";
                                        worksheet.Cells[incRowExcel, 29].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;

                                        _startRowDetail = incRowExcel;
                                        _endRowDetail = 0;

                                        foreach (var rsDetail1 in GroupDetails)
                                        {

                                            //ThickBox Border HEADER



                                            //area detail
                                            //
                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail1.Key.InstrumentID;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.Key.HAJJ;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Key.GURU;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.Key.METI;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Key.SHARE;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.Key.SCHOLAR;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail1.Key.COMM;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.Key.CARE;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail1.Key.NEXTG;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail1.Key.SUPPORT;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail1.Key.WEALTH;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail1.Key.INSPIRE;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Key.FELLOWSHIP;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail1.Key.MONEY;
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 15].Value = rsDetail1.Key.PLAN;
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 16].Value = rsDetail1.Key.COMM2;
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 17].Value = rsDetail1.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 18].Value = rsDetail1.Key.SUPPORT;
                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 19].Value = rsDetail1.Key.WEALTH;
                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 20].Value = rsDetail1.Key.INSPIRE;
                                            worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 21].Value = rsDetail1.Key.FELLOWSHIP;
                                            worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 22].Value = rsDetail1.Key.MONEY;
                                            worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 23].Value = rsDetail1.Key.PLAN;
                                            worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 24].Value = rsDetail1.Key.COMM2;
                                            worksheet.Cells[incRowExcel, 24].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 25].Value = rsDetail1.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 25].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 26].Value = rsDetail1.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 26].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 27].Value = rsDetail1.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 27].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 28].Value = rsDetail1.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 28].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 29].Value = rsDetail1.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 29].Style.Numberformat.Format = "#,##0";

                                            _endRowDetail = incRowExcel;
                                            incRowExcel++;


                                        }


                                        worksheet.Cells["A" + incRowExcel + ":AC" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 4].Calculate();
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 13].Calculate();
                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 14].Calculate();
                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 15].Calculate();
                                        worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 16].Calculate();
                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 17].Calculate();
                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 18].Calculate();
                                        worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 19].Calculate();
                                        worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 20].Calculate();
                                        worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 21].Calculate();
                                        worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 22].Calculate();
                                        worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 23].Formula = "SUM(W" + _startRowDetail + ":W" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 23].Calculate();
                                        worksheet.Cells[incRowExcel, 24].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 24].Formula = "SUM(X" + _startRowDetail + ":X" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 24].Calculate();
                                        worksheet.Cells[incRowExcel, 25].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 25].Formula = "SUM(Y" + _startRowDetail + ":Y" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 25].Calculate();
                                        worksheet.Cells[incRowExcel, 26].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 26].Formula = "SUM(Z" + _startRowDetail + ":Z" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 26].Calculate();
                                        worksheet.Cells[incRowExcel, 27].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 27].Formula = "SUM(AA" + _startRowDetail + ":AA" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 27].Calculate();
                                        worksheet.Cells[incRowExcel, 28].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 28].Formula = "SUM(AB" + _startRowDetail + ":AB" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 28].Calculate();
                                        worksheet.Cells[incRowExcel, 29].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 29].Formula = "SUM(AC" + _startRowDetail + ":AC" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 29].Calculate();

                                        worksheet.Cells["A" + incRowExcel + ":AC" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        incRowExcel = incRowExcel + 2;
                                        // --- //

                                        //                                       
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Value = "Adjustment (Bio) ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                        worksheet.Cells["A" + incRowExcel + ":AC" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                        //ThickBox Border HEADER
                                        foreach (var rsDetail2 in GroupDetails)
                                        {
                                            incRowExcel++;
                                            //ThickBox Border HEADERs

                                            //area detail

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.Key.InstrumentID;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.Key.HAJJ;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail2.Key.GURU;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail2.Key.METI;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Key.SHARE;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Key.SCHOLAR;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail2.Key.COMM;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail2.Key.CARE;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail2.Key.NEXTG;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail2.Key.SUPPORT;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail2.Key.WEALTH;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail2.Key.INSPIRE;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail2.Key.FELLOWSHIP;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail2.Key.MONEY;
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 15].Value = rsDetail2.Key.PLAN;
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 16].Value = rsDetail2.Key.COMM2;
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 17].Value = rsDetail2.Key.MONEYSYARIAH;
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 18].Value = rsDetail2.Key.GURU;
                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 19].Value = rsDetail2.Key.GURU;
                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 20].Value = rsDetail2.Key.GURU;
                                            worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 21].Value = rsDetail2.Key.METI;
                                            worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 22].Value = rsDetail2.Key.SHARE;
                                            worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 23].Value = rsDetail2.Key.SCHOLAR;
                                            worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 24].Value = rsDetail2.Key.COMM;
                                            worksheet.Cells[incRowExcel, 24].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 25].Value = rsDetail2.Key.CARE;
                                            worksheet.Cells[incRowExcel, 25].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 26].Value = rsDetail2.Key.NEXTG;
                                            worksheet.Cells[incRowExcel, 26].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 27].Value = rsDetail2.Key.SUPPORT;
                                            worksheet.Cells[incRowExcel, 27].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 28].Value = rsDetail2.Key.WEALTH;
                                            worksheet.Cells[incRowExcel, 28].Style.Numberformat.Format = "-";
                                            worksheet.Cells[incRowExcel, 29].Value = rsDetail2.Key.INSPIRE;
                                            worksheet.Cells[incRowExcel, 29].Style.Numberformat.Format = "-";

                                            _endRowDetail = incRowExcel;


                                        }

                                        worksheet.Cells["A" + incRowExcel + ":AC" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        _startRowDetail = incRowExcel;
                                        _endRowDetail = 0;



                                        string _rangeDetail = "A:AZ";
                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 15;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 17];

                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 15;
                                        worksheet.Column(14).Width = 15;
                                        worksheet.Column(15).Width = 15;
                                        worksheet.Column(16).Width = 15;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;
                                        worksheet.Column(22).Width = 20;
                                        worksheet.Column(23).Width = 20;
                                        worksheet.Column(24).Width = 20;
                                        worksheet.Column(25).Width = 20;
                                        worksheet.Column(26).Width = 20;
                                        worksheet.Column(27).Width = 20;
                                        worksheet.Column(28).Width = 20;
                                        worksheet.Column(29).Width = 20;
                                        worksheet.Column(30).Width = 20;
                                        worksheet.Column(31).Width = 20;
                                        worksheet.Column(32).Width = 20;
                                        worksheet.Column(33).Width = 20;
                                        worksheet.Column(34).Width = 20;
                                        worksheet.Column(35).Width = 20;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20 KEBIJAKAN INVESTASI";

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }






                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Cash Projection
            else if (_FundAccountingRpt.ReportName.Equals("Cash Projection"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";


                           

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            
                            cmd.CommandText = @"

                           Declare @ValueDate1 datetime
    Declare @ValueDate2 datetime
    Declare @ValueDate3 datetime


    set @ValueDate1 = dbo.FWorkingDay(@valueDate,1)
    set @ValueDate2 = dbo.FWorkingDay(@valueDate,2)
    set @ValueDate3 = dbo.FWorkingDay(@valueDate,3)

    --Select @ValueDate,dbo.FWorkingDay(@valueDate,1),dbo.FWorkingDay(@valueDate,2),dbo.FWorkingDay(@valueDate,3)

    create table #CashInvestmentProjectionWithDeposito
    (FundPK int,amount numeric(22,4), Description nvarchar(400))

    create table #CashInvestmentProjectionT0
    (FundPK int,amount numeric(22,4), Description nvarchar(400))

    create table #CashInvestmentProjectionT1
    (FundPK int,amount numeric(22,4), Description nvarchar(400))

    create table #CashInvestmentProjectionT2
    (FundPK int,amount numeric(22,4), Description nvarchar(400))

    create table #CashInvestmentProjectionT3
    (FundPK int,amount numeric(22,4), Description nvarchar(400))

    Declare @MaxEndDayTrailsDate datetime
    Declare @TrailsPK int
    Declare @FundPK int

    Declare A Cursor for 
	    Select FundPK from Fund A
	    where A.status = 2
    Open A
    FETCH NEXT FROM A   
    INTO @FundPK

    WHILE @@FETCH_STATUS = 0  
    BEGIN 
	    insert into #CashInvestmentProjectionWithDeposito (FundPK,amount,Description)
	    select @FundPK,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK]  (@ValueDate,22,@fundPK),'DEPOSIT'
	
	    insert into #CashInvestmentProjectionWithDeposito (FundPK,amount,Description)
	    select @FundPK,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK]  (@ValueDate,2,@fundPK),'CASH AT BANK'
	
	    insert into #CashInvestmentProjectionWithDeposito (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status not in (3,4)and BitImmediateTransaction = 1
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate and FundPK = @FundPK

	    insert into #CashInvestmentProjectionWithDeposito (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status not in (3,4)
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate and FundPK = @FundPK

	    insert into #CashInvestmentProjectionWithDeposito (FundPK,amount,Description)
	    Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	    where TrailsPK = @TrailsPK
	    And MaturityDate = @ValueDate  and FundPK = @FundPK

	    insert into #CashInvestmentProjectionWithDeposito (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	    from investment 
	    where   SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionWithDeposito (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	    from investment 
	    where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 2
	    and OrderStatus = 'M' and FundPK = @FundPK


	    -----------------------------------------------------------------------------------------------------------------------


	    insert into #CashInvestmentProjectionT0 (FundPK,amount,Description)
	    select @FundPK,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK]  (@ValueDate,2,@FundPK),'CASH AT BANK'
	
	    insert into #CashInvestmentProjectionT0 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status not in (3,4)and BitImmediateTransaction = 1
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT0 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status not in (3,4)
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT0 (FundPK,amount,Description)
	    Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	    where TrailsPK = @TrailsPK
	    And MaturityDate = @ValueDate  and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT0 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	    from investment 
	    where   SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT0 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	    from investment 
	    where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate then @MaxEndDayTrailsDate else @ValueDate end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 2
	    and OrderStatus = 'M' and FundPK = @FundPK

	    -----------------------------------------------------------------------------------------------------------------------

	    insert into #CashInvestmentProjectionT1 (FundPK,amount,Description)
	    select @FundPK,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK]  (@ValueDate1,2,@FundPK),'CASH AT BANK'
	
	    insert into #CashInvestmentProjectionT1 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status not in (3,4)and BitImmediateTransaction = 1
	    and ValueDate >= @MaxEndDayTrailsDate and ValueDate = @ValueDate1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT1 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status not in (3,4)
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT1 (FundPK,amount,Description)
	    Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	    where TrailsPK = @TrailsPK
	    And MaturityDate = @ValueDate1  and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT1 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	    from investment 
	    where   SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate1 then @MaxEndDayTrailsDate else @ValueDate1 end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT1 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	    from investment 
	    where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate1 then @MaxEndDayTrailsDate else @ValueDate1 end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 2
	    and OrderStatus = 'M' and FundPK = @FundPK

	    -----------------------------------------------------------------------------------------------------------------------

	    insert into #CashInvestmentProjectionT2 (FundPK,amount,Description)
	    select @FundPK,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK]  (@ValueDate2,2,@FundPK),'CASH AT BANK'
	
	    insert into #CashInvestmentProjectionT2 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status not in (3,4)and BitImmediateTransaction = 1
	    and ValueDate >= @MaxEndDayTrailsDate and ValueDate = @ValueDate2 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT2 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status not in (3,4)
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate2 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT2 (FundPK,amount,Description)
	    Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	    where TrailsPK = @TrailsPK
	    And MaturityDate = @ValueDate2  and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT2 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	    from investment 
	    where   SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate2 then @MaxEndDayTrailsDate else @ValueDate2 end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT2 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	    from investment 
	    where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate2 then @MaxEndDayTrailsDate else @ValueDate2 end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 2
	    and OrderStatus = 'M' and FundPK = @FundPK

	    -----------------------------------------------------------------------------------------------------------------------

	    insert into #CashInvestmentProjectionT3 (FundPK,amount,Description)
	    select @FundPK,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK]  (@ValueDate3,2,@FundPK),'CASH AT BANK'
	
	    insert into #CashInvestmentProjectionT3 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount),'IMMEDIATE SUBSCRIPTION' from ClientSubscription where status not in (3,4)and BitImmediateTransaction = 1
	    and ValueDate >= @MaxEndDayTrailsDate and ValueDate = @ValueDate3 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT3 (FundPK,amount,Description)
	    Select @FundPK,sum(totalCashAmount) * -1,'REDEMPTION' from ClientRedemption where status not in (3,4)
	    and ValueDate >= @MaxEndDayTrailsDate  and ValueDate = @ValueDate3 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT3 (FundPK,amount,Description)
	    Select @FundPK,sum(MarketValue),'BOND AND TD MATURED' from FundPosition
	    where TrailsPK = @TrailsPK
	    And MaturityDate = @ValueDate3  and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT3 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount) * -1,'AP SETTLED >= VALUEDATE' 
	    from investment 
	    where   SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate3 then @MaxEndDayTrailsDate else @ValueDate3 end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 1 and FundPK = @FundPK

	    insert into #CashInvestmentProjectionT3 (FundPK,Amount,Description)
	    select @FundPK,sum(totalamount),'AR SETTLED = VALUEDATE' 
	    from investment 
	    where  SettlementDate > case when  @MaxEndDayTrailsDate > @ValueDate3 then @MaxEndDayTrailsDate else @ValueDate3 end
	    and statusInvestment  <> 3 
	    and statusDealing  <> 3
	    and statusSettlement  <> 3
	    and TrxType = 2
	    and OrderStatus = 'M' and FundPK = @FundPK


    FETCH NEXT FROM A   
        INTO @FundPK
    END   
    CLOSE A;  
    DEALLOCATE A;


    Select A.ID,A.Name,B.Amount CashIncludeTD, C.amount Tnol
    ,D.amount Tsatu  
    ,E.amount Tdua
    ,F.amount Ttiga,@ValueDate ValueDate,dbo.FWorkingDay(@valueDate,1) ValueDate1,dbo.FWorkingDay(@valueDate,2) ValueDate2,dbo.FWorkingDay(@valueDate,3) ValueDate3
    from fund A
    Left join 
    (
	    Select FundPK,Sum(Amount) Amount from #CashInvestmentProjectionWithDeposito
	    Group by FundPK
    )B on A.FundPK = B.FundPK
    Left join 
    (
	    Select FundPK,Sum(Amount) Amount from #CashInvestmentProjectionT0
	    Group by FundPK
    )C on A.FundPK = C.FundPK
    Left join 
    (
	    Select FundPK,Sum(Amount) Amount from #CashInvestmentProjectionT1
	    Group by FundPK
    )D on A.FundPK = D.FundPK
    Left join 
    (
	    Select FundPK,Sum(Amount) Amount from #CashInvestmentProjectionT2
	    Group by FundPK
    )E on A.FundPK = E.FundPK
    Left join 
    (
	    Select FundPK,Sum(Amount) Amount from #CashInvestmentProjectionT3
	    Group by FundPK
    )F on A.FundPK = F.FundPK
    where A.Status = 2 " + _paramFundFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
   

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CashProjection" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CashProjection" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CashProjection";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CashProjection");

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CashProjection> rList = new List<CashProjection>();
                                        while (dr0.Read())
                                        {
                                            CashProjection rSingle = new CashProjection();
                                            //disiin
                                            rSingle.Tnol = Convert.ToDecimal(dr0["Tnol"]);
                                            rSingle.Tsatu = Convert.ToDecimal(dr0["Tsatu"]);
                                            rSingle.Tdua = Convert.ToDecimal(dr0["Tdua"]);
                                            rSingle.Ttiga = Convert.ToDecimal(dr0["Ttiga"]);
                                            rSingle.CashIncludeTD = Convert.ToDecimal(dr0["CashIncludeTD"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.ValueDate1 = Convert.ToDateTime(dr0["ValueDate1"]);
                                            rSingle.ValueDate2 = Convert.ToDateTime(dr0["ValueDate2"]);
                                            rSingle.ValueDate3 = Convert.ToDateTime(dr0["ValueDate3"]);
                                            rSingle.ID = Convert.ToString(dr0["ID"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);

                                            rList.Add(rSingle);
                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ValueDate ascending
                                            group r by new { r.ValueDate, r.ValueDate1, r.ValueDate2, r.ValueDate3 } into rGroup
                                            select rGroup;

                                        var GroupDetails =
                                            from r in rList
                                            orderby r.ValueDate ascending
                                            group r by new
                                            {
                                                r.ValueDate,
                                                r.ValueDate1,
                                                r.ValueDate2,
                                                r.ValueDate3,
                                                r.Tnol,
                                                r.Tsatu,
                                                r.Tdua,
                                                r.Ttiga,
                                                r.CashIncludeTD,
                                                r.ID,
                                                r.Name,
                                            } into rGroupDetails
                                            select rGroupDetails;

                                        int incRowExcel = 1;

                                        //ThickBox Border HEADER


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            int _RowA = incRowExcel;
                                            int _RowB = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = "CASH INSIGHT";
                                            worksheet.Cells["A" + _RowA + ":C" + _RowB].Style.Font.Bold = true;
                                            worksheet.Cells["A" + _RowA + ":C" + _RowB].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Value = "CASH EXCLUDE TD";
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ValueDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.ValueDate1;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.ValueDate2;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yy";
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.ValueDate3;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yy";

                                            worksheet.Cells[_RowA, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[_RowA, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 3].Value = "Cash Include TD";
                                            worksheet.Cells[incRowExcel, 4].Value = "T+0";

                                            worksheet.Cells[incRowExcel, 5].Value = "T+1";
                                            worksheet.Cells[incRowExcel, 6].Value = "T+2";
                                            worksheet.Cells[incRowExcel, 7].Value = "T+3";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            worksheet.Cells["A" + _RowA + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _RowA + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _RowA + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _RowA + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _RowA + ":G" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + _RowA + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            // Row C = 4

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {



                                            }

                                        }




                                        int _no = 1;
                                        foreach (var rsDetail in GroupDetails)
                                        {
                                            incRowExcel++;
                                            int _startrow = incRowExcel;
                                            //ThickBox Border HEADER
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            //area detail

                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Key.Name;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Key.CashIncludeTD;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.000";
                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Key.Tnol;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000";

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Key.Tsatu;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000";
                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.Key.Tdua;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000";
                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.Key.Ttiga;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000";


                                            int _endrow = incRowExcel;

                                            worksheet.Cells["A" + _startrow + ":G" + _endrow].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + _startrow + ":G" + _endrow].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            _no++;
                                        }

                                        //ThickBox Border HEADER






                                        string _rangeDetail = "A:G";
                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];

                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 55;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Cash Projection";

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }






                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Bond Summary
            if (_FundAccountingRpt.ReportName.Equals("Bond Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";


                            //if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}
                            string _paramInstrument = "";

                            if (!_host.findString(_FundAccountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _FundAccountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }



                            cmd.CommandText = @"
                            select C.ID FundID,B.ID InstrumentID,B.Name InstrumentName,A.MaturityDate,A.InterestPercent,sum(Balance) Balance,isnull(B.AnotherRating,'') AnotherRating,
                            isnull(D.ClosePriceValue,0) InternalClosePrice,isnull(E.ClosePriceValue,0) ClosePrice,isnull(F.ID,'') IssuerID
                            from FundPosition A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            left join UpdateClosePrice D on A.FundPK = D.FundPK and A.InstrumentPK = D.InstrumentPK and D.Status in (1,2) and A.Date = D.Date
                            left join closeprice E on A.InstrumentPK = E.instrumentpk and E.status in (1,2) and A.Date=E.Date
                            left join Issuer F on B.IssuerPK = F.IssuerPK and F.status in (1,2)
                            where A.status = 2 and A.Date = @Date 
							--and A.InstrumentPK = 4709
                            " + _paramInstrument + @" 
                            and B.InstrumentTypePK in (2,3,8,9,11,13,14,15)
							group by C.ID,B.ID,B.Name,A.MaturityDate,A.InterestPercent,B.AnotherRating,D.ClosePriceValue,E.ClosePriceValue,F.ID ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BondSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "BondSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Bond Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BondSummary> rList = new List<BondSummary>();
                                        while (dr0.Read())
                                        {

                                            BondSummary rSingle = new BondSummary();
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.AnotherRating = Convert.ToString(dr0["AnotherRating"]);
                                            rSingle.InternalClosePrice = Convert.ToDecimal(dr0["InternalClosePrice"]);
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.IssuerID = Convert.ToString(dr0["IssuerID"]);



                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Bond Summary Report";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date             :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        _date = incRowExcel;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel = incRowExcel + 2; ;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Value = "ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Instrument Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Mature";
                                            worksheet.Cells[incRowExcel, 5].Value = "Int.rate (%)";
                                            worksheet.Cells[incRowExcel, 6].Value = "Yr to Mat";
                                            worksheet.Cells[incRowExcel, 7].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 8].Value = "Rating";
                                            worksheet.Cells[incRowExcel, 9].Value = "Our Reff";
                                            worksheet.Cells[incRowExcel, 10].Value = "YTM (%)";
                                            worksheet.Cells[incRowExcel, 11].Value = "DUR";
                                            worksheet.Cells[incRowExcel, 12].Value = "IBPA";
                                            worksheet.Cells[incRowExcel, 13].Value = "Y-IBPA (%)";
                                            worksheet.Cells[incRowExcel, 14].Value = "MV-IBPA";
                                            worksheet.Cells[incRowExcel, 15].Value = "MV-reff";
                                            worksheet.Cells[incRowExcel, 16].Value = "Issuer ID";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;

                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.MaturityDate);
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.InterestPercent / 100;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00%";

                                                worksheet.Cells[incRowExcel, 6].Formula = "=YEARFRAC($B$" + _date + ",D" + incRowExcel + ",0)";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Calculate();

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AnotherRating;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.InternalClosePrice;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 10].Formula = "=IF(H" + incRowExcel + "=\"GOV\",YIELD($B$" + _date + ",D" + incRowExcel + ",E" + incRowExcel + ",I" + incRowExcel + ",100,2,1),YIELD($B$" + _date + ",D" + incRowExcel + ",E" + incRowExcel + ",I" + incRowExcel + ",100,4,0))";
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 10].Calculate();

                                                worksheet.Cells[incRowExcel, 11].Formula = " =IF(H" + incRowExcel + "=\"GOV\",MDURATION($B$" + _date + ",D" + incRowExcel + ",E" + incRowExcel + ",J" + incRowExcel + ",2,1),MDURATION($B$" + _date + ",D" + incRowExcel + ",E" + incRowExcel + ",J" + incRowExcel + ",4,0))";
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Calculate();

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.ClosePrice;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Calculate();

                                                worksheet.Cells[incRowExcel, 13].Formula = "=YIELD($B$" + _date + ",D" + incRowExcel + ",E" + incRowExcel + ",L" + incRowExcel + ",100,4)";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00%";
                                                worksheet.Cells[incRowExcel, 13].Calculate();

                                                worksheet.Cells[incRowExcel, 14].Formula = "= G" + incRowExcel + " * L" + incRowExcel + " / 100";
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Calculate();

                                                worksheet.Cells[incRowExcel, 15].Formula = "= G" + incRowExcel + " * I" + incRowExcel + " / 100";
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Calculate();

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.IssuerID;

                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).Width = 56;
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();
                                        worksheet.Column(14).Width = 18;
                                        worksheet.Column(15).Width = 18;
                                        worksheet.Column(16).AutoFit();



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Bond Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Equity Summary
            if (_FundAccountingRpt.ReportName.Equals("Equity Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}

                            string _paramInstrument = "";

                            if (!_host.findString(_FundAccountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _FundAccountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }



                            cmd.CommandText = @"
                            select C.ID FundID,B.ID InstrumentID,B.Name InstrumentName,isnull(A.Balance/100,0) Lot,isnull(A.AvgPrice,0) CostPrice,
                            isnull(CostValue,0) CostValue,isnull(ClosePrice,0) ClosePrice,isnull(MarketValue,0) MarketValue, isnull(ClosePrice,0) MarketPrice,isnull(D.ID,'') IssuerID
                            from FundPosition A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            left join Issuer D on B.IssuerPK = D.IssuerPK and D.status in (1,2)
                            where A.status = 2 and A.Date = @Date " + _paramInstrument + @" 
                            and B.InstrumentTypePK in (1,4,16) 
                            Order By B.ID,C.ID asc    ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "EquitySummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "EquitySummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Equity Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<EquitySummary> rList = new List<EquitySummary>();
                                        while (dr0.Read())
                                        {

                                            EquitySummary rSingle = new EquitySummary();
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.Lot = Convert.ToDecimal(dr0["Lot"]);
                                            rSingle.CostPrice = Convert.ToDecimal(dr0["CostPrice"]);
                                            rSingle.CostValue = Convert.ToDecimal(dr0["CostValue"]);
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                            rSingle.MarketPrice = Convert.ToDecimal(dr0["MarketPrice"]);
                                            rSingle.IssuerID = Convert.ToString(dr0["IssuerID"]);



                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Equity Summary Report";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date             :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        _date = incRowExcel;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Value = "ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Instrument Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Lot";
                                            worksheet.Cells[incRowExcel, 5].Value = "Cost Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Cost Value";
                                            worksheet.Cells[incRowExcel, 7].Value = "Market Price";
                                            worksheet.Cells[incRowExcel, 8].Value = "Market Value";
                                            worksheet.Cells[incRowExcel, 9].Value = "Issuer ID";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Lot;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CostPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CostValue;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Calculate();

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.MarketPrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketValue;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.IssuerID;

                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Historical Instrument Transaction
            if (_FundAccountingRpt.ReportName.Equals("Historical Instrument Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramInstrumentType = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }


                            if (_FundAccountingRpt.InstrumentTypeFrom == "1")
                            {
                                _paramInstrumentType = "and A.InstrumentTypePK in (1,4,16) ";
                            }
                            else if (_FundAccountingRpt.InstrumentTypeFrom == "2")
                            {
                                _paramInstrumentType = "and A.InstrumentTypePK in (2,3,8,9,15,11,12,13,14) ";
                            }
                            else if (_FundAccountingRpt.InstrumentTypeFrom == "3")
                            {
                                _paramInstrumentType = "and A.InstrumentTypePK in (5) ";
                            }
                            else
                            {
                                _paramInstrumentType = "";
                            }
                            //string _paramInstrument = "";

                            //if (!_host.findString(_FundAccountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.InstrumentFrom))
                            //{
                            //    _paramInstrument = " And A.InstrumentPK  in ( " + _FundAccountingRpt.InstrumentFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramInstrument = "";
                            //}


                            cmd.CommandText = @"
                            
Declare @TotalDaysPerYear int
select @TotalDaysPerYear = datediff(Day,DateFrom,dateadd(year,1,DateFrom)) from Period where @DateFrom between DateFrom and DateTo and status = 2

select B.ID InstrumentID,A.InstrumentTypePK,case when E.GroupType = 1 then 'Equity'else case when E.GroupType = 2 then 'Bond'else case when E.GroupType = 5 then 'Deposito' else 'Deposito' end end end InstrumentTypeName,
                            E.GroupType,A.TrxTypeID TrxType,case when A.InstrumentTypePK = 5 and A.TrxType = 2 then AcqDate else ValueDate end ValueDate,SettlementDate,C.ID FundID,
                            D.ID CounterpartID,MV.DescOne BoardTypeDesc,DonePrice,DoneLot,DoneVolume,DoneAmount,CommissionAmount,LevyAmount,VATAmount,
							WHTAmount,TotalAmount,DoneAccruedInterest,IncomeTaxInterestAmount,IncomeTaxGainAmount,
							case when A.InstrumentTypePK = 5 and A.TrxType = 2 then isnull(A.ValueDate,'') else isnull(A.MaturityDate,'') end  MaturityDate,
							isnull(F.ID,'') Bank,
							isnull(G.ID,'') BankBranch,case when A.InstrumentTypePK = 5 and A.TrxType = 2 then BreakInterestPercent else A.InterestPercent end InterestRate,
							case when A.InstrumentTypePK = 5 and A.TrxType = 2 then isnull(datediff(DAY,Cast(A.AcqDate as date), Cast(A.ValueDate as date)),0) else isnull(datediff(DAY,Cast(A.ValueDate as date), Cast(A.MaturityDate as date)),0) end Tenor,
							isnull(MV2.DescOne,'') InterestDaysType,A.DoneVolume Principal,Case When A.BitBreakable = 0 then 'Unbreakable' else 'Breakable' end Breakable,
							Case When A.InterestDaysType in (0,1,3,5,6,7) then 360 When A.InterestDaysType in (4) then 365 else @TotalDaysPerYear end InterestDaysTypeValue from Investment A
                            left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
                            left join Fund C on A.FundPK =  C.FundPK and C.status in (1,2)
                            left join Counterpart D on A.CounterpartPK =  D.CounterpartPK and D.status in (1,2)
                            left join MasterValue MV on A.BoardType =  MV.Code and MV.status in (1,2) and MV.ID = 'BoardType'
                            left join InstrumentType E on B.InstrumentTypePK = E.InstrumentTypePK and E.status in (1,2)
							left join Bank F on A.BankPK=  F.BankPK and F.status in (1,2)
							left join BankBranch G on A.BankBranchPK=  G.BankBranchPK and G.status in (1,2)
							left join MasterValue MV2 on A.InterestDaysType =  MV2.Code and MV2.status in (1,2) and MV2.ID = 'InterestDaysType'
                            where Valuedate between @Datefrom and @DateTo and StatusSettlement in (1,2) " + _paramFund + _paramInstrumentType +
                            @"order by FundID, ValueDate asc"
                            ;

                            cmd.CommandTimeout = 0;

                            cmd.Parameters.AddWithValue("@Datefrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalInstrumentTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalInstrumentTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Historical Instrument Transaction");

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoricalInstrumentTransaction> rList = new List<HistoricalInstrumentTransaction>();
                                        while (dr0.Read())
                                        {
                                            HistoricalInstrumentTransaction rSingle = new HistoricalInstrumentTransaction();
                                            rSingle.TrxType = Convert.ToString(dr0["TrxType"]);
                                            rSingle.TransactionDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettledDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.Broker = Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.TransactionType = Convert.ToString(dr0["BoardTypeDesc"]);
                                            rSingle.Price = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.Lot = Convert.ToDecimal(dr0["DoneLot"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.Commission = Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.Levy = Convert.ToDecimal(dr0["LevyAmount"]);
                                            rSingle.VAT = Convert.ToDecimal(dr0["VATAmount"]);
                                            rSingle.WHT = Convert.ToDecimal(dr0["WHTAmount"]);
                                            rSingle.Total = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.Volume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"]);
                                            rSingle.GroupType = Convert.ToInt32(dr0["GroupType"]);
                                            rSingle.AccInterest = Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                            rSingle.TaxOnInterest = Convert.ToDecimal(dr0["IncomeTaxInterestAmount"]);
                                            rSingle.TaxOnGain = Convert.ToDecimal(dr0["IncomeTaxGainAmount"]);
                                            rSingle.PlacementDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Bank = Convert.ToString(dr0["Bank"]);
                                            rSingle.BankBranch = Convert.ToString(dr0["BankBranch"]);
                                            rSingle.InterestRate = Convert.ToDecimal(dr0["InterestRate"]);
                                            rSingle.Tenor = Convert.ToDecimal(dr0["Tenor"]);
                                            rSingle.InterestDaysType = Convert.ToString(dr0["InterestDaysType"]);
                                            rSingle.Principal = Convert.ToDecimal(dr0["Principal"]);
                                            rSingle.Breakable = Convert.ToString(dr0["Breakable"]);
                                            rSingle.InterestDaysTypeValue = Convert.ToDecimal(dr0["InterestDaysTypeValue"]);
                                            rList.Add(rSingle);

                                        }


                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.InstrumentTypeName } into rGroup
                                                select rGroup;

                                        //int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Historical Transaction";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 2; ;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Instrument Type :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentTypeName;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 2;

                                            if (rsHeader.Key.InstrumentTypeName == "Equity")
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Value = "Transaction Date";
                                                worksheet.Cells[incRowExcel, 3].Value = "Settled Date";
                                                worksheet.Cells[incRowExcel, 4].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 5].Value = "Instrument";
                                                worksheet.Cells[incRowExcel, 6].Value = "Broker";
                                                worksheet.Cells[incRowExcel, 7].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 8].Value = "Price";
                                                worksheet.Cells[incRowExcel, 9].Value = "Lot";
                                                worksheet.Cells[incRowExcel, 10].Value = "Amount";
                                                worksheet.Cells[incRowExcel, 11].Value = "Commission";
                                                worksheet.Cells[incRowExcel, 12].Value = "Levy";
                                                worksheet.Cells[incRowExcel, 13].Value = "VAT";
                                                worksheet.Cells[incRowExcel, 14].Value = "WHT";
                                                worksheet.Cells[incRowExcel, 15].Value = "Total";

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else if (rsHeader.Key.InstrumentTypeName == "Bond")
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Value = "Transaction Date";
                                                worksheet.Cells[incRowExcel, 3].Value = "Settled Date";
                                                worksheet.Cells[incRowExcel, 4].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 5].Value = "Instrument";
                                                worksheet.Cells[incRowExcel, 6].Value = "Broker";
                                                worksheet.Cells[incRowExcel, 7].Value = "Price";
                                                worksheet.Cells[incRowExcel, 8].Value = "Volume";
                                                worksheet.Cells[incRowExcel, 9].Value = "Amount";
                                                worksheet.Cells[incRowExcel, 10].Value = "Acc Interest";
                                                worksheet.Cells[incRowExcel, 11].Value = "Tax On Interest";
                                                worksheet.Cells[incRowExcel, 12].Value = "Tax On Gain";
                                                worksheet.Cells[incRowExcel, 13].Value = "Total";

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = "Transaction Type";
                                                worksheet.Cells[incRowExcel, 2].Value = "Placement Date";
                                                worksheet.Cells[incRowExcel, 3].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 4].Value = "Fund";
                                                worksheet.Cells[incRowExcel, 5].Value = "Bank";
                                                worksheet.Cells[incRowExcel, 6].Value = "Bank Branch";
                                                worksheet.Cells[incRowExcel, 7].Value = "Interest Rate";
                                                worksheet.Cells[incRowExcel, 8].Value = "Tenor";
                                                worksheet.Cells[incRowExcel, 9].Value = "Interest Days Type";
                                                worksheet.Cells[incRowExcel, 10].Value = "Principal";
                                                worksheet.Cells[incRowExcel, 11].Value = "Total Interest";
                                                worksheet.Cells[incRowExcel, 12].Value = "Total";
                                                worksheet.Cells[incRowExcel, 13].Value = "Break/Unbreakable";

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }

                                            incRowExcel++;

                                            //int first = incRowExcel;

                                            //int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //incRowExcel++;

                                                if (rsHeader.Key.InstrumentTypeName == "Equity")
                                                {
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.TrxType;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.TransactionDate;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettledDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundID;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InstrumentID;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Broker;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TransactionType;
                                                    worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Price;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Lot;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Commission;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Levy;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.VAT;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.WHT;
                                                    worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.Total;
                                                    worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";

                                                    //no++;
                                                    //_endRowDetail = incRowExcel;
                                                }
                                                else if (rsHeader.Key.InstrumentTypeName == "Bond")
                                                {
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.TrxType;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.TransactionDate;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettledDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundID;


                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InstrumentID;


                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Broker;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Price;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Volume;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Amount;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.AccInterest;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.TaxOnInterest;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.TaxOnGain;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Total;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                                    //no++;
                                                    //_endRowDetail = incRowExcel;

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.TrxType;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.PlacementDate;
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundID;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Bank;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.BankBranch;
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.InterestRate / 100;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00%";

                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Tenor;
                                                    worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InterestDaysType;
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Principal;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                    if (rsDetail.TrxType == "LIQUIDATE")
                                                        worksheet.Cells[incRowExcel, 11].Formula = "=G" + incRowExcel + "*H" + incRowExcel + "/Q" + incRowExcel + "*J" + incRowExcel + "*0.8";
                                                    else
                                                        worksheet.Cells[incRowExcel, 11].Formula = "=G" + incRowExcel + "*H" + incRowExcel + "/Q" + incRowExcel + "*J" + incRowExcel;

                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 12].Formula = "=J" + incRowExcel + "+K" + incRowExcel;
                                                    worksheet.Cells[incRowExcel, 12].Calculate();
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Breakable;
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.InterestDaysTypeValue;

                                                }


                                                //no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }

                                            //incRowExcel = incRowExcel + 2;

                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:O";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(17).Width = 0;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Historical Instrument Transaction";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;

                                    }
                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Portfolio Valuation Report
            else if (_FundAccountingRpt.ReportName.Equals("Portfolio Valuation Report"))
            {
                try
                {

                    string filePath = Tools.ReportsPath + "PortfolioValuationReport" + "_" + _userID + ".xlsx";
                    string pdfPath = Tools.ReportsPath + "PortfolioValuationReport" + "_" + _userID + ".pdf";
                    File.Copy(Tools.ReportsTemplatePath + "03\\" + "Comprehensive_PVR.xlsx", filePath, true);

                    FileInfo excelFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(excelFile))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets["RD"];
                        ExcelWorksheet worksheet1 = package.Workbook.Worksheets["CM"];
                        using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                        {
                            DbCon01.Open();
                            using (SqlCommand cmd01 = DbCon01.CreateCommand())
                            {
                                cmd01.CommandText =
                                @"select * from FundPosition A
                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                where  A.FundPK  = @FundPK and A.status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.FundPosition WHERE Date <= @ValueDate 
                                AND fundPK = @FundPK and status  = 2) and B.MaturityDate >= @ValueDate
                                ";

                                cmd01.CommandTimeout = 0;
                                cmd01.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
                                cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                using (SqlDataReader dr01 = cmd01.ExecuteReader())
                                {
                                    if (dr01.HasRows)
                                    {

                                        int _EndAssetRow = 0;
                                        int _StartLiabilitiesRow = 0;
                                        int _EndLiabilitiesRow = 0;
                                        int _startAsset = 0;
                                        int _RowNominal = 0;
                                        int _rowMarketValue1 = 0;
                                        int _rowMarketValue2 = 0;
                                        int _this = 0;
                                        int _StartEquity = 0;
                                        int _StartBond = 0;
                                        int _StartDeposito = 0;
                                        int _EndEquity = 0;
                                        int _EndBond = 0;
                                        int _EndDeposito = 0;
                                        bool _row1 = false;
                                        bool _row2 = false;
                                        bool _row3 = false;
                                        bool _row4 = false;
                                        int _no = 0;
                                        int _counter = 1;
                                        int _rowEquity = 0;
                                        int _rowBond = 0;
                                        int _rowDeposito = 0;
                                        int _rowTotalCash = 0;
                                        //ATUR DATA GROUPINGNYA DULU
                                        int incRowExcel = 1;
                                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                                        {
                                            DbCon.Open();
                                            using (SqlCommand cmd = DbCon.CreateCommand())
                                            {

                                                cmd.CommandText =
                                                    @"
                                Declare @BeginDate datetime
                                Declare @PeriodPK int

                                select @BeginDate = [dbo].[FgetMaxDatePeriodClosingByFundPK](@ValueDate,@FundPK)
                                select @PeriodPK = PeriodPK from period Where status = 2 and @ValueDate Between Datefrom and DateTo

                                SELECT A.Name, SUM(B.Balance) AS Balance,B.EffectiveDate,DATEADD(d,150,B.EffectiveDate) HariBursa,A.Type FROM FundJournalAccount A, (    
                                SELECT A.FundJournalAccountPK, B.Posted, B.Reversed, SUM(CASE when C.[Type] = 1 THEN A.BaseDebit-A.BaseCredit    
                                ELSE A.BaseDebit-A.BaseCredit END) AS Balance,     
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,    
                                C.ParentPK7, C.ParentPK8, C.ParentPK9,F.EffectiveDate   
                                FROM [FundJournalDetail] A     
                                INNER JOIN [FundJournal] B ON A.FundJournalPK = B.FundJournalPK    
                                INNER JOIN FundJournalAccount C ON A.FundJournalAccountPK = C.FundJournalAccountPK and C.status in (1,2)   
                                INNER JOIN Fund F ON A.FundPK = F.FundPK  and F.status in (1,2)  
                                WHERE B.ValueDate between @BeginDate and @ValueDate
                                And A.FundPK = @FundPK
                                and B.Status = 2 and B.Posted = 1 and B.Reversed = 0
                                and A.FundJournalAccountPK not in (6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,204,205,203,109,110,111,112,114)
                                    GROUP BY A.FundJournalAccountPK, B.Posted, B.Reversed,C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4,   
                                    C.ParentPK5, C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9 ,EffectiveDate
                                    ) AS B 
                                    WHERE A.[Type] <= 2 AND A.Show = 1 AND (B.FundJournalAccountPK = A.FundJournalAccountPK    
                                    OR B.ParentPK1 = A.FundJournalAccountPK OR B.ParentPK2 = A.FundJournalAccountPK     
                                    OR B.ParentPK3 = A.FundJournalAccountPK OR B.ParentPK4 = A.FundJournalAccountPK     
                                    OR B.ParentPK5 = A.FundJournalAccountPK OR B.ParentPK6 = A.FundJournalAccountPK    
                                    OR B.ParentPK7 = A.FundJournalAccountPK OR B.ParentPK8 = A.FundJournalAccountPK      
                                    OR B.ParentPK9 = A.FundJournalAccountPK) and A.status = 2
                                     and A.Groups in (0)
                                GROUP BY A.ID, A.Name,B.EffectiveDate,A.Type
                                    
                                union all
                                select top 1 'ADJUSTMENT' Name, 0 Balance, EffectiveDate,DATEADD(d,150,EffectiveDate),3
                                from Fund 
                                where FundPK = @FundPK and status = 2

                                 ";
                                                cmd.CommandTimeout = 0;
                                                cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateFrom);
                                                cmd.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                                {

                                                    //Equity
                                                    //-----------------------------------
                                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                                    {
                                                        DbCon1.Open();
                                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                        {
                                                            //                                              
                                                            cmd1.CommandText =
                                                            @"
                                                select isnull(B.Name,'') FundName,isnull(C.ID,'') SecuritiesCode,isnull(C.Name,'') SecuritiesDescription, 
                                                isnull(A.Balance,0) QtyOfUnit, isnull(A.Balance,0) / 100 Lot, 
                                                isnull(A.AvgPrice,0) AvgCost,
                                                isnull(A.Balance,0) * isnull(A.AvgPrice,0) BookValue,
                                                isnull(A.ClosePrice,0) MarketPrice,
                                                isnull(A.Balance,0) * isnull(A.ClosePrice,0) MarketValue,
                                                (isnull(A.Balance,0) * isnull(A.ClosePrice,0)) - (isnull(A.Balance,0) * isnull(A.AvgPrice,0))  Unrealised,
                                                case when (isnull(A.Balance,0) * isnull(A.AvgPrice,0)) > 0 then
                                                ((isnull(A.Balance,0) * isnull(A.ClosePrice,0)) - (isnull(A.Balance,0) * isnull(A.AvgPrice,0))) /  (isnull(A.Balance,0) * isnull(A.AvgPrice,0)) * 100 
                                                else 0 end UnrealisedPercent,
                                                '' ByMarketCap,
                                                isnull(D.ID,'') SubSector,
                                                isnull(G.IndustryGroupIndex,'') Sector,
												isnull(F.Name,'') Issuer,
												isnull(G.Weight,0) PercentJCI,
												isnull(G.Y1,0) Beta
                                                from fundPosition A
                                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                                                left join SubSector D on C.SectorPK = D.SubSectorPK and D.status in (1,2)
                                                left join Sector E on D.SectorPK = E.SectorPK and E.status in (1,2)
												left join Issuer F on C.IssuerPK = F.IssuerPK and F.Status in (1,2)
												left join BloombergEquity G on C.ID = G.TickerCode and A.Date = G.Date and G.status in (1,2)
                                                where A.status = 2 and A.Date = @Date
                                                and A.FundPK= @FundPK
                                                and C.InstrumentTypePK in (1,4,16)
                                                order by C.ID
                                                ";
                                                            cmd1.CommandTimeout = 0;

                                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                            cmd1.ExecuteNonQuery();


                                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                            {
                                                                if (dr1.HasRows)
                                                                    _row2 = dr1.HasRows;
                                                                {
                                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                                    {
                                                                        _this = incRowExcel;
                                                                        worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd-MMM-yy");
                                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Size = 14;

                                                                        incRowExcel++;
                                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom); //rsHeader1.Key.FundName;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<PVRRpt> rList1 = new List<PVRRpt>();
                                                                        while (dr1.Read())
                                                                        {
                                                                            PVRRpt rSingle1 = new PVRRpt();
                                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                                            rSingle1.InstrumentID = Convert.ToString(dr1["SecuritiesCode"]);
                                                                            rSingle1.InstrumentName = dr1["SecuritiesDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["SecuritiesDescription"]);
                                                                            rSingle1.UnitQuantity = dr1["QtyOfUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["QtyOfUnit"]);
                                                                            rSingle1.AverageCost = dr1["AvgCost"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AvgCost"]);
                                                                            rSingle1.BookValue = dr1["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["BookValue"]);
                                                                            rSingle1.MarketPrice = Convert.ToDecimal(dr1["MarketPrice"]);
                                                                            rSingle1.MarketValue = Convert.ToDecimal(dr1["MarketValue"]);
                                                                            rSingle1.UnrealizedProfitLoss = Convert.ToDecimal(dr1["Unrealised"]);
                                                                            rSingle1.PercentProfilLoss = Convert.ToDecimal(dr1["UnrealisedPercent"]);
                                                                            rSingle1.Lot = Convert.ToDecimal(dr1["Lot"]);
                                                                            rSingle1.MarketCap = Convert.ToString(dr1["ByMarketCap"]);
                                                                            rSingle1.Sector = Convert.ToString(dr1["Sector"]);
                                                                            rSingle1.Issuer = Convert.ToString(dr1["Issuer"]);
                                                                            rSingle1.PercentJCI = Convert.ToDecimal(dr1["PercentJCI"]);
                                                                            rSingle1.Beta = Convert.ToDecimal(dr1["Beta"]);

                                                                            rList1.Add(rSingle1);

                                                                        }


                                                                        var QueryByFundID1 =
                                                                            from r1 in rList1
                                                                            group r1 by new { r1.FundName } into rGroup1
                                                                            select rGroup1;
                                                                        incRowExcel = 1;
                                                                        int _StartRow = incRowExcel + 1;
                                                                        foreach (var rsHeader1 in QueryByFundID1)
                                                                        {


                                                                            incRowExcel = incRowExcel + 2;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                            worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                                            worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                                            worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                                            worksheet.Cells[incRowExcel, 5].Value = "Lot";
                                                                            worksheet.Cells[incRowExcel, 6].Value = "Average Cost";
                                                                            worksheet.Cells[incRowExcel, 7].Value = "Book Value";
                                                                            worksheet.Cells[incRowExcel, 8].Value = "Market Price";
                                                                            worksheet.Cells[incRowExcel, 9].Value = "Market Value";
                                                                            worksheet.Cells[incRowExcel, 10].Value = "Unrealized Profit/(Loss)";
                                                                            worksheet.Cells[incRowExcel, 11].Value = "% fr P/L";
                                                                            worksheet.Cells[incRowExcel, 12].Value = "BY MARKET CAP";
                                                                            worksheet.Cells[incRowExcel, 13].Value = "ISSUER";
                                                                            worksheet.Cells[incRowExcel, 14].Value = "BY SECTOR";
                                                                            worksheet.Cells[incRowExcel, 15].Value = "% fr NAV";
                                                                            worksheet.Cells[incRowExcel, 16].Value = "% JCI";
                                                                            worksheet.Cells[incRowExcel, 17].Value = "Beta";
                                                                            worksheet.Cells[incRowExcel, 18].Value = "% Segment";
                                                                            worksheet.Cells[incRowExcel, 19].Value = "Compliance";
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Font.Bold = true;

                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                            incRowExcel++;
                                                                            //area header

                                                                            _no = 1;
                                                                            int _startRowDetail = incRowExcel;
                                                                            int _endRowDetail = 0;
                                                                            _StartEquity = incRowExcel;
                                                                            foreach (var rsDetail1 in rsHeader1)
                                                                            {

                                                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells["D" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["N" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.InstrumentName;
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                                                worksheet.Cells[incRowExcel, 4].Formula = "E" + incRowExcel + "*100" + "";
                                                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Lot;
                                                                                worksheet.Cells[incRowExcel, 6].Formula = "G" + incRowExcel + "/D" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail1.BookValue;
                                                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail1.MarketPrice;
                                                                                worksheet.Cells[incRowExcel, 9].Formula = "H" + incRowExcel + "*D" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 10].Formula = "I" + incRowExcel + "-G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 11].Formula = "J" + incRowExcel + "/G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00 %";

                                                                                worksheet.Cells[incRowExcel, 12].Formula = "IF(P" + incRowExcel + ">= 1.5%, " + '"' + "BIG CAP" + '"' + ",IF(AND(P" + incRowExcel + "< 0.5%," + "P" + incRowExcel + ">= 0%)," + '"' + "SMALL CAP" + '"' + ',' + '"' + "MID CAP" + '"' + "))";
                                                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Issuer;
                                                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail1.Sector;
                                                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                                worksheet.Cells[incRowExcel, 15].Formula = "I" + incRowExcel + "/G2" + "";
                                                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "0.00 %";

                                                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail1.PercentJCI / 100;
                                                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail1.Beta;
                                                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "0.00";
                                                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                worksheet.Cells[incRowExcel, 19].Formula = "IF(O" + incRowExcel + "> 10%, " + '"' + "Uncomply" + '"' + "," + '"' + '"' + ")";
                                                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["S" + incRowExcel + ":S" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                                                worksheet.Cells[incRowExcel, 19].Calculate();
                                                                                //ThickBox Border
                                                                                _endRowDetail = incRowExcel;
                                                                                incRowExcel++;
                                                                                _no++;
                                                                            }

                                                                            incRowExcel++;
                                                                            _EndEquity = incRowExcel;

                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL EQUITY";

                                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                                                            _rowMarketValue1 = incRowExcel;
                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "/G" + incRowExcel + ")";
                                                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 11].Calculate();

                                                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 16].Calculate();

                                                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 17].Calculate();

                                                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 18].Calculate();
                                                                            _rowEquity = incRowExcel;

                                                                            //worksheet.Cells["A" + incRowExcel + ":S" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;


                                                                            worksheet.Cells["A" + _EndEquity + ":S" + _EndEquity].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _EndEquity].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRowDetail + ":S" + _EndEquity].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _EndEquity + ":S" + _EndEquity].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //incRowExcel = incRowExcel + 2;

                                                    //Bond
                                                    //-----------------------------------
                                                    using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                    {
                                                        DbCon2.Open();
                                                        using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                        {
                                                            //                                              
                                                            cmd2.CommandText =
                                                            @"
                                               
                                                            
                                                            select isnull(C.ID,'') SecuritiesCode,isnull(C.Name,'') SecuritiesDescription, 
                                                            sum(isnull(A.Balance,0)) QtyOfUnit, C.MaturityDate, 
                                                            isnull(A.AvgPrice,0) AvgCost,
                                                            sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0) BookValue,
                                                            isnull(A.ClosePrice,0) MarketPrice,
                                                            sum(isnull(A.Balance,0)) * isnull(A.ClosePrice,0) MarketValue,
                                                            (sum(isnull(A.Balance,0)) * isnull(A.ClosePrice,0)) - (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0))  Unrealised,
                                                            case when (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0)) > 0 then
                                                            ((sum(isnull(A.Balance,0)) * isnull(A.ClosePrice,0)) - (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0))) /  (sum(isnull(A.Balance,0)) * isnull(A.AvgPrice,0)) * 100 else 0 end UnrealisedPercent,
                                                            isnull(D.Name,'') BondType,
                                                            isnull(F.Name,'') Issuer,
                                                            C.InterestPercent CouponRate,
                                                            case when C.InstrumentTypePK = 2 then 'Government Bond' else isnull(C.AnotherRating,'') end BondRating
                                                            from fundPosition A
                                                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                                                            left join instrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status in (1,2)
                                                            left join Issuer F on C.IssuerPK = F.IssuerPK and F.Status in (1,2)
                                                            where A.status = 2 
                                                            and A.Date = @Date
                                                            and A.FundPK= @FundPK
                                                            and C.InstrumentTypePK in (2,3,8,9,11,12,13,14,15)
                                                            group by C.ID,C.Name,C.MaturityDate,A.AvgPrice,A.ClosePrice,D.Name,F.Name,C.InterestPercent,C.AnotherRating,C.InstrumentTypePK
                                                            order by C.ID
                                                            ";
                                                            cmd2.CommandTimeout = 0;

                                                            cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                                            cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                            cmd2.ExecuteNonQuery();


                                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                            {
                                                                if (dr2.HasRows)
                                                                {
                                                                    _row3 = dr2.HasRows;
                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                                    {

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<PVRRpt> rList1 = new List<PVRRpt>();
                                                                        while (dr2.Read())
                                                                        {
                                                                            PVRRpt rSingle1 = new PVRRpt();
                                                                            rSingle1.InstrumentID = Convert.ToString(dr2["SecuritiesCode"]);
                                                                            rSingle1.InstrumentName = dr2["SecuritiesDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["SecuritiesDescription"]);
                                                                            rSingle1.UnitQuantity = dr2["QtyOfUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["QtyOfUnit"]);
                                                                            rSingle1.MaturityDate = Convert.ToString(dr2["MaturityDate"]);
                                                                            rSingle1.AverageCost = dr2["AvgCost"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["AvgCost"]);
                                                                            rSingle1.BookValue = dr2["BookValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["BookValue"]);
                                                                            rSingle1.MarketPrice = Convert.ToDecimal(dr2["MarketPrice"]);
                                                                            rSingle1.MarketValue = Convert.ToDecimal(dr2["MarketValue"]);
                                                                            rSingle1.UnrealizedProfitLoss = Convert.ToDecimal(dr2["Unrealised"]);
                                                                            rSingle1.PercentProfilLoss = Convert.ToDecimal(dr2["UnrealisedPercent"]);
                                                                            rSingle1.Issuer = Convert.ToString(dr2["Issuer"]);
                                                                            rSingle1.BondRating = Convert.ToString(dr2["BondRating"]);
                                                                            //rSingle1.PercentTA = Convert.ToDecimal(dr1["PercentTA"]);
                                                                            //rSingle1.PercentYTM = Convert.ToDecimal(dr0["PercentYTM"]);
                                                                            //rSingle1.MDur = Convert.ToDecimal(dr0["MDur"]);
                                                                            rSingle1.CouponRate = Convert.ToDecimal(dr2["CouponRate"]);
                                                                            //rSingle1.Compliance = Convert.ToDecimal(dr1["Compliance"]);
                                                                            //rSingle1.RatingObligasi = Convert.ToDecimal(dr0["RatingObligasi"]);
                                                                            //rSingle1.ComplianceIBPA = Convert.ToDecimal(dr0["ComplianceIBPA"]);
                                                                            rSingle1.BondType = Convert.ToString(dr2["BondType"]);

                                                                            rList1.Add(rSingle1);

                                                                        }


                                                                        var QueryByFundID1 =
                                                                            from r1 in rList1
                                                                            group r1 by new { } into rGroup1
                                                                            select rGroup1;

                                                                        incRowExcel = incRowExcel + 3;
                                                                        int _StartRow = incRowExcel + 1;
                                                                        foreach (var rsHeader1 in QueryByFundID1)
                                                                        {

                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                                                            worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
                                                                            worksheet.Cells[incRowExcel, 3].Value = "Securities Description";
                                                                            worksheet.Cells[incRowExcel, 4].Value = "Qty Of Unit";
                                                                            worksheet.Cells[incRowExcel, 5].Value = "Maturity Date";
                                                                            worksheet.Cells[incRowExcel, 6].Value = "Average Cost";
                                                                            worksheet.Cells[incRowExcel, 7].Value = "Book Value";
                                                                            worksheet.Cells[incRowExcel, 8].Value = "Market Price";
                                                                            worksheet.Cells[incRowExcel, 9].Value = "Market Value";
                                                                            worksheet.Cells[incRowExcel, 10].Value = "Unrealized Profit/(Loss)";
                                                                            worksheet.Cells[incRowExcel, 11].Value = "% fr P/L";
                                                                            worksheet.Cells[incRowExcel, 12].Value = "% fr NAV";
                                                                            worksheet.Cells[incRowExcel, 13].Value = "Issuer";
                                                                            worksheet.Cells[incRowExcel, 14].Value = "% YTM";
                                                                            worksheet.Cells[incRowExcel, 15].Value = "Coupon Rate";
                                                                            worksheet.Cells[incRowExcel, 16].Value = "Mdur";
                                                                            worksheet.Cells[incRowExcel, 17].Value = "Compliance Max. 10%";
                                                                            worksheet.Cells[incRowExcel, 18].Value = "Rating Obligasi";
                                                                            worksheet.Cells[incRowExcel, 19].Value = "Compliance IBPA";
                                                                            worksheet.Cells[incRowExcel, 20].Value = "Bonds Type";

                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                                            // Row C = 4

                                                                            incRowExcel = incRowExcel + 1;
                                                                            //area header
                                                                            _no = 1;
                                                                            int _startRowDetail1 = incRowExcel;
                                                                            int _endRowDetail1 = 0;
                                                                            _StartBond = incRowExcel;
                                                                            foreach (var rsDetail1 in rsHeader1)
                                                                            {
                                                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells["E" + incRowExcel + ":S" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["F" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail1.InstrumentID;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.InstrumentName;
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.UnitQuantity;
                                                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail1.MaturityDate);
                                                                                worksheet.Cells[incRowExcel, 6].Formula = "(G" + incRowExcel + "/D" + incRowExcel + ")" + "*100";
                                                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail1.BookValue / 100;
                                                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail1.MarketPrice;
                                                                                worksheet.Cells[incRowExcel, 9].Formula = "H" + incRowExcel + "*D" + incRowExcel + "/100";
                                                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                                                worksheet.Cells[incRowExcel, 10].Formula = "I" + incRowExcel + "-G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Formula = "J" + incRowExcel + "/G" + incRowExcel;
                                                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 12].Formula = "I" + incRowExcel + "/C31";
                                                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail1.Issuer;
                                                                                worksheet.Cells[incRowExcel, 14].Formula = "IF(T" + incRowExcel + "= " + '"' + "Government Bond" + '"' + ",YIELD($A$1,E" + incRowExcel + ",O" + incRowExcel + ",H" + incRowExcel + ",100,2,1),YIELD($A$1,E" + incRowExcel + ",O" + incRowExcel + ",H" + incRowExcel + ",100,4,0))";
                                                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail1.CouponRate / 100;
                                                                                worksheet.Cells[incRowExcel, 16].Formula = "IF(T" + incRowExcel + "= " + '"' + "Government Bond" + '"' + ",MDURATION($A$1,E" + incRowExcel + ",O" + incRowExcel + ",N" + incRowExcel + ",2,1),MDURATION($A$1,E" + incRowExcel + ",O" + incRowExcel + ",N" + incRowExcel + ",4,0))";
                                                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                                                worksheet.Cells[incRowExcel, 16].Calculate();
                                                                                worksheet.Cells[incRowExcel, 17].Formula = "IF(L" + incRowExcel + "> 10%, " + '"' + "Uncomply" + '"' + "," + '"' + '"' + ")";
                                                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail1.BondRating;
                                                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 19].Value = "-";
                                                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail1.BondType;
                                                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "m/d/yyyy";
                                                                                worksheet.Cells["M" + incRowExcel + ":T" + incRowExcel].Style.Numberformat.Format = "#,##";

                                                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                                                _endRowDetail1 = incRowExcel;
                                                                                incRowExcel++;
                                                                                _no++;
                                                                            }

                                                                            int _EndRow = incRowExcel;
                                                                            _EndBond = incRowExcel;
                                                                            incRowExcel++;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                            //worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL BOND";


                                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail1 + ":D" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail1 + ":G" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                                                            _rowMarketValue2 = incRowExcel;
                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail1 + ":I" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail1 + ":J" + _endRowDetail1 + ")";
                                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "/G" + incRowExcel + ")";
                                                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                                                            _rowBond = incRowExcel;

                                                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                                            //worksheet.Cells[incRowExcel, 12].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                                            //worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            //worksheet.Cells[incRowExcel, 12].Calculate();

                                                                            //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                                            //worksheet.Cells[incRowExcel, 13].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            //worksheet.Cells[incRowExcel, 13].Calculate();

                                                                            int _endBondA = _EndBond + 1;
                                                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 14].Formula = "SUMPRODUCT(N" + _StartBond + ":N" + _EndBond + ",I" + _StartBond + ":I" + _EndBond + ")/I" + _endBondA;

                                                                            //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 14].Calculate();


                                                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 16].Formula = "SUMPRODUCT(P" + _StartBond + ":P" + _EndBond + ",I" + _StartBond + ":I" + _EndBond + ")/I" + _endBondA;

                                                                            //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 16].Calculate();


                                                                            worksheet.Cells["A" + _startRowDetail1 + ":T" + _EndRow].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRowDetail1 + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _StartRow + ":T" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":T" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //incRowExcel = incRowExcel + 2;

                                                    //Deposito
                                                    //-----------------------------------
                                                    using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                    {
                                                        DbCon2.Open();
                                                        using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                        {
                                                            //                                              
                                                            cmd2.CommandText =
                                                            @"
                                                select 
                                                isnull(F.Name,'') SecuritiesCode,
                                                isnull(F.SInvestID,'') BiCode,
                                                isnull(E.ID,'') Branch,
                                                isnull(A.Balance,0) Nominal,
                                                A.AcqDate TradeDate,
                                                A.MaturityDate,
                                                A.InterestPercent Rate,
                                                [dbo].[Fgetdepositointerestaccrued] (@date,A.InstrumentPK,A.Balance,A.InterestDaysType,A.InterestPercent,A.AcqDate) AccruedInterest
                                                from fundPosition A
                                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                                                left join instrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status in (1,2)
                                                left join BankBranch E on A.BankBranchPK = E.BankBranchPK and E.status in (1,2)
                                                left join Bank F on E.BankPK = F.BankPK and F.status in (1,2)
                                                where A.status = 2 and A.Date = @Date
                                                and A.FundPK= @FundPK and C.InstrumentTypePK in (5)
                                                order by F.Name
                                                ";
                                                            cmd2.CommandTimeout = 0;

                                                            cmd2.Parameters.AddWithValue("@date", _FundAccountingRpt.ValueDateFrom);
                                                            cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                            cmd2.ExecuteNonQuery();


                                                            using (SqlDataReader dr3 = cmd2.ExecuteReader())
                                                            {
                                                                if (dr3.HasRows)
                                                                {
                                                                    _row4 = dr3.HasRows;
                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                                    {

                                                                        //ATUR DATA GROUPINGNYA DULU
                                                                        List<PVRRpt> rList2 = new List<PVRRpt>();
                                                                        while (dr3.Read())
                                                                        {
                                                                            PVRRpt rSingle2 = new PVRRpt();
                                                                            rSingle2.TimeDeposit = Convert.ToString(dr3["SecuritiesCode"]);
                                                                            rSingle2.BICode = Convert.ToString(dr3["BICode"]);
                                                                            rSingle2.Branch = Convert.ToString(dr3["Branch"]);
                                                                            rSingle2.Nominal = Convert.ToDecimal(dr3["Nominal"]);
                                                                            rSingle2.TradeDate = Convert.ToString(dr3["TradeDate"]);
                                                                            rSingle2.MaturityDate = Convert.ToString(dr3["MaturityDate"]);
                                                                            rSingle2.Rate = Convert.ToDecimal(dr3["Rate"]);
                                                                            rSingle2.AccTD = Convert.ToDecimal(dr3["AccruedInterest"]);
                                                                            //rSingle2.PercentTA = Convert.ToDecimal(dr2["PercentTA"]);
                                                                            //rSingle2.MaturityAlert = Convert.ToString(dr2["MaturityAlert"]);
                                                                            rList2.Add(rSingle2);

                                                                        }


                                                                        var QueryByFundID2 =
                                                                            from r2 in rList2
                                                                            group r2 by new { } into rGroup2
                                                                            select rGroup2;

                                                                        incRowExcel = incRowExcel + 3;

                                                                        int _startRow = incRowExcel;
                                                                        foreach (var rsHeader2 in QueryByFundID2)
                                                                        {
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSITS";
                                                                            worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
                                                                            worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
                                                                            worksheet.Cells[incRowExcel, 5].Value = "Nominal";
                                                                            worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
                                                                            worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                                            worksheet.Cells[incRowExcel, 8].Value = "Rate(Gross)";
                                                                            worksheet.Cells[incRowExcel, 9].Value = "Acc Int. TD(Net)";
                                                                            worksheet.Cells[incRowExcel, 10].Value = "%fr TA";
                                                                            worksheet.Cells[incRowExcel, 11].Value = "Mature Alert";
                                                                            incRowExcel++;

                                                                            // Row C = 4
                                                                            int RowCZ = incRowExcel;

                                                                            //area header
                                                                            _no = 1;
                                                                            int _startRowDetail = incRowExcel;
                                                                            int _endRowDetail = 0;
                                                                            _StartDeposito = incRowExcel;
                                                                            foreach (var rsDetail2 in rsHeader2)
                                                                            {
                                                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.TimeDeposit;
                                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.BICode;
                                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail2.Branch;
                                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Nominal;
                                                                                worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail2.TradeDate).ToString("dd-MMM-yy");
                                                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail2.MaturityDate).ToString("dd-MMM-yy");
                                                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 8].Value = Convert.ToDecimal(rsDetail2.Rate / 100).ToString("0.00 %");
                                                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 9].Formula = "((E" + incRowExcel + "*H" + incRowExcel + "*(A" + _this + "-F" + incRowExcel + "))/365)*0.8/100";
                                                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                                                worksheet.Cells[incRowExcel, 10].Formula = "E" + incRowExcel + "/G2";
                                                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "0.00 %";
                                                                                worksheet.Cells[incRowExcel, 11].Formula = "IF(G" + incRowExcel + "-$A$1 <= 2, " + '"' + "MATURITY ALERT" + '"' + "," + '"' + '"' + ")";
                                                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.Font.Color.SetColor(Color.Red);

                                                                                _endRowDetail = incRowExcel;
                                                                                worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.Numberformat.Format = "#,##";
                                                                                incRowExcel++;
                                                                                _no++;

                                                                            }
                                                                            _EndDeposito = incRowExcel;

                                                                            incRowExcel++;
                                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL DEPOSITO";

                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                                            worksheet.Cells["A" + _startRow + ":K" + _startRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRow + ":K" + _startRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + _startRow + ":K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);

                                                                            _rowDeposito = incRowExcel;
                                                                            _RowNominal = incRowExcel;



                                                                            worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 9].Calculate();

                                                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "0.00%";
                                                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                                                            //worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;

                                                                            incRowExcel++;
                                                                        }


                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //hitungan total
                                                    //---------------------------------
                                                    if (dr0.HasRows)
                                                    {
                                                        _row1 = dr0.HasRows;
                                                        List<PVRRpt> rList = new List<PVRRpt>();
                                                        while (dr0.Read())
                                                        {
                                                            PVRRpt rSingle = new PVRRpt();
                                                            rSingle.Balance = dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]);
                                                            rSingle.Name = dr0["Name"].ToString();
                                                            rSingle.EffectiveDate = dr0["EffectiveDate"].ToString();
                                                            rSingle.HariBursa = dr0["HariBursa"].ToString();
                                                            rSingle.Type = Convert.ToInt32(dr0["Type"]);


                                                            rList.Add(rSingle);

                                                        }

                                                        var QueryByFundID =
                                                                from r in rList
                                                                    //orderby r.Type,R.Name
                                                                group r by new { r.EffectiveDate, r.HariBursa } into rGroup
                                                                select rGroup;

                                                        incRowExcel = incRowExcel + 2;

                                                        foreach (var rsHeader in QueryByFundID)
                                                        {
                                                            worksheet.Cells[incRowExcel, 1].Value = "ASSET";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Size = 13;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            worksheet.Cells[incRowExcel, 6].Value = "KEBIJAKAN INVESTASI";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 13;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Navy);
                                                            //worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Color.SetColor(Color.White);
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            incRowExcel++;

                                                            _startAsset = incRowExcel;

                                                            worksheet.Cells[incRowExcel, 6].Value = "ASSET ALLOCATION";
                                                            worksheet.Cells[incRowExcel, 7].Value = "BATASAN INVESTASI";
                                                            worksheet.Cells[incRowExcel, 8].Value = "ACTUAL";
                                                            worksheet.Cells[incRowExcel, 9].Value = "COMPLIANCE";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "EQUITY";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7].Value = "80% - 100%";
                                                            worksheet.Cells[incRowExcel, 8].Formula = "=O" + _EndEquity;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = "OK";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;
                                                            int _EndBondZZ = _EndBond + 1;
                                                            worksheet.Cells[incRowExcel, 6].Value = "BONDS";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7].Value = "0 - 20%";
                                                            worksheet.Cells[incRowExcel, 8].Formula = "=L" + _EndBondZZ;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = "OK";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;
                                                            int _EndDepositoZZ = _EndDeposito + 1;
                                                            worksheet.Cells[incRowExcel, 6].Value = "MONEY MARKETS";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                            worksheet.Cells[incRowExcel, 7].Value = "0 - 20%";
                                                            worksheet.Cells[incRowExcel, 8].Formula = "=J" + _EndDepositoZZ;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 9].Value = "OK";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;

                                                            int _rowEquivalent;
                                                            _rowEquivalent = incRowExcel;
                                                            worksheet.Cells[incRowExcel, 6].Value = "CASH & EQUIVALENT";
                                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                            //worksheet.Cells[incRowExcel, 7].Value = "";
                                                            //worksheet.Cells[incRowExcel, 8].Formula = "=sum(C" + _EndAssetRow + ")";
                                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "0.00%";
                                                            //worksheet.Cells[incRowExcel, 9].Value = "";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                            incRowExcel++;

                                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 6].Value = "TOTAL";
                                                            worksheet.Cells[incRowExcel, 8].Value = "100%";
                                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            //worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Sesuai dengan KIK Reksa Dana XXX No. 1, tgl 2 Juni 2017";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;

                                                            incRowExcel++;
                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Efektif Ijin OJK";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;

                                                            incRowExcel++;

                                                            worksheet.Cells[incRowExcel, 6].Value = "Batas akhir penyesuaian kebijakan investasi";
                                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 10;

                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 6].Value = "Pernyataan Efektif";
                                                            worksheet.Cells[incRowExcel, 7].Value = "150 Hari Bursa";
                                                            worksheet.Cells[incRowExcel, 8].Value = "Days to Go";
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Font.Size = 10;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["F" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.EffectiveDate;
                                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsHeader.Key.EffectiveDate).ToString("dd-MMM-yy");
                                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.HariBursa;
                                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsHeader.Key.HariBursa).ToString("dd-MMM-yy");
                                                            worksheet.Cells[incRowExcel, 8].Value = "0";

                                                            _no = 1;
                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = 0;
                                                            incRowExcel = _startAsset;
                                                            foreach (var rsDetail in rsHeader)
                                                            {
                                                                if (rsDetail.Type == 2 && _counter == 1)
                                                                {
                                                                    _EndAssetRow = incRowExcel - 1;
                                                                    _no = 1;
                                                                    _counter = 2;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "LIABILITIES";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Size = 13;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                    incRowExcel++;
                                                                    _StartLiabilitiesRow = incRowExcel;
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Size = 11;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                }
                                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Balance;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                _endRowDetail = incRowExcel;
                                                                _EndLiabilitiesRow = incRowExcel;
                                                                _no++;
                                                                incRowExcel++;

                                                            }




                                                            int d = incRowExcel - 1;
                                                            worksheet.Cells[d, 4].Value = "Liquid";
                                                            worksheet.Cells[d, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 1].Value = "Total Cash & Equivalent";
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startAsset + ":C" + _EndLiabilitiesRow + ")";
                                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            int x = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 4].Formula = "C" + incRowExcel + "/C" + x;
                                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                            // KEBIJAKAN INVESTASI CASH & EQUIVALENT
                                                            worksheet.Cells[_rowEquivalent, 8].Formula = "C" + incRowExcel + "/C" + x;
                                                            worksheet.Cells[_rowEquivalent, 8].Style.Numberformat.Format = "0.00%";
                                                            worksheet.Cells[_rowEquivalent, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            string _posisiEquity = "";
                                                            string _posisiBond = "";
                                                            string _posisiDeposito = "";
                                                            int _xrow1 = incRowExcel;
                                                            incRowExcel = incRowExcel + 2;
                                                            _rowTotalCash = incRowExcel;
                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL NET ASSET VALUE";
                                                            if (_rowEquity != 0)
                                                                _posisiEquity = "+I" + _rowEquity;
                                                            if (_rowBond != 0)
                                                                _posisiBond = "+I" + _rowBond;
                                                            if (_rowDeposito != 0)
                                                                _posisiDeposito = "+E" + _rowDeposito;
                                                            worksheet.Cells[incRowExcel, 3].Formula = "=C" + _xrow1 + _posisiEquity + _posisiBond + _posisiDeposito;
                                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells[incRowExcel, 4].Value = "(Last Day NAV)";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL OUTSTANDING UNIT";
                                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundUnitPosition(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_LastNavYesterday(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);
                                                            _startRowDetail = incRowExcel;

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "NET ASSET VALUE PER UNIT";
                                                            worksheet.Cells[incRowExcel, 3].Formula = "C" + _rowTotalCash + "/" + _host.Get_FundUnitPosition(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                            _endRowDetail = incRowExcel;

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "CHANGE / DAY";
                                                            worksheet.Cells[incRowExcel, 3].Formula = "((C" + _endRowDetail + "-D" + _startRowDetail + ") / " + "D" + _startRowDetail + ")";
                                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000%";
                                                            worksheet.Cells[incRowExcel, 4].Value = "(Last Year NAV)";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "YIELD IN THE LAST 30 DAYS";
                                                            worksheet.Cells[incRowExcel, 4].Value = _host.Get_NavLastYear(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateFrom);
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells[incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightSalmon);

                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "YIELD IN THE LAST 1 YEARS";
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 2].Value = "YIELD YEAR to DATE";
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.MediumSeaGreen);
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Fill.BackgroundColor.SetColor(Color.Yellow);
                                                            worksheet.Cells["C" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Font.Color.SetColor(Color.Red);
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Top.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Left.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Right.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _StartLiabilitiesRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _StartLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + _EndLiabilitiesRow + ":C" + _EndLiabilitiesRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                            int i = _StartEquity;
                                                            //%FR TA equity
                                                            if (_StartEquity != 0)
                                                            {
                                                                while (i < _EndEquity)
                                                                {
                                                                    worksheet.Cells[i, 15].Formula = "I" + i + "/$C$" + _rowTotalCash;
                                                                    worksheet.Cells[i, 15].Calculate();
                                                                    worksheet.Cells[i, 18].Formula = "I" + i + "/$I$" + _EndEquity;
                                                                    worksheet.Cells[i, 18].Calculate();
                                                                    worksheet.Cells[i, 18].Style.Numberformat.Format = "0.00%";
                                                                    i++;
                                                                }
                                                                worksheet.Cells[_rowEquity, 15].Style.Numberformat.Format = "0.00%";
                                                                worksheet.Cells[_rowEquity, 15].Formula = "I" + _rowEquity + "/C" + _rowTotalCash;
                                                                worksheet.Cells[_rowEquity, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[_rowEquity, 15].Calculate();

                                                                worksheet.Cells[_rowEquity, 18].Style.Numberformat.Format = "0.00%";
                                                                worksheet.Cells[_rowEquity, 18].Formula = "sum(R" + _StartEquity + ":R" + (i - 1) + ")";
                                                                worksheet.Cells[_rowEquity, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[_rowEquity, 18].Calculate();
                                                            }


                                                            //%FR TA Bond
                                                            int j = _StartBond;
                                                            if (_StartBond != 0)
                                                            {
                                                                while (j < _EndBond)
                                                                {
                                                                    worksheet.Cells[j, 12].Formula = "I" + j + "/$C$" + _rowTotalCash;
                                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "0.00 %";
                                                                    worksheet.Cells[j, 12].Calculate();
                                                                    j++;
                                                                }
                                                                worksheet.Cells[_rowBond, 12].Style.Numberformat.Format = "0.00 %";
                                                                worksheet.Cells[_rowBond, 12].Formula = "I" + _rowBond + "/C" + _rowTotalCash;
                                                                worksheet.Cells[_rowBond, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[_rowBond, 12].Calculate();
                                                            }

                                                            //%FR TA DEPOSITO
                                                            int k = _StartDeposito;
                                                            if (_StartBond != 0)
                                                            {
                                                                while (k < _EndDeposito)
                                                                {
                                                                    worksheet.Cells[k, 10].Formula = "E" + k + "/C" + _rowTotalCash;
                                                                    worksheet.Cells[k, 10].Calculate();
                                                                    worksheet.Cells[k, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    k++;
                                                                }
                                                            }


                                                        }


                                                    }



                                                    int _lastRow = incRowExcel;

                                                    worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 19];
                                                    worksheet.Column(1).Width = 5;
                                                    worksheet.Column(2).AutoFit();
                                                    worksheet.Column(3).Width = 25;
                                                    worksheet.Column(4).Width = 25;
                                                    worksheet.Column(5).Width = 25;
                                                    worksheet.Column(6).Width = 25;
                                                    worksheet.Column(7).Width = 25;
                                                    worksheet.Column(8).Width = 25;
                                                    worksheet.Column(9).Width = 25;
                                                    worksheet.Column(10).Width = 25;
                                                    worksheet.Column(11).AutoFit();
                                                    worksheet.Column(12).Width = 25;
                                                    worksheet.Column(13).Width = 55;
                                                    if (_rowDeposito == 0)
                                                        worksheet.Column(14).AutoFit();
                                                    else
                                                        worksheet.Column(14).Width = 25;
                                                    worksheet.Column(15).Width = 25;
                                                    worksheet.Column(16).Width = 25;
                                                    worksheet.Column(17).Width = 20;
                                                    worksheet.Column(18).Width = 20;
                                                    worksheet.Column(19).Width = 20;
                                                    worksheet.Column(20).Width = 20;


                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Portfolio Valuation Report";



                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    Image img = Image.FromFile(Tools.ReportImage);
                                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();






                                                }

                                            }
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                        // disini
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"

-- PVR

			   --drop table #TableResultPVR03Sheet2
			   --drop table #InterestPaymentBondData
			   --drop table #BondPaymentDate
			   --drop table #InterestPaymentBondDivDays
			   --drop table #TaxInterestPaymentBondDivDays
			   --drop table #InterestPaymentBond
			   --drop table #InterestPaymentBondRoundedCalculation
			   --drop table #AccruedInterestCalculation
			   --drop table #FundParam
			   --drop table #JournalPVR

Declare @BDateFrom datetime
Declare @BTotalDays int
Declare @DateMinOne datetime
Declare @BeginDate datetime

select @BDateFrom = DateFrom from Period where @Datefrom between DateFrom and DateTo and status = 2
select @BTotalDays = datediff(Day,@BDateFrom,dateadd(year,1,@BDateFrom))

select @DateMinOne = dbo.FWorkingDay(@datefrom,-1) 
select @BeginDate = [dbo].[FgetMaxDatePeriodClosingByFundPK](@datefrom,@FundPK)

CREATE table #TableResultPVR03Sheet2 
(
	Date DATETIME,
	Item NVARCHAR(200),
	Amount NUMERIC(22,4),
	Baris INT
)

CREATE CLUSTERED INDEX indx_ZFundPosition ON #TableResultPVR03Sheet2 (Date,Baris);

DECLARE @BankInterestPercent NUMERIC(18,8)
DECLARE @BankInterestDays INT

SELECT @BankInterestPercent = B.InterestPercent 
,@BankInterestDays = B.InterestDays
FROM Fund A
LEFT JOIN 
(
	SELECT MAX(Date) Date, BankBranchPK,InterestPercent, InterestDays FROM dbo.BankInterestSetup WHERE status = 2
	AND Date <= @Datefrom
	GROUP BY BankBranchPK,InterestPercent, InterestDays
)B ON A.BankBranchPK = B.BankBranchPK
WHERE A.Status = 2 AND A.FundPK = @FundPK

SET @BankInterestDays = ISNULL(@BankInterestDays,0)
SET @BankInterestPercent = ISNULL(@BankInterestPercent,0)

--INSERT INTO #TableResultPVR03Sheet2
--        ( Date, Item, Amount, Baris )
--SELECT Date,'Saldo Last Day' Item
--,dbo.[FGetAccountFundJournalBalanceByFundPK](DTM1,3,@FundPK) Amount
--,7 Baris
--FROM dbo.ZDT_WorkingDays
--WHERE Date = @Datefrom

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Pencairan DOC' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,8 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
SELECT IsHoliday,DT1,Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1

UNION ALL


SELECT IsHoliday,DT1,A.Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.MaturityDate  and B.ValueDate between @datefrom and @dateto
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 1
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE
SELECT IsHoliday,DT1,A.Date,'Bunga DOC' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8  * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance,A.AcqDate,A.InterestDaysType,A.InterestPercent FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= C.Date AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 

	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.MaturityDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto and A.FundPK = @FundPK
	) 

)B ON A.Date = B.MaturityDate

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,B.InterestDaysType,B.InterestPercent,IsHoliday,DT1
) C
GROUP BY Date,Item,Baris,IsHoliday,DT1


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Bunga Jasa Giro' Item
,0 Amount
,10 Baris
FROM dbo.ZDT_WorkingDays
WHERE Date BETWEEN @Datefrom AND @Dateto

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Pencairan TD' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,11 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
SELECT IsHoliday,DT1,Date,'Bunga TD' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE
SELECT IsHoliday,DT1,Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate)  Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal'  and A.InterestPaymentType <> 7
	
)B ON A.Date = B.MaturityDate

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

UNION ALL
-- INTEREST TD MATURE MONTHLY
SELECT IsHoliday,DT1,A.Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,dateadd(month,-1,A.Date),A.Date)  Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.Date,A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal'  and A.InterestPaymentType = 7
	
)B ON A.Date = dateadd(month, month(B.Date) + 1 - month(B.MaturityDate), B.MaturityDate)
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

) C
GROUP BY Date,Item,Baris,IsHoliday,DT1




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Penjualan Saham' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,13 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 1
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Dividen Saham' Item
,SUM(ISNULL(C.Balance / B.Hold * B.Earn,0)) * 0.85 Amount
,14 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN CorporateAction B ON A.Date = B.PaymentDate and B.status = 2 AND B.Type = 1
LEFT JOIN
(
	SELECT Date,A.InstrumentPK,A.Balance FROM dbo.FundPosition A
	WHERE A.Status = 2 AND A.FundPK = @FundPK
	AND A.InstrumentPK IN
	(
		SELECT DISTINCT InstrumentPK FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
	AND A.Date IN
	(
		SELECT DISTINCT ExDate FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
)C ON B.ExDate = C.Date AND B.InstrumentPK = C.InstrumentPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date




-- INTEREST PAYMENT BOND

CREATE TABLE #InterestPaymentBondData
	(
		Date datetime,
		FundPK int,
		InstrumentTypePK int,
		InstrumentPK int,
		Balance numeric(19,4),
		InterestPercent numeric(19,8),
		AcqDate datetime,
		MaturityDate datetime,
		InterestDaysType int,
		InterestPaymentType int,
		LastPaymentDate datetime,
		PaymentDate datetime

	)
CREATE CLUSTERED INDEX indx_InterestPaymentBond ON #InterestPaymentBondData (FundPK,InstrumentPK,AcqDate);

CREATE TABLE #BondPaymentDate
	(
		InstrumentPK int,
		LastPaymentDate datetime,
		PaymentDate datetime
	)
CREATE CLUSTERED INDEX indx_BondPaymentDate ON #BondPaymentDate (InstrumentPK);

CREATE TABLE #InterestPaymentBondDivDays
	(
		FundPK int,	
		InstrumentPK int,
		AcqDate datetime,
		DivDays int,
		DivPayment int,
		CountDays int
	)
CREATE CLUSTERED INDEX indx_InterestPaymentBondDivDays ON #InterestPaymentBondDivDays (FundPK,InstrumentPK,AcqDate);


CREATE TABLE #TaxInterestPaymentBondDivDays
	(
		FundPK int,	
		InstrumentPK int,
		AcqDate datetime,
		TaxDays int
	)
CREATE CLUSTERED INDEX indx_TaxInterestPaymentBondDivDays ON #TaxInterestPaymentBondDivDays (FundPK,InstrumentPK,AcqDate);

CREATE TABLE #InterestPaymentBond
	(
		FundJournalPK int,
		ValueDate datetime,
		InstrumentPK int,
		InstrumentID nvarchar(50),
		FundPK int,
		FundID nvarchar(50),
		InterestAmount numeric(19,4),
		TaxAmount numeric(19,4),
		InterestCalculation int
	)
CREATE CLUSTERED INDEX indx_InterestPaymentBond ON #InterestPaymentBond (FundJournalPK);

CREATE TABLE #InterestPaymentBondRoundedCalculation
(
FundPK int,
InstrumentPK int,
AcqDate datetime,
GrossInterestAmount numeric(18,4),
TaxInterestAmount numeric(18,4),
)
CREATE CLUSTERED INDEX indx_InterestPaymentBondRoundedCalculation ON #InterestPaymentBondRoundedCalculation (FundPK,InstrumentPK,AcqDate);


CREATE TABLE #AccruedInterestCalculation
(
	FundPK int,
	AccruedInterestCalculation int
)
CREATE CLUSTERED INDEX indx_AccruedInterestCalculation ON #AccruedInterestCalculation (FundPK,AccruedInterestCalculation);

CREATE Table #FundParam 
(
FundPK INT,
ID nvarchar(200),
Name NVARCHAR(400)
)
CREATE CLUSTERED INDEX indx_FundParam ON #FundParam (FundPK);

BEGIN
	INSERT INTO #FundParam
	SELECT FundPK,ID,A.Name FROM Fund A where status in (1,2) 
	AND (MaturityDate >= @datefrom or MaturityDate = '01/01/1900')     
END

Declare @ValueDate datetime
Declare @ZDateMinOne datetime
Declare @KPDTaxPercent int
set @KPDTaxPercent = 5

Declare A Cursor For              
	Select Date,dbo.FWorkingDay(Date,-1) From ZDT_WorkingDays Where Date between @datefrom and @dateto
Open  A              
              
Fetch Next From  A              
into @ValueDate,@ZDateMinOne
                  
While @@Fetch_Status = 0              
BEGIN    
	delete #BondPaymentDate
	INSERT INTO #BondPaymentDate
	select distinct A.InstrumentPK,case when A.InterestPaymentType in (7) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) 
										 when A.InterestPaymentType in (13) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
											when A.InterestPaymentType in (16) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
												when A.InterestPaymentType in (19) then dateadd(month,-12,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) end,
	dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) 
	from FundPosition A
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
	where C.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.status = 2 and A.Date = @ZDateMinOne  and A.FundPK in (select FundPK from #FundParam) 


	delete #InterestPaymentBondData
	INSERT INTO #InterestPaymentBondData -- FUND POSITION MAX(DATE) -1 DAN TIDAK ADA TRX
	Select Distinct A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,sum(A.Balance),A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate 
	From FundPosition A
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
	left join #BondPaymentDate D on A.InstrumentPK = D.InstrumentPK
	where C.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.status = 2 and A.Date = @ZDateMinOne 
	and A.AcqDate < @ValueDate and A.MaturityDate > @ValueDate and  D.PaymentDate > @ZDateMinOne and D.PaymentDate <= @ValueDate and A.FundPK in (select FundPK from #FundParam) 	
	and NOT EXISTS 
    (  
		SELECT InstrumentPK FROM Investment D WHERE A.InstrumentPK = D.InstrumentPK 
		AND A.FundPK = D.FundPK and A.AcqDate = D.AcqDate and D.StatusSettlement  = 2 
		and @ValueDate <= SettlementDate and A.FundPK = D.FundPK 
		and A.Balance = D.DoneVolume and D.TrxType = 2 and D.FundPK in (select FundPK from #FundParam) 
	)
	group by A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate
	order by A.FundPK,C.InstrumentTypePK,A.InstrumentPK,AcqDate

	INSERT INTO #InterestPaymentBondData --JUAL BOND MASIH BELUM SETTLED
	Select Distinct A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,sum(A.Balance),A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate 
	From FundPosition A
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
	left join #BondPaymentDate D on A.InstrumentPK = D.InstrumentPK
	where C.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.status = 2 and A.Date = @ZDateMinOne
	and A.AcqDate < @ValueDate and A.MaturityDate > @ValueDate and  D.PaymentDate > @ZDateMinOne and D.PaymentDate <= @ValueDate  and A.FundPK in (select FundPK from #FundParam) 
	and EXISTS 
    (  
		SELECT * FROM Investment D WHERE A.InstrumentPK = D.InstrumentPK AND A.FundPK = D.FundPK 
		and StatusSettlement  = 2 and TrxType = 2 and @ValueDate between ValueDate and SettlementDate   
		and A.[Identity] = D.TrxBuy and A.FundPK = D.FundPK and D.FundPK in (select FundPK from #FundParam) 
	)
	group by A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate
	order by A.FundPK,C.InstrumentTypePK,A.InstrumentPK,AcqDate
	
	delete #InterestPaymentBondDivDays
	INSERT INTO #InterestPaymentBondDivDays 
	select FundPK,InstrumentPK,AcqDate,DivDays,DivPayment,sum(CountDays) CountDays
	from
	( 
		select A.FundPK,A.InstrumentPK,A.AcqDate,
		case when A.InterestDaysType in (2) then DATEDIFF(Day,
								case when A.InterestPaymentType in (7) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) 
										 when A.InterestPaymentType in (13) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
											when A.InterestPaymentType in (16) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
												when A.InterestPaymentType in (19) then dateadd(month,-12,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) end,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))  
				when A.InterestDaysType in (1,3,5,6,7) then 360 else 365  end DivDays,
		case when A.InterestPaymentType in (1,4,7) then 12 
				when A.InterestPaymentType in (13) then 4 
					when A.InterestPaymentType in (16) then 2 else 1 end DivPayment,
		case when A.InterestDaysType in (1,5,6,7) then 
				case when day(B.Date) = 31 then 0 
						when month(B.Date) = 2 and day(eomonth(B.Date)) = day(B.Date) then 31 - day(B.Date) else 1 end else 1 end CountDays
		from #InterestPaymentBondData A
		left join ZDT_WorkingDays B on B.Date > A.LastPaymentDate  and B.Date <= @ValueDate									  
		where A.InstrumentTypePK in (2,3,8,9,11,13,14,15) and B.Date <= A.PaymentDate 
	) A
	group by FundPK,InstrumentPK,AcqDate,DivDays,DivPayment

	delete #TaxInterestPaymentBondDivDays
	INSERT INTO #TaxInterestPaymentBondDivDays 
	select FundPK,InstrumentPK,AcqDate,sum(TaxDays) TaxDays
	from
	( 
		select A.FundPK,A.InstrumentPK,A.AcqDate,
		case when A.InterestDaysType in (1,5,6,7) then 
				case when day(B.Date) = 31 then 0 
						when month(B.Date) = 2 and day(eomonth(B.Date)) = day(B.Date) then 31 - day(B.Date) else 1 end else 1 end TaxDays, B.Date
		from #InterestPaymentBondData A
		left join ZDT_WorkingDays B on B.Date > case when A.AcqDate >= A.LastPaymentDate then A.AcqDate else A.LastPaymentDate end and B.Date <= @ValueDate									  
		where A.InstrumentTypePK in (2,3,8,9,11,13,14,15) and B.Date <= A.PaymentDate 
	) A
	group by FundPK,InstrumentPK,AcqDate

	delete #InterestPaymentBondRoundedCalculation
	INSERT INTO #InterestPaymentBondRoundedCalculation
	select A.FundPK,InstrumentPK,AcqDate,sum(dbo.FGetBondInterestAccruedForRoundedCalculation(B.Date,A.FundPK,A.InstrumentPK,A.AcqDate,A.Balance)),
	sum(dbo.FGetTaxBondInterestAccruedForRoundedCalculation(B.Date,A.FundPK,A.InstrumentPK,A.AcqDate,A.Balance))
	from #InterestPaymentBondData A
	left join ZDT_WorkingDays B on B.Date > A.LastPaymentDate  and B.Date <= @ValueDate
	LEFT JOIN #AccruedInterestCalculation F on A.FundPK = F.FundPK 								  
	where A.InstrumentTypePK in (2,3,8,9,11,13,14,15) and B.Date <= A.PaymentDate and F.AccruedInterestCalculation = 3	--and A.FundPK = 4 and A.InstrumentPK = 730 --and A.AcqDate = '07/06/2020'
	group by A.FundPK,InstrumentPK,AcqDate


	INSERT INTO #InterestPaymentBond
		(	FundJournalPK ,
			ValueDate ,
			InstrumentPK ,
			InstrumentID ,
			FundPK ,
			FundID,
			InterestAmount,
			TaxAmount,
			InterestCalculation
		)

	Select ROW_NUMBER() OVER	(ORDER BY A.FundPK,A.InstrumentTypePK,A.InstrumentPK,A.AcqDate ASC) Number ,
			@ValueDate ,
			A.InstrumentPK ,
			D.ID InstrumentID ,
			A.FundPK ,
			E.ID FundID,
			case when A.InstrumentTypePK in (2,13,15) and F.AccruedInterestCalculation in (3)  then G.GrossInterestAmount
					when A.InstrumentTypePK in (2,13,15) then A.Balance / 1000000 * ROUND(A.InterestPercent / 100 / B.DivDays / 
						case when A.InterestDaysType in (2) then B.DivPayment else 1 end  * 1000000,0) * B.CountDays 
							else A.Balance * A.InterestPercent / 100 / B.DivDays / 
								case when A.InterestDaysType in (2) then B.DivPayment else 1 end  * B.CountDays  end InterestAmount,

			case when A.InstrumentTypePK in (2,13,15) and F.AccruedInterestCalculation in (3)  then G.TaxInterestAmount
					when A.InstrumentTypePK in (2,13,15) then A.Balance / 1000000 * ROUND(A.InterestPercent / 100 / B.DivDays / 
						case when A.InterestDaysType in (2) then B.DivPayment else 1 end * 1000000,0) * C.TaxDays *
											case when E.FundTypeInternal = 2 then @KPDTaxPercent/100 
													else D.TaxExpensePercent/100 end

														else A.Balance * A.InterestPercent / 100 / B.DivDays / 
															case when A.InterestDaysType in (2) then B.DivPayment else 1 end * C.TaxDays *
																	case when E.FundTypeInternal = 2 then @KPDTaxPercent/100 
																			else D.TaxExpensePercent/100 end  end  TaxAmount,F.AccruedInterestCalculation
	From #InterestPaymentBondData A  
	LEFT JOIN #InterestPaymentBondDivDays B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.AcqDate = B.AcqDate
	LEFT JOIN #TaxInterestPaymentBondDivDays C on A.FundPK = C.FundPK and A.InstrumentPK = C.InstrumentPK and A.AcqDate = C.AcqDate
	LEFT JOIN dbo.Instrument D ON A.InstrumentPK = D.InstrumentPK AND D.status IN (1,2)
	LEFT JOIN dbo.Fund E ON A.FundPK = E.FundPK AND E.status IN (1,2)
	LEFT JOIN #AccruedInterestCalculation F on A.FundPK = F.FundPK
	LEFT JOIN #InterestPaymentBondRoundedCalculation G on A.FundPK = G.FundPK and A.InstrumentPK = G.InstrumentPK and A.AcqDate = G.AcqDate
	order by Number asc

Fetch next From A                   
Into @ValueDate,@ZDateMinOne
end                  
Close A                  
Deallocate A


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select A.Date,'Coupon Obligasi',sum(isnull(InterestAmount,0) - isnull(TaxAmount,0)) Amount, 15 Baris 
FROM dbo.ZDT_WorkingDays A
left join #InterestPaymentBond B on A.Date = B.ValueDate and B.FundPK = @FundPK
WHERE A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Coupon Obligasi' Item
,SUM(ISNULL(B.Balance,0) * case when InstrumentTypePK in (2,3,8,14,13,9,15)  then D.AvgPrice/100 else D.AvgPrice end) * -1 Amount
,15 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN FundPositionAdjustment B ON B.FundPK = @FundPK and A.Date = B.Date
LEFT JOIN Instrument C ON B.InstrumentPK = C.InstrumentPK and C.status in (1,2)
LEFT JOIN FundPosition D ON B.InstrumentPK = D.InstrumentPK and B.FundPK = @FundPK and D.status in (1,2) and D.Date = dbo.FWorkingDay(@datefrom,-1)
WHERE A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )

SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Deposit' Item
,SUM(ISNULL(B.Balance,0)) Amount
,16 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= @DateMinOne AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit Normal'
	union all
	SELECT A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date <= C.Date AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 
	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto and A.FundPK = @FundPK
	) 

	union all
	SELECT A.MaturityDate,A.DoneAmount FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto and A.FundPK = @FundPK
	
)B ON A.Date = B.MaturityDate

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1






INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Penjualan Bond' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,17 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate 
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 2
AND B.FundPK = @FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
select Z.Date,Z.Item,Z.Amount,Z.Baris
from (
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Bond' Item
,SUM(ISNULL(B.Balance,0)) Amount
,18 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = @FundPK AND date < case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND status = 2
	) AND FundPK = @FundPK
	AND B.InstrumentTypePK NOT in (1,4,5,6,16)
)B ON A.Date = B.MaturityDate
WHERE  A.Date BETWEEN case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND @Dateto
GROUP BY A.Date,IsHoliday,DT1
) Z
where Z.Date between @DateFrom and @Dateto




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Subscription Account' Item
,case when dbo.CheckTodayIsHoliday(A.Date) = 1 then 0 
	else  sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,60,@FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,60,@FundPK)) 	end 
,19 Baris
FROM dbo.ZDT_WorkingDays A
WHERE A.Date between @datefrom and @dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan DOC' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,22 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType in (1,3)
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan TD' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,23 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType in (1,3)
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,IsHoliday,DT1




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT Date,'Pembelian Saham' Item
,SUM(ISNULL(B.TotalAmount,0))  * -1 Amount
,24 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK = 1
AND B.TrxType = 1
AND B.FundPK = @FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Pembelian Bond' Item
,SUM(case when C.IssueDate <> B.SettlementDate then ISNULL(B.TotalAmount,0) * -1 else 0 end) Amount
,25 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate 
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3 
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 1
AND B.FundPK = @FundPK
LEFT JOIN Instrument C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2) 
WHERE  A.Date BETWEEN @Datefrom AND @Dateto 
GROUP BY A.Date




CREATE TABLE #JournalPVR03
(
	ValueDate DATETIME,
	Movement NUMERIC(22,4),
	FundJournalAccountPK int
)

CREATE CLUSTERED INDEX indx_JournalPVR03 ON #JournalPVR03 (ValueDate,FundJournalAccountPK);

INSERT INTO #JournalPVR03
        ( ValueDate ,
          Movement ,
          FundJournalAccountPK
        )
	SELECT ValueDate,case when B.FundJournalAccountPK = 195 then SUM(ISNULL(B.BaseCredit,0)) else SUM(ISNULL(B.BaseDebit,0)) end Movement,B.FundJournalAccountPK FROM FundJournal A
	LEFT JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK 
	WHERE A.ValueDate BETWEEN @Datefrom AND @Dateto
	AND A.Posted = 1 AND A.Status = 2 AND A.Reversed = 0
	AND B.FundPK = @FundPK  AND B.FundJournalAccountPK in (147,78,79,80,200,189,81)
	GROUP BY A.ValueDate,B.FundJournalAccountPK




INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'IPO' Item
,case when dbo.CheckTodayIsHoliday(A.Date) = 1 then 0 
	else case when sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,195,@FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,195,@FundPK)) < 0 then 0 
		else sum(dbo.[FGetAccountFundJournalBalanceByFundPK](A.Date,195,@FundPK) - dbo.[FGetAccountFundJournalBalanceByFundPK](A.DTM1,195,@FundPK)) end end * -1
,26 Baris
FROM dbo.ZDT_WorkingDays A
WHERE A.Date between @datefrom and @dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Bank Charge' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,27 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 147
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Biaya Transaksi' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,28 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 78
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'MGT Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,29 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 79
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date

INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'CSD Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,30 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 80
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'S-Invest Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,31 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 200
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Tax Expense' Item
--,SUM(ISNULL(B.Movement,0) * -1) Amount
,0 Amount
,32 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 189
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Audit Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,33 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 81
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Pembagian Dividen' Item
,SUM(ISNULL(B.CashAmount,0) * -1) Amount
,34 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN DistributedIncome B ON A.Date = B.PaymentDate AND B.Status = 2 AND B.FundPK = @FundPK 
WHERE  A.Date BETWEEN @Datefrom AND @Dateto 
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Subscription' Item
,SUM(ISNULL(B.Amount,0)) Amount
,37 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end NAVDate,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end,B.BitPendingSubscription
)B ON A.Date = B.NAVDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Redemption' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,38 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT PaymentDate,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY A.PaymentDate
)B ON A.Date = B.PaymentDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Switching' Item
,SUM(ISNULL(B.Amount,0)) Amount
,39 Baris FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
SELECT A.Date,SUM(ISNULL(amount,0)) Amount FROM (
    SELECT case when B.BitPendingSwitchIn = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end  Date,ISNULL(CashAmount,0) Amount FROM dbo.ClientSwitching A
    left join FundFee B on A.fundPKTo = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSwitchIn = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end  BETWEEN @Datefrom AND @Dateto
	AND fundPKTo = @FundPK

	UNION ALL

	SELECT A.PaymentDate Date,ISNULL(CashAmount,0) * -1 Amount FROM dbo.ClientSwitching A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	AND fundPKFrom = @FundPK
	)A

	GROUP BY A.Date

)B ON A.Date = B.Date
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Subs Fee' Item
,SUM(ISNULL(B.Amount,0)) Amount
,40 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT NAVDate  NAVDate,SUM(ISNULL(SubscriptionFeeAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND NAVDate  BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY NAVDate ,B.BitPendingSubscription
)B ON A.Date = B.NAVDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date



INSERT INTO #TableResultPVR03Sheet2
        ( Date, Item, Amount, Baris )
SELECT A.Date,'Redeem Fee' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,41 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN 
(
	SELECT  PaymentDate,SUM(ISNULL(RedemptionFeeAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	AND A.fundPK = @FundPK
	GROUP BY A.PaymentDate
)B ON A.Date = B.PaymentDate
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date


--INSERT INTO #TableResultPVR03Sheet2
--        ( Date, Item, Amount, Baris )
--SELECT A.Date,'Adjustment' Item
--,SUM(C.BaseDebit - BaseCredit)Amount
--,42 Baris
--FROM dbo.ZDT_WorkingDays A
--left join FundJournal B on A.Date = B.ValueDate
--left join FundJournalDetail C on B.FundJournalPK = C.FundJournalPK
--where FundPK = @FundPK and B.status = 2 and B.Posted = 1 and ValueDate between @datefrom and @dateto 
--and TrxName = 'TB Reconcile' and C.FundJournalAccountPK = 3
--group by A.Date




DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(Date) +',0) ' + QUOTENAME(Date) 
                    from (SELECT DISTINCT Date FROM #TableResultPVR03Sheet2) A
					order by A.Date
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


select @cols = STUFF((SELECT distinct ',' + QUOTENAME(Date) 
                    from #TableResultPVR03Sheet2
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query = 'SELECT baris,item,' + @colsForQuery + ' from 
                (
                SELECT Date,baris,item,Amount FROM #TableResultPVR03Sheet2 
            ) x
            pivot 
            (
                SUM(Amount)
                for Date in (' + @cols + ')
            ) p 
			order by baris
			'
exec(@query)	






--SELECT ExDate,PaymentDate,InstrumentPK,earn,Hold FROM dbo.CorporateAction WHERE type = 1 AND status = 2
--AND PaymentDate BETWEEN @Datefrom AND @Dateto


--SELECT * FROM dbo.MasterValue WHERE id LIKE '%Corporate%'

--SELECT * FROM dbo.InstrumentType WHERE status = 2 ORDER BY InstrumentTypePK asc
                                                ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);

                                                cmd1.ExecuteNonQuery();


                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    worksheet1.Cells[1, 1].Style.Font.Size = 16;
                                                    worksheet1.Cells[1, 1].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom); //rsHeader1.Key.FundName;
                                                    int incRowExcelZ = 8;
                                                    int incColExcelZ = 2;
                                                    int incColExcelHeader = 2;
                                                    worksheet1.Cells[7, 2].Value = _host.Get_TotalAccountBalanceByFundPK(_FundAccountingRpt.FundFrom, 3, _host.GetWorkingDay(_FundAccountingRpt.ValueDateFrom, -1)); //rsHeader1.Key.FundName;

                                                    //ini buat header
                                                    for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                    {
                                                        if (inc1 > 1)
                                                        {

                                                            worksheet1.Cells[5, incColExcelHeader].Value = Convert.ToDateTime(dr1.GetName(inc1)).ToString("dd-MMM-yyyy");
                                                            incColExcelHeader++;
                                                        }


                                                    }
                                                    while (dr1.Read())
                                                    {
                                                        incColExcelZ = 1;
                                                        for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                        {


                                                            if (dr1.GetName(inc1).ToString() != "baris")
                                                            {


                                                                // buat baris 
                                                                if (dr1.GetValue(inc1).ToString() == "Penempatan DOC")
                                                                {
                                                                    incRowExcelZ = incRowExcelZ + 2;
                                                                    if (incColExcelZ >= 2)
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1[inc1]);
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                    }
                                                                }

                                                                else if (dr1.GetValue(inc1).ToString() == "Subscription")
                                                                {
                                                                    incRowExcelZ = incRowExcelZ + 2;
                                                                    if (incColExcelZ >= 2)
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1[inc1]);
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (incColExcelZ >= 2)
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1[inc1]);
                                                                    }
                                                                    else
                                                                    {
                                                                        worksheet1.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                    }
                                                                }
                                                                incColExcelZ++;
                                                            }
                                                        }
                                                        incRowExcelZ++;

                                                    }
                                                }

                                                //worksheet1.Calculate();
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        //package.Workbook.Calculate();

                        package.Save();
                        if (_FundAccountingRpt.DownloadMode == "PDF")
                        {
                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                        }
                        return true;
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Portfolio Summary Cash
            if (_FundAccountingRpt.ReportName.Equals("Portfolio Summary Cash"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
--declare @datefrom datetime
--declare @dateto datetime
--set @datefrom = '07/14/2020'
--set @dateto = '07/16/2020'


--DROP TABLE #BondData
--DROP TABLE #TD
--DROP TABLE #TDTemp
--DROP TABLE #TableResultSummaryCash03
--DROP TABLE #TableResultSummaryCash03Temp
--DROP TABLE #TableBegCash
--DROP TABLE #InterestBondDivDays
--DROP TABLE #DailyBond
--DROP TABLE #JournalPVR03
--DROP TABLE #FinalResult03SummaryCash
--DROP TABLE #FinalResult03Summary
--DROP TABLE #SaldoNAV
--DROP TABLE #BegCashPerDate

Declare @BDateFrom datetime
Declare @BTotalDays int

select @BDateFrom = DateFrom from Period where @Datefrom between DateFrom and DateTo and status = 2
select @BTotalDays = datediff(Day,@BDateFrom,dateadd(year,1,@BDateFrom))

Declare @DateMinOne datetime
select @DateMinOne = dbo.FWorkingDay(@datefrom,-1)
----------------------------------------------------------
CREATE TABLE #TD
(
FundID nvarchar(50) ,
AmountTD numeric(19,2),
AmountTDonCall numeric(19,2)
)

CREATE CLUSTERED INDEX indx_TD ON #TD (FundID,AmountTD,AmountTDonCall);


CREATE TABLE #TDTemp
(
Date datetime,
FundID nvarchar(50) ,
Balance numeric(19,2),
BalanceOnCall numeric(19,2)
)

CREATE CLUSTERED INDEX indx_TDTemp ON #TDTemp (Date,FundID,Balance,BalanceOnCall);

insert into #TDTemp
SELECT A.Date,D.ID COLLATE DATABASE_DEFAULT FundID ,A.Balance,0 BalanceOnCall FROM dbo.FundPosition A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.status = 2 AND Date =
(
SELECT MAX(Date) FROM dbo.FundPosition C WHERE A.FundPK = C.FundPK AND date <= @DateFrom AND status = 2
) 
AND B.InstrumentTypePK = 5 and A.Category = 'Deposit Normal'


insert into #TDTemp
SELECT A.ValueDate,D.ID COLLATE DATABASE_DEFAULT,A.DoneAmount,0 FROM dbo.Investment A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5 and A.TrxType in (1,2) and A.ValueDate between dateadd(day,1,@Datefrom) and @dateto and A.Category = 'Deposit Normal'

insert into #TDTemp
SELECT A.Date,D.ID COLLATE DATABASE_DEFAULT,0,A.Balance FROM dbo.FundPosition A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.status = 2 AND Date =
(
SELECT MAX(Date) FROM dbo.FundPosition C WHERE A.fundPK = C.FundPK AND date <= @DateFrom AND status = 2
) 
AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.MaturityDate > @dateto

insert into #TDTemp
SELECT A.ValueDate,D.ID COLLATE DATABASE_DEFAULT,0,A.DoneAmount FROM dbo.Investment A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
LEFT JOIN dbo.Fund D on A.FundPK = D.FundPK and D.status in (1,2)
WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
AND B.InstrumentTypePK = 5 and A.TrxType in (1,2) and A.ValueDate between dateadd(day,1,@Datefrom) and @dateto  and A.Category = 'Deposit On Call' and A.MaturityDate > @dateto


insert into #TD
select A.FundID,sum(A.Balance),sum(BalanceOnCall)
from (
select * from  #TDTemp
)A
group by FundID



----------------------------------------------------


CREATE table #TableResultSummaryCash03 
(
	FundID NVARCHAR(100) ,
	Date DATETIME,
	Item NVARCHAR(200) ,
	Amount NUMERIC(22,4),
	Baris INT
)

CREATE CLUSTERED INDEX indx_TableResultSummaryCash03 ON #TableResultSummaryCash03 (FundID,Date,Item,Amount,Baris);


CREATE table #TableResultSummaryCash03Temp
(
	FundPK int ,
	IsHoliday int,
	DT1 datetime ,
	Date datetime,
	Item nvarchar(100),
	Amount numeric(19,4),
	Baris int
)


CREATE CLUSTERED INDEX indx_TableResultSummaryCash03Temp ON #TableResultSummaryCash03Temp (FundPK,IsHoliday,DT1,Date,Item,Amount,Baris);

DECLARE @TableBeginDate table
(
	FundPK int,
	BeginDate datetime
)

INSERT INTO @TableBeginDate 
        ( FundPK, BeginDate )

SELECT B.FundPK,ISNULL(ValueDate,'01/01/1900') BeginDate from FundJournal A

left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK and B.Status = 2

where Description = 'Period Closing' and A.Status = 2 and A.Posted = 1 and A.Reversed = 0

and ValueDate < @Datefrom  


CREATE table #TableBegCash 
(
	FundID NVARCHAR(100) ,
	BegCash NUMERIC(22,4)
)

CREATE CLUSTERED INDEX indx_TableBegCash ON #TableBegCash (FundID,BegCash);

INSERT INTO #TableBegCash
        ( FundID, BegCash )
SELECT B.ID COLLATE DATABASE_DEFAULT,
ISNULL(C.Balance,0)
FROM Fund B 
LEFT JOIN (
	 SELECT B.FundPK,
	 CASE WHEN C.Type in (1,4) then sum(B.BaseDebit-B.BaseCredit) else  sum(B.BaseCredit-B.BaseDebit) END  Balance
	 from FundJournal A 
	 LEFT join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK and B.Status = 2  
	 left join FundJournalAccount C on B.FundJournalAccountPK = C.FundJournalAccountPK and C.Status = 2  
	 LEFT JOIN @TableBeginDate D ON B.FundPK = D.FundPK 
	 where A.Posted = 1 and A.Reversed = 0 and A.Status = 2  
	 and B.FundJournalAccountPK = 3 and A.ValueDate between isnull(D.BeginDate,'01/01/1900') and @DateMinOne
	 group By B.FundPK,C.Type  
)C ON B.FundPK = C.FundPK
WHERE B.status = 2




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID COLLATE DATABASE_DEFAULT,Date,'Pencairan DOC' COLLATE DATABASE_DEFAULT Item 
,SUM(ISNULL(B.DoneVolume,0)) Amount
,8 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2

WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




insert into #TableResultSummaryCash03Temp
SELECT C.FundPK,IsHoliday,DT1,Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 2
AND B.FundPK = C.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,IsHoliday,DT1

insert into #TableResultSummaryCash03Temp
SELECT C.FundPK,IsHoliday,DT1,Date,'Bunga DOC' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.MaturityDate  and B.ValueDate between @datefrom and @dateto
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType = 1
AND B.FundPK = C.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1

insert into #TableResultSummaryCash03Temp
-- INTEREST TD MATURE
SELECT C.FundPK,IsHoliday,DT1,A.Date,'Bunga DOC' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,9 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,A.MaturityDate,A.Balance,A.AcqDate,A.InterestDaysType,A.InterestPercent FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	left join Fund D on D.status = 2
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date <= C.Date AND status = 2
	) AND A.FundPK = D.FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 
	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.MaturityDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto
	) 



)B ON A.Date = B.MaturityDate  AND C.FundPK = B.FundPK

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,B.InterestDaysType,B.InterestPercent,IsHoliday,DT1




--------------------------------------------

DECLARE @TableBankInterest TABLE
(
	Date DATETIME,
	BankBranchPK INT,
	InterestPercent NUMERIC(18,8),
	InterestDays int
)

INSERT INTO @TableBankInterest
        ( Date ,
          BankBranchPK ,
          InterestPercent ,
          InterestDays
        )
SELECT MAX(Date) Date, BankBranchPK,InterestPercent, InterestDays 
FROM dbo.BankInterestSetup WHERE status = 2
AND Date <= @Datefrom
GROUP BY BankBranchPK,InterestPercent, InterestDays


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Bunga Jasa Giro' Item
, 0 Amount
,10 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
WHERE A.Date BETWEEN @Datefrom AND @Dateto



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Pencairan TD' Item
,SUM(ISNULL(B.DoneVolume,0)) Amount
,11 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




insert into #TableResultSummaryCash03Temp
SELECT C.FundPK,IsHoliday,DT1,Date,'Bunga TD' Item
,SUM(ISNULL(B.DoneVolume * B.InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType = 2
AND B.FundPK = C.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,IsHoliday,DT1

insert into #TableResultSummaryCash03Temp
-- INTEREST TD MATURE
SELECT C.FundPK,IsHoliday,DT1,A.Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,B.AcqDate,B.MaturityDate) Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2 
LEFT JOIN 
(
	SELECT C.FundPK,A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	left join Fund C on C.status = 2 AND A.FundPK = C.FundPK
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition A
		left join Fund C on C.status = 2 WHERE A.fundPK = C.FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND A.status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal' and A.InterestPaymentType <> 7
	
)B ON A.Date = B.MaturityDate and B.FundPK = C.FundPK

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1


insert into #TableResultSummaryCash03Temp
-- INTEREST TD MATURE MONTHLY
SELECT C.FundPK,IsHoliday,DT1,A.Date,'Bunga TD' Item
,SUM(ISNULL(B.Balance * InterestPercent / 100 /
CASE WHEN B.InterestDaysType = 4 then 365 when B.InterestDaysType = 2 then @BTotalDays ELSE 360 END,0)) * 0.8 * DATEDIFF(day,dateadd(month,-1,A.Date),A.Date) Amount
,12 Baris
FROM dbo.ZDT_WorkingDays A
left join Fund C on C.status = 2 
LEFT JOIN 
(
	SELECT A.Date,C.FundPK,A.MaturityDate,A.Balance,A.InterestPercent,A.InterestDaysType,A.AcqDate FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	left join Fund C on C.status = 2 AND A.FundPK = C.FundPK
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition A
		left join Fund C on C.status = 2 WHERE A.fundPK = C.FundPK AND date <= case when dbo.CheckIsYesterdayHoliday(@datefrom) = 1 then @DateMinOne else @DateFrom end AND A.status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK = 5 AND B.Category = 'Deposit Normal' and A.InterestPaymentType = 7
	
)B ON A.Date = dateadd(month, month(B.Date) + 1 - month(B.MaturityDate), B.MaturityDate) and B.FundPK = C.FundPK

WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY C.FundPK,A.Date,B.AcqDate,B.MaturityDate,IsHoliday,DT1




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Penjualan Saham' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,13 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 1
AND B.TrxType = 2
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Dividen Saham' Item
,SUM(ISNULL(D.Balance / B.Hold * B.Earn,0)) * 0.85 Amount
,14 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN CorporateAction B ON A.Date = B.PaymentDate and B.status = 2 AND B.Type = 1
LEFT JOIN
(
	SELECT A.FundPK,Date,A.InstrumentPK,A.Balance FROM dbo.FundPosition A
	WHERE A.Status = 2 
	AND A.InstrumentPK IN
	(
		SELECT DISTINCT InstrumentPK FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
	AND A.Date IN
	(
		SELECT DISTINCT ExDate FROM dbo.CorporateAction WHERE type = 1 AND status = 2
		AND PaymentDate BETWEEN @Datefrom AND @Dateto
	)
)D ON B.ExDate = D.Date AND B.InstrumentPK = D.InstrumentPK AND C.FundPK = D.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


--7.INTEREST PAYMENT BOND

CREATE TABLE #InterestPaymentBondData
	(
		Date datetime,
		FundPK int,
		InstrumentTypePK int,
		InstrumentPK int,
		Balance numeric(19,4),
		InterestPercent numeric(19,8),
		AcqDate datetime,
		MaturityDate datetime,
		InterestDaysType int,
		InterestPaymentType int,
		LastPaymentDate datetime,
		PaymentDate datetime

	)
CREATE CLUSTERED INDEX indx_InterestPaymentBond ON #InterestPaymentBondData (FundPK,InstrumentPK,AcqDate);

CREATE TABLE #BondPaymentDate
	(
		InstrumentPK int,
		LastPaymentDate datetime,
		PaymentDate datetime
	)
CREATE CLUSTERED INDEX indx_BondPaymentDate ON #BondPaymentDate (InstrumentPK);

CREATE TABLE #InterestPaymentBondDivDays
	(
		FundPK int,	
		InstrumentPK int,
		AcqDate datetime,
		DivDays int,
		DivPayment int,
		CountDays int
	)
CREATE CLUSTERED INDEX indx_InterestPaymentBondDivDays ON #InterestPaymentBondDivDays (FundPK,InstrumentPK,AcqDate);


CREATE TABLE #TaxInterestPaymentBondDivDays
	(
		FundPK int,	
		InstrumentPK int,
		AcqDate datetime,
		TaxDays int
	)
CREATE CLUSTERED INDEX indx_TaxInterestPaymentBondDivDays ON #TaxInterestPaymentBondDivDays (FundPK,InstrumentPK,AcqDate);

CREATE TABLE #InterestPaymentBond
	(
		FundJournalPK int,
		ValueDate datetime,
		InstrumentPK int,
		InstrumentID nvarchar(50),
		FundPK int,
		FundID nvarchar(50),
		InterestAmount numeric(19,4),
		TaxAmount numeric(19,4),
		InterestCalculation int
	)
CREATE CLUSTERED INDEX indx_InterestPaymentBond ON #InterestPaymentBond (FundJournalPK);

CREATE TABLE #InterestPaymentBondRoundedCalculation
(
FundPK int,
InstrumentPK int,
AcqDate datetime,
GrossInterestAmount numeric(18,4),
TaxInterestAmount numeric(18,4),
)
CREATE CLUSTERED INDEX indx_InterestPaymentBondRoundedCalculation ON #InterestPaymentBondRoundedCalculation (FundPK,InstrumentPK,AcqDate);


CREATE TABLE #AccruedInterestCalculation
(
	FundPK int,
	AccruedInterestCalculation int
)
CREATE CLUSTERED INDEX indx_AccruedInterestCalculation ON #AccruedInterestCalculation (FundPK,AccruedInterestCalculation);

CREATE Table #FundParam 
(
FundPK INT,
ID nvarchar(200),
Name NVARCHAR(400)
)
CREATE CLUSTERED INDEX indx_FundParam ON #FundParam (FundPK);

BEGIN
	INSERT INTO #FundParam
	SELECT FundPK,ID,A.Name FROM Fund A where status in (1,2)  
	AND (MaturityDate >= @datefrom or MaturityDate = '01/01/1900')     
	--and ID not in ('NAVCOUS','NAVCP3','XCID0000','CIPTUS00')
END



BEGIN

Declare @ValueDate datetime
Declare @ZDateMinOne datetime
Declare @KPDTaxPercent int
set @KPDTaxPercent = 5

Declare A Cursor For              
	Select Date,dbo.FWorkingDay(Date,-1) From ZDT_WorkingDays Where Date between @datefrom and @dateto
Open  A              
              
Fetch Next From  A              
into @ValueDate,@ZDateMinOne
                  
While @@Fetch_Status = 0              
BEGIN    
	delete #BondPaymentDate
	INSERT INTO #BondPaymentDate
	select distinct A.InstrumentPK,case when A.InterestPaymentType in (7) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) 
										 when A.InterestPaymentType in (13) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
											when A.InterestPaymentType in (16) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
												when A.InterestPaymentType in (19) then dateadd(month,-12,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) end,
	dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK) 
	from FundPosition A
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
	where C.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.status = 2 and A.Date = @ZDateMinOne  and A.FundPK in (select FundPK from #FundParam) 


	delete #InterestPaymentBondData
	INSERT INTO #InterestPaymentBondData -- FUND POSITION MAX(DATE) -1 DAN TIDAK ADA TRX
	Select Distinct A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,sum(A.Balance),A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate 
	From FundPosition A
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
	left join #BondPaymentDate D on A.InstrumentPK = D.InstrumentPK
	where C.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.status = 2 and A.Date = @ZDateMinOne 
	and A.AcqDate < @ValueDate and A.MaturityDate > @ValueDate and  D.PaymentDate > @ZDateMinOne and D.PaymentDate <= @ValueDate and A.FundPK in (select FundPK from #FundParam) 	
	and NOT EXISTS 
    (  
		SELECT InstrumentPK FROM Investment D WHERE A.InstrumentPK = D.InstrumentPK 
		AND A.FundPK = D.FundPK and A.AcqDate = D.AcqDate and D.StatusSettlement  = 2 
		and @ValueDate <= SettlementDate and A.FundPK = D.FundPK 
		and A.Balance = D.DoneVolume and D.TrxType = 2 and D.FundPK in (select FundPK from #FundParam) 
	)
	group by A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate
	order by A.FundPK,C.InstrumentTypePK,A.InstrumentPK,AcqDate

	INSERT INTO #InterestPaymentBondData --JUAL BOND MASIH BELUM SETTLED
	Select Distinct A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,sum(A.Balance),A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate 
	From FundPosition A
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
	left join #BondPaymentDate D on A.InstrumentPK = D.InstrumentPK
	where C.InstrumentTypePK in (2,3,8,9,11,13,14,15) and A.status = 2 and A.Date = @ZDateMinOne
	and A.AcqDate < @ValueDate and A.MaturityDate > @ValueDate and  D.PaymentDate > @ZDateMinOne and D.PaymentDate <= @ValueDate  and A.FundPK in (select FundPK from #FundParam) 
	and EXISTS 
    (  
		SELECT * FROM Investment D WHERE A.InstrumentPK = D.InstrumentPK AND A.FundPK = D.FundPK 
		and StatusSettlement  = 2 and TrxType = 2 and @ValueDate between ValueDate and SettlementDate   
		and A.[Identity] = D.TrxBuy and A.FundPK = D.FundPK and D.FundPK in (select FundPK from #FundParam) 
	)
	group by A.Date,A.FundPK,C.InstrumentTypePK,A.InstrumentPK,A.InterestPercent,A.AcqDate,
	A.MaturityDate,A.InterestDaysType,A.InterestPaymentType,D.LastPaymentDate,D.PaymentDate
	order by A.FundPK,C.InstrumentTypePK,A.InstrumentPK,AcqDate
	
	delete #InterestPaymentBondDivDays
	INSERT INTO #InterestPaymentBondDivDays 
	select FundPK,InstrumentPK,AcqDate,DivDays,DivPayment,sum(CountDays) CountDays
	from
	( 
		select A.FundPK,A.InstrumentPK,A.AcqDate,
		case when A.InterestDaysType in (2) then DATEDIFF(Day,
								case when A.InterestPaymentType in (7) then dateadd(month,-1,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) 
										 when A.InterestPaymentType in (13) then dateadd(month,-3,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
											when A.InterestPaymentType in (16) then dateadd(month,-6,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))
												when A.InterestPaymentType in (19) then dateadd(month,-12,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK)) end,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK))  
				when A.InterestDaysType in (1,3,5,6,7) then 360 else 365  end DivDays,
		case when A.InterestPaymentType in (1,4,7) then 12 
				when A.InterestPaymentType in (13) then 4 
					when A.InterestPaymentType in (16) then 2 else 1 end DivPayment,
		case when A.InterestDaysType in (1,5,6,7) then 
				case when day(B.Date) = 31 then 0 
						when month(B.Date) = 2 and day(eomonth(B.Date)) = day(B.Date) then 31 - day(B.Date) else 1 end else 1 end CountDays
		from #InterestPaymentBondData A
		left join ZDT_WorkingDays B on B.Date > A.LastPaymentDate  and B.Date <= @ValueDate									  
		where A.InstrumentTypePK in (2,3,8,9,11,13,14,15) and B.Date <= A.PaymentDate 
	) A
	group by FundPK,InstrumentPK,AcqDate,DivDays,DivPayment

	delete #TaxInterestPaymentBondDivDays
	INSERT INTO #TaxInterestPaymentBondDivDays 
	select FundPK,InstrumentPK,AcqDate,sum(TaxDays) TaxDays
	from
	( 
		select A.FundPK,A.InstrumentPK,A.AcqDate,
		case when A.InterestDaysType in (1,5,6,7) then 
				case when day(B.Date) = 31 then 0 
						when month(B.Date) = 2 and day(eomonth(B.Date)) = day(B.Date) then 31 - day(B.Date) else 1 end else 1 end TaxDays, B.Date
		from #InterestPaymentBondData A
		left join ZDT_WorkingDays B on B.Date > case when A.AcqDate >= A.LastPaymentDate then A.AcqDate else A.LastPaymentDate end and B.Date <= @ValueDate									  
		where A.InstrumentTypePK in (2,3,8,9,11,13,14,15) and B.Date <= A.PaymentDate 
	) A
	group by FundPK,InstrumentPK,AcqDate

	delete #InterestPaymentBondRoundedCalculation
	INSERT INTO #InterestPaymentBondRoundedCalculation
	select A.FundPK,InstrumentPK,AcqDate,sum(dbo.FGetBondInterestAccruedForRoundedCalculation(B.Date,A.FundPK,A.InstrumentPK,A.AcqDate,A.Balance)),
	sum(dbo.FGetTaxBondInterestAccruedForRoundedCalculation(B.Date,A.FundPK,A.InstrumentPK,A.AcqDate,A.Balance))
	from #InterestPaymentBondData A
	left join ZDT_WorkingDays B on B.Date > A.LastPaymentDate  and B.Date <= @ValueDate
	LEFT JOIN #AccruedInterestCalculation F on A.FundPK = F.FundPK 								  
	where A.InstrumentTypePK in (2,3,8,9,11,13,14,15) and B.Date <= A.PaymentDate and F.AccruedInterestCalculation = 3	--and A.FundPK = 4 and A.InstrumentPK = 730 --and A.AcqDate = '07/06/2020'
	group by A.FundPK,InstrumentPK,AcqDate


	INSERT INTO #InterestPaymentBond
		(	FundJournalPK ,
			ValueDate ,
			InstrumentPK ,
			InstrumentID ,
			FundPK ,
			FundID,
			InterestAmount,
			TaxAmount,
			InterestCalculation
		)

	Select ROW_NUMBER() OVER	(ORDER BY A.FundPK,A.InstrumentTypePK,A.InstrumentPK,A.AcqDate ASC) Number ,
			@ValueDate ,
			A.InstrumentPK ,
			D.ID InstrumentID ,
			A.FundPK ,
			E.ID FundID,
			case when A.InstrumentTypePK in (2,13,15) and F.AccruedInterestCalculation in (3)  then G.GrossInterestAmount
					when A.InstrumentTypePK in (2,13,15) then A.Balance / 1000000 * ROUND(A.InterestPercent / 100 / B.DivDays / 
						case when A.InterestDaysType in (2) then B.DivPayment else 1 end  * 1000000,0) * B.CountDays 
							else A.Balance * A.InterestPercent / 100 / B.DivDays / 
								case when A.InterestDaysType in (2) then B.DivPayment else 1 end  * B.CountDays  end InterestAmount,

			case when A.InstrumentTypePK in (2,13,15) and F.AccruedInterestCalculation in (3)  then G.TaxInterestAmount
					when A.InstrumentTypePK in (2,13,15) then A.Balance / 1000000 * ROUND(A.InterestPercent / 100 / B.DivDays / 
						case when A.InterestDaysType in (2) then B.DivPayment else 1 end * 1000000,0) * C.TaxDays *
											case when E.FundTypeInternal = 2 then @KPDTaxPercent/100 
													else D.TaxExpensePercent/100 end

														else A.Balance * A.InterestPercent / 100 / B.DivDays / 
															case when A.InterestDaysType in (2) then B.DivPayment else 1 end * C.TaxDays *
																	case when E.FundTypeInternal = 2 then @KPDTaxPercent/100 
																			else D.TaxExpensePercent/100 end  end  TaxAmount,F.AccruedInterestCalculation
	From #InterestPaymentBondData A  
	LEFT JOIN #InterestPaymentBondDivDays B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.AcqDate = B.AcqDate
	LEFT JOIN #TaxInterestPaymentBondDivDays C on A.FundPK = C.FundPK and A.InstrumentPK = C.InstrumentPK and A.AcqDate = C.AcqDate
	LEFT JOIN dbo.Instrument D ON A.InstrumentPK = D.InstrumentPK AND D.status IN (1,2)
	LEFT JOIN dbo.Fund E ON A.FundPK = E.FundPK AND E.status IN (1,2)
	LEFT JOIN #AccruedInterestCalculation F on A.FundPK = F.FundPK
	LEFT JOIN #InterestPaymentBondRoundedCalculation G on A.FundPK = G.FundPK and A.InstrumentPK = G.InstrumentPK and A.AcqDate = G.AcqDate
	order by Number asc

Fetch next From A                   
Into @ValueDate,@ZDateMinOne
end                  
Close A                  
Deallocate A

END


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID COLLATE DATABASE_DEFAULT,Date,'Coupon Obligasi' COLLATE DATABASE_DEFAULT Item 
,sum(isnull(InterestAmount,0) - isnull(TaxAmount,0)) Amount
,15 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.status = 2
LEFT JOIN #InterestPaymentBond B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
WHERE Date BETWEEN @Datefrom AND @Dateto 
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Coupon Obligasi' Item
,isnull(SUM(ISNULL(B.Balance,0) * case when InstrumentTypePK in (2,3,8,14,13,9,15)  then D.AvgPrice/100 else D.AvgPrice end),0) * -1 Amount
,15 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN FundPositionAdjustment B ON B.FundPK = C.FundPK and A.Date = B.Date
LEFT JOIN Instrument E ON B.InstrumentPK = E.InstrumentPK and E.status in (1,2)
LEFT JOIN FundPosition D ON B.InstrumentPK = D.InstrumentPK and B.FundPK = D.FundPK and D.status in (1,2) and D.Date = @DateMinOne
WHERE A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID





INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )

SELECT C.ID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Deposit' Item
,SUM(ISNULL(B.Balance,0)) Amount
,16 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN 
(
	SELECT A.FundPK,A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN Fund C on C.status = 2
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date <= @DateMinOne AND status = 2
	) AND A.FundPK = C.FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit Normal'
	union all
	SELECT A.FundPK,A.MaturityDate,A.Balance FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.Date = C.Date
	LEFT JOIN Fund D on D.status = 2
	WHERE A.status = 2 AND A.Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE fundPK = A.FundPK AND date <= C.Date AND status = 2
	) AND A.FundPK = D.FundPK
	AND B.InstrumentTypePK = 5 and A.Category = 'Deposit On Call' and A.Date between @DateMinOne and @dateto 
	and A.InstrumentPK not in
	(
	select A.InstrumentPK  FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto
	) 

	union all
	SELECT A.FundPK,A.MaturityDate,A.DoneAmount FROM dbo.Investment A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	LEFT JOIN dbo.ZDT_WorkingDays C ON A.ValueDate = C.Date
	WHERE A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	AND B.InstrumentTypePK = 5 and A.TrxType in (1,3) and A.ValueDate between @datefrom and @dateto
	
)B ON A.Date = B.MaturityDate  AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Penjualan Bond' Item
,SUM(ISNULL(B.TotalAmount,0)) Amount
,17 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate  AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 2
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
select Z.FundID,Z.Date,Z.Item,Z.Amount,Z.Baris
from (
SELECT C.ID FundID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Maturity Bond' Item
,SUM(ISNULL(B.Balance,0)) Amount
,18 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN 
(
	SELECT A.MaturityDate,A.Balance,A.FundPK FROM dbo.FundPosition A
	LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
	WHERE A.status = 2 AND Date =
	(
		SELECT MAX(Date) FROM dbo.FundPosition WHERE date < case when datediff(day,@DateMinOne,@DateFrom) > 1 then @DateMinOne else @DateFrom end AND status = 2
	) 
	AND B.InstrumentTypePK NOT in (1,4,5,6,16)
)B ON A.Date = B.MaturityDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN case when datediff(day,@DateMinOne,@DateFrom) > 1 then @DateMinOne else @DateFrom end AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1
) Z
where Z.Date between @DateFrom and @Dateto






INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan DOC' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,21 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit On Call'
AND B.TrxType in (1,3)
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,case when A.IsHoliday = 1 then A.DT1 else A.Date end Date,'Penempatan TD' Item
,SUM(ISNULL(B.DoneVolume,0) * -1) Amount
,22 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 5
AND B.Category = 'Deposit Normal'
AND B.TrxType in (1,3)
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID,IsHoliday,DT1


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,Date,'Pembelian Saham' Item
,SUM(ISNULL(B.TotalAmount,0))  * -1 Amount
,23 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK = 1
AND B.TrxType = 1
WHERE Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Pembelian Bond' Item
,SUM(case when D.IssueDate <> B.SettlementDate then ISNULL(B.TotalAmount,0) * -1 else 0 end) Amount
,24 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN dbo.Investment B ON A.Date = B.SettlementDate AND C.FundPK = B.FundPK
AND B.StatusInvestment <> 3 and B.StatusDealing <> 3 and B.StatusSettlement <> 3
AND B.InstrumentTypePK NOT IN (1,5,6,4,16)
AND B.TrxType = 1
LEFT JOIN Instrument D on B.InstrumentPK = D.InstrumentPK and D.status in (1,2)
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID







---------------------------------------------------------------------------------------------
CREATE TABLE #JournalPVR03
(
	FundPK INT,
	ValueDate DATETIME,
	Movement NUMERIC(22,4),
	FundJournalAccountPK int
)

CREATE CLUSTERED INDEX indx_JournalPVR03 ON #JournalPVR03 (FundPK,ValueDate,Movement,FundJournalAccountPK);

INSERT INTO #JournalPVR03
        ( 
		  FundPK ,
		  ValueDate ,
          Movement ,
          FundJournalAccountPK
        )
	SELECT B.FundPK,ValueDate,case when FundJournalAccountPK = 60 then SUM(BaseDebit - BaseCredit) else  SUM(ISNULL(B.BaseDebit,0)) end Movement,B.FundJournalAccountPK FROM FundJournal A
	LEFT JOIN FundJournalDetail B ON A.FundJournalPK = B.FundJournalPK 
	WHERE A.ValueDate BETWEEN @Datefrom AND @Dateto
	AND A.Posted = 1 AND A.Status = 2 AND A.Reversed = 0
	AND B.FundJournalAccountPK in (147,78,79,80,200,189,195,60,81)
	GROUP BY A.ValueDate,B.FundJournalAccountPK,B.FundPK



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Subscription Account' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,19 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 60 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto  
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'IPO' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,25 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 195 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto  
GROUP BY A.Date,C.ID







INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Bank Charge' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,25 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 147 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Biaya Transaksi' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,26 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 78 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'MGT Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,27 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 79 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'CSD Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,28 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 80 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'S-Invest Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,29 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 200 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Tax Expense' Item
,0 Amount
,30 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 189 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Audit Fee' Item
,SUM(ISNULL(B.Movement,0) * -1) Amount
,31 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN #JournalPVR03 B ON A.Date = B.ValueDate AND B.FundJournalAccountPK = 81 AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID



INSERT INTO #TableResultSummaryCash03	
        ( FundID,Date, Item, Amount, Baris )	
SELECT  C.ID,A.Date,'Pembagian Dividen' Item	
,SUM(ISNULL(B.CashAmount,0) * -1) Amount	
,34 Baris	
FROM dbo.ZDT_WorkingDays A	
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN DistributedIncome B ON A.Date = B.PaymentDate AND B.Status = 2 AND C.FundPK = B.FundPK 	
WHERE  A.Date BETWEEN @Datefrom AND @Dateto 	
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Subscription' Item
,SUM(ISNULL(B.Amount,0)) Amount
,35 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK, case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end NAVDate,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end BETWEEN @Datefrom AND @Dateto
	GROUP BY case when B.BitPendingSubscription = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end,B.BitPendingSubscription,A.FundPK
)B ON A.Date = B.NAVDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID




INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Redemption' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,36 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,A.PaymentDate ,SUM(ISNULL(CashAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	GROUP BY A.PaymentDate,A.FundPK
)B ON A.Date = B.PaymentDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'switching' Item
,SUM(ISNULL(B.Amount,0)) Amount
,37 Baris FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
    SELECT A.FundPK,A.Date,SUM(ISNULL(amount,0)) Amount FROM (
	SELECT FundPKTo FundPK,case when B.BitPendingSwitchIn = 0 then dbo.fworkingday(NAVDate,1) else NAVDate end Date,ISNULL(CashAmount,0) Amount FROM dbo.ClientSwitching A
	left join FundFee B on A.FundPKTo = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND case when B.BitPendingSwitchIn = 0 then dbo.fworkingday(NAVDate,1) end BETWEEN @Datefrom AND @Dateto

	UNION ALL

	SELECT FundPKFrom FundPK,A.PaymentDate  Date,ISNULL(CashAmount,0) * -1 Amount FROM dbo.ClientSwitching A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	)A

	GROUP BY A.Date,A.FundPK

)B ON A.Date = B.Date AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Subs Fee' Item
,SUM(ISNULL(B.Amount,0)) Amount
,38 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,NAVDate NAVDate,
	SUM(ISNULL(SubscriptionFeeAmount,0)) Amount FROM dbo.ClientSubscription A
	left join FundFee B on A.FundPK = B.FundPK and B.status = 2
	WHERE A.status not in (3,4) AND Revised = 0
	AND NAVDate BETWEEN @Datefrom AND @Dateto
	GROUP BY NAVDate,A.FundPK
)B ON A.Date = B.NAVDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )
SELECT C.ID,A.Date,'Redeem Fee' Item
,SUM(ISNULL(B.Amount,0) * -1) Amount
,39 Baris
FROM dbo.ZDT_WorkingDays A
LEFT JOIN Fund C ON C.Status = 2 
LEFT JOIN 
(
	SELECT A.FundPK,A.PaymentDate PaymentDate,SUM(ISNULL(RedemptionFeeAmount,0)) Amount FROM dbo.ClientRedemption A
	WHERE A.status not in (3,4) AND Revised = 0
	AND A.PaymentDate BETWEEN @Datefrom AND @Dateto
	GROUP BY A.PaymentDate,A.FundPK
)B ON A.Date = B.PaymentDate AND C.FundPK = B.FundPK
WHERE  A.Date BETWEEN @Datefrom AND @Dateto
GROUP BY A.Date,C.ID


--INSERT INTO #TableResultSummaryCash03
--        ( FundID,Date, Item, Amount, Baris )
--SELECT C.ID,A.Date,'Adjustment' Item
--,SUM(isnull(Amount,0)) Amount
--,40 Baris
--FROM dbo.ZDT_WorkingDays A
--LEFT JOIN Fund C ON C.Status = 2 
--LEFT JOIN 
--(
--	SELECT B.FundPK,A.ValueDate,SUM(BaseDebit - BaseCredit) Amount FROM dbo.FundJournal A
--	left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK
--	WHERE A.status = 2 and A.Posted = 1 and ValueDate between @datefrom and @dateto 
--	and TrxName = 'TB Reconcile' and B.FundJournalAccountPK = 3
--	GROUP BY A.ValueDate,B.FundPK
--)B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
--WHERE  A.Date BETWEEN @Datefrom AND @Dateto
--GROUP BY A.Date,C.ID


--SELECT C.ID,A.Date,'Adjustment' Item
--,SUM(isnull(Amount,0)) Amount
--,40 Baris
--FROM dbo.ZDT_WorkingDays A
--LEFT JOIN Fund C ON C.Status = 2 
--LEFT JOIN 
--(
--	SELECT B.FundPK,A.ValueDate,SUM(BaseDebit - BaseCredit) Amount FROM dbo.FundJournal A
--	left join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK
--	WHERE A.status = 2 and A.Posted = 1 and ValueDate between '10/14/2020' AND '10/16/2020'
--	and TrxName = 'TB Reconcile' and B.FundJournalAccountPK = 3
--	GROUP BY A.ValueDate,B.FundPK
--)B ON A.Date = B.ValueDate AND C.FundPK = B.FundPK
--WHERE  A.Date BETWEEN '10/14/2020' AND '10/16/2020'
--GROUP BY A.Date,C.ID 



INSERT INTO #TableResultSummaryCash03
        ( FundID,Date, Item, Amount, Baris )

select D.ID ,case when IsHoliday = 1 then DT1 else Date end Date,Item,sum(Amount) Amount,Baris
From (
	select * from #TableResultSummaryCash03Temp
) C
left join Fund D on D.status = 2 and C.FundPK = D.FundPK 
GROUP BY D.ID,Date,Item,Baris,IsHoliday,DT1




CREATE TABLE #FinalResult03SummaryCash
(
	FundID NVARCHAR(200) COLLATE DATABASE_DEFAULT,
	BegCash NUMERIC(22,4),
	Date DATETIME,
	Amount NUMERIC(22,4),
	TDonCall NUMERIC(22,4),
	TD NUMERIC(22,4)
)

CREATE CLUSTERED INDEX indx_FinalResult03SummaryCash ON #FinalResult03SummaryCash (FundID,BegCash,Date,Amount,TDonCall,TD);


INSERT INTO #FinalResult03SummaryCash
        ( FundID, BegCash, Date, Amount,TDonCall,TD )

SELECT A.FundID,B.BegCash,A.Date,SUM(ISNULL(A.Amount,0)) Amount 
,ISNULL(C.AmountTDonCall,0) TDonCall , ISNULL(C.AmountTD,0) TD
FROM #TableResultSummaryCash03 A
LEFT JOIN #TableBegCash B ON A.FundID = B.FundID
LEFT JOIN #TD C on A.FundID = C.FundID

GROUP BY A.FundID,B.BegCash,A.Date,C.AmountTDonCall,C.AmountTD





create table #BegCashPerDate 
(
Date datetime,BegCash numeric(22,4), FundID nvarchar(50)
)
		
declare @CounterDate datetime
declare @CounterDateTo datetime


set @CounterDate = dbo.FWorkingDay(@datefrom,-1)
SET @CounterDateTo = DATEADD(Day,1,@CounterDate)

while (@CounterDate < @dateto)
BEGIN

insert into #BegCashPerDate
select @CounterDateTo,
BegCash + sum(Amount),FundID from #FinalResult03SummaryCash where Date between @datefrom  and @CounterDateTo
group by BegCash,FundID

SET @CounterDate = DATEADD(Day,1,@CounterDate)
SET @CounterDateTo = DATEADD(Day,1,@CounterDate)

END




CREATE table #SaldoNAV 
(
	FundID NVARCHAR(100) ,
	BegCash NUMERIC(22,4)
)

CREATE CLUSTERED INDEX indx_SaldoNAV ON #SaldoNAV (FundID,BegCash);

INSERT INTO #SaldoNAV
        ( FundID, BegCash )

select A.FundID,sum(A.BegCash - D.Balance) from #BegCashPerDate A
left join (
	SELECT B.ID COLLATE DATABASE_DEFAULT FundID,
	ISNULL(C.Balance,0) Balance
	FROM Fund B 
	LEFT JOIN (
		 SELECT B.FundPK,
		 CASE WHEN C.Type in (1,4) then sum(B.BaseDebit-B.BaseCredit) else  sum(B.BaseCredit-B.BaseDebit) END  Balance
		 from FundJournal A 
		 LEFT join FundJournalDetail B on A.FundJournalPK = B.FundJournalPK and B.Status = 2  
		 left join FundJournalAccount C on B.FundJournalAccountPK = C.FundJournalAccountPK and C.Status = 2  
		 LEFT JOIN @TableBeginDate D ON B.FundPK = D.FundPK 
		 where A.Posted = 1 and A.Reversed = 0 and A.Status = 2  
		 and B.FundJournalAccountPK = 3 and A.ValueDate between isnull(D.BeginDate,'01/01/1900') and @datefrom
		 group By B.FundPK,C.Type  
	)C ON B.FundPK = C.FundPK
	WHERE B.status = 2
) D on A.FundID = D.FundID
where Date = @datefrom
group by A.FundID




CREATE TABLE #FinalResult03Summary
(
	FundID NVARCHAR(200),
	BegCash NUMERIC(22,4),
	Date DATETIME,
	Amount NUMERIC(22,4),
	TDonCall NUMERIC(22,4),
	TD NUMERIC(22,4),
	Selisih NUMERIC(22,4),
)


CREATE CLUSTERED INDEX indx_FinalResult03Summary ON #FinalResult03Summary (FundID,BegCash,Date,Amount,TDonCall,TD,Selisih);

insert into #FinalResult03Summary
select A.FundID,A.BegCash,A.Date,B.BegCash,A.TDonCall,A.TD,D.BegCash from #FinalResult03SummaryCash A
left join #BegCashPerDate B on A.Date = B.Date and A.FundID = B.FundID
left join Fund C on A.FundID = C.ID and C.status in (1,2)
left join #SaldoNAV D on A.FundID = D.FundID 
where C.MaturityDate >= @datefrom 





DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(Date) +',0) ' + QUOTENAME(Date) 
                    from (SELECT DISTINCT Date FROM #FinalResult03Summary) A
					order by A.Date
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


select @cols = STUFF((SELECT distinct ',' + QUOTENAME(Date) 
                    from #FinalResult03Summary
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')



set @query = 'SELECT FundID,' + @colsForQuery + ' ,TD,TDonCall,Selisih   from 
                (
                SELECT FundID,Date,BegCash,Amount,TDonCall,TD,Selisih  FROM #FinalResult03Summary A
					
			
            ) x
            pivot 
            (
                SUM(Amount)
                for Date in (' + @cols + ')
            ) p 
		
			'
exec(@query)


                            
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PortfolioSummaryCash" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PortfolioSummaryCash" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "Portfolio Summary Cash";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Portfolio Summary Cash");


                                        int incRowExcel;
                                        int incColExcel = 1;
                                        incRowExcel = 1;
                                        // ini buat header
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[1, incColExcel].Value = dr0.GetName(inc1).ToString();
                                            incColExcel++;
                                        }

                                        // ini buat isian
                                        while (dr0.Read())
                                        {
                                            incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.0000";
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                worksheet.Column(incColExcel).AutoFit(); worksheet.Cells[incRowExcel + 1, incColExcel].Value = dr0.GetValue(inc1);

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                worksheet.Cells[incRowExcel + 1, incColExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                incColExcel++;
                                            }
                                            incRowExcel++;
                                        }
                                        incRowExcel++;



                                        //worksheet.Cells[incRowExcel,incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[incRowExcel - 1, 1, incRowExcel - 1, _rowCtrp].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[1, _rowCtrp, incRowExcel - 1, _rowCtrp].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        //worksheet.Cells[1, 1, incRowExcel - 1, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;




                                        //worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.PrinterSettings.FitToWidth = 1;
                                        //worksheet.PrinterSettings.FitToHeight = 0;
                                        //worksheet.Column(incColExcel).AutoFit();
                                        //worksheet.Column(2).AutoFit();
                                        //worksheet.Column(3).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Portfolio Summary Cash";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region NAV Projection Pricing
            else if (_FundAccountingRpt.ReportName.Equals("NAV Projection Pricing"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"  
                          declare @DTM1 datetime
select @DTM1 = dbo.FWorkingDay(@date, - 1)

select FCP.Date,FCP.FundPK,FundName,sum(UnitAmount) Unit,sum(UnitAmount) * Nav AUM,
Nav,isnull(TotalSubsRed,0) SubsRed,isnull(TotalSubsRed,0)/isnull(Nav,0) AddUnit from FundClientPosition FCP

left join
(
select Date,A.FundPK FundPK,A.Nav Nav, E.Name FundName from CloseNav A
left join Fund E on A.fundPK = E.FundPK and E.Status in (1,2)
where A.FundPK = @FundPK and Date  = @DTM1 and A.status in (1,2)
) B on FCP.Date = B.Date and FCP.FundPK = B.FundPK
left join 
(
select ValueDate,FundPK, sum(CashAmount) TotalSubsRed from (
select ValueDate,FundPK,CashAmount from ClientSubscription 
where FundPK = @FundPK and ValueDate = @DTM1 and Posted = 1 and status = 2 and Revised = 0
union all
select ValueDate,FundPK,CashAmount * -1 from ClientRedemption 
where FundPK = @FundPK and ValueDate = @DTM1 and Posted = 1 and status = 2 and Revised = 0
union all
select ValueDate,FundPKTo,CashAmount from ClientSwitching 
where FundPKTo = @FundPK and ValueDate = @DTM1 and Posted = 1 and status = 2 and Revised = 0
union all
select ValueDate,FundPKFrom,CashAmount * -1 from ClientSwitching 
where FundPKFrom = @FundPK and ValueDate = @DTM1 and Posted = 1 and status = 2 and Revised = 0
) A 
group by ValueDate,FundPK
) C on FCP.Date = C.ValueDate and FCP.FundPK = C.FundPK

where FCP.FundPK = @FundPK and FCP.Date  = @DTM1
Group by FCP.Date,FCP.FundPK,Nav,TotalSubsRed,FundName
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NAVProjectionPricing" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsTemplatePath + "\\03\\" + "NAV_Projection_Pricing.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        ExcelWorksheet worksheet = package.Workbook.Worksheets["FI"];



                                        int incRowExcel = 2;
                                        int _startRowDetail = incRowExcel;
                                        //int _endRowDetail = 0;

                                        while (dr0.Read())
                                        {
                                            int incColExcel = 5;

                                            worksheet.Cells[2, 3].Value = Convert.ToDateTime(dr0["Date"]).ToString("dd/MMM/yyyy");

                                            worksheet.Cells[2, incColExcel].Value = Convert.ToDecimal(dr0["AUM"]);
                                            worksheet.Cells[2, incColExcel].Style.Numberformat.Format = "#,##0.00";
                                            //incColExcel++;
                                            worksheet.Cells[3, incColExcel].Value = Convert.ToDecimal(dr0["NAV"]);
                                            worksheet.Cells[3, incColExcel].Style.Numberformat.Format = "#,##0.0000";
                                            //incColExcel++;
                                            worksheet.Cells[4, incColExcel].Value = Convert.ToDecimal(dr0["SubsRed"]);
                                            worksheet.Cells[4, incColExcel].Style.Numberformat.Format = "#,##0.00";
                                            //incColExcel++;
                                            worksheet.Cells[5, incColExcel].Value = Convert.ToDecimal(dr0["Unit"]);
                                            worksheet.Cells[5, incColExcel].Style.Numberformat.Format = "#,##0.0000";
                                            //incColExcel++;
                                            worksheet.Cells[6, incColExcel].Value = Convert.ToDecimal(dr0["AddUnit"]);
                                            worksheet.Cells[6, incColExcel].Style.Numberformat.Format = "#,##0.0000";

                                            worksheet.Cells[12, 2].Value = "Portfolio" + " " + Convert.ToString(dr0["FundName"]);
                                            worksheet.Cells[12, 2].Style.Font.Bold = true;
                                            worksheet.Cells[12, 2].Style.Font.UnderLine = true;

                                            //incRowExcel++;

                                        }



                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText = @"
declare @DTM1 datetime
select @DTM1 = dbo.FWorkingDay(@Date,-1)

Declare @CouponDate table
(
InstrumentPK int,
PrevCouponDate datetime,
LastCouponDate datetime
)

insert into @CouponDate
select A.InstrumentPK,dbo.FgetLastCouponDate(Date,A.InstrumentPK),dbo.Fgetnextcoupondate(Date,A.InstrumentPK)
from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
where FundPK = @FundPk and A.status in (1,2) and Date = @DTM1 and InstrumentTypePK not in (1,4,5,6,16)


select 'B' Type,A.InstrumentID Bond,A.InterestPercent CouponRatePercent,sum(Balance) NominalIDR,
isnull(CPYesterday,0) CPYesterday,isnull(CPToday,0) CPToday,sum(dbo.[FGetBondInterestAccrued](A.Date,A.InstrumentPK,Balance)) DailyAccruedIDR,
isnull(LowCP,0) Low,isnull(HighCP,0) High,A.MaturityDate,E.PrevCouponDate,E.LastCouponDate from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
left join 
(
select Date,InstrumentPK,ClosePriceValue CPYesterday from ClosePrice where Date = @DTM1 and status in (1,2)
) C on A.InstrumentPK = C.InstrumentPK
left join 
(
select Date,InstrumentPK,ClosePriceValue CPToday,LowPriceValue LowCP,HighPriceValue HighCP from ClosePrice where Date = @Date and status in (1,2)
) D on A.InstrumentPK = D.InstrumentPK
left join @CouponDate E on A.InstrumentPK = E.InstrumentPK
where B.InstrumentTypePK not in (1,4,5,6,16) and FundPK = @FundPK and A.Status in (1,2) and A.Date = @DTM1
Group by A.InstrumentID,A.InterestPercent,C.CPYesterday,D.CPToday,D.LowCP,D.HighCP,A.MaturityDate,E.PrevCouponDate,E.LastCouponDate  
                                                   ";
                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);
                                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                    using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                    {
                                                        //ExcelWorksheet worksheet = package1.Workbook.Worksheets[1];



                                                        int incRowExcel1 = 17;
                                                        int _startRowDetail1 = incRowExcel1;
                                                        int _endRowDetail1 = 0;
                                                        int _no = 1;

                                                        while (dr1.Read())
                                                        {
                                                            int incColExcel = 1;

                                                            //worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            //worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            //worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            //worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = _no;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToString(dr1["Type"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToString(dr1["Bond"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["CouponRatePercent"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["NominalIDR"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["CPYesterday"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["CPToday"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["DailyAccruedIDR"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            //incColExcel = incColExcel + 6;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["Low"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            //incColExcel = incColExcel + 2;                                                            
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDecimal(dr1["High"]);
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDateTime(dr1["MaturityDate"]).ToString("dd/MMM/yyyy");
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDateTime(dr1["PrevCouponDate"]).ToString("dd/MMM/yyyy");
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            incColExcel++;
                                                            worksheet.Cells[incRowExcel1, incColExcel].Value = Convert.ToDateTime(dr1["LastCouponDate"]).ToString("dd/MMM/yyyy");
                                                            worksheet.Cells[incRowExcel1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                            _no++;
                                                            _endRowDetail1 = incRowExcel1;
                                                            incRowExcel1++;


                                                        }
                                                        worksheet.Cells[incRowExcel1, 1, incRowExcel1, 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel1, 1, incRowExcel1, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel1, 1, incRowExcel1, 19].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel1, 2].Value = "TOTAL";
                                                        worksheet.Cells[incRowExcel1, 5].Formula = "SUM(E" + _startRowDetail1 + ":E" + _endRowDetail1 + ")";
                                                        worksheet.Cells[incRowExcel1, 8].Formula = "SUM(H" + _startRowDetail1 + ":H" + _endRowDetail1 + ")";
                                                        worksheet.Cells[incRowExcel1, 9].Formula = "SUM(I" + _startRowDetail1 + ":I" + _endRowDetail1 + ")";
                                                        worksheet.Cells[incRowExcel1, 10].Formula = "SUM(J" + _startRowDetail1 + ":J" + _endRowDetail1 + ")";
                                                        worksheet.Cells[incRowExcel1, 11].Formula = "SUM(K" + _startRowDetail1 + ":K" + _endRowDetail1 + ")";
                                                        worksheet.Cells["E" + incRowExcel1 + ":E" + incRowExcel1].Calculate();
                                                        worksheet.Cells["H" + incRowExcel1 + ":H" + incRowExcel1].Calculate();
                                                        worksheet.Cells["I" + incRowExcel1 + ":I" + incRowExcel1].Calculate();
                                                        worksheet.Cells["J" + incRowExcel1 + ":J" + incRowExcel1].Calculate();
                                                        worksheet.Cells["K" + incRowExcel1 + ":K" + incRowExcel1].Calculate();

                                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                        {
                                                            DbCon2.Open();
                                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                            {


                                                                cmd2.CommandText = @"  
                                                                    select 'D' Type,isnull(A.InstrumentID,'') Name,isnull(A.Category,'') Category,isnull(A.InterestPercent,0) CouponRatePercent,sum(isnull(Balance,0)) NominalIDR,
                                                                    A.AcqDate Placement,A.MaturityDate,0 BreakRate,100 CPYesterday,100 CPToday,
                                                                    SUM(ISNULL(A.Balance * A.InterestPercent / 100 /
                                                                    CASE WHEN B.InterestDaysType = 4 then 365 ELSE 360 END,0)) DailyAccruedIDR from FundPosition A
                                                                    left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
                                                                    where B.InstrumentTypePK  in (5) and FundPK = @FundPK and A.Status in (1,2) and A.Date = @Date
                                                                    Group by A.InstrumentID,A.Category,A.InterestPercent,A.AcqDate,A.MaturityDate
                                                                       ";
                                                                cmd2.CommandTimeout = 0;
                                                                cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);
                                                                cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);

                                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                                {

                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                    using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                                    {
                                                                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets["TD"];



                                                                        int incRowExcel2 = 3;
                                                                        int _startRowDetail2 = incRowExcel2;
                                                                        int _endRowDetail2 = 0;

                                                                        while (dr2.Read())
                                                                        {
                                                                            int incColExcel = 1;

                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToString(dr2["Type"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToString(dr2["Name"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToString(dr2["Category"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["CouponRatePercent"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["NominalIDR"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDateTime(dr2["Placement"]).ToString("dd/MMM/yyyy");
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDateTime(dr2["MaturityDate"]).ToString("dd/MMM/yyyy");
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["BreakRate"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["CPYesterday"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["CPToday"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                            incColExcel++;
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Value = Convert.ToDecimal(dr2["DailyAccruedIDR"]);
                                                                            worksheet2.Cells[incRowExcel2, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                            _endRowDetail2 = incRowExcel2;
                                                                            incRowExcel2++;


                                                                        }

                                                                        worksheet2.Cells[incRowExcel2, 1, incRowExcel2, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                        worksheet2.Cells[incRowExcel2, 1, incRowExcel2, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                        worksheet2.Cells[incRowExcel2, 1, incRowExcel2, 19].Style.Font.Bold = true;
                                                                        worksheet2.Cells[incRowExcel2, 2].Value = "TOTAL";
                                                                        worksheet2.Cells[incRowExcel2, 5].Formula = "SUM(E" + _startRowDetail2 + ":E" + _endRowDetail2 + ")";
                                                                        worksheet2.Cells[incRowExcel2, 11].Formula = "SUM(K" + _startRowDetail2 + ":K" + _endRowDetail2 + ")";
                                                                        worksheet2.Cells["E" + incRowExcel2 + ":E" + incRowExcel2].Calculate();
                                                                        worksheet2.Cells["K" + incRowExcel2 + ":K" + incRowExcel2].Calculate();

                                                                        using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                                                        {
                                                                            DbCon3.Open();
                                                                            using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                                                            {


                                                                                cmd3.CommandText = @"  
                                                                                declare @DTM1 datetime
                                                                                select @DTM1 = dbo.FWorkingDay(@Date,-1)


                                                                                select A.InstrumentID Saham, B.Name Name,Balance/100 Lot,AvgPrice CostPrice,
                                                                                CPYesterday,CPToday,Balance * CPYesterday MVYesterday, Balance * CPToday MVToday from FundPosition A
                                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
                                                                                left join 
                                                                                (
                                                                                select Date,InstrumentPK,ClosePriceValue CPYesterday from ClosePrice where Date = @DTM1 and status in (1,2)
                                                                                ) C on A.InstrumentPK = C.InstrumentPK
                                                                                left join 
                                                                                (
                                                                                select Date,InstrumentPK,ClosePriceValue CPToday,LowPriceValue LowCP,HighPriceValue HighCP from ClosePrice where Date = @Date and status in (1,2)
                                                                                ) D on A.InstrumentPK = D.InstrumentPK
                                                                                where B.InstrumentTypePK in (1,4,16) and FundPK = @FundPK and A.Status in (1,2) and A.Date = @Date
                                                                                Group by A.InstrumentID,B.Name,A.Balance,A.AvgPrice,C.CPYesterday,D.CPToday
                                                                                                     ";
                                                                                cmd3.CommandTimeout = 0;
                                                                                cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);
                                                                                cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);

                                                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                                                {

                                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                                    using (ExcelPackage package3 = new ExcelPackage(excelFile))
                                                                                    {
                                                                                        ExcelWorksheet worksheet3 = package.Workbook.Worksheets["EQ"];



                                                                                        int incRowExcel3 = 3;
                                                                                        int _startRowDetail3 = incRowExcel3;

                                                                                        int _endRowDetail3 = 0;

                                                                                        while (dr3.Read())
                                                                                        {
                                                                                            int incColExcel = 1;


                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToString(dr3["Saham"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToString(dr3["Name"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToDecimal(dr3["Lot"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToDecimal(dr3["CostPrice"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToDecimal(dr3["CPYesterday"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToDecimal(dr3["CPToday"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToDecimal(dr3["MVYesterday"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                            incColExcel++;
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Value = Convert.ToDecimal(dr3["MVToday"]);
                                                                                            worksheet3.Cells[incRowExcel3, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                                            //worksheet.Row(incRowExcel3).Height = 38;


                                                                                            _endRowDetail3 = incRowExcel3 - 1;

                                                                                            incRowExcel3++;



                                                                                        }

                                                                                        worksheet3.Cells[incRowExcel3, 1, incRowExcel3, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet3.Cells[incRowExcel3, 1, incRowExcel3, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                                        worksheet3.Cells[incRowExcel3, 1, incRowExcel3, 11].Style.Font.Bold = true;
                                                                                        worksheet3.Cells[incRowExcel3, 2].Value = "TOTAL";
                                                                                        worksheet3.Cells[incRowExcel3, 4].Formula = "SUM(D" + _startRowDetail3 + ":D" + _endRowDetail3 + ")";
                                                                                        worksheet3.Cells[incRowExcel3, 7].Formula = "SUM(G" + _startRowDetail3 + ":G" + _endRowDetail3 + ")";
                                                                                        worksheet3.Cells[incRowExcel3, 8].Formula = "SUM(H" + _startRowDetail3 + ":H" + _endRowDetail3 + ")";
                                                                                        worksheet3.Cells[incRowExcel3, 11].Formula = "SUM(K" + _startRowDetail3 + ":K" + _endRowDetail3 + ")";
                                                                                        worksheet3.Cells["D" + incRowExcel3 + ":D" + incRowExcel3].Calculate();
                                                                                        worksheet3.Cells["G" + incRowExcel3 + ":G" + incRowExcel3].Calculate();
                                                                                        worksheet3.Cells["H" + incRowExcel3 + ":H" + incRowExcel3].Calculate();
                                                                                        worksheet3.Cells["K" + incRowExcel3 + ":K" + incRowExcel3].Calculate();

                                                                                        using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                                                                        {
                                                                                            DbCon4.Open();
                                                                                            using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                                                                            {


                                                                                                cmd4.CommandText = @"  
                                                                                declare @DTM1 datetime
                                                                                select @DTM1 = dbo.FWorkingDay(@Date,-1)

                                                                                Declare @CouponDate table
                                                                                (
                                                                                InstrumentPK int,
                                                                                PrevCouponDate datetime,
                                                                                LastCouponDate datetime
                                                                                )

                                                                                insert into @CouponDate
                                                                                select A.InstrumentPK,dbo.FgetLastCouponDate(Date,A.InstrumentPK),dbo.Fgetnextcoupondate(Date,A.InstrumentPK)
                                                                                from FundPosition A
                                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
                                                                                where FundPK = @FundPk and A.status in (1,2) and Date = @DTM1 and InstrumentTypePK not in (1,4,5,6,16)

                                                                                select TrxTypeID,ValueDate,SettlementDate,B.ID InstrumentID,DoneVolume,AcqPrice,DonePrice,CPYesterday,CPToday,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount,
                                                                                A.DoneAccruedInterest DoneAccruedInterest,A.InterestPercent,E.PrevCouponDate,E.LastCouponDate,B.BondRating from Investment A
                                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2) 
                                                                                left join 
                                                                                (
                                                                                select Date,InstrumentPK,ClosePriceValue CPYesterday from ClosePrice where Date = @DTM1 and status in (1,2)
                                                                                ) C on A.InstrumentPK = C.InstrumentPK
                                                                                left join 
                                                                                (
                                                                                select Date,InstrumentPK,ClosePriceValue CPToday,LowPriceValue LowCP,HighPriceValue HighCP from ClosePrice where Date = @Date and status in (1,2)
                                                                                ) D on A.InstrumentPK = D.InstrumentPK
                                                                                left join @CouponDate E on A.InstrumentPK = E.InstrumentPK
                                                                                where ValueDate = @Date and A.InstrumentTypePK not in (1,4,5,6,16) and StatusSettlement in (1,2) and FundPK = @FundPK
                                                                                Group by TrxTypeID,ValueDate,SettlementDate,B.ID,DoneVolume,AcqPrice,DonePrice,C.CPYesterday,D.CPToday,A.IncomeTaxInterestAmount,A.IncomeTaxGainAmount,
                                                                                A.DoneAccruedInterest,A.InterestPercent,E.PrevCouponDate,E.LastCouponDate,B.BondRating
                                                                                                     ";
                                                                                                cmd4.CommandTimeout = 0;
                                                                                                cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundFrom);
                                                                                                cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);

                                                                                                using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                                                                                {

                                                                                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                                                                    using (ExcelPackage package4 = new ExcelPackage(excelFile))
                                                                                                    {
                                                                                                        ExcelWorksheet worksheet4 = package.Workbook.Worksheets["Transaction"];



                                                                                                        int incRowExcel4 = 6;
                                                                                                        int _startRowDetail4 = incRowExcel4;

                                                                                                        int _endRowDetail4 = 0;

                                                                                                        while (dr4.Read())
                                                                                                        {
                                                                                                            int incColExcel = 1;


                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToString(dr4["TrxTypeID"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDateTime(dr4["ValueDate"]).ToString("dd/MMM/yyyy");
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDateTime(dr4["SettlementDate"]).ToString("dd/MMM/yyyy");
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToString(dr4["InstrumentID"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["DoneVolume"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["AcqPrice"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["DonePrice"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["CPYesterday"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["CPToday"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["IncomeTaxInterestAmount"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["IncomeTaxGainAmount"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["DoneAccruedInterest"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDecimal(dr4["InterestPercent"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDateTime(dr4["PrevCouponDate"]).ToString("dd/MMM/yyyy");
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToDateTime(dr4["LastCouponDate"]).ToString("dd/MMM/yyyy");
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                                            incColExcel++;
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Value = Convert.ToString(dr4["BondRating"]);
                                                                                                            worksheet4.Cells[incRowExcel4, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                                                                            _endRowDetail4 = incRowExcel4;

                                                                                                            incRowExcel4++;



                                                                                                        }

                                                                                                        worksheet4.Cells[incRowExcel4, 1, incRowExcel4, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                                                        worksheet4.Cells[incRowExcel4, 1, incRowExcel4, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                                                                                        worksheet4.Cells[incRowExcel4, 1, incRowExcel4, 16].Style.Font.Bold = true;
                                                                                                        worksheet4.Cells[incRowExcel4, 2].Value = "TOTAL";
                                                                                                        worksheet4.Cells[incRowExcel4, 5].Formula = "SUM(E" + _startRowDetail4 + ":E" + _endRowDetail4 + ")";
                                                                                                        worksheet4.Cells[incRowExcel4, 10].Formula = "SUM(J" + _startRowDetail4 + ":J" + _endRowDetail4 + ")";
                                                                                                        worksheet4.Cells[incRowExcel4, 11].Formula = "SUM(K" + _startRowDetail4 + ":K" + _endRowDetail4 + ")";
                                                                                                        worksheet4.Cells[incRowExcel4, 12].Formula = "SUM(L" + _startRowDetail4 + ":L" + _endRowDetail4 + ")";
                                                                                                        worksheet4.Cells["E" + incRowExcel4 + ":E" + incRowExcel4].Calculate();
                                                                                                        worksheet4.Cells["J" + incRowExcel4 + ":J" + incRowExcel4].Calculate();
                                                                                                        worksheet4.Cells["K" + incRowExcel4 + ":K" + incRowExcel4].Calculate();
                                                                                                        worksheet4.Cells["L" + incRowExcel4 + ":L" + incRowExcel4].Calculate();


                                                                                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                                                                        //worksheet.Cells["A1:Z1"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                                                                                        //worksheet.Cells["K2:Z2"].AutoFitColumns(); // CEK DARI ENTRY ID SAMPE LAST UPDATE
                                                                                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                                                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 ";

                                                                                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                                                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                                                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                                                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                                                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                                                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                                                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                                                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                                                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                                                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                                                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                                                                        package.Save();
                                                                                                        return true;
                                                                                                    }

                                                                                                    //}
                                                                                                }

                                                                                            }

                                                                                        }
                                                                                    }

                                                                                    //}
                                                                                }

                                                                            }

                                                                        }
                                                                    }

                                                                    //}
                                                                }

                                                            }

                                                        }
                                                    }

                                                    //}
                                                }

                                            }

                                        }
                                    }

                                }
                            }

                        }

                    }


                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }

            #endregion

            #region Fifo Bond Position
            if (_FundAccountingRpt.ReportName.Equals("Fifo Bond Position"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "where A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
                            select B.ID FundName,C.ID Instrument,AcqDate,AcqPrice,sum(A.RemaningVolume) Volume from (
                            select FundPK,InstrumentPK,AcqDate,AcqPrice,case when Remainingvolume is null then AcqVolume else RemainingVolume end RemaningVolume from FiFoBondPosition where (RemainingVolume is null and InvestmentPK = 0) or RemainingVolume != 0
                            union all
                            select FundPK,InstrumentPK,AcqDate,AcqPrice,RemainingVolume from FifoBondPositionTemp where RemainingVolume != 0
                            ) A 
                            left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2) " + _paramFundFrom + @"
                            group by B.ID,C.ID,AcqDate,AcqPrice
                            ";

                            cmd.CommandTimeout = 0;

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FifoBondPosition" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FifoBondPosition" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fifo Bond Position");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FifoBondPosition> rList = new List<FifoBondPosition>();
                                        while (dr0.Read())
                                        {

                                            FifoBondPosition rSingle = new FifoBondPosition();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Instrument = Convert.ToString(dr0["Instrument"]);
                                            rSingle.Volume = Convert.ToDecimal(dr0["Volume"]);
                                            rSingle.AcqPrice = Convert.ToDecimal(dr0["AcqPrice"]);
                                            rSingle.AcqDate = Convert.ToDateTime(dr0["AcqDate"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.FundName } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;











                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;

                                            incRowExcel = incRowExcel + 2; ;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Instrument";
                                            worksheet.Cells[incRowExcel, 3].Value = "Volume";
                                            worksheet.Cells[incRowExcel, 4].Value = "Acq Price";
                                            worksheet.Cells[incRowExcel, 5].Value = "Acq Date";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Instrument;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Volume;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AcqPrice;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.AcqDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                            }



                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 26;
                                        worksheet.Column(3).Width = 26;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 26;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Fifo Bond Position";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            //#region CSR Report
            //else if (_FundAccountingRpt.ReportName.Equals("CSR Report"))
            //{
            //    try
            //    {
            //        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
            //        {
            //            DbCon.Open();
            //            using (SqlCommand cmd = DbCon.CreateCommand())
            //            {

            //                string _paramFund = "";
            //                string _paramAgent = "";

            //                if (!_host.findString(_FundAccountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.AgentFrom))
            //                {
            //                    _paramAgent = " And A.AgentPK in ( " + _FundAccountingRpt.AgentFrom + " ) ";
            //                }
            //                else
            //                {
            //                    _paramAgent = "";
            //                }
            //                if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
            //                {
            //                    _paramFund = " And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
            //                }
            //                else
            //                {
            //                    _paramFund = "";
            //                }

            //                cmd.CommandText =
            //                    @"

            //                Select A.FeeType,A.AgentPK,A.FundPK,C.Name FundName, B.ID CSRName,A.MFeePercent ManagementFeeRate, B.AgentFee CSRFee, E.DescOne ManagementFeeType,
            //                case when A.FeeType = 1 then 'Management Fee' else 'AUM' end SharingFeeType,F.ID Currency,
            //                A.Date,A.NAV,unit,AUM,MFee,
            //                Case when A.FeeType = 1 then A.MFee * B.AgentFee else A.AUM * B.AgentFee/100/A.mfeeDays end GrossShare,
            //                0.02 Pph23, 0 NetFeePercent
            //                From AgentCSRDataForCommissionRpt A
            //                left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
            //                left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
            //                --left join FundFeeSetup D on A.FundPK = D.FundPK and D.status in (1,2)
            //                left join MasterValue E ON A.FeeType = E.Code AND E.ID = 'FundFeeType' AND E.status in (1,2)
            //                left join Currency F on C.CurrencyPK = F.CurrencyPK and F.status in (1,2)
            //                Where A.Date between @Datefrom and @DateTo " + _paramFund + _paramAgent + @"
            //                order by A.FeeType,A.Date
            //                ";
            //                cmd.CommandTimeout = 0;
            //                cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
            //                cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


            //                using (SqlDataReader dr0 = cmd.ExecuteReader())
            //                {
            //                    if (!dr0.HasRows)
            //                    {
            //                        return false;
            //                    }
            //                    else
            //                    {
            //                        string filePath = Tools.ReportsPath + "CSRReport" + "_" + _userID + ".xlsx";
            //                        string pdfPath = Tools.ReportsPath + "CSRReport" + "_" + _userID + ".pdf";
            //                        FileInfo excelFile = new FileInfo(filePath);
            //                        if (excelFile.Exists)
            //                        {
            //                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
            //                            excelFile = new FileInfo(filePath);
            //                        }


            //                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
            //                        using (ExcelPackage package = new ExcelPackage(excelFile))
            //                        {
            //                            package.Workbook.Properties.Title = "FundAccountingReport";
            //                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
            //                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
            //                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
            //                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
            //                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

            //                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CSR Report");

            //                            int incRowExcel = 1;


            //                            //ATUR DATA GROUPINGNYA DULU
            //                            List<CSRFeeReport> rList = new List<CSRFeeReport>();
            //                            while (dr0.Read())
            //                            {
            //                                CSRFeeReport rSingle = new CSRFeeReport();
            //                                rSingle.FeeType = Convert.ToInt32(dr0["FeeType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["FeeType"]));
            //                                rSingle.AgentPK = Convert.ToInt32(dr0["AgentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["AgentPK"]));
            //                                rSingle.FundPK = Convert.ToInt32(dr0["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["FundPK"]));
            //                                rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
            //                                rSingle.CSRName = Convert.ToString(dr0["CSRName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CSRName"]));
            //                                rSingle.ManagementFeeRate = Convert.ToDecimal(dr0["ManagementFeeRate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFeeRate"]));
            //                                rSingle.CSRFee = Convert.ToDecimal(dr0["CSRFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CSRFee"]));
            //                                rSingle.ManagementFeeType = Convert.ToString(dr0["ManagementFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ManagementFeeType"]));
            //                                rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));
            //                                rSingle.Currency = Convert.ToString(dr0["Currency"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency"]));
            //                                rSingle.Date = Convert.ToString(dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]));
            //                                rSingle.NAV = Convert.ToDecimal(dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]));
            //                                rSingle.unit = Convert.ToDecimal(dr0["unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["unit"]));
            //                                rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
            //                                rSingle.MFee = Convert.ToDecimal(dr0["MFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFee"]));
            //                                rSingle.GrossShare = Convert.ToDecimal(dr0["GrossShare"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["GrossShare"]));
            //                                rSingle.Pph23 = Convert.ToDecimal(dr0["Pph23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Pph23"]));

            //                                rList.Add(rSingle);

            //                            }

            //                            var QueryBySales =
            //                             from r in rList
            //                             orderby r.FeeType, r.FundName ascending
            //                             group r by new { r.FeeType, r.FundName, r.CSRName, r.ManagementFeeRate, r.CSRFee, r.ManagementFeeType, r.SharingFeeType, r.Currency } into rGroup
            //                             select rGroup;

            //                            foreach (var rsHeader in QueryBySales)
            //                            {

            //                                worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

            //                                incRowExcel++;
            //                                worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

            //                                worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
            //                                worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "CSR Name";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CSRName;

            //                                worksheet.Cells[incRowExcel, 6].Value = _host.Get_CompanyAddress();
            //                                worksheet.Cells[incRowExcel, 6].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
            //                                worksheet.Cells[incRowExcel, 6, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeeRate + "%";
            //                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //                                worksheet.Cells[incRowExcel, 7].Value = "(6221) 2783 0889";
            //                                worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "CSR Fee";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CSRFee + "%";
            //                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //                                worksheet.Cells[incRowExcel, 7].Value = "(6221) 2970 7333";
            //                                worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Merge = true;
            //                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                string _cellSharingFee = "C" + incRowExcel;


            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeeType;

            //                                incRowExcel++;

            //                                worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

            //                                incRowExcel++;


            //                                worksheet.Cells[incRowExcel, 1].Value = "Currency";
            //                                worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
            //                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
            //                                worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

            //                                incRowExcel++;

            //                                incRowExcel = incRowExcel + 2;
            //                                int RowB = incRowExcel;
            //                                int RowG = incRowExcel + 1;

            //                                if (rsHeader.Key.FeeType == 1)
            //                                {

            //                                    worksheet.Cells[incRowExcel, 1].Value = "Date.";
            //                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
            //                                    worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 3].Value = "UNIT";
            //                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
            //                                    worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 4].Value = "AUM";
            //                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
            //                                    worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 5].Value = "Management Fee (" + rsHeader.Key.ManagementFeeRate + ")";
            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 6].Value = "Gross Fee Share (" + rsHeader.Key.CSRFee + ")";
            //                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
            //                                    worksheet.Cells["F" + incRowExcel + ":F" + RowG].Merge = true;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 7].Value = "PPH 23 (2%)";
            //                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
            //                                    worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            //                                    worksheet.Cells[incRowExcel, 8].Value = "Net FeeShare(0.5)";
            //                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
            //                                    worksheet.Cells["H" + incRowExcel + ":H" + RowG].Merge = true;
            //                                    worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    incRowExcel++;
            //                                    worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

            //                                }
            //                                else
            //                                {

            //                                    worksheet.Cells[incRowExcel, 1].Value = "Date.";
            //                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
            //                                    worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 3].Value = "UNIT";
            //                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
            //                                    worksheet.Cells["C" + incRowExcel + ":C" + RowG].Merge = true;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 4].Value = "AUM";
            //                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
            //                                    worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 5].Value = "Gross Fee Share (" + rsHeader.Key.CSRFee + ")";
            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 6].Value = "PPH 23 (2%)";
            //                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
            //                                    worksheet.Cells["F" + incRowExcel + ":F" + RowG].Merge = true;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    worksheet.Cells[incRowExcel, 7].Value = "Net FeeShare(0.5)";
            //                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
            //                                    worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            //                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            //                                    incRowExcel++;
            //                                    worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells["A" + RowB + ":G" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;


            //                                }


            //                                incRowExcel++;
            //                                int StartRow = incRowExcel;
            //                                foreach (var rsDetail in rsHeader)
            //                                {
            //                                    int RowC = incRowExcel;
            //                                    int RowD = incRowExcel;
            //                                    int RowE = incRowExcel + 1;

            //                                    if (rsHeader.Key.FeeType == 1)
            //                                    {
            //                                        worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                        worksheet.Cells["A" + RowD + ":H" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


            //                                        worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
            //                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.NAV;
            //                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.unit;
            //                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
            //                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(" + rsDetail.MFee + "/" + 1.1 + ")";
            //                                        worksheet.Cells[incRowExcel, 5].Calculate();
            //                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(" + rsDetail.GrossShare + "/" + 1.1 + ")";
            //                                        worksheet.Cells[incRowExcel, 6].Calculate();
            //                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(F" + incRowExcel + "*" + rsDetail.Pph23 + ")";
            //                                        worksheet.Cells[incRowExcel, 7].Calculate();
            //                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(F" + incRowExcel + "-G" + incRowExcel + ")";
            //                                        worksheet.Cells[incRowExcel, 8].Calculate();
            //                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

            //                                        incRowExcel++;
            //                                    }
            //                                    else
            //                                    {
            //                                        worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
            //                                        worksheet.Cells["A" + RowD + ":G" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


            //                                        worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
            //                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.NAV;
            //                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.unit;
            //                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
            //                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
            //                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(" + rsDetail.GrossShare + "/" + 1.1 + ")";
            //                                        worksheet.Cells[incRowExcel, 5].Calculate();
            //                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(E" + incRowExcel + "*" + rsDetail.Pph23 + ")";
            //                                        worksheet.Cells[incRowExcel, 6].Calculate();
            //                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
            //                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(E" + incRowExcel + "-F" + incRowExcel + ")";
            //                                        worksheet.Cells[incRowExcel, 7].Calculate();
            //                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

            //                                        incRowExcel++;
            //                                    }


            //                                }


            //                                int RowH = incRowExcel;
            //                                int EndRow = RowH - 1;

            //                                if (rsHeader.Key.FeeType == 1)
            //                                {
            //                                    worksheet.Cells["A" + RowH + ":H" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells[incRowExcel, 2].Value = "Total :";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                    worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
            //                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";
            //                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + StartRow + ":H" + EndRow + ")";

            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

            //                                    worksheet.Cells[incRowExcel, 5].Calculate();
            //                                    worksheet.Cells[incRowExcel, 6].Calculate();
            //                                    worksheet.Cells[incRowExcel, 8].Calculate();

            //                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
            //                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
            //                                    //worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
            //                                    //incRowExcel = incRowExcel + 3;
            //                                }
            //                                else
            //                                {
            //                                    worksheet.Cells["A" + RowH + ":G" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
            //                                    worksheet.Cells[incRowExcel, 2].Value = "Total :";
            //                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

            //                                    worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
            //                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + StartRow + ":G" + EndRow + ")";

            //                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
            //                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

            //                                    worksheet.Cells[incRowExcel, 5].Calculate();
            //                                    worksheet.Cells[incRowExcel, 7].Calculate();

            //                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
            //                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

            //                                }

            //                                worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
            //                                incRowExcel = incRowExcel + 3;

            //                            }

            //                            worksheet.PrinterSettings.FitToPage = true;
            //                            worksheet.PrinterSettings.FitToWidth = 1;
            //                            worksheet.PrinterSettings.FitToHeight = 0;
            //                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
            //                            worksheet.Column(1).Width = 15;
            //                            worksheet.Column(2).Width = 20;
            //                            worksheet.Column(3).Width = 20;
            //                            worksheet.Column(4).Width = 20;
            //                            worksheet.Column(5).Width = 28;
            //                            worksheet.Column(6).Width = 23;
            //                            worksheet.Column(7).Width = 20;
            //                            worksheet.Column(8).Width = 20;

            //                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
            //                            //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
            //                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
            //                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

            //                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
            //                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
            //                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
            //                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
            //                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
            //                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
            //                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
            //                            Image img = Image.FromFile(Tools.ReportImage);
            //                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

            //                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
            //                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

            //                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
            //                            worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

            //                            package.Save();
            //                            //Tools.ExportFromExcelToPDF(filePath, pdfPath);
            //                            return true;
            //                        }
            //                    }
            //                }
            //            }
            //        }
            //    }
            //    catch (Exception err)
            //    {
            //        throw err;
            //    }
            //}

            //#endregion

            #region Daily Deal Board
            if (_FundAccountingRpt.ReportName.Equals("Daily Deal Board"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramBank = "";

                            if (!_host.findString(_FundAccountingRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.BankFrom))
                            {
                                _paramBank = "And A.BankPK in ( " + _FundAccountingRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBank = "";
                            }

                            // FUND
                            cmd.CommandText = @"
                            
                            select distinct A.BankPK from Bank A where A.BankPK in
                            (
	                            select BankPK from BankBranch where BankBranchPK in
	                            (
		                            select BankBranchPK from Fund where status in (1,2) and MaturityDate >= @Date
	                            ) and status in (1,2)
                            ) and A.status in (1,2)
                            " + _paramBank;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {

                                if (dr0.HasRows)
                                {

                                    string filePath = Tools.ReportsPath + "DailyDealBoard" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyDealBoard" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Deal Board");



                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyDealBoard03> rList = new List<DailyDealBoard03>();
                                        while (dr0.Read())
                                        {
                                            DailyDealBoard03 rSingle = new DailyDealBoard03();
                                            rSingle.BankPK = Convert.ToString(dr0["BankPK"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByFund =
                                        from r in rList
                                        orderby r.BankPK ascending
                                        group r by new { r.BankPK } into rGroup
                                        select rGroup;

                                        int incRowExcel = 1;
                                        //int _colCurrency = 0;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;

                                        foreach (var rsHeader in GroupByFund)
                                        {




                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =


                                                   @"   
                                                    
                                                   
DECLARE @table TABLE
(
	BankID nvarchar(50),
	TransactionType nvarchar(50),
	Baris INT,
	TotalSent INT,
	DetailTrx NVARCHAR(2000)
)

DECLARE @TotalTrxFund TABLE
(
	FundID nvarchar(50),
	TotalInvestment INT
)

declare @MaturityToRollover table
(
FundPK int,
BankBranchPK int,
InterestDaysType int,
InterestPaymentType int,
InterestDays int,
AcqDate datetime
)
insert into @MaturityToRollover(FundPK,BankBranchPK,InterestDaysType,InterestPaymentType,InterestDays,AcqDate)
select A.FundPK,A.BankBranchPK,A.InterestDaysType,A.InterestPaymentType,InterestDays,A.AcqDate FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 3
AND D.BankPK = @BankPK


DECLARE @DetailTrx NVARCHAR(1000)
SET @DetailTrx = ''

DECLARE @totalTrx INT
SET @totalTrx = 0


-- EQUITY BUY
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16) AND TrxType = 1
AND D.BankPK = @BankPK


Insert into @TotalTrxFund
SELECT B.ID,COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16) AND TrxType = 1
AND D.BankPK = @BankPK
Group by B.ID


SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'EQUITY BUY',1,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2



SET @DetailTrx = ''
SET @totalTrx = 0


-- EQUITY SELL
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16) AND TrxType = 2
AND D.BankPK = @BankPK


delete @TotalTrxFund

Insert into @TotalTrxFund
SELECT B.ID,COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (1,4,16) AND TrxType = 2
AND D.BankPK = @BankPK
Group by B.ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'EQUITY SELL',2,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2


--------------------------------------------------------------------------

SET @DetailTrx = ''
SET @totalTrx = 0


-- BOND BUY
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,8,9,11,13,14,15) AND TrxType = 1
AND D.BankPK = @BankPK

delete @TotalTrxFund

Insert into @TotalTrxFund
SELECT B.ID,COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,8,9,11,13,14,15) AND TrxType = 1
AND D.BankPK = @BankPK
Group by B.ID




SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'BOND BUY',3,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2



SET @DetailTrx = ''
SET @totalTrx = 0


-- BOND SELL
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,8,9,11,13,14,15) AND TrxType = 2
AND D.BankPK = @BankPK

delete @TotalTrxFund

Insert into @TotalTrxFund
SELECT B.ID,COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (2,3,8,9,11,13,14,15) AND TrxType = 2
AND D.BankPK = @BankPK
Group by B.ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'BOND SELL',4,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2

----------------------------------------------------------------------------------------------



SET @DetailTrx = ''
SET @totalTrx = 0


-- TD PLACEMENT
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 1
AND D.BankPK = @BankPK

delete @TotalTrxFund

Insert into @TotalTrxFund
SELECT B.ID,COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 1
AND D.BankPK = @BankPK
Group by B.ID




SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'TD PLACEMENT',5,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2



SET @DetailTrx = ''
SET @totalTrx = 0


-- TD LIQUIDATE
SELECT @totalTrx =  COUNT(InvestmentPK) FROM (
select InvestmentPK FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 2
AND D.BankPK = @BankPK
union all
select A.InstrumentPK InvestmentPK from FundPosition A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
where D.BankPK = @BankPK and A.MaturityDate = @Date and date = dbo.FWorkingDay(@Date,-1)
and NOT EXISTS (select * from @MaturityToRollover B where A.FundPK = B.FundPK and A.BankBranchPK = B.BankBranchPK 
and A.InterestDaysType = B.InterestDaysType and A.InterestPaymentType =B.InterestPaymentType and A.MaturityDate = B.AcqDate )
) A



delete @TotalTrxFund

Insert into @TotalTrxFund
SELECT A.ID,COUNT(InvestmentPK) FROM (
select B.ID, InvestmentPK FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 2
AND D.BankPK = @BankPK
union all
select B.ID,A.InstrumentPK InvestmentPK from FundPosition A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
where D.BankPK = @BankPK and A.MaturityDate = @Date and date = dbo.FWorkingDay(@Date,-1)
and NOT EXISTS (select * from @MaturityToRollover B where A.FundPK = B.FundPK and A.BankBranchPK = B.BankBranchPK 
and A.InterestDaysType = B.InterestDaysType and A.InterestPaymentType =B.InterestPaymentType and A.MaturityDate = B.AcqDate )
)A
Group by A.ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'TD LIQUIDATE',6,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2



SET @DetailTrx = ''
SET @totalTrx = 0


-- TD ROLLOVER
SELECT @totalTrx =  COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 3
AND D.BankPK = @BankPK

delete @TotalTrxFund

Insert into @TotalTrxFund
SELECT B.ID,COUNT(InvestmentPK) FROM dbo.Investment A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
WHERE StatusSettlement in (1,2) AND ValueDate = @Date
AND InstrumentTypePK IN (5) AND TrxType = 3
AND D.BankPK = @BankPK
Group by B.ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'TD ROLLOVER',7,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2


--------------------------------------------------------------------------------------


SET @DetailTrx = ''
SET @totalTrx = 0


-- SUBSCRIPTION
SELECT @totalTrx =  isnull(sum(ClientSubscriptionPK),0) from
(
--SELECT B.ID,COUNT(ClientSubscriptionPK) ClientSubscriptionPK FROM dbo.ClientSubscription A
--left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientSubscriptionPK) <> 0 then 1 else 0 end ClientSubscriptionPK FROM dbo.ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A


delete @TotalTrxFund

Insert into @TotalTrxFund
select ID,isnull(sum(ClientSubscriptionPK),0) from
(
--SELECT B.ID,COUNT(ClientSubscriptionPK) ClientSubscriptionPK FROM dbo.ClientSubscription A
--left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientSubscriptionPK) <> 0 then 1 else 0 end ClientSubscriptionPK FROM dbo.ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A
Group by ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'SUBSCRIPTION',8,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2


----------------------------------------------------------------------------------



SET @DetailTrx = ''
SET @totalTrx = 0


-- REDEMPTION
SELECT @totalTrx =  isnull(sum(ClientRedemptionPK),0) from
(
--SELECT B.ID,COUNT(ClientRedemptionPK) ClientRedemptionPK FROM dbo.ClientRedemption A
--left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientRedemptionPK) <> 0 then 1 else 0 end ClientRedemptionPK FROM dbo.ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A

delete @TotalTrxFund

Insert into @TotalTrxFund
select ID,isnull(sum(ClientRedemptionPK),0) from
(
--SELECT B.ID,COUNT(ClientRedemptionPK) ClientRedemptionPK FROM dbo.ClientRedemption A
--left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientRedemptionPK) <> 0 then 1 else 0 end ClientRedemptionPK FROM dbo.ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A
Group by ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'REDEMPTION',9,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2


----------------------------------------------------------------------------------



SET @DetailTrx = ''
SET @totalTrx = 0


-- SWITCHING IN
SELECT @totalTrx =  isnull(sum(ClientSwitchingPK),0) from
(
--SELECT B.ID,COUNT(ClientSwitchingPK) ClientSwitchingPK FROM dbo.ClientSwitching A
--left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientSwitchingPK) <> 0 then 1 else 0 end ClientSwitchingPK FROM dbo.ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A

delete @TotalTrxFund

Insert into @TotalTrxFund
select ID,isnull(sum(ClientSwitchingPK),0) from
(
--SELECT B.ID,COUNT(ClientSwitchingPK) ClientSwitchingPK FROM dbo.ClientSwitching A
--left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientSwitchingPK) <> 0 then 1 else 0 end ClientSwitchingPK FROM dbo.ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A
Group by ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'SWITCH IN',10,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2



----------------------------------------------------------------------------------



SET @DetailTrx = ''
SET @totalTrx = 0


-- SWITCHING OUT
SELECT @totalTrx =  isnull(sum(ClientSwitchingPK),0) from
(
--SELECT B.ID,COUNT(ClientSwitchingPK) ClientSwitchingPK FROM dbo.ClientSwitching A
--left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientSwitchingPK) <> 0 then 1 else 0 end ClientSwitchingPK FROM dbo.ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A

delete @TotalTrxFund

Insert into @TotalTrxFund
select ID,isnull(sum(ClientSwitchingPK),0) from
(
--SELECT B.ID,COUNT(ClientSwitchingPK) ClientSwitchingPK FROM dbo.ClientSwitching A
--left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
--left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
--left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
--left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
--WHERE A.status = 2 AND ValueDate = @Date and isnull(E.SACode,'') = ''
--AND D.BankPK = @BankPK
--Group by B.ID
--union all
SELECT B.ID,case when COUNT(ClientSwitchingPK) <> 0 then 1 else 0 end ClientSwitchingPK FROM dbo.ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2)
left join Bank D on C.BankPK = D.BankPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
WHERE A.status = 2 AND ValueDate = @Date --and isnull(E.SACode,'') <> ''
AND D.BankPK = @BankPK
Group by B.ID
)A
Group by ID

SELECT @DetailTrx = COALESCE(@DetailTrx , '') + FundID + '(' + cast(TotalInvestment as nvarchar(50)) + ')' + ', '
FROM @TotalTrxFund



INSERT INTO @table
( BankID,TransactionType, Baris, TotalSent, DetailTrx )

SELECT ID,'SWITCH OUT',11,@totalTrx,@DetailTrx from Bank
where BankPK = @BankPK and status = 2
                                                    
-- HARDCODE
select 
case when BankID = 'BNI' then 'BANK NEGARA INDONESIA (PERSERO), TBK'
		when BankID = 'HSBC' then 'PT Bank HSBC Indonesia'
			when BankID = 'DBS' then 'PT BANK DBS INDONESIA'
				when BankID = 'BUKOPIN' then 'PT BANK BUKOPIN'
					when BankID = 'BCA' then 'BANK CENTRAL ASIA Tbk, PT'
when BankID = 'BRI' then 'BANK RAKYAT INDONESIA (PERSERO), PT'
	when BankID = 'PERMATA' then 'BANK PERMATA Tbk, PT'
		when BankID = 'MEGA' then 'BANK MEGA Tbk, PT'
			when BankID = 'MANDIRI' then 'BANK MANDIRI, PT - CUSTODY'
				when BankID = 'CIMB' then 'BANK CIMB NIAGA TBK, PT' end BankName,

case when BankID = 'BNI' then 'Mr. Wahyu'
		when BankID = 'HSBC' then ''
			when BankID = 'DBS' then 'Mr. Aditya Bagus'
				when BankID = 'BUKOPIN' then 'Mr. Cakra Ajiansyah'
					when BankID = 'BCA' then 'Mr. Hardi Suhardi'
when BankID = 'BRI' then 'Mr. Boy'
	when BankID = 'PERMATA' then 'Mr. Aji Dwi Arifin'
		when BankID = 'MEGA' then 'Andri Widianto'
			when BankID = 'MANDIRI' then 'BMuhamad Sadam Wahyurohman'
				when BankID = 'CIMB' then 'Haris Suhendra' end ContactPerson,				
				
case when BankID = 'BNI' then '021-29514053'
		when BankID = 'HSBC' then '021-2922 9696 / 2922 9697'
			when BankID = 'DBS' then '021-29884804'
				when BankID = 'BUKOPIN' then '021-31902358'
					when BankID = 'BCA' then '021-6601823/6601824'
when BankID = 'BRI' then '021-251 0316'
	when BankID = 'PERMATA' then '021-74863566'
		when BankID = 'MEGA' then '021-7990720'
			when BankID = 'MANDIRI' then '021-526-3602'
				when BankID = 'CIMB' then '' end Fax,
				
case when BankID = 'BNI' then '021-25541220'
		when BankID = 'HSBC' then '021-5291 4980'
			when BankID = 'DBS' then '021-29884542/27/72 '
				when BankID = 'BUKOPIN' then '021-31900612'
					when BankID = 'BCA' then '021-23588665/23588000/6601826'
when BankID = 'BRI' then '021-575 8131'
	when BankID = 'PERMATA' then '021-7455888/7459888'
		when BankID = 'MEGA' then '021-79175000'
			when BankID = 'MANDIRI' then '0021-5291 3057'
				when BankID = 'CIMB' then '021-2505151/5252/5353' end Phone,
				* from @table




                                                    ";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@BankPK", rsHeader.Key.BankPK);
                                                    cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateTo);
                                                    cmd1.ExecuteNonQuery();


                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        if (dr1.HasRows)
                                                        {
                                                            incRowExcel++;
                                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            incRowExcel++;
                                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            worksheet.Row(incRowExcel).Height = 40;
                                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                            incRowExcel++;
                                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyPhone() + ", " + _host.Get_CompanyFax();
                                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            incRowExcel = incRowExcel + 2;
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1].Value = "Daily Deal Board";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                            //incRowExcel = incRowExcel + 2;




                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {

                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<DailyDealBoard03> rList1 = new List<DailyDealBoard03>();
                                                                while (dr1.Read())
                                                                {
                                                                    DailyDealBoard03 rSingle1 = new DailyDealBoard03();
                                                                    rSingle1.BankID = Convert.ToString(dr1["BankID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["BankID"]));
                                                                    rSingle1.BankName = Convert.ToString(dr1["BankName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["BankName"]));
                                                                    rSingle1.Attn = Convert.ToString(dr1["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["ContactPerson"]));
                                                                    rSingle1.Fax = Convert.ToString(dr1["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Fax"]));
                                                                    rSingle1.Phone = Convert.ToString(dr1["Phone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Phone"]));
                                                                    rSingle1.TransactionType = Convert.ToString(dr1["TransactionType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["TransactionType"]));
                                                                    rSingle1.Baris = Convert.ToInt32(dr1["Baris"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["Baris"]));
                                                                    rSingle1.TotalSent = Convert.ToInt32(dr1["TotalSent"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["TotalSent"]));
                                                                    rSingle1.DetailTrx = Convert.ToString(dr1["DetailTrx"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["DetailTrx"]));

                                                                    rList1.Add(rSingle1);

                                                                }

                                                                incRowExcel++;
                                                                var GroupByReference1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.BankName, r1.Attn, r1.Fax, r1.Phone } into rGroup1
                                                                select rGroup1;

                                                                foreach (var rsHeader1 in GroupByReference1)
                                                                {

                                                                    //worksheet.Cells[incRowExcel, 1].Value = "DAILY DEAL BOARD";
                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    incRowExcel = incRowExcel + 2;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "To";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader1.Key.BankName;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Attn.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader1.Key.Attn;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Fax No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader1.Key.Fax;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Telp No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader1.Key.Phone;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "From";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Telp No.";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyPhone();
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Date";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = _FundAccountingRpt.ValueDateFrom;
                                                                    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Subject";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "DAILY DEAL BOARD";
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Pages";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = " 1 ";
                                                                    worksheet.Cells[incRowExcel, 4].Value = "(including this page)";

                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                                                    worksheet.Cells[incRowExcel, 2].Value = " : ";
                                                                    worksheet.Cells[incRowExcel, 3].Value = "All Fund";
                                                                    incRowExcel = incRowExcel + 2;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "We confirmed today having sent you the following instruction(s) :";

                                                                    incRowExcel++;

                                                                    worksheet.Cells[incRowExcel, 1].Value = "Type of Transaction";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 2].Value = "Total";
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel, 4].Value = "Name Of Fund";
                                                                    worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                                    worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;


                                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                    worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                    worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);



                                                                    int _inc; int _equityBuy; int _equitySell; int _bondBuy; int _bondSell; int _depositoPlace; int _depositoLiq; int _depositoRoll;
                                                                    int _subs; int _redemp; int _switchIn; int _switchOut;
                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {
                                                                        _inc = incRowExcel;

                                                                        worksheet.Cells[_inc + 2, 1].Value = "UNIT TRANSACTION";
                                                                        worksheet.Cells[_inc + 2, 1].Style.Font.Bold = true;
                                                                        worksheet.Cells[_inc + 2, 1].Style.Font.UnderLine = true;

                                                                        worksheet.Cells[_inc + 8, 1].Value = "EQUITY TRANSACTION";
                                                                        worksheet.Cells[_inc + 8, 1].Style.Font.Bold = true;
                                                                        worksheet.Cells[_inc + 8, 1].Style.Font.UnderLine = true;

                                                                        worksheet.Cells[_inc + 12, 1].Value = "BOND TRANSACTION";
                                                                        worksheet.Cells[_inc + 12, 1].Style.Font.Bold = true;
                                                                        worksheet.Cells[_inc + 12, 1].Style.Font.UnderLine = true;

                                                                        worksheet.Cells[_inc + 16, 1].Value = "TIME DEPOSIT TRANSACTION";
                                                                        worksheet.Cells[_inc + 16, 1].Style.Font.Bold = true;
                                                                        worksheet.Cells[_inc + 16, 1].Style.Font.UnderLine = true;

                                                                        if (rsDetail1.Baris == 8)
                                                                        {
                                                                            _subs = _inc + 3;
                                                                            worksheet.Cells[_subs, 1].Value = "Subscription";
                                                                            worksheet.Cells[_subs, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_subs, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_subs, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_subs, 2, _subs, 3].Merge = true;
                                                                            worksheet.Cells[_subs, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_subs, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_subs, 2, _subs, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_subs, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 9)
                                                                        {
                                                                            _redemp = _inc + 4;
                                                                            worksheet.Cells[_redemp, 1].Value = "Redemption";
                                                                            worksheet.Cells[_redemp, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_redemp, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_redemp, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_redemp, 2, _redemp, 3].Merge = true;
                                                                            worksheet.Cells[_redemp, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_redemp, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_redemp, 2, _redemp, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_redemp, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                        }
                                                                        else if (rsDetail1.Baris == 10)
                                                                        {
                                                                            _switchIn = _inc + 5;
                                                                            worksheet.Cells[_switchIn, 1].Value = "Switching In";
                                                                            worksheet.Cells[_switchIn, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_switchIn, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_switchIn, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_switchIn, 2, _switchIn, 3].Merge = true;
                                                                            worksheet.Cells[_switchIn, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_switchIn, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_switchIn, 2, _switchIn, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_switchIn, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }
                                                                        else if (rsDetail1.Baris == 11)
                                                                        {
                                                                            _switchOut = _inc + 6;
                                                                            worksheet.Cells[_switchOut, 1].Value = "Switching Out";
                                                                            worksheet.Cells[_switchOut, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_switchOut, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_switchOut, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_switchOut, 2, _switchOut, 3].Merge = true;
                                                                            worksheet.Cells[_switchOut, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_switchOut, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_switchOut, 2, _switchOut, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_switchOut, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            worksheet.Cells["A" + _switchOut + ":D" + _switchOut].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                                        }
                                                                        else if (rsDetail1.Baris == 1)
                                                                        {
                                                                            _equityBuy = _inc + 9;
                                                                            worksheet.Cells[_equityBuy, 1].Value = "Buy";
                                                                            worksheet.Cells[_equityBuy, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_equityBuy, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_equityBuy, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_equityBuy, 2, _equityBuy, 3].Merge = true;
                                                                            worksheet.Cells[_equityBuy, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_equityBuy, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_equityBuy, 2, _equityBuy, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_equityBuy, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }
                                                                        else if (rsDetail1.Baris == 2)
                                                                        {
                                                                            _equitySell = _inc + 10;
                                                                            worksheet.Cells[_equitySell, 1].Value = "Sell";
                                                                            worksheet.Cells[_equitySell, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_equitySell, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_equitySell, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_equitySell, 2, _equitySell, 3].Merge = true;
                                                                            worksheet.Cells[_equitySell, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_equitySell, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_equitySell, 2, _equitySell, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_equitySell, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }

                                                                        else if (rsDetail1.Baris == 3)
                                                                        {
                                                                            _bondBuy = _inc + 13;
                                                                            worksheet.Cells[_bondBuy, 1].Value = "Buy";
                                                                            worksheet.Cells[_bondBuy, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_bondBuy, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_bondBuy, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_bondBuy, 2, _bondBuy, 3].Merge = true;
                                                                            worksheet.Cells[_bondBuy, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_bondBuy, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 2, _bondBuy, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }

                                                                        else if (rsDetail1.Baris == 4)
                                                                        {
                                                                            _bondSell = _inc + 14;
                                                                            worksheet.Cells[_bondSell, 1].Value = "Sell";
                                                                            worksheet.Cells[_bondSell, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_bondSell, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_bondSell, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_bondSell, 2, _bondSell, 3].Merge = true;
                                                                            worksheet.Cells[_bondSell, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_bondSell, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondSell, 2, _bondSell, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondSell, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                            worksheet.Cells["A" + _bondSell + ":D" + _bondSell].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;




                                                                        }


                                                                        else if (rsDetail1.Baris == 5)
                                                                        {
                                                                            _depositoPlace = _inc + 17;
                                                                            worksheet.Cells[_depositoPlace, 1].Value = "Deposit Placement";
                                                                            worksheet.Cells[_depositoPlace, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_depositoPlace, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_depositoPlace, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_depositoPlace, 2, _depositoPlace, 3].Merge = true;
                                                                            worksheet.Cells[_depositoPlace, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_bondBuy, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 2, _bondBuy, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }

                                                                        else if (rsDetail1.Baris == 6)
                                                                        {
                                                                            _depositoLiq = _inc + 18;
                                                                            worksheet.Cells[_depositoLiq, 1].Value = "Deposit Withdrawal";
                                                                            worksheet.Cells[_depositoLiq, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_depositoLiq, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_depositoLiq, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_depositoLiq, 2, _depositoLiq, 3].Merge = true;
                                                                            worksheet.Cells[_depositoLiq, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_bondBuy, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 2, _bondBuy, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);


                                                                        }

                                                                        else if (rsDetail1.Baris == 7)
                                                                        {
                                                                            _depositoRoll = _inc + 19;
                                                                            worksheet.Cells[_depositoRoll, 1].Value = "Deposit Rollover";
                                                                            worksheet.Cells[_depositoRoll, 2].Value = rsDetail1.TotalSent;
                                                                            worksheet.Cells[_depositoRoll, 4].Value = rsDetail1.DetailTrx;
                                                                            worksheet.Cells[_depositoRoll, 4].Style.WrapText = true;

                                                                            worksheet.Cells[_depositoRoll, 2, _depositoRoll, 3].Merge = true;
                                                                            worksheet.Cells[_depositoRoll, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                            //worksheet.Cells[_bondBuy, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 2, _bondBuy, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                                            //worksheet.Cells[_bondBuy, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                                                            worksheet.Cells[_inc, 1, _depositoRoll + 1, 1].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                            worksheet.Cells[_inc, 2, _depositoRoll + 1, 3].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                                                            worksheet.Cells[_inc, 4, _depositoRoll + 1, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);


                                                                        }


                                                                    }

                                                                    incRowExcel = incRowExcel + 11;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Value = "Regards,";
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.WrapText = true;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                    incRowExcel = incRowExcel + 7;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Value = "Authorized signature";
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.WrapText = true;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                    worksheet.Cells[incRowExcel + 11, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                    _endRowDetail = incRowExcel;
                                                                    incRowExcel = incRowExcel + 15;
                                                                    worksheet.Row(incRowExcel).PageBreak = true;

                                                                }


                                                            }

                                                        }
                                                    }
                                                }
                                            }




                                            //incRowExcel++;
                                        }





                                        //incRowExcel++;



                                        //string _rangeDetail = "A:E";

                                        //using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        //{
                                        //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                        //    r.Style.Font.Size = 11;
                                        //    r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //}

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 40;
                                        worksheet.Column(2).Width = 3;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 80;
                                        worksheet.Column(5).Width = 10;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20&B DAILY DEAL BOARD";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                    }

                                }

                                return true;
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }

            #endregion




            #region New Bonds
            if (_FundAccountingRpt.ReportName.Equals("New Bonds"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
                            declare @DateMinOne datetime
                            set @DateMinOne = dbo.FWorkingDay(@date,-1)


                            DECLARE @FP TABLE 
                            (
                            FundPK int,
                            InstrumentPK int
                            )


                            insert into @FP
                            select distinct FundPK,A.InstrumentPK from FundPosition A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            where date = @DateMinOne and A.status = 2 and B.InstrumentTypePK in (2,3,8,9,11,13,14,15)

                            select C.ID FundID,D.ID InstrumentID from Investment A
                            left join @FP B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
                            left join Fund C on A.FundPK  = C.FundPK and C.status in (1,2)
                            left join Instrument D on A.InstrumentPK  = D.InstrumentPK and D.status in (1,2)
                            where ValueDate = @Date  and StatusInvestment = 2 and StatusDealing <> 3 and StatusSettlement <> 3
                            and B.InstrumentPK is null and B.FundPK is null and A.InstrumentTypePK in (2,3,8,9,11,13,14,15)";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NewBonds" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NewBonds" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report New Bonds");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NewBonds> rList = new List<NewBonds>();
                                        while (dr0.Read())
                                        {

                                            NewBonds rSingle = new NewBonds();
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "New Bonds Report";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date             :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        _date = incRowExcel;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 2; ;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Value = "Instrument ID";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;


                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 2];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Bond Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            #region Report Dividen And Coupon Fund
            if (_FundAccountingRpt.ReportName.Equals("Dividen And Coupon Fund"))
            {
                try
                {
                    var _count = 0;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
  declare @tableFP table
(
	InstrumentPK int,
	FundPK int
)

declare @CouponFromDate			date,
		@CouponToDate			date,
		@CouponRate				numeric(8,4),
		@CouponFrequently		int,
		@endDate				date,
		@startDate				date,
		@MaxCouponSchedulerPK	int,
		@BasisType				int,
		@InstrumentPK			int

											
if object_id('tempdb..#tempScheduler', 'u') is not null drop table #tempScheduler                       
create table #tempScheduler
(
	[AutoNo] [int] NOT NULL identity,
	[InstrumentPK] [int] NOT NULL,
	[CouponFromDate] [date] NOT NULL,
	[CouponToDate] [date] NOT NULL,
	[CouponRate] [decimal](12, 6) NOT NULL,
	[CouponDays] [int] NULL,
	[Description] [nvarchar](1000) NULL
)

insert into @tableFP(InstrumentPK,FundPK)
select distinct A.InstrumentPk,FundPk from FundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
where date between @datefrom and @dateto and A.status = 2 and B.InstrumentTypePK in (2,3,8,9,13,14,15) 
" + _paramFundFrom + @"



DECLARE A CURSOR
FOR 

	select distinct InstrumentPk from @tableFP
 
OPEN A;
 
FETCH NEXT FROM A INTO @InstrumentPK
 
WHILE @@FETCH_STATUS = 0
    BEGIN
		select
		    @CouponFrequently	= InterestPaymentType,
		    @CouponFromDate		= FirstCouponDate,
		    @CouponToDate		= MaturityDate,
		    @CouponRate			= InterestPercent,
		    @BasisType			= isnull(InterestDaysType, 0)
	    from Instrument
	    where InstrumentPK = @InstrumentPK and [Status] = 2

	
	    while @CouponFromDate < @CouponToDate
	    begin
			
			set @startDate = dbo.FgetLastCouponDate( @CouponFromDate,@InstrumentPK)
			set @endDate  = dbo.Fgetnextcoupondate( @CouponFromDate,@InstrumentPK) 

			set @endDate = case when @endDate > @CouponToDate then @CouponToDate else @endDate end

			    insert into #tempScheduler (
				    InstrumentPK, CouponFromDate, CouponToDate, 
				    CouponRate, CouponDays, [Description]
			    )
			    select
				    @InstrumentPK as InstrumentPK,@startDate as CouponFromDate,@endDate as CouponToDate, @CouponRate as CouponRate,
				    case when @BasisType in (1,5,6,7,8,9) then [dbo].[FGetDateDIffCorporateBond] (@CouponFromDate, @endDate) else abs(datediff(day, @endDate, @CouponFromDate)) end as CouponDays,
				    'Generate Monthly Coupon Scheduler' as [Description]
		
		    set @CouponFromDate = @endDate
	    end


        FETCH NEXT FROM A INTO @InstrumentPK
    END;
 
CLOSE A;
 
DEALLOCATE A;


delete #tempScheduler where CouponToDate < @datefrom 
delete #tempScheduler where CouponToDate > @dateto

select ExDate,PayDate,InstrumentID SecurityName,FundID FundName,InterestPercent DividenRate,sum(Balance) BalancedNominal,sum(AccruedInterest) Coupon,Currency QuotationCurrency,Currency PortfolioCurrency,isnull(B.Nav,0) NAVperUnitExDate, isnull(C.Nav,0) NAVperUnitPayDate from (
select cast(dbo.FWorkingDay(B.CouponToDate,-1) as date) ExDate,A.FundPK, B.CouponToDate PayDate,A.InstrumentID,A.FundID,A.InterestPercent, Balance,
dbo.FGetBondInterestAccrued(A.Date,A.InstrumentPK,Balance) * case when InstrumentTypePK in ( 2, 13 ) then  datediff(day,case when A.AcqDate > B.CouponFromDate then A.AcqDate else B.CouponFromDate end,B.CouponToDate) else dbo.FgetDateDiffCorporateBond(case when A.AcqDate > B.CouponFromDate then A.AcqDate else B.CouponFromDate end,CouponToDate) end AccruedInterest,
isnull(D.ID,'') Currency
from FundPosition A
inner join #tempScheduler B on A.InstrumentPK = B.InstrumentPK and CouponToDate = A.Date
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
left join Currency D on A.CurrencyPK = D.CurrencyPK and D.Status = 2
where A.Status = 2 
" + _paramFundFrom + @"
) A
left join CloseNAV B on A.ExDate = B.Date and B.Status = 2 and A.FundPK = B.FundPK
left join CloseNAV C on A.PayDate = C.Date and C.Status = 2 and A.FundPK = C.FundPK
--param fund dsni
--where FundID = 'iNextG'
group by ExDate,PayDate,InstrumentID,FundID,InterestPercent,Currency,B.Nav, C.Nav
 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                string filePath = Tools.ReportsPath + "DividenAndCouponFund" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "DividenAndCouponFund" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }


                                int incRowExcel = 0;

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "UnitRegistryReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Coupon Fund");

                                    if (!dr0.HasRows)
                                    {
                                        _count++;
                                    }
                                    else
                                    {




                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DividenAndCouponFund> rList = new List<DividenAndCouponFund>();
                                        while (dr0.Read())
                                        {

                                            DividenAndCouponFund rSingle = new DividenAndCouponFund();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ExDate = Convert.ToDateTime(dr0["ExDate"]);
                                            rSingle.PayDate = Convert.ToDateTime(dr0["PayDate"]);
                                            rSingle.SecurityName = Convert.ToString(dr0["SecurityName"]);
                                            rSingle.DividenRate = Convert.ToDecimal(dr0["DividenRate"]);
                                            rSingle.BalancedNominal = Convert.ToDecimal(dr0["BalancedNominal"]);
                                            rSingle.Coupon = Convert.ToDecimal(dr0["Coupon"]);
                                            rSingle.QuotationCurrency = Convert.ToString(dr0["QuotationCurrency"]);
                                            rSingle.PortfolioCurrency = Convert.ToString(dr0["PortfolioCurrency"]);
                                            rSingle.NAVperUnitExDate = Convert.ToDecimal(dr0["NAVperUnitExDate"]);
                                            rSingle.NAVperUnitPayDate = Convert.ToDecimal(dr0["NAVperUnitPayDate"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.FundName } into rGroup
                                                select rGroup;



                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("MM/dd/yyyy");
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("MM/dd/yyyy");

                                            incRowExcel = incRowExcel + 2;

                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                            worksheet.Cells[incRowExcel, 1].Value = "Ex Date";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Pay Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Security Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Dividen Rate";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Balance Nominal";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Coupon";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Dividen Amount";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Merge = true;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":H" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[RowG, 7].Value = "Quotation Currency";
                                            worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowG + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowG + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 8].Value = "Portfolio Currency";
                                            worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowG + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 9].Value = "Ex Date";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Pay Date";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Increase/Decrease in NAV/Unit";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[RowB, 1, RowG, 13].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                            incRowExcel++;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ExDate;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.PayDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SecurityName;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DividenRate / 100;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##.00%";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BalancedNominal;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Coupon;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.QuotationCurrency;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PortfolioCurrency;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.ExDate;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NAVperUnitExDate;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.PayDate;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.NAVperUnitPayDate;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 13].Formula = "=IFERROR(L" + incRowExcel + "/J" + incRowExcel + "-1,0)";
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "0.000%";
                                                _no++;
                                                _endRowDetail = incRowExcel;


                                            }


                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 13];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 18;
                                        worksheet.Column(4).Width = 12;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 18;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 35;
                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Dividen And Coupon Fund";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        worksheet = package.Workbook.Worksheets.Add("Dividen Fund");
                                    }

                                    DbCon.Close();
                                    DbCon.Open();
                                    using (SqlCommand cmd4 = DbCon.CreateCommand())
                                    {


                                        cmd4.CommandText = @"
        select B.ID FundName,cast(dbo.FWorkingDay(PaymentDate,-1) as date) ExDate,cast(PaymentDate as date) PayDate,D.ID SecurityName,Balance * 0.15 DividenRate,E.ID QuotationCurrency, E.ID PortfolioCurrency,
		isnull(F.Nav,0) NAVperUnitExDate,isnull(G.Nav,0) NAVperUnitPayDate from CorporateActionResult A
		left join Fund B on A.FundPK = B.FundPK and B.Status = 2
		left join CorporateAction C on A.CorporateActionPK = C.CorporateActionPK and C.Status = 2
		left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
		left join Currency E on B.CurrencyPK = E.CurrencyPK and E.Status = 2
		left join CloseNAV F on C.PaymentDate = F.Date and A.FundPK = F.FundPK and F.Status = 2
		left join CloseNAV G on dbo.FWorkingDay(PaymentDate,-1) = G.Date and A.FundPK = G.FundPK and G.Status = 2
		where A.Status = 2 and C.Type = 1 and PaymentDate between @datefrom and @dateto
		--param Fund
        " + _paramFundFrom + @"
			
                                    ";

                                        cmd4.CommandTimeout = 0;
                                        cmd4.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                                        cmd4.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);

                                        using (SqlDataReader dr1 = cmd4.ExecuteReader())
                                        {
                                            if (!dr1.HasRows)
                                            {
                                                _count++;
                                            }
                                            else
                                            {

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<DividenAndCouponFund> rList1 = new List<DividenAndCouponFund>();
                                                while (dr1.Read())
                                                {

                                                    DividenAndCouponFund rSingle1 = new DividenAndCouponFund();
                                                    rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                    rSingle1.ExDate = Convert.ToDateTime(dr1["ExDate"]);
                                                    rSingle1.PayDate = Convert.ToDateTime(dr1["PayDate"]);
                                                    rSingle1.SecurityName = Convert.ToString(dr1["SecurityName"]);
                                                    rSingle1.DividenRate = Convert.ToDecimal(dr1["DividenRate"]);
                                                    rSingle1.QuotationCurrency = Convert.ToString(dr1["QuotationCurrency"]);
                                                    rSingle1.PortfolioCurrency = Convert.ToString(dr1["PortfolioCurrency"]);
                                                    rSingle1.NAVperUnitExDate = Convert.ToDecimal(dr1["NAVperUnitExDate"]);
                                                    rSingle1.NAVperUnitPayDate = Convert.ToDecimal(dr1["NAVperUnitPayDate"]);
                                                    rList1.Add(rSingle1);

                                                }



                                                var GroupByReference1 =
                                                from r in rList1
                                                    //orderby r.FundName ascending
                                                group r by new { r.FundName } into rGroup
                                                select rGroup;

                                                incRowExcel = 0;

                                                foreach (var rsHeader1 in GroupByReference1)
                                                {
                                                    incRowExcel++;

                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Fund :";
                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.FundName;
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("MM/dd/yyyy");
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("MM/dd/yyyy");

                                                    incRowExcel = incRowExcel + 2;

                                                    int RowB = incRowExcel;
                                                    int RowG = incRowExcel + 1;

                                                    worksheet.Cells[RowB, 1, RowG, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[RowB, 1, RowG, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[RowB, 1, RowG, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[RowB, 1, RowG, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                    worksheet.Cells[incRowExcel, 1].Value = "Ex Date";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 2].Value = "Pay Date";
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 3].Value = "Security Name";
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 4].Value = "Dividen After PPH25";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[RowG, 5].Value = "Quotation Currency";
                                                    worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                                    worksheet.Cells["E" + RowG + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["E" + RowG + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[RowG, 6].Value = "Portfolio Currency";
                                                    worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                                    worksheet.Cells["F" + RowG + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["F" + RowG + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                    worksheet.Cells[incRowExcel, 7].Value = "Ex Date";
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 8].Value = "NAV/Unit";
                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                    worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                                    worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 9].Value = "Pay Date";
                                                    worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                    worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                                    worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 10].Value = "NAV/Unit";
                                                    worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                    worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                                    worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 11].Value = "Increase/Decrease in NAV/Unit";
                                                    worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                                    worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                                    worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[RowB, 1, RowG, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells[RowB, 1, RowG, 11].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                    incRowExcel++;

                                                    int _startRowDetail = incRowExcel;
                                                    int _endRowDetail = 0;
                                                    int _no = 1;




                                                    //end area header
                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {


                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail1.ExDate;
                                                        worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yy";
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.PayDate;
                                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.SecurityName;

                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail1.DividenRate;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";


                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.QuotationCurrency;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail1.PortfolioCurrency;
                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail1.ExDate;
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yy";
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail1.NAVperUnitExDate;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail1.PayDate;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yy";
                                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail1.NAVperUnitPayDate;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 11].Formula = "=IFERROR(J" + incRowExcel + "/H" + incRowExcel + "-1,0)";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "0.000%";
                                                        _no++;
                                                        _endRowDetail = incRowExcel;



                                                    }



                                                    worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;
                                                }


                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                worksheet.PrinterSettings.FitToPage = true;
                                                worksheet.PrinterSettings.FitToWidth = 1;
                                                worksheet.PrinterSettings.FitToHeight = 0;
                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                worksheet.Column(1).Width = 30;
                                                worksheet.Column(2).Width = 15;
                                                worksheet.Column(3).Width = 18;
                                                worksheet.Column(4).Width = 20;
                                                worksheet.Column(5).Width = 21;
                                                worksheet.Column(6).Width = 21;
                                                worksheet.Column(7).Width = 20;
                                                worksheet.Column(8).Width = 20;
                                                worksheet.Column(9).Width = 18;
                                                worksheet.Column(10).Width = 18;
                                                worksheet.Column(11).Width = 35;
                                                //worksheet.Column(10).AutoFit();
                                                worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                               // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Dividen And Coupon Fund";



                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();




                                            }



                                        }
                                    }

                                    package.Save();
                                    if (_FundAccountingRpt.DownloadMode == "PDF")
                                    {
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    }


                                }

                            }

                            if (_count == 2)
                                return false;
                            else
                                return true;
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            #region Master Deposito
            else if (_FundAccountingRpt.ReportName.Equals("Master Deposito"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        int _counter;
                        _counter = 0;
                        string filePath = Tools.ReportsPath + "MasterDeposito" + "_" + _userID + ".xlsx";
                        string pdfPath = Tools.ReportsPath + "MasterDeposito" + "_" + _userID + ".pdf";
                        FileInfo excelFile = new FileInfo(filePath);
                        if (excelFile.Exists)
                        {
                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                            excelFile = new FileInfo(filePath);
                        }

                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                        using (ExcelPackage package = new ExcelPackage(excelFile))
                        {
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {



                                cmd.CommandText =

                                   @"
                                

                                --declare @date datetime
                                --set @date = '10/16/2020'

                                --DROP Table #FundParam 
                                --DROP Table #LastFP
                                --DROP Table #DepositoRpt
                                --DROP Table #MaxAcqDateByBank


                                CREATE Table #FundParam 
                                (
                                FundPK INT,
                                ID nvarchar(200),
                                Name NVARCHAR(400)
                                )
                                CREATE CLUSTERED INDEX indx_FundParam ON #FundParam (FundPK);


                                CREATE Table #LastFP
                                (
	                                FundPK int,
	                                Date datetime
                                )


                                CREATE Table #DepositoRpt
                                (
	                                BankBuku int,
	                                BankSesuaiUniverse nvarchar(100),
	                                Rate numeric(19,6),
	                                AcqDate datetime,
	                                TD numeric(19,2),
	                                DOC numeric(19,2),
	                                EntryTime datetime
                                )

                                CREATE Table #MaxAcqDateByBank
                                (
	                                BankBuku int,
	                                BankSesuaiUniverse nvarchar(100),
	                                AcqDate datetime,
                                )

                                INSERT INTO #FundParam
                                SELECT FundPK,ID,A.Name FROM Fund A where status in (1,2)  
                                AND (MaturityDate >= @date or MaturityDate = '01/01/1900')     


                                INSERT INTO #LastFP
                                select A.FundPK,isnull(max(Date),@date) Date
                                from Fund A
                                left join FundPosition B on A.FundPK = B.FundPK and B.status = 2 and Date < @date
                                where  A.FundPK in (select FundPK from #FundParam) and A.status in (1,2)
                                group by A.FundPK


                                insert into #DepositoRpt
                                select D.CapitalClassification BankBuku,D.Name BankSesuaiUniverse,A.InterestPercent,AcqDate,
                                case when isnull(A.Category,'') = 'Deposit Normal' then A.Balance else 0 end TD,
                                case when isnull(A.Category,'') = 'Deposit On Call' then A.Balance else 0 end DOC,A.EntryTime from FundPosition A
                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                left join #LastFP C on A.FundPK = C.FundPK
                                left join Bank D on A.BankPK = D.BankPK and D.status in (1,2)
                                where InstrumentTypePK in (5,10) and A.Date = C.Date and A.MaturityDate > @date and A.status = 2


                                insert into #DepositoRpt
                                select B.CapitalClassification,B.Name,A.InterestPercent,ValueDate,
                                case when isnull(A.Category,'') = 'Deposit Normal' then case when  A.TrxType = 1 then A.DoneVolume else A.DoneVolume * - 1 end else 0 end TD,
                                case when isnull(A.Category,'') = 'Deposit On Call' then case when  A.TrxType = 1 then A.DoneVolume else A.DoneVolume * - 1 end  else 0 end DOC,A.EntryTime 
                                from Investment A
                                left join Bank B on A.BankPK = B.BankPK and B.status in (1,2)
                                where ValueDate = @date and StatusDealing = 2 and InstrumentTypePK in (5,10)  and A.MaturityDate > @date


                                declare @BankSesuaiUniverse nvarchar(100)
                                declare @Rate numeric(19,6)

                                Declare A Cursor For 
                                select BankSesuaiUniverse from #DepositoRpt

                                Open A                  
                                Fetch Next From A                  
                                Into @BankSesuaiUniverse
                                While @@FETCH_STATUS = 0                  
                                Begin      

                                select top 1 @Rate = Rate from #DepositoRpt where BankSesuaiUniverse = @BankSesuaiUniverse
                                order by AcqDate desc

                                update #DepositoRpt set Rate = @Rate where BankSesuaiUniverse = @BankSesuaiUniverse

Fetch next From A                   
Into @BankSesuaiUniverse
END        
Close A                  
Deallocate A

select BankBuku,BankSesuaiUniverse,Rate,sum(TD) TD,sum(DOC) DOC from #DepositoRpt
group by BankBuku,BankSesuaiUniverse,Rate
order by BankBuku,BankSesuaiUniverse  ";

                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);


                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                        _counter++;


                                    package.Workbook.Properties.Title = "MasterDeposito";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("MasterDeposito");

                                    int incRowExcel = 1;


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<MasterDeposito> rList = new List<MasterDeposito>();
                                    while (dr0.Read())
                                    {
                                        MasterDeposito rSingle = new MasterDeposito();
                                        rSingle.BankBuku = dr0["BankBuku"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["BankBuku"]);
                                        rSingle.BankSesuaiUniverse = dr0["BankSesuaiUniverse"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankSesuaiUniverse"]);
                                        rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                        rSingle.TD = dr0["TD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TD"]);
                                        rSingle.DOC = dr0["DOC"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DOC"]);

                                        rList.Add(rSingle);

                                    }

                                    var QueryByFundID =
                                                 from r in rList
                                                 group r by new { } into rGroup
                                                 select rGroup;


                                    foreach (var rsHeader in QueryByFundID)
                                    {
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 3].Value = "PLACEMENT DEPOSITO";
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Size = 18;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();  
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "Bank Buku";
                                        worksheet.Cells[incRowExcel, 3].Value = "Bank Sesuai Universe";
                                        worksheet.Cells[incRowExcel, 4].Value = "Rate";
                                        worksheet.Cells[incRowExcel, 5].Value = "TD";
                                        worksheet.Cells[incRowExcel, 6].Value = "DOC";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);
                                        //worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 255, 255));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thick;

                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int no = 1;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = no;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.BankBuku;
                                            worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankSesuaiUniverse;
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Rate;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.TD;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.DOC;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;


                                            incRowExcel++;
                                            no++;
                                        }

                                        int last = incRowExcel - 1;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thick;

                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + first.ToString() + ":E" + last.ToString() + ")";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + first.ToString() + ":F" + last.ToString() + ")";
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thick;

                                        incRowExcel++;

                                        incRowExcel = incRowExcel + 2;
                                    }
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 6];
                                    worksheet.Column(1).Width = 7;
                                    worksheet.Column(2).Width = 20;
                                    worksheet.Column(3).Width = 60;
                                    worksheet.Column(4).Width = 15;
                                    worksheet.Column(5).Width = 30;
                                    worksheet.Column(6).Width = 30;





                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 List of Equity Fund ";


                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                }



                            }

                            DbCon.Close();
                            DbCon.Open();


                            ExcelWorksheet worksheet1 = package.Workbook.Worksheets.Add("MasterDepositoDetail");

                            //Sheet 2
                            using (SqlCommand cmd1 = DbCon.CreateCommand())
                            {
                                cmd1.CommandText =

                                   @"

                                    declare @yesterday date
							        set @yesterday = dbo.FWorkingDay(@date,-1)
                            
									select A.FundID,A.BankID,A.Category,A.PlacementDate,A.MaturityDate,A.Tenor,A.InterestPercent,sum(A.Balance) Balance from (

							        select A.InstrumentPK,A.FundID, C.ID BankID,A.Category,AcqDate PlacementDate,A.MaturityDate, abs(DATEDIFF(day,A.AcqDate,A.MaturityDate)) Tenor,A.InterestPercent,A.Balance from FundPosition A
							        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
							        left join Bank C on A.BankPK = C.BankPK and C.Status = 2
							        where Date = @yesterday and B.InstrumentTypePK = 5 and A.MaturityDate <> @date and A.Status = 2
									
							        union all

							        select A.InstrumentPK,B.ID,D.ID,A.Category,case when A.TrxType = 2 then A.AcqDate else A.ValueDate end,A.MaturityDate, abs(DATEDIFF(day,case when A.TrxType = 2 then A.AcqDate else A.ValueDate end,A.MaturityDate)) Tenor,A.InterestPercent,case when A.TrxType = 2 then -1 else 1 end * A.DoneAmount from Investment A
							        left join Fund B on A.FundPK = B.FundPK and B.Status = 2
							        left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status = 2
							        left join Bank D on A.BankPK = D.BankPK and D.Status = 2
							        where A.StatusDealing = 2 and A.ValueDate = @date and A.InstrumentTypePK = 5

									) A

									group by A.FundID,A.BankID,A.Category,A.PlacementDate,A.MaturityDate,A.Tenor,A.InterestPercent
									having sum(A.Balance) <> 0

                                 ";

                                cmd1.CommandTimeout = 0;
                                cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);


                                using (SqlDataReader dr0 = cmd1.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                        _counter++;

                                    int incRowExcel = 1;


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<MasterDeposito> rList = new List<MasterDeposito>();
                                    while (dr0.Read())
                                    {
                                        MasterDeposito rSingle = new MasterDeposito();
                                        rSingle.FundID = dr0["FundID"].ToString();
                                        rSingle.BankID = dr0["BankID"].ToString();
                                        rSingle.Category = dr0["Category"].ToString();
                                        rSingle.PlacementDate = Convert.ToDateTime(dr0["PlacementDate"].ToString());
                                        rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"].ToString());
                                        rSingle.Category = dr0["Category"].ToString();
                                        rSingle.Tenor = Convert.ToInt32(dr0["Tenor"]);
                                        rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);

                                        rList.Add(rSingle);

                                    }

                                    var QueryByFundID =
                                                 from r in rList
                                                 group r by new { } into rGroup
                                                 select rGroup;


                                    foreach (var rsHeader in QueryByFundID)
                                    {
                                        worksheet1.Cells[incRowExcel, 1].Value = "Master Deposito Detail";
                                        worksheet1.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet1.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        worksheet1.Cells[incRowExcel, 3].Style.Font.Size = 12;
                                        worksheet1.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet1.Cells[incRowExcel, 1].Value = "Fund ID";
                                        worksheet1.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 2].Value = "Bank";
                                        worksheet1.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 3].Value = "Category";
                                        worksheet1.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 4].Value = "Placement Date";
                                        worksheet1.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 5].Value = "Maturity Date";
                                        worksheet1.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 6].Value = "Tenor";
                                        worksheet1.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 7].Value = "Interest Percent";
                                        worksheet1.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet1.Cells[incRowExcel, 8].Value = "Balance";
                                        worksheet1.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet1.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet1.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet1.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet1.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int no = 1;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet1.Cells[incRowExcel, 1].Value = rsDetail.FundID;
                                            worksheet1.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet1.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet1.Cells[incRowExcel, 2].Value = rsDetail.BankID;
                                            worksheet1.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet1.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet1.Cells[incRowExcel, 3].Value = rsDetail.Category;
                                            worksheet1.Cells[incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet1.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet1.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.PlacementDate).ToString("d-MMM-yyyy");
                                            worksheet1.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet1.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("d-MMM-yyyy");
                                            worksheet1.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet1.Cells[incRowExcel, 6].Value = rsDetail.Tenor;
                                            worksheet1.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet1.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet1.Cells[incRowExcel, 7].Value = rsDetail.InterestPercent;
                                            worksheet1.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet1.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet1.Cells[incRowExcel, 8].Value = rsDetail.Balance;
                                            worksheet1.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet1.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet1.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet1.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet1.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet1.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;


                                            incRowExcel++;
                                            no++;
                                        }

                                        int last = incRowExcel - 1;

                                        worksheet1.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                        worksheet1.Cells[incRowExcel, 8].Formula = "SUM(H" + first.ToString() + ":H" + last.ToString() + ")";
                                        worksheet1.Cells[incRowExcel, 8].Calculate();
                                        worksheet1.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet1.Cells[incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet1.Cells[incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet1.Cells[incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet1.Cells[incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;

                                        incRowExcel = incRowExcel + 2;
                                    }
                                    worksheet1.PrinterSettings.FitToPage = true;
                                    worksheet1.PrinterSettings.FitToWidth = 1;
                                    worksheet1.PrinterSettings.FitToHeight = 0;
                                    worksheet1.PrinterSettings.PrintArea = worksheet1.Cells[1, 1, incRowExcel - 1, 8];
                                    worksheet1.Column(1).AutoFit();
                                    worksheet1.Column(2).AutoFit();
                                    worksheet1.Column(3).AutoFit();
                                    worksheet1.Column(4).AutoFit();
                                    worksheet1.Column(5).AutoFit();
                                    worksheet1.Column(6).AutoFit();
                                    worksheet1.Column(7).AutoFit();
                                    worksheet1.Column(8).AutoFit();





                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet1.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet1.PrinterSettings.FitToPage = true;
                                    worksheet1.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet1.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    //worksheet1.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 List of Equity Fund ";


                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet1.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //Excelworksheet1 ws = package.Workbook.worksheet1s.Add("Demo");

                                    worksheet1.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet1.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelworksheet1 ws = pck.Workbook.worksheet1s.Add("Demo");
                                    worksheet1.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet1.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet1.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet1.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet1.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet1.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet1.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet1.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet1.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet1.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet1.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                }
                            }

                            if (_counter != 2)
                            {
                                package.Save();
                                if (_FundAccountingRpt.DownloadMode == "PDF")
                                {
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                }
                                //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                return true;
                            }
                            else
                                return false;

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion 


            else
            {
                return false;
            }
        }

        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Customer Portfolio All Fund Client
            if (_unitRegistryRpt.ReportName.Equals("Customer Portfolio All Fund Client"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            string _paramFundClient = "";
                            string _status = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundTo = " And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundTo = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _status = " and  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _status = " and A.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Revised = 0  And A.status not in (3,4)";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 And A.status not in (3,4)";

                            }


                            cmd.CommandText =

                            @" 
 
--declare @dateFrom date
--declare @dateto date
--declare @RoundingNav int
--declare @WithAdjustment int
--declare @fundpk int
--declare @Fundclientpk int


--set @dateto = '2020-09-30'
--set @dateFrom = '2017-01-01'
--set @RoundingNav = 0
--set @WithAdjustment = 1
--set @fundpk = 3
--set @Fundclientpk = 275



declare @dateyesterdayFrom datetime
set @dateyesterdayFrom = dbo.FWorkingDay(@dateFrom,-2)                         

declare @dateyesterday datetime
set @dateyesterday = dbo.FWorkingDay(@dateto,-1)

declare @CutOffUnitAmount table
(
FundPK int,
FundClientPK int,
UnitAmount numeric(19,8),
date date
)

declare @BegUnitAmount table
(
FundPK int,
FundClientPK int,
UnitAmount numeric(19,8),
date date
)


declare @CutOffFundUnitAmount table
(
FundPK int,
UnitAmount numeric(19,8),
date date
)

declare @BegFundUnitAmount table
(
FundPK int,
UnitAmount numeric(19,8),
date date
)

insert into @CutOffUnitAmount
select FundPK,FundClientPK,isnull(UnitAmount,0),dbo.FWorkingDay(A.Date,1) from FundClientPosition A
where 1 = 1  
" + _paramFund + _paramFundClient + @" 
--and A.FundPK = @fundpk and A.FundClientPK = @Fundclientpk

and Date = '11/29/17'

insert into @BegUnitAmount
select FundPK,FundClientPK,isnull(UnitAmount,0),dbo.FWorkingDay(A.Date,1) from FundClientPosition A
where 1 = 1 
" + _paramFund + _paramFundClient + @" 
--and A.FundPK = @fundpk and A.FundClientPK = @Fundclientpk


and Date = 
(
select max(Date) from FundClientPosition where Date <= @DateFrom

)




insert into @BegFundUnitAmount
select FundPK,sum(isnull(UnitAmount,0)),dbo.FWorkingDay(A.Date,1) from FundClientPosition A
where Date between @dateyesterdayFrom and @dateto
group by A.Date,A.FundPK

if exists (
select * from @CutOffUnitAmount 
)
begin
	Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
	Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
	Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
	ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
	ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK, 'BEGBALANCE' Description,'1900-01-01' ValueDate,0 TotalCashAmount,0 NAV,A.UnitAmount TotalUnitAmount,
A.UnitAmount Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
	0 MarketValue,0 UnrealizedGainLoss,0 Percentage
	from @CutOffUnitAmount A
	LEFT JOIN Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	LEFT JOIN FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on A.FundPK = D.FundPK and A.FundClientPK = D.FundClientPK and D.Date = @dateto
LEFT JOIN CloseNAV E ON E.Date = @dateto AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
	where 1 = 1
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + @"

union all

SELECT * from (
Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Sub' else 'Subscribe' end Description,A.ValueDate,A.TotalCashAmount,A.NAV,A.TotalUnitAmount,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,case when isnull(A.NAV,0) = 0 then  isnull(A.UnitAmount,0) else isnull(D.UnitAmount,0) end Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSubscription A
LEFT JOIN Fund B on A.FundPK = B.FundPK and B.status in (1,2)
LEFT JOIN FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPK = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo and
A.Type <> case when @WithAdjustment = 0 then 3 else -1 end
--A.Type = 3 
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK

" + _paramFund + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Red' else 'Redemption' end Description,A.ValueDate,A.TotalCashAmount,A.NAV,A.TotalUnitAmount,
 case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,case when isnull(A.NAV,0) = 0 then  isnull(A.UnitAmount,0) else isnull(D.UnitAmount,0) end Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPK = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo and
A.Type <> case when @WithAdjustment = 0 then 3 else -1 end
--and A.Type <> 3  
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Swi-OUT' else 'Switching OUT' end Description,A.ValueDate,A.TotalCashAmountFundFrom,A.NAVFundFrom,A.TotalUnitAmountFundFrom,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPKFrom = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPKFrom = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPKFrom = H.FundPK and H.Date = @dateyesterday

where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo 
--and A.Type <> 3    
--and A.FundPKFrom = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFundFrom + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Swi-IN' else 'Switching IN' end Description,A.ValueDate,A.TotalCashAmountFundTo,A.NAVFundTo,A.TotalUnitAmountFundTo,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPKTo = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPKTo = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPKTo = H.FundPK and H.Date = @dateyesterday

where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo 
--and A.Type <> 3    
--and A.FundPKTo = @FundPK and A.FundClientPK = @FundClientPK 
" + _paramFundTo + _paramFundClient + _status + @"

)A 
group by FundClientPK,ClientCode,Name,Address,Phone,FundName,FundPK,Description,ValueDate,TotalCashAmount,NAV,TotalUnitAmount,Balance,Unit,AverageNAV,ClosingNAV,FundValue,MarketValue,UnrealizedGainLoss,Percentage
--order by ClientCode,A.FundName,ValueDate,A.FundPK,name asc

end

else if exists (
select * from @BegUnitAmount
)
begin
Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
	Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
	Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
	ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
	ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK, 'BEGBALANCE' Description,'1900-01-01' ValueDate,0 TotalCashAmount,0 NAV,A.UnitAmount TotalUnitAmount,
A.UnitAmount Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
	0 MarketValue,0 UnrealizedGainLoss,0 Percentage
	from @BegUnitAmount A
	LEFT JOIN Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	LEFT JOIN FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on A.FundPK = D.FundPK and A.FundClientPK = D.FundClientPK and D.Date = @dateto
LEFT JOIN CloseNAV E ON E.Date = @dateto AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
	where 1 = 1
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + @"

union all

SELECT * from (
Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK, case when A.Type = 3 then 'Adjustment Unit Sub' else 'Subscribe' end Description,A.ValueDate,A.TotalCashAmount,A.NAV,A.TotalUnitAmount,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,case when isnull(A.NAV,0) = 0 then  isnull(A.UnitAmount,0) else isnull(D.UnitAmount,0) end Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSubscription A
LEFT JOIN Fund B on A.FundPK = B.FundPK and B.status in (1,2)
LEFT JOIN FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPK = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo and
A.Type <> case when @WithAdjustment = 0 then 3 else -1 end
--and A.Type <> 3 
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK

" + _paramFund + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Red' else 'Redemption' end Description,A.ValueDate,A.TotalCashAmount,A.NAV,A.TotalUnitAmount,
 case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,case when isnull(A.NAV,0) = 0 then  isnull(A.UnitAmount,0) else isnull(D.UnitAmount,0) end Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPK = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo and
A.Type <> case when @WithAdjustment = 0 then 3 else -1 end
--and A.Type <> 3  
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Swi-OUT' else 'Switching OUT' end Description,A.ValueDate,A.TotalCashAmountFundFrom,A.NAVFundFrom,A.TotalUnitAmountFundFrom,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPKFrom = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPKFrom = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPKFrom = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo 
--and A.Type <> 3    
--and A.FundPKFrom = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFundFrom + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Swi-IN' else 'Switching IN' end Description,A.ValueDate,A.TotalCashAmountFundTo,A.NAVFundTo,A.TotalUnitAmountFundTo,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPKTo = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPKTo = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPKTo = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo 
--and A.Type <> 3    
--and A.FundPKTo = @FundPK and A.FundClientPK = @FundClientPK 
" + _paramFundTo + _paramFundClient + _status + @"

)A 
group by FundClientPK,ClientCode,Name,Address,Phone,FundName,FundPK,Description,ValueDate,TotalCashAmount,NAV,TotalUnitAmount,Balance,Unit,AverageNAV,ClosingNAV,FundValue,MarketValue,UnrealizedGainLoss,Percentage
--order by ClientCode,A.FundName,ValueDate,A.FundPK,name asc

end
ELSE

begin


SELECT * from (
Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Sub' else 'Subscribe' end Description,A.ValueDate,A.TotalCashAmount,A.NAV,A.TotalUnitAmount,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,case when isnull(A.NAV,0) = 0 then  isnull(A.UnitAmount,0) else isnull(D.UnitAmount,0) end Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSubscription A
LEFT JOIN Fund B on A.FundPK = B.FundPK and B.status in (1,2)
LEFT JOIN FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPK = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo and
A.Type <> case when @WithAdjustment = 0 then 3 else -1 end
--and A.Type <> 3 
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Red' else 'Redemption' end Description,A.ValueDate,A.TotalCashAmount,A.NAV,A.TotalUnitAmount,
 case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,case when isnull(A.NAV,0) = 0 then  isnull(A.UnitAmount,0) else isnull(D.UnitAmount,0) end Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPK = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPK = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPK = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo and
A.Type <> case when @WithAdjustment = 0 then 3 else -1 end
--and A.Type <> 3  
--and A.FundPk = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFund + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Swi-OUT' else 'Switching OUT' end Description,A.ValueDate,A.TotalCashAmountFundFrom,A.NAVFundFrom,A.TotalUnitAmountFundFrom,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPKFrom = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPKFrom = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPKFrom = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo 
--and A.Type <> 3    
--and A.FundPKFrom = @FundPK and A.FundClientPK = @FundClientPK
" + _paramFundFrom + _paramFundClient + _status + @"

UNION ALL

Select C.FundClientPK,isnull (C.ID,'') ClientCode,C.Name,
Case when C.InvestorType = 1 then ISNULL(C.AlamatInd1,'') else ISNULL(C.AlamatPerusahaan,'') end Address,
Case when C.InvestorType = 1 then ISNULL(c.TeleponSelular,'') + '-' + ISNULL(C.TeleponBisnis,'') 
ELSE ISNULL(C.PhoneIns1,'') + '-' + ISNULL(C.TeleponBisnis,'') end Phone, 
ISNULL(B.Name,'') FundName,ISNULL(B.FundPK,0) FundPK,case when A.Type = 3 then 'Adjustment Unit Swi-IN' else 'Switching IN' end Description,A.ValueDate,A.TotalCashAmountFundTo,A.NAVFundTo,A.TotalUnitAmountFundTo,
case when isnull(F.UnitAmount,0) = 0 then isnull(G.UnitAmount,0) else isnull(F.UnitAmount,0) end Balance,isnull(D.UnitAmount,0) Unit,
dbo.FGetAVGForFundClientPosition(@DateTo,D.FundClientPK,D.FundPK) AverageNAV,
case when @RoundingNav = 1 then isnull(E.Nav,0) when H.UnitAmount = 0 then isnull(E.Nav,0) else isnull(E.AUM,0)/ H.UnitAmount end  ClosingNAV,0 FundValue,
0 MarketValue,0 UnrealizedGainLoss,0 Percentage
from ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
LEFT JOIN FundClientPosition D on C.FundClientPK = D.FundClientPK and B.FundPK = D.FundPK 
LEFT JOIN CloseNAV E ON D.Date = E.Date AND B.FundPK = E.FundPK AND E.status IN (1,2)
LEFT JOIN @BegUnitAmount F on A.FundClientPK = F.FundClientPK and A.FundPKTo = F.FundPK 
LEFT JOIN @CutOffUnitAmount G on A.FundClientPK = G.FundClientPK and A.FundPKTo = G.FundPK 
LEFT JOIN @BegFundUnitAmount H on A.FundPKTo = H.FundPK and H.Date = @dateyesterday
where ValueDate between @DateFrom and @DateTo and D.Date = @DateTo 
--and A.Type <> 3    
--and A.FundPKTo = @FundPK and A.FundClientPK = @FundClientPK 
" + _paramFundTo + _paramFundClient + _status + @"

)A 
group by FundClientPK,ClientCode,Name,Address,Phone,FundName,FundPK,Description,ValueDate,TotalCashAmount,NAV,TotalUnitAmount,Balance,Unit,AverageNAV,ClosingNAV,FundValue,MarketValue,UnrealizedGainLoss,Percentage
--order by ClientCode,A.FundName,ValueDate,A.FundPK,name asc

end

                            ";

                            cmd.CommandTimeout = 0;

                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@RoundingNav", _unitRegistryRpt.RoundingNav);
                            cmd.Parameters.AddWithValue("@WithAdjustment", _unitRegistryRpt.WithAdjustment);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                //if (!dr0.HasRows)
                                //{
                                //    return false;
                                //}
                                //else
                                //{
                                string filePath = Tools.ReportsPath + "CustomerPortfolioAllFundClient" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "CustomerPortfolioAllFundClient" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "UnitRegistryReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Customer Portfolio All Fund Client");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<CustomerPortfolioAllFundClient> rList = new List<CustomerPortfolioAllFundClient>();
                                    while (dr0.Read())
                                    {
                                        CustomerPortfolioAllFundClient rSingle = new CustomerPortfolioAllFundClient();
                                        rSingle.ClientID = Convert.ToString(dr0["ClientCode"]);
                                        rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                        rSingle.ClientName = Convert.ToString(dr0["Name"]);
                                        rSingle.CIF = Convert.ToString(dr0["Address"]);
                                        rSingle.CurrencyID = Convert.ToString(dr0["Phone"]);
                                        rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                        rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        rSingle.Description = Convert.ToString(dr0["Description"]);
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.CashBalance = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                        rSingle.Nav = Convert.ToDecimal(dr0["Nav"]);
                                        //rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                        rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                        rSingle.Address = Convert.ToString(dr0["Address"]);
                                        rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                        rSingle.AvgNav = Convert.ToDecimal(dr0["AverageNAV"]);
                                        rSingle.CloseNav = Convert.ToDecimal(dr0["ClosingNAV"]);
                                        rSingle.FundValue = Convert.ToDecimal(dr0["FundValue"]);
                                        rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                        rSingle.Unrealized = Convert.ToDecimal(dr0["UnrealizedGainLoss"]);
                                        rSingle.UnrealizedPercent = Convert.ToDecimal(dr0["Percentage"]);
                                        rList.Add(rSingle);

                                    }

                                    var QueryByFundID =
                                        from r in rList
                                        orderby r.ClientID, r.ClientName, r.ValueDate ascending
                                        group r by new { r.FundClientPK, r.ClientID, r.ClientName, r.Address, r.FundPK, r.FundName, r.AvgNav, r.CloseNav, r.FundValue, r.MarketValue, r.Unrealized, r.UnrealizedPercent, r.Balance } into rGroup
                                        select rGroup;


                                    int incRowExcel = 1;
                                    int RowA = incRowExcel;
                                    incRowExcel = incRowExcel + 1;
                                    int RowX = 0;
                                    DateTime d1 = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                    d1 = d1.AddDays(-1);
                                    int count = 0;
                                    foreach (var rsHeader in QueryByFundID)
                                    {

                                        int RowZ = incRowExcel;
                                        incRowExcel++;


                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 14;

                                        worksheet.Cells[incRowExcel, 9].Value = "CUSTOMER PORTFOLIO";
                                        worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells["I" + incRowExcel + ":K" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Size = 18;

                                        incRowExcel++;
                                        worksheet.Row(incRowExcel).Height = 50;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.WrapText = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 14;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Tel ";
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 4].Value = "Fax   : ";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 5].Value = _host.Get_CompanyFax();
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 9].Value = "As of Date ";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Size = 18;

                                        incRowExcel = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "A/C No ";
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ClientID;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 9].Value = "Date ";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Name ";
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ClientName;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 9].Value = "Time ";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = DateTime.Now.ToString("H:mm:ss");
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;

                                        incRowExcel++;
                                        worksheet.Row(incRowExcel).Height = 45;
                                        worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Address ";
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Address;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.WrapText = true;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Phone ";
                                        worksheet.Cells[incRowExcel, 2].Value = ":";
                                        worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyPhone();
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "Fax ";
                                        worksheet.Cells[incRowExcel, 10].Value = ":";
                                        worksheet.Cells[incRowExcel, 11].Value = _host.Get_CompanyFax();
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;


                                        incRowExcel = incRowExcel + 2;
                                        //Row B = 3
                                        int RowBZ = incRowExcel;
                                        int RowGZ = incRowExcel + 1;

                                        worksheet.Row(incRowExcel).Height = 25;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Merge = true;
                                        worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowBZ + ":A" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells["B" + RowBZ + ":D" + RowGZ].Merge = true;
                                        worksheet.Cells["B" + RowBZ + ":D" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowBZ + ":D" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Description";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Merge = true;
                                        worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowBZ + ":E" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Trans. Date";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Merge = true;
                                        worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowBZ + ":F" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "Net Amount";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Merge = true;
                                        worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowBZ + ":G" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "Nav";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Merge = true;
                                        worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowBZ + ":H" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 9].Value = "Unit";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowBZ + ":J" + RowGZ].Merge = true;
                                        worksheet.Cells["I" + RowBZ + ":J" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowBZ + ":J" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 11].Value = "Balance";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + RowBZ + ":L" + RowGZ].Merge = true;
                                        worksheet.Cells["K" + RowBZ + ":L" + RowGZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowBZ + ":L" + RowGZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Beginning Balance";
                                        worksheet.Cells[incRowExcel, 8].Value = Get_CloseNavByFundPK_03(rsHeader.Key.FundPK, d1);
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.Balance;
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(I" + incRowExcel + ")";
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Calculate();

                                        // Row C = 4
                                        int RowC = incRowExcel;

                                        incRowExcel++;
                                        //area header



                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        decimal Balance = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells["A" + RowBZ + ":L" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowBZ + ":L" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            if (rsDetail.Description != "BEGBALANCE")
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowBZ + ":L" + RowGZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowBZ + ":L" + RowGZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Description;

                                                worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.ValueDate).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CashBalance;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                if (rsDetail.Nav != 0)
                                                {
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Formula = "SUM(G" + incRowExcel + "/H" + incRowExcel + ")";
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Calculate();
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                }
                                                else
                                                {
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Value = rsDetail.Unit;
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                }

                                                if (rsDetail.Description == "Subscribe" || rsDetail.Description == "Switching IN")
                                                {
                                                    int incRowExcelA = incRowExcel - 1;
                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + incRowExcelA + "+I" + incRowExcel + ")";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                    worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                                    worksheet.Row(incRowExcel).Height = 15;
                                                }
                                                else if (rsDetail.Description == "Redemption" || rsDetail.Description == "Switching OUT")
                                                {
                                                    int incRowExcelA = incRowExcel - 1;
                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + incRowExcelA + "-I" + incRowExcel + ")";
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 11].Calculate();
                                                    worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                                    worksheet.Row(incRowExcel).Height = 15;
                                                }

                                                count++;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                RowX = incRowExcel;
                                                incRowExcel++;

                                            }

                                            _endRowDetail = incRowExcel - 1;
                                            RowX = incRowExcel - 1;

                                        }

                                        int RowCZ = incRowExcel;
                                        int RowHZ = incRowExcel + 1;

                                        worksheet.Cells["A" + RowCZ + ":L" + RowHZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowCZ + ":L" + RowHZ].Style.Border.Bottom.Style = ExcelBorderStyle.Double;


                                        worksheet.Cells[incRowExcel, 1].Value = "Fund";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + RowCZ + ":C" + RowHZ].Merge = true;
                                        worksheet.Cells["A" + RowCZ + ":C" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowCZ + ":C" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + RowCZ + ":C" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells["D" + RowCZ + ":D" + RowHZ].Merge = true;
                                        worksheet.Cells["D" + RowCZ + ":D" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowCZ + ":D" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D" + RowCZ + ":D" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 5].Value = "Average NAV";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + RowCZ + ":E" + RowHZ].Merge = true;
                                        worksheet.Cells["E" + RowCZ + ":E" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowCZ + ":E" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + RowCZ + ":E" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 6].Value = "Closing NAV";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells["F" + RowCZ + ":F" + RowHZ].Merge = true;
                                        worksheet.Cells["F" + RowCZ + ":F" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowCZ + ":F" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F" + RowCZ + ":F" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 7].Value = "Fund Value";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells["G" + RowCZ + ":G" + RowHZ].Merge = true;
                                        worksheet.Cells["G" + RowCZ + ":G" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowCZ + ":G" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["G" + RowCZ + ":G" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 8].Value = "Market Value";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells["H" + RowCZ + ":H" + RowHZ].Merge = true;
                                        worksheet.Cells["H" + RowCZ + ":H" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowCZ + ":H" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["H" + RowCZ + ":H" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 9].Value = "Unrealized Gain/(Lost)";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells["I" + RowCZ + ":J" + RowHZ].Merge = true;
                                        worksheet.Cells["I" + RowCZ + ":J" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowCZ + ":J" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["I" + RowCZ + ":J" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 11].Value = "%";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + RowCZ + ":L" + RowHZ].Merge = true;
                                        worksheet.Cells["K" + RowCZ + ":L" + RowHZ].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowCZ + ":L" + RowHZ].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["K" + RowCZ + ":L" + RowHZ].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        incRowExcel++;

                                        int RowS = incRowExcel;

                                        incRowExcel++;
                                        //area header

                                        //int _no2 = 1;
                                        int _startRowDetail2 = incRowExcel;
                                        int _endRowDetail2 = 0;


                                        //ThickBox Border

                                        worksheet.Cells["A" + RowCZ + ":L" + RowHZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowCZ + ":L" + RowHZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        //area detail
                                        //worksheet.Cells[incRowExcel, 1].Value = _no2;
                                        worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(K" + RowX + ")";
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.AvgNav;
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.CloseNav;
                                        if (_unitRegistryRpt.RoundingNav == 1)
                                        {
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000000000";
                                        }

                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(D" + incRowExcel + "*E" + incRowExcel + ")";
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(D" + incRowExcel + "*F" + incRowExcel + ")";
                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";




                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(H" + incRowExcel + "-G" + incRowExcel + ")";
                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                        worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(I" + incRowExcel + "/G" + incRowExcel + ")";
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        //worksheet.Row(incRowExcel).Height = 15;

                                        _endRowDetail2 = incRowExcel;
                                        //_no2++;
                                        incRowExcel++;

                                        int _endRowDetail3 = incRowExcel;
                                        worksheet.Cells["A" + RowCZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowCZ + ":C" + _endRowDetail2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowCZ + ":C" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _endRowDetail2 + ":L" + _endRowDetail2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["D" + RowCZ + ":D" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + RowCZ + ":E" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowCZ + ":F" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowCZ + ":G" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + RowCZ + ":H" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + RowCZ + ":J" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["K" + RowCZ + ":L" + _endRowDetail2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        incRowExcel++;
                                        worksheet.Cells[_endRowDetail3, 6].Value = "TOTAL FUND";
                                        worksheet.Cells[_endRowDetail3, 6].Style.Font.Bold = true;
                                        worksheet.Cells[_endRowDetail3, 7].Formula = "SUM(G" + _startRowDetail2 + ":G" + _endRowDetail2 + ")";
                                        worksheet.Cells[_endRowDetail3, 8].Formula = "SUM(H" + _startRowDetail2 + ":H" + _endRowDetail2 + ")";
                                        worksheet.Cells[_endRowDetail3, 9].Formula = "SUM(I" + _startRowDetail2 + ":I" + _endRowDetail2 + ")";
                                        worksheet.Cells[_endRowDetail3, 7].Style.Font.Bold = true;
                                        worksheet.Cells[_endRowDetail3, 8].Style.Font.Bold = true;
                                        worksheet.Cells[_endRowDetail3, 9].Style.Font.Bold = true;
                                        worksheet.Cells[_endRowDetail3, 7].Calculate();
                                        worksheet.Cells[_endRowDetail3, 8].Calculate();
                                        worksheet.Cells[_endRowDetail3, 9].Calculate();
                                        worksheet.Cells[_endRowDetail3, 7].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[_endRowDetail3, 8].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[_endRowDetail3, 9].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells["I" + _endRowDetail3 + ":J" + _endRowDetail3].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells["A" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowBZ + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + RowBZ + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["D" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowBZ + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + RowBZ + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["E" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["F" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowBZ + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + RowBZ + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["G" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowBZ + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + RowBZ + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["H" + RowBZ].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + RowBZ + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + RowBZ + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["I" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["J" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + RowBZ + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["K" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["L" + RowBZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["L" + RowBZ + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                    }

                                    int _lastRow = incRowExcel;

                                    string _rangeA = "A:L" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 12;
                                    }

                                    worksheet.DeleteRow(_lastRow);


                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                    worksheet.Column(1).Width = 10;
                                    worksheet.Column(2).Width = 5;
                                    worksheet.Column(3).Width = 20;
                                    worksheet.Column(4).Width = 20;
                                    worksheet.Column(5).Width = 30;
                                    worksheet.Column(6).Width = 30;
                                    worksheet.Column(7).Width = 30;
                                    worksheet.Column(8).Width = 30;
                                    worksheet.Column(9).Width = 30;
                                    worksheet.Column(10).Width = 5;
                                    worksheet.Column(11).Width = 15;
                                    worksheet.Column(12).Width = 15;

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    if (_unitRegistryRpt.DownloadMode == "PDF")
                                    {
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    }

                                    return true;

                                }

                                //}
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            #region Fund Balance Detail
            else if (_unitRegistryRpt.ReportName.Equals("Fund Balance Detail"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgent = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            //ini untuk agent

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = " And E.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText =

                            @"
                            if ([dbo].[CheckTodayIsHoliday](@Date) = 1)
                            BEGIN
	                            set @Date = dbo.FWorkingDay(@Date,-1)
                            END

                            Select 
                            E.Name Branch
                            ,isnull(B.ID,'') FundID
                            ,isnull(B.Name,'') FundName
                            ,isnull(D.Nav,0) CloseNAV,C.ID + ' - ' + C.Name Customer,isnull(A.UnitAmount,0) Unit
                            , isnull([dbo].[FGetAVGForFundClientPosition] (@Date,A.FundClientPK,A.FundPK),0) AvgNAV
                            , isnull(A.UnitAmount,0) * isnull([dbo].[FGetAVGForFundClientPosition] (@Date,A.FundClientPK,A.FundPK),0) AmountAtAVGNav
                            , isnull(A.UnitAmount,0) * isnull(D.NAV,0) AmountAtClosingNAV
                            -- UNREALIZED PAKE RUMUS AJA DI CODING AmountAtAVGNav - AmountAtClosingNAV
                            from FundClientPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join CloseNAV D on A.fundpK = D.FundPK and D.Date = @Date and D.Status in (1,2)
                            left join Agent E on C.SellingAgentPK = E.AgentPK and E.Status  in (1,2)
                            where A.Date = @Date  and UnitAmount <> 0" + _paramFund + _paramFundClient + _paramAgent
                            ;

                            cmd.CommandTimeout = 0;


                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);
                            cmd.ExecuteNonQuery();

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundBalanceDetail" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundBalanceDetail" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Balance Detail");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundBalanceDetail> rList = new List<FundBalanceDetail>();
                                        while (dr0.Read())
                                        {
                                            FundBalanceDetail rSingle = new FundBalanceDetail();
                                            rSingle.ClientName = Convert.ToString(dr0["Customer"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.AvgNav = Convert.ToDecimal(dr0["AvgNAV"]);
                                            rSingle.CloseNav = Convert.ToDecimal(dr0["CloseNAV"]);
                                            rSingle.AmountClosingNAV = Convert.ToDecimal(dr0["AmountAtClosingNAV"]);
                                            rSingle.AmountAvgNAV = Convert.ToDecimal(dr0["AmountAtAVGNav"]);
                                            rSingle.Branch = Convert.ToString(dr0["Branch"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByCategory =
                                         from r in rList
                                         orderby r.FundName, r.CloseNav ascending
                                         group r by new { r.FundName, r.CloseNav, r.Branch } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        //int _rowEndBalance = 0;

                                        foreach (var rsHeader in GroupByCategory)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND BALANCE - DETAIL";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Date :";
                                            worksheet.Cells[incRowExcel, 7].Value = DateTime.Now.ToString("dd/MMM/yyyy");
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyy";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "As Of : ";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 4].Value = "Branch :";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Branch;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Time :";
                                            worksheet.Cells[incRowExcel, 7].Value = DateTime.Now.ToString("H:mm:ss");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 4].Value = "Close NAV :";
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.CloseNav;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            //_rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Customer";
                                            worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 4].Value = "Avg. NAV";
                                            worksheet.Cells[incRowExcel, 5].Value = "Amount at Avg. NAV";
                                            worksheet.Cells[incRowExcel, 6].Value = "Amount at Closing NAV";
                                            worksheet.Cells[incRowExcel, 7].Value = "Unrealized Gain/(Loss)";

                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = incRowExcel;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 12;
                                                    //r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AvgNav;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AmountAvgNAV;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AmountClosingNAV;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Formula = "(F" + incRowExcel + "-E" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 7].Calculate();


                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            int _endRowDetailTotal = incRowExcel;
                                            worksheet.Cells["A" + _endRowDetail + ":G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel++;
                                            worksheet.Cells["A" + _endRowDetailTotal + ":G" + _endRowDetailTotal].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 50;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 30;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND BALANCE DETAIL";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Fund Balance By Categories
            else if (_unitRegistryRpt.ReportName.Equals("Fund Balance By Categories"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            cmd.CommandText =
                                    @" declare @DateMinOne datetime
                            declare @DateMinTwo datetime

                            SET @DateMinOne = dbo.FWorkingDay(@date,-1)
                            SET @DateMinTwo = dbo.FWorkingDay(@date,-2)

                            declare @DateUnit datetime
                            select @DateUnit = @DateMinOne

                            if ([dbo].[CheckTodayIsHoliday](@DateUnit) = 1)
                            BEGIN
                            set @DateUnit = @DateMinTwo
                            END

                            Select 
                            Case when C.InvestorType = 1 then 'INDIVIDUAL' ELSE E.DescOne END Category
                            ,'ALL BRANCH' Branch
                            ,C.ID + ' - ' + C.Name Customer
                            ,isnull(B.Name,'') Product
                            ,isnull(A.UnitAmount,0) Unit
                            , isnull(A.UnitAmount,0) * isnull(D.NAV,0) TotalAmount
                            -- UNREALIZED PAKE RUMUS AJA DI CODING AmountAtAVGNav - AmountAtClosingNAV
                            from FundClientPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join CloseNAV D on A.fundpK = D.FundPK and D.Date = @Date and D.Status in (1,2)
                            left join MasterValue E on C.tipe = E.Code and E.Status in (1,2) and E.ID = 'CompanyType'
                            where A.Date = @DateUnit  and UnitAmount <> 0 " + _paramFund + _paramFundClient;



                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundBalanceByCategories" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundBalanceByCategories" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Balance By Categories");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundBalanceByCategories> rList = new List<FundBalanceByCategories>();
                                        while (dr0.Read())
                                        {
                                            FundBalanceByCategories rSingle = new FundBalanceByCategories();
                                            rSingle.ClientName = Convert.ToString(dr0["Customer"]);
                                            rSingle.InvestorType = Convert.ToString(dr0["Category"]);
                                            rSingle.FundName = Convert.ToString(dr0["Product"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.Branch = Convert.ToString(dr0["Branch"]);


                                            rList.Add(rSingle);

                                        }

                                        var GroupByCategory =
                                         from r in rList
                                         orderby r.Date, r.InvestorType, r.InvestorType, r.ClientName ascending
                                         group r by new { r.Date, r.InvestorType, r.Branch } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        //int _rowEndBalance = 0;


                                        foreach (var rsHeader in GroupByCategory)
                                        {
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "FUND BALANCE BY CATEGORIES - DETAIL";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Date :";
                                            worksheet.Cells[incRowExcel, 6].Value = DateTime.Now.ToString("dd/MMM/yyyy");
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MMM/yyy";

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "As Of ";
                                            worksheet.Cells[incRowExcel, 2].Value = " : ";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyy";

                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Time :";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = DateTime.Now.ToString("H:mm:ss");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Branch :";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.Branch;


                                            incRowExcel++;
                                            //_rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Customer";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Product";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "Total Amount";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InvestorType;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            string _range = "A" + incRowExcel + ":F" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            _range = "A" + incRowExcel + ":F" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _TotalCategory = incRowExcel;
                                            int _endRowDetail = incRowExcel;

                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":F" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 12;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CashBalance;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":F" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            worksheet.Cells[incRowExcel, 3].Value = "Total Category :";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            //int _endRowDetailTotal = incRowExcel;

                                            //worksheet.Cells[_endRowDetailTotal, 6].Value = "TOTAL ALL :";
                                            //worksheet.Cells[_endRowDetailTotal, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[_endRowDetailTotal, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[_endRowDetailTotal, 7].Style.Font.Color.SetColor(Color.Blue);
                                            //worksheet.Cells[_endRowDetailTotal, 7].Calculate();

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 12;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 5;
                                        worksheet.Column(3).Width = 55;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 35;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 FUND BALANCE BY CATEGORIES";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily Subscription Instruction
            if (_unitRegistryRpt.ReportName.Equals("Daily Subscription Instruction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And CS.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And CS.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  CS.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  CS.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0 and Cs.status not in (3,4)";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0 and Cs.status not in (3,4)";

                            }


                            cmd.CommandText =

                               @"select CS.NAVDate NAVDate,CS.ClientSubscriptionPK, E.ID BankAccountName,F.Name FundName,CS.CashAmount CashAmount
                              , CS.TotalUnitAmount TotalUnitAmount,
                                CS.SubscriptionFeePercent SubscriptionFeePercent, CS.SubscriptionFeeAmount SubscriptionFeeAmount,
                                FC.ID ClientID,FC.SID SID, FC.Name Name, CS.Description Remark,B.Attn1 + '-' + B.ContactPerson Attn, B.Fax1 FaxNo, B.Phone1 PhoneNo  from ClientSubscription CS
                                left join FundClient FC on CS.FundClientPK = FC.FundClientPK and FC.Status in (1,2)
                                left join Fund F on CS.FundPK = F.FundPK and F.Status in (1,2)
                                left join FundCashRef C on  C.FundCashRefPK = CS.CashRefPK and C.Status in (1,2)
                                left join BankBranch B on C.BankBranchPK = B.BankBranchPK and B.Status in (1,2)
                                LEFT JOIN Bank E ON B.BankPK = E.BankPK AND E.status IN (1,2)
                                WHERE " + _statusSubs + _paramFund + _paramFundClient + @" and 
                                NAVDate between @DateFrom and @DateTo and CS.Type = 1 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailySubscriptionInstruction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailySubscriptionInstruction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Subscription Instruction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailySubscriptionInstruction> rList = new List<DailySubscriptionInstruction>();
                                        while (dr0.Read())
                                        {
                                            DailySubscriptionInstruction rSingle = new DailySubscriptionInstruction();
                                            rSingle.ClientSubscriptionPK = Convert.ToInt32(dr0["ClientSubscriptionPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.BankAccountName = Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.ClientName = Convert.ToString(dr0["Name"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.TotalUnitAmount = Convert.ToDecimal(dr0["TotalUnitAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["SubscriptionFeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["SubscriptionFeeAmount"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["Attn"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.PhoneNo = Convert.ToString(dr0["PhoneNo"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.NAVDate, r.ContactPerson, r.FaxNo, r.PhoneNo, r.ClientSubscriptionPK, r.BankAccountName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "DAILY SUBSCRIPTION INSTRUCTION";
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundName;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Ref No.";
                                            worksheet.Cells[incRowExcel, 9].Value = " : " + rsHeader.Key.ClientSubscriptionPK;
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "To";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.BankAccountName;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "From";
                                            worksheet.Cells[incRowExcel, 9].Value = " : " + _host.Get_CompanyName();
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Attn.";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.ContactPerson;
                                            worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Phone No.";
                                            worksheet.Cells[incRowExcel, 9].Value = " : " + _host.Get_CompanyPhone();
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Phone No";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.PhoneNo;
                                            worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Fax No";
                                            worksheet.Cells[incRowExcel, 9].Value = " : " + _host.Get_CompanyFax();
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax No";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FaxNo;
                                            worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Date";
                                            worksheet.Cells[incRowExcel, 9].Value = " : " + Convert.ToDateTime(rsHeader.Key.NAVDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            //worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Here with, we would like to confirm that the following subscription transaction on value date : " + Convert.ToDateTime(rsHeader.Key.NAVDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;
                                            //Row A = 2
                                            int RowC = incRowExcel;
                                            int RowW = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "No. ";
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Merge = true;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Customer CIF";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Merge = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = "Custodian ID";
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Merge = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = "Single ID";
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Merge = true;
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 5].Value = "Name";
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Merge = true;
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 6].Value = "Gross Subscribed IDR Amount";
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells["F" + RowC + ":F" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowC + ":F" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["F" + RowC + ":F" + RowW].Merge = true;

                                            worksheet.Cells[incRowExcel, 9].Value = "Net Subscribed IDR Amount";
                                            worksheet.Cells["I" + RowC + ":I" + RowW].Style.WrapText = true;
                                            worksheet.Cells["I" + RowC + ":I" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowC + ":I" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["I" + RowC + ":I" + RowW].Merge = true;


                                            worksheet.Cells[incRowExcel, 10].Value = "Remarks";
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Merge = true;

                                            worksheet.Cells[incRowExcel, 7].Value = "Fee";
                                            //worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7].Value = "%";
                                            //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Amount";
                                            //worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Merge = true;






                                            // Row C = 4
                                            int RowD = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowO = incRowExcel;
                                                int RowI = incRowExcel + 1;


                                                //ThickBox Border
                                                worksheet.Cells["A" + RowC + ":J" + RowW].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowC + ":J" + RowW].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowC + ":J" + RowW].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowC + ":A" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CashAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeePercent;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                if (rsDetail.FeeAmount == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Formula = "SUM(F" + incRowExcel + "-H" + incRowExcel + ")";
                                                    worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 9].Calculate();
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalUnitAmount;
                                                    worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";

                                                }



                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Remark;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }
                                            worksheet.Cells["A" + _endRowDetail + ":J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + _endRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 5].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Authorized by :";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 9].Merge = true;
                                            worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 8].Value = "Jakarta Selatan 12190, Indonesia";
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 8].Value = "Phone No.";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 9].Value = " :   " + _host.Get_CompanyPhone();
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Fax No.";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 9].Value = " :   " + _host.Get_CompanyFax();
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Suharni/Belinda/Dody";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }
                                        //incRowExcel++;
                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:J" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 15;
                                        }

                                        worksheet.DeleteRow(_lastRow);


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 50;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 30;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();

                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily Redemption Instruction
            if (_unitRegistryRpt.ReportName.Equals("Daily Redemption Instruction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And CR.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  CR.Status = 2 and CR.Posted = 1 and CR.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  CR.Status = 2 and CR.Posted = 1 and CR.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  CR.Status = 2 and CR.Posted = 0 and CR.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  CR.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  CR.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (CR.Status = 2 or CR.Posted = 1) and CR.Revised = 0 and CR.status not in (3,4) ";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (CR.Status = 1 Or CR.Status = 2 or CR.Posted = 1) and  CR.Revised = 0 and CR.status not in (3,4)";

                            }


                            cmd.CommandText =

                               @"


 select 
 F.Name FundName,E.Name BankBranchID,
 B.Attn1,B.ContactPerson ContactPerson, B.Fax1 FaxNo, B.Phone1 PhoneNo,
 B.ID CustodianID,
 CR.ClientRedemptionPK ClientRedemptionPK,
 CR.NAVDate NAVDate,
 FC.ID ClientID,FC.SID SID, FC.Name Name, B.ID BankAccountName, 
CR.PaymentDate, CR.Description Remark, CR.CashAmount CashAmount,
CR.UnitAmount UnitAmount, CR.TotalCashAmount TotalCashAmount, 
CR.RedemptionFeeAmount FeeAmount, CR.RedemptionFeePercent FeePercent
,ISNULL(CASE WHEN Cr.CashRefPK = 1 THEN Fc.NamaNasabah1 + ':' + Fc.NomorRekening1
WHEN Cr.CashRefPK = 2 THEN	Fc.NamaNasabah2 + ':' + Fc.NomorRekening2
WHEN Cr.CashRefPK = 3 THEN	Fc.NamaNasabah3 + ':' + Fc.NomorRekening3
ELSE Fc.NamaNasabah1 + ':' + Fc.NomorRekening1 END,'') BeneficiaryName
from ClientRedemption CR
left join FundClient FC on FC.FundClientPK = CR.FundClientPK and FC.Status in (1,2)
left join FundCashRef C on  C.FundCashRefPK = CR.CashRefPK and C.Status in (1,2)
left join Fund F on F.FundPK = CR.FundPK and F.Status in (1,2)
left join BankBranch B on B.BankBranchPK = C.BankBranchPK and B.Status in (1,2)
LEFT JOIN Bank E ON B.BankPK = E.BankPK AND E.status IN (1,2)


WHERE " + _statusSubs + _paramFund + @" and 
NAVDate between @DateFrom and @DateTo and CR.Type = 1
                               ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailyRedemptionInstruction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyRedemptionInstruction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "DailyRedemptionInstruction";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Redemption Instruction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyRedemptionInstruction> rList = new List<DailyRedemptionInstruction>();
                                        while (dr0.Read())
                                        {
                                            DailyRedemptionInstruction rSingle = new DailyRedemptionInstruction();
                                            rSingle.ClientRedemptionPK = Convert.ToInt32(dr0["ClientRedemptionPK"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.TotalCashAmount = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.PhoneNo = Convert.ToString(dr0["PhoneNo"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.PaymentDate = Convert.ToDateTime(dr0["PaymentDate"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.BankBranchID = Convert.ToString(dr0["BankBranchID"]);
                                            rSingle.BeneficiaryName = Convert.ToString(dr0["BeneficiaryName"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.NAVDate, r.BankBranchID, r.ContactPerson, r.FaxNo, r.PhoneNo, r.ClientRedemptionPK } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "DAILY REDEMPTION INSTRUCTION";
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " :  " + rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 9].Value = "Ref No.";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 10].Value = " : " + rsHeader.Key.ClientRedemptionPK;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "To";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.BankBranchID;

                                            worksheet.Cells[incRowExcel, 9].Value = "From";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 10].Value = " : " + _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Attn.";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.ContactPerson;

                                            worksheet.Cells[incRowExcel, 9].Value = "Phone No.";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 10].Value = " : " + _host.Get_CompanyPhone();
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Phone No";
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + _host.Get_CompanyPhone();

                                            worksheet.Cells[incRowExcel, 9].Value = "Fax No";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 10].Value = " : " + _host.Get_CompanyFax();
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax No";
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FaxNo;

                                            worksheet.Cells[incRowExcel, 9].Value = "Date";
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 10].Value = " : " + Convert.ToDateTime(rsHeader.Key.NAVDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Here with, we would like to confirm that the following subscription transaction on value date :  " + Convert.ToDateTime(rsHeader.Key.NAVDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 2;
                                            //Row A = 2
                                            int RowC = incRowExcel;
                                            int RowW = incRowExcel + 1;

                                            //ThickBox Border
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "No. ";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Merge = true;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "C.I.F";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Merge = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Custodian ID";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Merge = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Single ID";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Merge = true;
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowC + ":D" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Name";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Merge = true;
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowC + ":E" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "REDEEMED";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "NET REDEEMED AMOUNT IDR";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Style.WrapText = true;
                                            worksheet.Cells["J" + RowC + ":J" + RowW].Merge = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "PAYMENT DATE";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowC + ":K" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + RowC + ":K" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowC + ":K" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["K" + RowC + ":K" + RowW].Style.WrapText = true;
                                            worksheet.Cells["K" + RowC + ":K" + RowW].Merge = true;


                                            worksheet.Cells[incRowExcel, 12].Value = "Remarks";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Merge = true;

                                            worksheet.Cells[incRowExcel, 13].Value = "BENEFICIARY BANK ACCOUNT";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowC + ":K" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Style.WrapText = true;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Value = "GROSS IDR";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "UNITS";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "%";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            // Row C = 4

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowO = incRowExcel;
                                                int RowI = incRowExcel + 1;

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowO + ":M" + RowI].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["F" + RowO + ":J" + RowI].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["E" + RowO + ":J" + RowI].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells["A" + RowO + ":A" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientID;
                                                worksheet.Cells["B" + RowO + ":B" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchID;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                                worksheet.Cells["C" + RowO + ":C" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SID;
                                                worksheet.Cells["D" + RowO + ":D" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                worksheet.Cells["E" + RowO + ":E" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CashAmount;
                                                worksheet.Cells["F" + RowO + ":F" + RowI].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells["F" + RowO + ":F" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells["G" + RowO + ":G" + RowI].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells["G" + RowO + ":G" + RowI].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeePercent;
                                                worksheet.Cells["H" + RowO + ":H" + RowI].Style.Numberformat.Format = "#,##0%";
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.FeeAmount;
                                                worksheet.Cells["I" + RowO + ":I" + RowI].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TotalCashAmount;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(rsDetail.PaymentDate).ToString("dd-MMM-yyyy");

                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Remark;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }
                                            worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0%";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            incRowExcel = incRowExcel + 2;




                                            worksheet.Cells[incRowExcel, 1].Value = "Authorized by :";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 10].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 10, incRowExcel, 11].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 10, incRowExcel, 11].Merge = true;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 10].Value = "Jakarta Selatan 12190, Indonesia";
                                            worksheet.Cells[incRowExcel, 10, incRowExcel, 11].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 10].Value = "Phone No";
                                            worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 11].Value = " : " + _host.Get_CompanyPhone();
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 10].Value = "Fax No";
                                            worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 11].Value = " : " + _host.Get_CompanyPhone();
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Suharni/Belinda/Dody";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Manager";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }
                                        //incRowExcel++;
                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:M" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 15;
                                        }

                                        worksheet.DeleteRow(_lastRow);
                                        //worksheet.DeleteRow(_lastRow + 1);
                                        //worksheet.DeleteRow(_lastRow + 2);
                                        //worksheet.DeleteRow(_lastRow + 3);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 40;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 30;
                                        worksheet.Column(13).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily Switching Instruction
            if (_unitRegistryRpt.ReportName.Equals("Daily Switching Instruction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramFundTo = "";
                            string _paramFundFrom = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = "And CS.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundTo = "And CS.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundTo = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And CS.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _status = " and  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _status = " and CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";

                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _status = " and CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";

                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _status = " and CS.Status = 1  ";

                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _status = " and CS.Status = 3  ";

                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _status = " and (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0 and Cs.status not in (3,4) ";

                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _status = " and (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0 and Cs.status not in (3,4)";

                            }


                            cmd.CommandText =

                               @"
                                select FC.FundclientPK,M.DescOne TypeFrom,M1.DescOne TypeTo,M2.DescOne CityFrom,M4.DescOne CityTo
                                ,MB.DescOne,B.City,B1.City,CS.CashAmount GrossAmount,FC.FundClientPK, CS.SwitchingFeeAmount Fee, CS.UnitAmount GrossUnit
                                ,CS.TotalUnitAmountFundFrom UnitNet,CS.TotalCashAmountFundFrom NetAmount,B.Fax1 FaxNoFrom, B.Phone1 PhoneNoFrom,B.ContactPerson ContactPersonFrom,B.ID IDFrom,
                                FC.SID SID, FC.ID ClientID,B1.Fax1 FaxNoTo, B1.Phone1 PhoneNoTo,B1.ContactPerson ContactPersonTo,B1.ID IDTo,CS.ClientSwitchingPK
                                ,CS.Description Remark,CS.TotalUnitAmountFundFrom Net,CS.SwitchingFeePercent FeePercent,CS.SwitchingFeeAmount FeeAmount,B.BankAccountName BankAccountNameFrom,
                                B1.BankAccountName BankAccountNameTo,F11.BankAccountNo TransferFromNoFrom, F12.BankAccountNo TransferFromNoTo,B2.Name AddressFrom,B3.Name AddressTo,F11.Name FundNameFrom, F12.Name FundNameTo,CS.NavDate, CS.PaymentDate,FC.Name Name from ClientSwitching CS
                                left join FundClient FC on FC.FundClientPK = CS.FundClientPK and FC.Status in (1,2)
                                left join Fund F1 on F1.FundPK = CS.FundPKFrom and F1.Status in (1,2)
                                left join Fund F2 on F2.FundPK = CS.FundPKTo and F2.Status in (1,2)
                                left join FundCashRef F11 on F11.FundCashRefPK = CS.CashRefPKFrom and F11.Status in (1,2)
                                left join FundCashRef F12 on F12.FundCashRefPK = CS.CashRefPKTo and F12.Status in (1,2)
                                left join BankBranch B on B.BankBranchPK = F11.BankBranchPK and B.Status in (1,2)
                                left join BankBranch B1 on B1.BankBranchPK = F12.BankBranchPK and B1.Status in (1,2)
                                left join Mastervalue M on M.Code = B.Type and M.Status = 2 and M.ID = 'BankCustodianType'
                                left join Mastervalue M1 on M1.Code = B1.Type and M1.Status = 2 and M1.ID = 'BankCustodianType'
                                left join Mastervalue M2 on M2.Code = B.City and M2.Status = 2 and M2.ID = 'CityRHB'
                                left join MasterValue MB on MB.Code = B1.City and MB.Status = 2 and MB.ID = 'CityRHB'
                                left join Mastervalue M4 on M4.Code = B1.City and M4.Status = 2 and M4.ID = 'CityRHB'
                                left join Bank B2 on B.BankPK = B2.BankPK and B2.Status in (1,2)
                                left join Bank B3 on B1.BankPK = B3.BankPK and B3.Status in (1,2)
                                where NAVDate between  @DateFrom and @DateTo          
                                " + _paramFundFrom + _paramFundTo + _paramFundClient + _status + "";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailySwitchingInstruction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailySwitchingInstruction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "DailySwitchingInstruction";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Switching Instruction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailySwitchingInstruction> rList = new List<DailySwitchingInstruction>();
                                        while (dr0.Read())
                                        {
                                            DailySwitchingInstruction rSingle = new DailySwitchingInstruction();
                                            rSingle.ClientSwitchingPK = Convert.ToInt32(dr0["ClientSwitchingPK"]);
                                            rSingle.FundNameFrom = Convert.ToString(dr0["FundNameFrom"]);
                                            rSingle.FundNameTo = Convert.ToString(dr0["FundNameTo"]);
                                            rSingle.NAVDate = Convert.ToString(dr0["NAVDate"]);
                                            rSingle.PaymentDate = Convert.ToString(dr0["PaymentDate"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.UnitNet = Convert.ToDecimal(dr0["UnitNet"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.GrossUnit = Convert.ToDecimal(dr0["GrossUnit"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.NetUnit = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.Fee = Convert.ToDecimal(dr0["Fee"]);
                                            rSingle.Net = Convert.ToDecimal(dr0["Net"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.FaxNoFrom = Convert.ToString(dr0["FaxNoFrom"]);
                                            rSingle.PhoneNoFrom = Convert.ToString(dr0["PhoneNoFrom"]);
                                            rSingle.ContactPersonFrom = Convert.ToString(dr0["ContactPersonFrom"]);
                                            rSingle.TypeFrom = Convert.ToString(dr0["TypeFrom"]);
                                            rSingle.BankAccountNameFrom = Convert.ToString(dr0["BankAccountNameFrom"]);
                                            rSingle.IDFrom = Convert.ToString(dr0["IDFrom"]);
                                            rSingle.TransferFromNoFrom = Convert.ToString(dr0["TransferFromNoFrom"]);
                                            rSingle.CityFrom = Convert.ToString(dr0["CityFrom"]);
                                            rSingle.AddressFrom = Convert.ToString(dr0["AddressFrom"]);
                                            rSingle.FaxNoTo = Convert.ToString(dr0["FaxNoTo"]);
                                            rSingle.PhoneNoTo = Convert.ToString(dr0["PhoneNoTo"]);
                                            rSingle.ContactPersonTo = Convert.ToString(dr0["ContactPersonTo"]);
                                            rSingle.IDTo = Convert.ToString(dr0["IDTo"]);
                                            rSingle.TypeTo = Convert.ToString(dr0["TypeTo"]);
                                            rSingle.BankAccountNameTo = Convert.ToString(dr0["BankAccountNameTo"]);
                                            rSingle.TransferFromNoTo = Convert.ToString(dr0["TransferFromNoTo"]);
                                            rSingle.CityTo = Convert.ToString(dr0["CityTo"]);
                                            rSingle.AddressTo = Convert.ToString(dr0["AddressTo"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundNameTo, r.FundNameFrom, r.Name, r.NAVDate, r.PaymentDate, r.ContactPersonTo, r.FaxNoTo, r.PhoneNoTo, r.ContactPersonFrom, r.FaxNoFrom, r.PhoneNoFrom, r.TypeFrom, r.TypeTo, r.CityFrom, r.CityTo, r.IDFrom, r.IDTo } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "DAILY SWITCHING BATCH FORM";
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Switch Out Date";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + Convert.ToDateTime(rsHeader.Key.NAVDate).ToString("dd-MMM-yyyy");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Switch In Date";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + Convert.ToDateTime(rsHeader.Key.PaymentDate).ToString("dd-MMM-yyyy");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Switch From (OUT)";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundNameFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "   " + rsHeader.Key.IDTo + " " + rsHeader.Key.TypeFrom + " - " + rsHeader.Key.CityFrom + " (  Up : " + rsHeader.Key.ContactPersonFrom + " - " + rsHeader.Key.PhoneNoFrom + " ) ";

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Switch To (IN)";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.FundNameTo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "   " + rsHeader.Key.IDTo + " " + rsHeader.Key.TypeTo + " - " + rsHeader.Key.CityTo + " (  Up : " + rsHeader.Key.ContactPersonTo + " - " + rsHeader.Key.PhoneNoTo + " ) ";


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Here with, we would like to confirm that the following Switching transaction on value date : " + Convert.ToDateTime(rsHeader.Key.NAVDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            incRowExcel++;
                                            //Row A = 2
                                            int RowC = incRowExcel;
                                            int RowW = incRowExcel + 2;

                                            //ThickBox Border

                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowC + ":M" + RowW].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Merge = true;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowC + ":A" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Shareholder SID";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Merge = true;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowC + ":B" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Investor's Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Merge = true;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowC + ":C" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Switch Out";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "switch In";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Transfer From";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Merge = true;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowC + ":L" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Remarks";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Merge = true;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowC + ":M" + RowW].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 4].Value = "Amount (IDR)";
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            int RowP = incRowExcel;
                                            int RowL = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 10].Value = "Net";
                                            worksheet.Cells["J" + RowP + ":J" + RowL].Merge = true;
                                            worksheet.Cells["J" + RowP + ":J" + RowL].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowP + ":J" + RowL].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Value = "Account No";
                                            worksheet.Cells["K" + RowP + ":K" + RowL].Merge = true;
                                            worksheet.Cells["K" + RowP + ":K" + RowL].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowP + ":K" + RowL].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 4].Value = "Gross";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Net";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Gross";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Net";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;






                                            // Row C = 4

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowO = incRowExcel;
                                                int RowI = incRowExcel + 2;

                                                //ThickBox Border

                                                //worksheet.Cells["A" + RowD + ":K" + RowE].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":K" + RowE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells["A" + RowO + ":J" + RowI].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowO + ":J" + RowI].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowO + ":J" + RowI].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowO + ":J" + RowI].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells["M" + RowO + ":M" + RowI].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["M" + RowO + ":M" + RowI].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["M" + RowO + ":M" + RowI].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["M" + RowO + ":M" + RowI].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells["K" + RowO + ":K" + RowI].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                                //area detail
                                                int _startRowDetails = incRowExcel;
                                                int _endRowDetails = incRowExcel + 2;
                                                int incRowExcel2 = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells["A" + _startRowDetails + ":A" + _endRowDetails].Merge = true;
                                                worksheet.Cells["A" + _startRowDetails + ":A" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + _startRowDetails + ":A" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;
                                                worksheet.Cells["B" + _startRowDetails + ":B" + _endRowDetails].Merge = true;
                                                worksheet.Cells["B" + _startRowDetails + ":B" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["B" + _startRowDetails + ":B" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Name;
                                                worksheet.Cells["C" + _startRowDetails + ":C" + _endRowDetails].Merge = true;
                                                worksheet.Cells["C" + _startRowDetails + ":C" + _endRowDetails].Style.WrapText = true;
                                                worksheet.Cells["C" + _startRowDetails + ":C" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["C" + _startRowDetails + ":C" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.GrossAmount;
                                                worksheet.Cells["D" + _startRowDetails + ":D" + _endRowDetails].Merge = true;
                                                worksheet.Cells["D" + _startRowDetails + ":D" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["D" + _startRowDetails + ":D" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["D" + _startRowDetails + ":D" + _endRowDetails].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FeeAmount;
                                                worksheet.Cells["E" + _startRowDetails + ":E" + _endRowDetails].Merge = true;
                                                worksheet.Cells["E" + _startRowDetails + ":E" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["E" + _startRowDetails + ":E" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NetAmount;
                                                worksheet.Cells["F" + _startRowDetails + ":F" + _endRowDetails].Merge = true;
                                                worksheet.Cells["F" + _startRowDetails + ":F" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["F" + _startRowDetails + ":F" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["F" + _startRowDetails + ":F" + _endRowDetails].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.GrossUnit;
                                                worksheet.Cells["G" + _startRowDetails + ":G" + _endRowDetails].Merge = true;
                                                worksheet.Cells["G" + RowO + ":G" + RowI].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells["G" + _startRowDetails + ":G" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["G" + _startRowDetails + ":G" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeePercentUnit;
                                                worksheet.Cells["H" + _startRowDetails + ":H" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["H" + _startRowDetails + ":H" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["H" + _startRowDetails + ":H" + _endRowDetails].Merge = true;
                                                worksheet.Cells["H" + _startRowDetails + ":H" + _endRowDetails].Style.Numberformat.Format = "#,##0%";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NetUnit;//
                                                worksheet.Cells["I" + _startRowDetails + ":I" + _endRowDetails].Merge = true;
                                                worksheet.Cells["I" + _startRowDetails + ":I" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["I" + _startRowDetails + ":I" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + _startRowDetails + ":I" + _endRowDetails].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetAmount;
                                                worksheet.Cells["J" + _startRowDetails + ":J" + _endRowDetails].Merge = true;
                                                worksheet.Cells["J" + _startRowDetails + ":J" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["J" + _startRowDetails + ":J" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["J" + _startRowDetails + ":J" + _endRowDetails].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Remark;
                                                worksheet.Cells["M" + _startRowDetails + ":M" + _endRowDetails].Merge = true;
                                                worksheet.Cells["M" + _startRowDetails + ":M" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["M" + _startRowDetails + ":M" + _endRowDetails].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TransferFromNoTo;
                                                worksheet.Cells["K" + _startRowDetails + ":K" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.TransferFromNoFrom;
                                                worksheet.Cells["L" + _startRowDetails + ":L" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 11].Value = "Atas Nama : " + rsDetail.FundNameTo;
                                                worksheet.Cells["K" + _startRowDetails + ":K" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 12].Value = "Atas Nama : " + rsDetail.FundNameFrom;
                                                worksheet.Cells["L" + _startRowDetails + ":L" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.AddressTo;
                                                worksheet.Cells["K" + _startRowDetails + ":K" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.AddressFrom;
                                                worksheet.Cells["L" + _startRowDetails + ":L" + _endRowDetails].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                _endRowDetail = _endRowDetails;
                                                incRowExcel = _endRowDetail;
                                                _no++;
                                                incRowExcel++;

                                            }
                                            worksheet.Cells["A" + _endRowDetail + ":L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Value = "TOTAL";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Originated by :";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).Height = 40;
                                            worksheet.Cells[incRowExcel, 12].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 12].Value = "Jakarta Selatan 12190, Indonesia";
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 12].Value = "Phone No";
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 13].Value = " : " + _host.Get_CompanyPhone();
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 12].Value = "Fax No";
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 13].Value = " : " + _host.Get_CompanyPhone();
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                            worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "( Thomas H / Dody P / Belinda / Suharni )";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = _host.Get_DirectorName();
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }
                                        //incRowExcel++;
                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:M" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 15;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 40;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 70;
                                        worksheet.Column(12).Width = 70;
                                        worksheet.Column(13).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Client Income Report
            if (_unitRegistryRpt.ReportName.Equals("Client Income Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText =

                               @"
                                SELECT B.ID FundID 
                                ,B.Name FundName
                                ,C.Name
                                ,ISNULL(A.UnitAmount,0) UnitAmount
                                ,ISNULL(A.AvgNAV,0) AvgNAV
                                ,ISNULL(A.UnitAmount,0) * ISNULL(A.AvgNAV,0)  Amount
                                FROM FundClientPosition A
                                LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                                LEFT JOIN FundClient C ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
                                WHERE A.Date = @DateFrom and ISNULL(A.UnitAmount,0) > 0" + _paramFund + _paramFundClient;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ClientIncomeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ClientIncomeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ClientIncomeReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Income Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["Name"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.AvgNav = Convert.ToDecimal(dr0["AvgNAV"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.ClientName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client Income Report";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "As of ";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Name ";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.ClientName;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund ID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Avg Nav";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AvgNav;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Value = "TOTAL Income";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";


                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 55;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Daily Transaction
            if (_unitRegistryRpt.ReportName.Equals("Report Daily Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4) ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }


                            cmd.CommandText =

                               @"
                                Select 
	                            A.* from (
	                            Select 'Subscription' TypeTransaction,isnull(C.ID,'') FundID, C.Name FundName,isnull(B.SID,'') SID,isnull(B.Name,'') Name
	                            ,A.ValueDate
	                            ,A.TotalUnitAmount Unit
	                            ,A.NAV 
								, dbo.FGetAVGForFundClientPosition(A.ValueDate,A.FundClientPK,A.FundPK) AvgNav
	                            from ClientSubscription A
	                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
	                            where 
								A.Status = 2 and A.Posted = 1 and A.Revised = 0 " + _paramFund + _paramFundClient + @" and 
								A.ValueDate between @DateFrom and @DateTo and A.Type <> 3

	                            UNION ALL

	                            Select 'Redemption' TypeTransaction,isnull(C.ID,'') FundID,C.Name FundName,isnull(B.SID,'') SID,isnull(B.Name,'') Name
	                            ,A.ValueDate
	                            ,A.UnitAmount Unit
	                            ,A.NAV 
								, dbo.FGetAVGForFundClientPosition(A.ValueDate,A.FundClientPK,A.FundPK) AvgNav
	                            from ClientRedemption A
	                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
	                            where 
								A.Status = 2 and A.Posted = 1 and A.Revised = 0 " + _paramFund + _paramFundClient + @" and 
								A.ValueDate between @DateFrom  and @DateTo and A.Type <> 3 

	                            UNION ALL

	                            Select 'Switching In' TypeTransaction,isnull(C.ID,'') FundID,C.Name FundName,isnull(B.SID,'') SID,isnull(B.Name,'') Name
	                            ,A.ValueDate
	                            ,A.TotalUnitAmountFundTo Unit
	                            ,A.NAVFundTo NAV
								, dbo.FGetAVGForFundClientPosition(A.ValueDate,A.FundClientPK,A.FundPKTo) AvgNav
	                            from ClientSwitching A
	                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                            left join Fund C on A.FundPKTo = C.FundPK and C.status in (1,2)
	                            where 
								A.Status = 2 and A.Posted = 1 and A.Revised = 0 " + _paramFundTo + _paramFundClient + @" and 
								A.ValueDate between @DateFrom  and @DateTo  and A.Type <> 3


	                            UNION ALL

	                            Select 'Switching Out' TypeTransaction,isnull(C.ID,'') FundID,C.Name FundName,isnull(B.SID,'') SID,isnull(B.Name,'') Name
	                            ,A.ValueDate
	                            ,A.TotalUnitAmountFundFrom Unit
	                            ,A.NAVFundFrom NAV 
								, dbo.FGetAVGForFundClientPosition(A.ValueDate,A.FundClientPK,A.FundPKFrom)
	                            from ClientSwitching A
	                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	                            left join Fund C on A.FundPKFrom = C.FundPK and C.status in (1,2)
	                            where 
								A.Status = 2 and A.Posted = 1 and A.Revised = 0 " + _paramFundFrom + _paramFundClient + @" and
								 A.ValueDate between @DateFrom  and @DateTo  and A.Type <> 3


	                            )A
                                order by A.ValueDate asc

                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportDailyTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportDailyTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportDailyTransaction";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Daily Transaction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.TransactionType = Convert.ToString(dr0["TypeTransaction"]);
                                            rSingle.ClientName = Convert.ToString(dr0["Name"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Report Daily Transaction";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date ";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy") + " - " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd MMMM yyyy");

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund ";
                                            worksheet.Cells[incRowExcel, 2].Value = " : " + rsHeader.Key.FundName;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 2].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.ValueDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.TransactionType;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                if (rsDetail.TransactionType == "Redemption" || rsDetail.TransactionType == "Switching Out")
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(D" + incRowExcel + "*E" + incRowExcel + ") * -1";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(D" + incRowExcel + "*E" + incRowExcel + ")";
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 6].Calculate();
                                                    worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }
                                            worksheet.Cells["A" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Value = "TOTAL TRANSAKSI";
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";


                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }


                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {



                                                cmd1.CommandText =

                                                  @"
                                                
Select 
TypeTransaction TransactionType,sum(Amount) Amount from (
Select 'Subscription' TypeTransaction,isnull(C.ID,'') FundID, C.Name FundName,isnull(B.Name,'') Name
,A.ValueDate
, sum(A.TotalUnitAmount * A.NAV) Amount
from ClientSubscription A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
where 
		A.Status = 2 and A.Posted = 1 and A.Revised = 0	" + _paramFund + _paramFundClient + @" and
A.ValueDate between @DateFrom and @DateTo and A.Type <> 3
group by C.ID,C.name,B.Name,A.ValueDate

UNION ALL

Select 'Redemption' TypeTransaction,isnull(C.ID,'') FundID,C.Name FundName,isnull(B.Name,'') Name
,A.ValueDate
, sum(A.UnitAmount * A.NAV) * -1 Amount
from ClientRedemption A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
where 
		A.Status = 2 and A.Posted = 1 and A.Revised = 0	" + _paramFund + _paramFundClient + @" and
A.ValueDate between @DateFrom  and @DateTo and A.Type <> 3 
group by C.ID,C.name,B.Name,A.ValueDate
UNION ALL

Select 'Subscription' TypeTransaction,isnull(C.ID,'') FundID,C.Name FundName,isnull(B.Name,'') Name
,A.ValueDate
, sum(A.TotalUnitAmountFundTo * A.NAVFundTo) Amount
from ClientSwitching A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPKTo = C.FundPK and C.status in (1,2)
where 
		A.Status = 2 and A.Posted = 1 and A.Revised = 0	" + _paramFundFrom + _paramFundClient + @" and
A.ValueDate between @DateFrom  and @DateTo  and A.Type <> 3
group by C.ID,C.name,B.Name,A.ValueDate

UNION ALL

Select 'Redemption' TypeTransaction,isnull(C.ID,'') FundID,C.Name FundName,isnull(B.Name,'') Name
,A.ValueDate
, sum(A.TotalUnitAmountFundFrom * A.NAVFundFrom) * -1 Amount
from ClientSwitching A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPKFrom = C.FundPK and C.status in (1,2)
where 
		A.Status = 2 and A.Posted = 1 and A.Revised = 0	" + _paramFundFrom + _paramFundClient + @" and
A.ValueDate between @DateFrom  and @DateTo  and A.Type <> 3
group by C.ID,C.name,B.Name,A.ValueDate

)A
group by TypeTransaction 
order by TypeTransaction desc";


                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (dr1.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                        {


                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<UnitRegistryRpt> rList1 = new List<UnitRegistryRpt>();
                                                            while (dr1.Read())
                                                            {
                                                                UnitRegistryRpt rSingle1 = new UnitRegistryRpt();
                                                                rSingle1.TransactionType = Convert.ToString(dr1["TransactionType"]);
                                                                rSingle1.Amount = Convert.ToDecimal(dr1["Amount"]);

                                                                rList1.Add(rSingle1);

                                                            }


                                                            var QueryByFundID1 =
                                                                from r1 in rList1
                                                                group r1 by new { r1.TransactionType, r1.Amount } into rGroup1
                                                                select rGroup1;


                                                            incRowExcel = incRowExcel + 2;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Value = "TOTAL TRANSAKSI";
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            int _start = incRowExcel;
                                                            int _end = 0;
                                                            foreach (var rsHeader1 in QueryByFundID1)
                                                            {

                                                                incRowExcel++;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.TransactionType;
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.Amount;
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";

                                                                _end = incRowExcel;
                                                            }

                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1].Value = "NET SUBS/ REDEMP";
                                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _start + ":B" + _end + ")";
                                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";

                                                        }
                                                    }
                                                }

                                            }

                                        }

                                        using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        {
                                            DbCon2.Open();
                                            using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                            {



                                                cmd2.CommandText =

                                                  @" select sum(AUMFrom) AUMFrom, sum(AUMTo) AUMTo from (
                                                          select AUM AUMFrom, 0 AUMTo from CloseNav A where Date = @DateFrom and status in (1,2) " + _paramFund + @"
                                                          union all
                                                          select 0, AUM AUMTo from CloseNav A where Date = @DateTo and status in (1,2) " + _paramFund + @"  
                                                          ) A
                                                        ";


                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {
                                                    if (dr2.HasRows)
                                                    {


                                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                        using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                                        {
                                                            while (dr2.Read())
                                                            {

                                                                incRowExcel = incRowExcel + 2;
                                                                int _startAUM = incRowExcel;
                                                                worksheet.Cells[incRowExcel, 1].Value = "Total AUM Date From ";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDecimal(dr2["AUMFrom"]);
                                                                worksheet.Cells[incRowExcel, 2].Calculate();
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";

                                                                incRowExcel++;
                                                                int _endAUM = incRowExcel;
                                                                worksheet.Cells[incRowExcel, 1].Value = "Total AUM Date To ";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDecimal(dr2["AUMTo"]);
                                                                worksheet.Cells[incRowExcel, 2].Calculate();
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";

                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1].Value = "Perubahan AUM";
                                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _endAUM + "-B" + _startAUM + ")";
                                                                worksheet.Cells[incRowExcel, 2].Calculate();
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";

                                                            }
                                                        }
                                                    }
                                                }

                                            }

                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 6];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 55;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report SID Client
            if (_unitRegistryRpt.ReportName.Equals("Report SID Client"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = " and C.SID in ( Select SID from fundclient where FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) )";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            cmd.CommandText =

                               @"SELECT B.ID FundID 
                                ,B.Name FundName
                                ,C.SID
                                ,C.Name
                                ,C.IFUACode
                                ,isnull(A.UnitAmount,0) UnitAmount
                                ,ISNULL(D.Nav,0) NAV
                                ,isnull(A.UnitAmount,0) * ISNULL(D.Nav,0) Amount
                                FROM FundClientPosition A
                                LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                                LEFT JOIN FundClient C ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
                                LEFT JOIN CloseNAV D ON A.FundPK = D.FundPK AND D.Date = @DateFrom AND D.status IN (1,2)
                                WHERE A.Date = @DateFrom " + _paramFund + _paramFundClient;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportSIDClient" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportSIDClient" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportSIDClient";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report SID Client");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["Name"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUACode"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundID, r.FundName, r.SID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;


                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Report SID Client";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "As of ";
                                        worksheet.Cells[incRowExcel, 2].Value = " : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "Fund ID";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "SID";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Name";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "IFUA";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Unit";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Value = "NAV";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "Amount";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        incRowExcel++;
                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundID;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SID;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //area detail

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.IFUA;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }
                                            worksheet.Cells["A" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Value = "TOTAL";
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";

                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";

                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 55;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Laporan Akun Bulanan Client
            else if (_unitRegistryRpt.ReportName.Equals("Laporan Akun Bulanan Client"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4) ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0 and A.status not in (3,4)";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0 and A.status not in (3,4)";
                            }
                            cmd.CommandText =


                           @"
                            declare @DateStartBalance datetime
                            set @DateStartBalance = dbo.FWorkingDay(@DateFrom,-1)

                            Select [dbo].[Get_UnitAmountByFundPKandFundClientPK](@DateStartBalance,A.FundClientPK,A.FundPK) StartBalance,[dbo].[FgetLastCloseNav](@DateStartBalance,A.FundPK) StartNAV,
                            [dbo].[FgetLastCloseNav](@DateTo,A.FundPK) EndingNAV,
                            @DateStartBalance DateStartBalance, 
                            A.* from (
                            Select isnull(C.Name,'') FundName,isnull(B.Name,'') Name,case when B.InvestorType = 1 then isnull(B.AlamatInd1,'') else isnull(B.AlamatPerusahaan,'') end [Address]
                            ,A.ValueDate, 'SUB' [Transaction]
                            ,A.TotalUnitAmount Unit
                            ,A.NAV 
                            ,A.TotalCashAmount Amount,sum(A.TotalCashAmount) TotalCashAmount,case when B.InvestorType = 1 then isnull(B.KodePosInd1,'') else isnull(B.KodePosIns,'') end ZipCode
                            ,A.FundClientPK,A.FundPK, B.NamaDepanIns1 + ' '+ B.NamaTengahIns1 +' '+ B.NamaBelakangIns1 attn
                            from ClientSubscription A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            where
                            " + _statusSubs + _paramFund + _paramFundClient + @" and 
                            A.ValueDate between @DateFrom and @Dateto and A.Type <> 3
                            group by C.Name,B.Name,b.InvestorType,b.AlamatInd1,b.AlamatPerusahaan,a.ValueDate,a.TotalUnitAmount,a.NAV,a.TotalCashAmount,b.KodePosInd1,b.KodePosIns,a.FundClientPK,a.FundPK, B.NamaDepanIns1, B.NamaTengahIns1,B.NamaBelakangIns1
                            UNION ALL

                            Select isnull(C.Name,'') FundName,isnull(B.Name,'') Name,case when B.InvestorType = 1 then isnull(B.AlamatInd1,'') else isnull(B.AlamatPerusahaan,'') end [Address]
                            ,A.ValueDate, 'RED' [Transaction]
                            ,A.UnitAmount Unit
                            ,A.NAV 
                            ,A.TotalCashAmount Amount,sum(A.TotalCashAmount) TotalCashAmount,case when B.InvestorType = 1 then isnull(B.KodePosInd1,'') else isnull(B.KodePosIns,'') end ZipCode 
                            ,A.FundClientPK,A.FundPK, B.NamaDepanIns1 +' '+ B.NamaTengahIns1 +' ' +B.NamaBelakangIns1 attn
                            from ClientRedemption A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            where 
                            " + _statusRedemp + _paramFund + _paramFundClient + @" and 
                            A.ValueDate between @DateFrom and @Dateto and A.Type <> 3
                            group by C.Name,B.Name,b.InvestorType,b.AlamatInd1,b.AlamatPerusahaan,a.ValueDate,a.TotalUnitAmount,a.NAV,a.TotalCashAmount,b.KodePosInd1,b.KodePosIns,a.FundClientPK,a.FundPK,a.UnitAmount, B.NamaDepanIns1, B.NamaTengahIns1,B.NamaBelakangIns1
                            UNION ALL

                            Select isnull(C.Name,'') FundName,isnull(B.Name,'') Name,case when B.InvestorType = 1 then isnull(B.AlamatInd1,'') else isnull(B.AlamatPerusahaan,'') end [Address]
                            ,A.ValueDate, 'SWITCH IN' [Transaction]
                            ,A.TotalUnitAmountFundTo Unit
                            ,A.NAVFundTo NAV 
                            ,A.TotalCashAmountFundTo Amount,sum(A.TotalCashAmountFundTo) TotalCashAmount,case when B.InvestorType = 1 then isnull(B.KodePosInd1,'') else isnull(B.KodePosIns,'') end ZipCode
                            ,A.FundClientPK,A.FundPKTo FundPK, B.NamaDepanIns1 +' '+ B.NamaTengahIns1 +' ' +B.NamaBelakangIns1 attn
                            from ClientSwitching A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            left join Fund C on A.FundPKTo = C.FundPK and C.status in (1,2)
                            where 
                            " + _statusSubs + _paramFundTo + _paramFundClient + @" and 
                            A.ValueDate between @DateFrom and @Dateto and A.Type <> 3
                            group by C.Name,B.Name,b.InvestorType,b.AlamatInd1,b.AlamatPerusahaan,a.ValueDate,a.TotalUnitAmountFundTo,a.NAVFundTo,a.TotalCashAmountFundTo,b.KodePosInd1,b.KodePosIns,a.FundClientPK,a.FundPKTo, B.NamaDepanIns1, B.NamaTengahIns1,B.NamaBelakangIns1

                            UNION ALL

                            Select isnull(C.Name,'') FundName,isnull(B.Name,'') Name,case when B.InvestorType = 1 then isnull(B.AlamatInd1,'') else isnull(B.AlamatPerusahaan,'') end [Address]
                            ,A.ValueDate, 'SWITCH OUT' [Transaction]
                            ,A.TotalUnitAmountFundFrom Unit
                            ,A.NAVFundFrom NAV 
                            ,A.TotalCashAmountFundFrom Amount,sum(A.TotalCashAmountFundFrom) TotalCashAmount,case when B.InvestorType = 1 then isnull(B.KodePosInd1,'') else isnull(B.KodePosIns,'') end ZipCode
                            ,A.FundClientPK,A.FundPKFrom FundPK, B.NamaDepanIns1+' ' + B.NamaTengahIns1 +' '+ B.NamaBelakangIns1 attn
                            from ClientSwitching A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            left join Fund C on A.FundPKFrom = C.FundPK and C.status in (1,2)
                            where 
                            " + _statusRedemp + _paramFundFrom + _paramFundClient + @" and 
                            A.ValueDate between @DateFrom and @Dateto and A.Type <> 3
                            group by C.Name,B.Name,b.InvestorType,b.AlamatInd1,b.AlamatPerusahaan,a.ValueDate,a.TotalUnitAmountFundFrom,a.NAVFundFrom,a.TotalCashAmountFundFrom,b.KodePosInd1,b.KodePosIns,a.FundClientPK,a.FundPKFrom, B.NamaDepanIns1, B.NamaTengahIns1,B.NamaBelakangIns1

                            )A
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanAkunBulananClient" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanAkunBulananClient" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan Akun Bulanan Client");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanAkunBulananClient> rList = new List<LaporanAkunBulananClient>();
                                        while (dr0.Read())
                                        {
                                            LaporanAkunBulananClient rSingle = new LaporanAkunBulananClient();
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.StartNAV = Convert.ToDecimal(dr0["StartNAV"]);
                                            rSingle.EndingNAV = Convert.ToDecimal(dr0["EndingNAV"]);
                                            rSingle.DateStartBalance = Convert.ToDateTime(dr0["DateStartBalance"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.Address = Convert.ToString(dr0["Address"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Transaction = Convert.ToString(dr0["Transaction"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.ZipCode = Convert.ToString(dr0["ZipCode"]);
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.TotalSubsAmount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.TotalRedmAmount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.attn = Convert.ToString(dr0["attn"]);
                                            rList.Add(rSingle);
                                        }


                                        var QueryByFundID =
                                           from r in rList
                                           orderby r.FundName, r.Name, r.Address, r.ValueDate ascending
                                           group r by new { r.Name, r.FundName, r.StartBalance, r.StartNAV, r.DateStartBalance, r.Address, r.EndingNAV, r.ZipCode, r.attn } into rGroup
                                           select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel++;

                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 6].Value = "Laporan Bulanan ";
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Value = "Monthly Report";
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "To :";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Name;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Row(incRowExcel).Height = 45;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Address + "  " + rsHeader.Key.ZipCode;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Attn : " + rsHeader.Key.attn;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "No. Registrasi :";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Registration No. :";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 4].Value = "Transaksi Bulan";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MMMM yyyy");
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Transaction";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Balance (In Unit)";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Balance (In Rp.)";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsHeader.Key.DateStartBalance);
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Starting Balance";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.StartBalance;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.StartNAV;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "*G" + incRowExcel + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Calculate();


                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            decimal _totalRedmAmount = 0;
                                            decimal _totalSubAmount = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                _totalSubAmount = rsDetail.TotalSubsAmount;
                                                _totalRedmAmount = rsDetail.TotalRedmAmount;

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":H" + RowC].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowC].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":H" + RowE].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":H" + RowE].Style.Border.Left.Style = ExcelBorderStyle.Double;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.ValueDate);
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Transaction;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                int _rows = incRowExcel - 1;
                                                if (rsDetail.Unit == 0)
                                                {
                                                    if (rsDetail.Transaction == "SUB")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "+D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Value = "0";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    }
                                                    else if (rsDetail.Transaction == "RED")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "-D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Value = "0";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    }
                                                    else if (rsDetail.Transaction == "SWITCH IN")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "+D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Value = "0";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    }
                                                    else if (rsDetail.Transaction == "SWITCH OUT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "-D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Value = "0";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    }
                                                }
                                                else
                                                {
                                                    if (rsDetail.Transaction == "SUB")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "+D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "*G" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                    }
                                                    else if (rsDetail.Transaction == "RED")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "-D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "*G" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                    }
                                                    else if (rsDetail.Transaction == "SWITCH IN")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "+D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "*G" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                    }
                                                    else if (rsDetail.Transaction == "SWITCH OUT")
                                                    {
                                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _rows + "-D" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(E" + incRowExcel + "*G" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                    }
                                                }



                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }

                                            int _endRowDetailTotal = incRowExcel;

                                            worksheet.Cells["A" + _endRowDetail + ":H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 3].Value = "Ending Balance ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.EndingNAV;
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;

                                            worksheet.Cells["A" + _endRowDetailTotal + ":H" + _endRowDetailTotal].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetailTotal + ":C" + _endRowDetailTotal].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetailTotal + ":H" + _endRowDetailTotal].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 3].Value = "Apabila laporan yang tertera di atas tidak sesuai, mohon menghubungi customer service kami di telp.";
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyPhone() + " selambat-lambatnya 7 (tujuh) hari kerja. Setelah itu, laporan diasumsikan telah sesuai.";
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Please inform our customer service at telephone " + _host.Get_CompanyPhone() + " if the above report to be incorrect";
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "within 7 (seven) working days. No complaint or correction will be entertained thereafter.";
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A:H" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n \n \n &30&B Report Laporan Akun Bulanan";


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText(); 
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = DefaultReportFooterLeftTextDisclaimer();


                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Laporan AUM per Tipe Fund
            if (_unitRegistryRpt.ReportName.Equals("Laporan AUM per Tipe Fund"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundType = "";
                            string _paramClientType = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundTypeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundTypeFrom))
                            {
                                _paramFundType = "And B.Type in ( " + _unitRegistryRpt.FundTypeFrom + " ) ";
                            }
                            else
                            {
                                _paramFundType = "";
                            }

                            if (_unitRegistryRpt.ClientType == 1)
                            {
                                _paramClientType = "And C.InvestorType = 1 and C.SACode = '' ";
                            }
                            else if (_unitRegistryRpt.ClientType == 2)
                            {
                                _paramClientType = "And C.InvestorType = 2 and C.SACode = '' ";
                            }
                            else if (_unitRegistryRpt.ClientType == 3)
                            {
                                _paramClientType = "and C.SACode = '' ";
                            }
                            else
                            {
                                _paramClientType = "";
                            }
                            cmd.CommandText =

                               @"
                               declare @YesterdayFrom date
Declare @YesterdayTo date
declare @CounterDate date

Set @YesterdayFrom = dbo.FWorkingDay(@DateFrom,-1)
Set @YesterdayTo = dbo.FWorkingDay(@DateTo,-1)
set @CounterDate = @DateFrom


--drop table #LastNAV
--drop table #tableFund


create table #LastNAV
(
	FundPK int,
	NAV numeric(22,8),
	valuedate date,
	NavDate date
)
CREATE CLUSTERED INDEX IX_LastNAV ON #LastNAV (FundPK,valuedate);   

create table #tableFund
(
	FundPK int
)
CREATE CLUSTERED INDEX IX_tableFund ON #tableFund (FundPK);  

declare @date date

insert into #tableFund(FundPK)
select distinct FundPK from Fund where status = 2

set @date = @datefrom

while @date <= @dateto
begin

	insert into #LastNAV(FundPK,NAV,valuedate,NavDate)

	select A.FundPK,A.Nav,dbo.fworkingday(@date,-1) date, A.Date from CloseNAV A 
	inner join (
	select  A.FundPK,max(date) date From CloseNAV A 
	    left join Fund B on A.FundPK = B.FundPK and B.Status = 2 where date <= @Date and A.status = 2
	    group by A.FundPK
	    ) B on A.Date = B.date and A.FundPK = B.FundPK
    where A.status = 2

	set @date = dateadd(day,1,@date)
end

select isnull(B.ID,'') FundID,'' SID, isnull(B.Name,'') FundName, E.NavDate ValueDate, isnull(D.DescOne,'') FundType,  sum(isnull(A.UnitAmount,0))* isnull(E.NAV,0) AUM,isnull(B.SInvestCode,'') SInvestCode,sum(isnull(A.UnitAmount,0)) UnitAmount,E.NAV From FundClientPosition A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.Status in (1,2)
left join MasterValue D on B.Type = D.Code and D.status in (1,2) and D.ID = 'FundType'
left join #LastNAV E on A.FundPK = E.FundPK and A.Date = E.valuedate
where A.Date between @YesterdayFrom and @YesterdayTo and A.UnitAmount <> 0 " + _paramFund + _paramFundType + _paramClientType + @"
                            group by B.ID,B.Name,A.Date,D.DescOne,E.NAV,B.SInvestCode,E.NavDate";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanAUMperTipeFund" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanAUMperTipeFund" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "LaporanAUMperTipeFund";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan AUM per Tipe Fund");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanAUMperTipeFund> rList = new List<LaporanAUMperTipeFund>();
                                        while (dr0.Read())
                                        {
                                            LaporanAUMperTipeFund rSingle = new LaporanAUMperTipeFund();
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Aum = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.SInvestCode = Convert.ToString(dr0["SInvestCode"]);


                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.FundType, r.ValueDate
                                            group r by new { r.ValueDate, r.FundType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;


                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Laporan AUM Berdasarkan Tipe Fund";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = " : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMMM yyyy");
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To : ";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = " : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd MMMM yyyy");

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Type";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Fund ID";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Code Produk";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Fund Name";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Aum";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        incRowExcel++;
                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            //area header

                                            int _no = 1;
                                            int _endRowDetail = 0;
                                            int _rowHeader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsHeader.Key.ValueDate).ToString("dd/MM/yyyy");
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundType;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            int _rowA = incRowExcel;
                                            int _startRowDetail = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //area detail

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SInvestCode;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Aum;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }

                                            worksheet.Cells["A" + _rowA + ":F" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _rowA + ":F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _rowA + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _rowA + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[_rowHeader, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[_rowHeader, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[_rowHeader, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[_rowHeader, 6].Style.Font.Bold = true;
                                            worksheet.Cells[_rowHeader, 6].Calculate();


                                            worksheet.Cells["F" + _rowHeader + ":F" + _rowHeader].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + _rowHeader + ":F" + _rowHeader].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + _rowHeader + ":F" + _rowHeader].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + _rowHeader + ":F" + _rowHeader].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 6];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 80;
                                        worksheet.Column(6).Width = 20;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Laporan Pengumuman Pembagian Dividen
            if (_unitRegistryRpt.ReportName.Equals("Laporan Pengumuman Pembagian Dividen"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";

                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            cmd.CommandText =

                               @"                  
                                
                                SELECT ISNULL(B.FundPK,0) FundPK,
                                ISNULL(B.Name,'') FundName
                                ,ISNULL(B.ID,'') FundID
                                ,ISNULL(D.Name,'') BankName
                                ,ISNULL(C.ContactPerson,'') ContactPerson
                                ,ISNULL(C.Fax1,'') Fax1
                                ,ISNULL(C.Phone1,'') Phone1
                                ,ValueDate ValueDate
                                ,A.ExDate
                                ,A.PaymentDate
                                ,E.BankName
                                ,E.AccountName BankAccountName
                                ,E.AccountNo BankAccountNo
                                 FROM dbo.DistributedIncome A
                                LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
                                LEFT JOIN BankBranch C ON B.BankBranchPK = C.BankBranchPK AND C.status IN (1,2)
                                LEFT JOIN Bank D ON C.BankPK = D.BankPK AND D.status IN (1,2)
                                LEFT JOIN 
                                (
	                                SELECT TOP 1 FundPK,ISNULL(C.Name,'') BankName 
	                                ,ISNULL(A.BankAccountName,'') AccountName
	                                ,ISNULL(A.BankAccountNo,'') AccountNo
	                                FROM dbo.FundCashRef A
	                                LEFT JOIN dbo.BankBranch B ON A.BankBranchPK = B.BankBranchPK AND B.status IN (1,2)
	                                LEFT JOIN Bank C ON B.BankPK = C.BankPK AND C.status IN (1,2)
	
	                                WHERE A.status = 2 " + _paramFund + @"AND A.Type = 1
                                )E ON A.FundPK = E.FundPK 
                                WHERE A.ValueDate = @ValueDate AND A.status = 2
                                " + _paramFund + @"


                             
                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanPengumumanPembagianDividen" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanPengumumanPembagianDividen" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "LaporanPengumumanPembagianDividen";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan Pengumuman Pembagian Dividen");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanPengumumanPembagianDividen> rList = new List<LaporanPengumumanPembagianDividen>();
                                        while (dr0.Read())
                                        {
                                            LaporanPengumumanPembagianDividen rSingle = new LaporanPengumumanPembagianDividen();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.BankName = Convert.ToString(dr0["BankName"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.Fax1 = Convert.ToString(dr0["Fax1"]);
                                            rSingle.Phone1 = Convert.ToString(dr0["Phone1"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.ExDate = Convert.ToDateTime(dr0["ExDate"]);
                                            rSingle.PaymentDate = Convert.ToDateTime(dr0["PaymentDate"]);
                                            //rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            //rSingle.NoRek = Convert.ToString(dr0["NoRek"]);
                                            rSingle.BankName = Convert.ToString(dr0["BankName"]);
                                            //rSingle.Nominal = Convert.ToDecimal(dr0["Nominal"]);
                                            rSingle.BankAccountName = Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);
                                            //rSingle.BranchCashRef = Convert.ToString(dr0["BranchCashRef"]);

                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundPK, r.FundName, r.BankName, r.ContactPerson, r.Fax1, r.Phone1, r.ValueDate, r.ExDate, r.PaymentDate, r.BankAccountName, r.BankAccountNo } into rGroup
                                            select rGroup;

                                        int incRowExcel = 2;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 20;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyAddress() + " Phone :  " + _host.Get_CompanyPhone();
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax :  " + _host.Get_CompanyFax();
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;


                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No. Reff";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = "OV/RD-DIV-I-NEXT G/XI/2018";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Reksa Dana";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankName;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "UP";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ContactPerson;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Fax1;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Telp.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Phone1;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 4].Value = "Instruksi Pembagian Hasil Investasi";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Dengan Hormat,";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            int _rowA = incRowExcel;
                                            int _rowB = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Bersama surat ini kami memberi  instruksi kepada Bank Kustodi untuk dilakukan pembagian  dividen Reksa Dana " + rsHeader.Key.FundName + " sebagai berikut  : ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + _rowA + ":F" + _rowB].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            incRowExcel = incRowExcel + 3;
                                            int _row1 = incRowExcel;
                                            int _row3 = incRowExcel + 3;
                                            worksheet.Cells["A" + _row1 + ":D" + _row3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _row1 + ":D" + _row3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _row1 + ":D" + _row3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _row1 + ":D" + _row3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet.Cells[incRowExcel, 2].Value = "Kegiatan";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = "Tanggal";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "1";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet.Cells[incRowExcel, 2].Value = "Cum Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsHeader.Key.ValueDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "2";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet.Cells[incRowExcel, 2].Value = "Ex Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsHeader.Key.ExDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "3";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                            worksheet.Cells[incRowExcel, 2].Value = "Payment Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsHeader.Key.PaymentDate).ToString("dd-MMM-yyyy");
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 2;

                                            //area header
                                            int _startRowDetail = incRowExcel;
                                            //incRowExcel++;
                                            int _endRowDetail = 0;


                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {



                                                    cmd1.CommandText =

                                                      @"
                                                SELECT 
                                ISNULL(B.Name,'') ClientName
                                ,ISNULL(B.NomorRekening1,'') NoRek
                                ,ISNULL(C.Name,'') BankName
                                ,CASE WHEN  ISNULL(A.UnitAmount,0) = 0 THEN 0 else ISNULL(A.UnitAmount,0) * ISNULL(D.DistributedIncomePerUnit,0) END Nominal

                                FROM dbo.FundClientPosition A
                                LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status IN (1,2)
                                LEFT JOIN Bank C ON B.NamaBank1 = C.BankPK AND C.status IN (1,2)
                                LEFT JOIN
                                (
                                SELECT A.FundPK,A.DistributedIncomePerUnit FROM dbo.DistributedIncome A WHERE ValueDate = @ValueDate
                                and A.FundPK = @FundPK AND A.Status = 2
                                )D ON A.FundPK = D.FundPK
                                WHERE A.Date = @ValueDate and A.FundPK = @FundPK
                                AND
                                ISNULL(A.UnitAmount,0) * ISNULL(D.DistributedIncomePerUnit,0) > 0 ";


                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@valueDate", _unitRegistryRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);
                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (dr1.HasRows)
                                                        {


                                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                            using (ExcelPackage package1 = new ExcelPackage(excelFile))
                                                            {


                                                                //ATUR DATA GROUPINGNYA DULU
                                                                List<LaporanPengumumanPembagianDividen> rList1 = new List<LaporanPengumumanPembagianDividen>();
                                                                while (dr1.Read())
                                                                {
                                                                    LaporanPengumumanPembagianDividen rSingle1 = new LaporanPengumumanPembagianDividen();
                                                                    rSingle1.ClientName = Convert.ToString(dr1["ClientName"]);
                                                                    rSingle1.NoRek = Convert.ToString(dr1["NoRek"]);
                                                                    rSingle1.BankName = Convert.ToString(dr1["BankName"]);
                                                                    rSingle1.Nominal = Convert.ToDecimal(dr1["Nominal"]);

                                                                    rList1.Add(rSingle1);

                                                                }

                                                                var QueryByFundID1 =
                                                                             from r1 in rList1
                                                                             group r1 by new { } into rGroup1
                                                                             select rGroup1;

                                                                foreach (var rsHeader1 in QueryByFundID1)
                                                                {

                                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 1].Value = "Atas Nama";
                                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                    //worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                                    worksheet.Cells[incRowExcel, 2].Value = "No Rekening";
                                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                                    worksheet.Cells[incRowExcel, 3].Value = "Bank";
                                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                                    worksheet.Cells[incRowExcel, 5].Value = "Nominal";
                                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                                    incRowExcel++;
                                                                    foreach (var rsDetail1 in rsHeader1)
                                                                    {

                                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail1.ClientName;//clientname
                                                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail1.NoRek;//rekening
                                                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                        worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail1.BankName;//bank
                                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                        worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Nominal;//nominal
                                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                        worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                        worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                                        _endRowDetail = incRowExcel;
                                                                        incRowExcel++;
                                                                    }


                                                                }

                                                            }
                                                        }
                                                    }

                                                }

                                            }




                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Jumlah";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Biaya Transfer, bila ada, menjadi beban Reksa Dana (Transfer Full Amount)";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Harap jumlah sebesar " + " dapat didebit dari rekening kami : ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Bank Name ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Account Name ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankAccountName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Account No ";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 3].Value = " : ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.BankAccountNo;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Demikian kami sampaikan dan terimakasih atas perhatian dan kerja-samanya.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Hormat Kami,";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Value = "(Thomas, Dody, Arto, Suharni, Belinda)";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            incRowExcel = incRowExcel + 5;

                                        }

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 5, 8];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 3;
                                        worksheet.Column(4).Width = 45;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 15;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Weekly Transaction
            if (_unitRegistryRpt.ReportName.Equals("Weekly Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            string _paramFundClient = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            //if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            //{
                            //    _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFund = "";
                            //}
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "A.Status IN (1,2) AND Posted = 1 AND revised = 0";
                                _statusRedemp = "A.Status IN (1,2) AND Posted = 1 AND revised = 0";
                                _statusSwitchOut = "A.Status IN (1,2) AND Posted = 1 AND revised = 0";
                                _statusSwitchIn = "A.Status IN (1,2) AND Posted = 1 AND revised = 0";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "A.Status IN (1,2) AND Posted = 1 AND revised = 1";
                                _statusRedemp = "A.Status IN (1,2) AND Posted = 1 AND revised = 1";
                                _statusSwitchOut = "A.Status IN (1,2) AND Posted = 1 AND revised = 1";
                                _statusSwitchIn = "A.Status IN (1,2) AND Posted = 1 AND revised = 1";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "A.Status IN (1,2) AND Posted = 0 AND revised = 0";
                                _statusRedemp = "A.Status IN (1,2) AND Posted = 0 AND revised = 0";
                                _statusSwitchOut = "A.Status IN (1,2) AND Posted = 0 AND revised = 0";
                                _statusSwitchIn = "A.Status IN (1,2) AND Posted = 0 AND revised = 0";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "A.Status = 1";
                                _statusRedemp = "A.Status = 1";
                                _statusSwitchOut = "A.Status = 1";
                                _statusSwitchIn = "A.Status = 1";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "A.Status = 3";
                                _statusRedemp = "A.Status = 3";
                                _statusSwitchOut = "A.Status = 3";
                                _statusSwitchIn = "A.Status = 3";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "(A.Status = 2 or A.Posted = 1) and A.Revised = 0";
                                _statusRedemp = "(A.Status = 2 or A.Posted = 1) and A.Revised = 0";
                                _statusSwitchOut = "(A.Status = 2 or A.Posted = 1) and A.Revised = 0";
                                _statusSwitchIn = "(A.Status = 2 or A.Posted = 1) and A.Revised = 0";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "(A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0";
                                _statusRedemp = "(A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0";
                                _statusSwitchOut = "(A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0";
                                _statusSwitchIn = "(A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0";
                            }


                            cmd.CommandText =

                               @"
                                
DECLARE @NAV TABLE
(
	Date DATETIME,
	FundPK INT,
	NAV NUMERIC(22,4)
)

DECLARE @CFundPK int

DECLARE @CounterDate DATETIME
SET @CounterDate = @DateFrom

WHILE @CounterDate <= @DateTo
BEGIN


	Declare A Cursor For
		SELECT FundPK
		FROM Fund A
		WHERE status = 2
		" + _paramFund + @" 
		--Parameter Fund Disini
		--AND A.FundPK = 1 --buat testing doang
	Open A
	Fetch Next From A
	INTO @CFundPK
	While @@FETCH_STATUS = 0  
	Begin
	
		INSERT INTO @NAV
	        ( Date, FundPK, NAV )
		SELECT @CounterDate,FundPK,Nav FROM dbo.CloseNAV WHERE status = 2 AND Date=
			(
				SELECT MAX(Date) FROM dbo.CloseNAV WHERE fundPK = @CFundPK AND status = 2
			)AND FundPK = @CFundPK
		
		Fetch Next From A 
		into @CFundPK
	End	
	Close A
	Deallocate A
	SET @CounterDate = DATEADD(DAY,1,@CounterDate)
END


SELECT A.FundID,SUM(A.TotalAmountIn) TotalAmountIn,SUM(A.TotalAmountOut) TotalAmountOut FROM (
		SELECT B.ID FundID,SUM(A.TotalCashAmount) TotalAmountIn, 0 TotalAmountOut FROM dbo.ClientSubscription A
		LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
		-- PARAM STATUS,POSTED DLL ntar dipasang sesuai lemparan dari Form

		WHERE " + _statusSubs + @"
		AND A.NAVDate BETWEEN @DateFrom AND @DateTo " + _paramFund + @"
		--AND A.FundPK=1 --buat testing doang
		GROUP BY B.ID

		UNION ALL

		SELECT B.ID FundID,SUM(ISNULL(CASE WHEN A.CashAmount > 0  THEN A.CashAmount ELSE A.UnitAmount * ISNULL(C.NAV,0) END,0) )TotalAmountIn, 0 TotalAmountOut FROM dbo.ClientSwitching A
		LEFT JOIN Fund B ON A.FundPKTo = B.FundPK AND B.status IN (1,2)
		LEFT JOIN @NAV C ON A.FundPKFrom = C.FundPK 
		-- PARAM STATUS,POSTED DLL ntar dipasang sesuai lemparan dari Form
		--WHERE A.status NOT IN (3,4) AND Posted = 1 AND revised = 0
		WHERE " + _statusSwitchIn + @"
		AND A.NAVDate BETWEEN @DateFrom AND @DateTo
		" + _paramFundTo + @"
		--AND A.FundPKTo=1 --buat testing doang
		GROUP BY B.ID

		UNION ALL

		SELECT B.ID FundID,0 TotalAmountIn, SUM(ISNULL(CASE WHEN A.CashAmount > 0  THEN A.CashAmount ELSE A.UnitAmount * ISNULL(C.NAV,0) END,0) ) TotalAmountOut FROM dbo.ClientRedemption A
		LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
		LEFT JOIN @NAV C ON A.FundPK = C.FundPK 
		-- PARAM STATUS,POSTED DLL ntar dipasang sesuai lemparan dari Form
		-- WHERE A.status NOT IN (3,4) AND Posted = 1 AND revised = 0
		WHERE " + _statusRedemp + @" 
		AND A.NAVDate BETWEEN @DateFrom AND @DateTo
		GROUP BY B.ID

		UNION ALL

		SELECT B.ID FundID,0 TotalAmountIn, SUM(ISNULL(CASE WHEN A.CashAmount > 0  THEN A.CashAmount ELSE A.UnitAmount * ISNULL(C.NAV,0) END,0) ) TotalAmountOut FROM dbo.ClientSwitching A
		LEFT JOIN Fund B ON A.FundPKTo = B.FundPK AND B.status IN (1,2)
		LEFT JOIN @NAV C ON A.FundPKFrom = C.FundPK 
		-- PARAM STATUS,POSTED DLL ntar dipasang sesuai lemparan dari Form
		--WHERE A.status NOT IN (3,4) AND Posted = 1 AND revised = 0
		WHERE " + _statusSwitchOut + @"
		AND A.NAVDate BETWEEN @DateFrom AND @DateTo
		" + _paramFundFrom + @"
		--AND A.FundPKFrom=1 --buat testing doang
		GROUP BY B.ID
		)A 
		GROUP BY A.FundID
                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "WeeklyTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "WeeklyTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "WeeklyTransaction";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Weekly Transaction");

                                        //List<WeeklyTransaction> rList = new List<WeeklyTransaction>();
                                        //while (dr0.Read())
                                        //{
                                        //    UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                        //    rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                        //    rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                        //    rSingle.SettlementDateForTrx = Convert.ToString(dr0["SettlementDate"]);
                                        //    rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                        //    rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                        //    rSingle.DepartmentName = Convert.ToString(dr0["DepartmentName"]);
                                        //    rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                        //    rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                        //    rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                        //    rSingle.NAVDateForTrx = Convert.ToString(dr0["NAVDate"]);
                                        //    rSingle.Type = Convert.ToString(dr0["Type"]);
                                        //    rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                        //    rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                        //    rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                        //    rSingle.UnitAmount = Convert.ToDecimal(dr0["UnitAmount"]);
                                        //    rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                        //    rSingle.EndBalance = Convert.ToDecimal(dr0["EndBalance"]);
                                        //    rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                        //    rSingle.UnRealized = Convert.ToDecimal(dr0["UnRealized"]);
                                        //    rSingle.CurrentNAV = Convert.ToDecimal(dr0["CurrentNAV"]);
                                        //    rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                        //    rSingle.AvgNAV = Convert.ToDecimal(dr0["AvgNAV"]);
                                        //    rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                        //    rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                        //    rSingle.BegBalance = Convert.ToDecimal(dr0["BegBalance"]);
                                        //    rList.Add(rSingle);
                                        //}

                                        int incRowExcel = 1;


                                        worksheet.Cells[incRowExcel, 1].Value = "Report Weekly Transaction";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From : ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date To : ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "Reksa Dana";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                        worksheet.Cells[incRowExcel, 2].Value = "Subscription & Switch-In";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                        worksheet.Cells[incRowExcel, 3].Value = "Redemption & Switch-Out";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);



                                        incRowExcel++;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = incRowExcel;



                                        while (dr0.Read())
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = dr0["FundID"];
                                            worksheet.Cells[incRowExcel, 1].Calculate();
                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#,####0.00";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                            worksheet.Cells[incRowExcel, 2].Value = dr0["TotalAmountIn"];
                                            worksheet.Cells[incRowExcel, 2].Calculate();
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,####0.00";
                                            worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 3].Value = dr0["TotalAmountOut"];
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,####0.00";
                                            worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                            //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            _endRowDetail = incRowExcel;
                                            incRowExcel++;
                                        }


                                        worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                        //worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Calculate();
                                        worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,####0.00";
                                        worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                        //worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,####0.00";
                                        worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Net Transaction";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);

                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(SUM(B" + _startRowDetail + ":B" + _endRowDetail + ") - (SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")))";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,####0.00";
                                        //worksheet.Cells[incRowExcel, 3].Style.Border.BorderAround(ExcelBorderStyle.Thin);




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 1, 3];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 35;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B SUBSCRIPTION \n &28&B Batch Form";

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region SID Client Summary
            if (_unitRegistryRpt.ReportName.Equals("Report SID Client Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClientInternalCategory = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientInternalCategoryFrom.ToLower(), "'All'", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientInternalCategoryFrom))
                            {
                                _paramFundClientInternalCategory = " and C.InternalCategoryPK in ( " + _unitRegistryRpt.FundClientInternalCategoryFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClientInternalCategory = "";
                            }

                            cmd.CommandText = @"
                            --declare @Date datetime
                            --set @Date = '09/30/2020'
                            --DROP TABLE #Company

                            CREATE TABLE #Company
                            (
                            HeaderName nvarchar(100),
                            ClientName nvarchar(100),
                            SID  nvarchar(100),
                            InternalCategory  nvarchar(100),
                            FundName nvarchar(100),
                            Unit numeric (19,8),
                            Nav numeric (19,4),
                            AUM numeric (19,4),
                            Flag int
                            )

                            Insert into #Company
                            select C.NamaPerusahaan,C.NamaPerusahaan ClientName,C.SID SID,isnull(E.ID,'') InternalCategory,isnull(B.Name,'') FundName,sum(isnull(A.UnitAmount,0)) Unit,isnull(D.Nav,0) Nav,sum(isnull(D.Nav,0) * isnull(A.UnitAmount,0)) AUM,0 from FundClientPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join CloseNAV D on B.FundPK = D.FundPK and D.Date = @Date and D.status in (1,2)
                            left join InternalCategory E on C.InternalCategoryPK = E.InternalCategoryPK and E.Status in (1,2)
                            where A.date = dbo.fworkingday(@date,-1) and C.InvestorType = 2 and isnull(A.UnitAmount,0) > 1 " + _paramFund + _paramFundClientInternalCategory + @"
                            Group by C.NamaPerusahaan,B.FundPK,B.Name,C.SID,D.Nav,E.ID

                            Insert into #Company
                            select C.NamaPerusahaan,C.Name ClientName,C.SID SID,isnull(E.ID,'') InternalCategory,isnull(B.Name,'') FundName,isnull(A.UnitAmount,0) Unit,isnull(D.Nav,0) Nav,sum(isnull(D.Nav,0) * isnull(A.UnitAmount,0)) AUM,1 from FundClientPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join CloseNAV D on B.FundPK = D.FundPK and D.Date = @Date and D.status in (1,2)
                            left join InternalCategory E on C.InternalCategoryPK = E.InternalCategoryPK and E.Status in (1,2)
                            where A.date = dbo.fworkingday(@date,-1) and C.InvestorType = 2 and isnull(A.UnitAmount,0) > 1 " + _paramFund + _paramFundClientInternalCategory + @"
                            Group by C.NamaPerusahaan,B.FundPK,B.Name,C.Name,C.SID,A.UnitAmount,D.Nav,E.ID


                            select * from #Company 
                            order by HeaderName,FundName,Flag
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@date", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportSIDClientSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportSIDClientSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report SID Client Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SIDClientSummary> rList = new List<SIDClientSummary>();
                                        while (dr0.Read())
                                        {

                                            SIDClientSummary rSingle = new SIDClientSummary();
                                            rSingle.HeaderName = Convert.ToString(dr0["HeaderName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.InternalCategory = Convert.ToString(dr0["InternalCategory"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["Nav"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Flag = Convert.ToInt32(dr0["Flag"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.InternalCategory } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Report SID Client Summary";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "PT Insight Investment Management";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "As of";
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Internal Category";
                                            worksheet.Cells[incRowExcel, 2].Value = ": " + rsHeader.Key.InternalCategory;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "SID";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "AUM";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            //int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            decimal _totalAUM = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                if (rsDetail.Flag == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.SID;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                }

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                if (rsDetail.Flag == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                                    _totalAUM = _totalAUM + rsDetail.AUM;
                                                }

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }
                                            worksheet.Cells[incRowExcel, 5].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Value = _totalAUM;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 6].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;
                                        }


                                        incRowExcel = incRowExcel + 2;


                                        //using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                        //{
                                        //    DbCon2.Open();
                                        //    using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                        //    {



                                        //        cmd2.CommandText = @"
                                        //        select C.SID,isnull(B.Name,'') Name,C.Name ClientName from FundClientPosition A
                                        //        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                        //        left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                        //        left join CloseNAV D on B.FundPK = D.FundPK and D.Date = @Date and D.status in (1,2)
                                        //        where A.date = dbo.fworkingday(@date,-1) and C.ClientCategory = 2 " + _paramFund + _paramFundClientSID + @"
                                        //        Group BY B.FundPK,B.Name,C.SID,C.Name
                                        //        ";

                                        //        cmd2.CommandTimeout = 0;
                                        //        cmd2.Parameters.AddWithValue("@date", _unitRegistryRpt.ValueDateTo);
                                        //        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                        //        {
                                        //            if (dr2.HasRows)
                                        //            {

                                        //                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        //                using (ExcelPackage package2 = new ExcelPackage(excelFile))
                                        //                {

                                        //                    //ATUR DATA GROUPINGNYA DULU
                                        //                    List<SIDClientSummary> rList2 = new List<SIDClientSummary>();
                                        //                    while (dr2.Read())
                                        //                    {

                                        //                        SIDClientSummary rSingle2 = new SIDClientSummary();
                                        //                        //rSingle2.FundPK = Convert.ToInt32(dr2["FundPK"]);
                                        //                        rSingle2.SID = Convert.ToString(dr2["SID"]);
                                        //                        rSingle2.ClientName = Convert.ToString(dr2["ClientName"]);
                                        //                        rSingle2.Name = Convert.ToString(dr2["Name"]);


                                        //                        rList2.Add(rSingle2);

                                        //                    }



                                        //                    var GroupByReference2 =
                                        //                            from r2 in rList2
                                        //                            //orderby r ascending
                                        //                            group r2 by new { r2.SID } into rGroup2
                                        //                            select rGroup2;

                                        //                    //int incRowExcel = 0;                                                      

                                        //                    //incRowExcel = incRowExcel + 2;
                                        //                    foreach (var rsHeader2 in GroupByReference2)
                                        //                    {

                                        //                        //incRowExcel = incRowExcel + 2; 
                                        //                        incRowExcel++;
                                        //                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        //                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        //                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        //                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        //                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        //                        worksheet.Cells[incRowExcel, 1].Value = "SID";
                                        //                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        //                        worksheet.Cells[incRowExcel, 2].Value = "Client Name";
                                        //                        incRowExcel++;

                                        //                        int _startRowDetail2 = incRowExcel;
                                        //                        int _endRowDetail2 = 0;
                                        //                        foreach (var rsDetail2 in rsHeader2)
                                        //                        {
                                        //                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        //                            worksheet.Cells[incRowExcel, 1].Value = rsDetail2.SID;
                                        //                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        //                            worksheet.Cells[incRowExcel, 2].Value = rsDetail2.ClientName;
                                        //                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        //                            _endRowDetail2 = incRowExcel;
                                        //                            incRowExcel++;
                                        //                        }
                                        //                        incRowExcel = incRowExcel + 2;

                                        //                    }


                                        //                }

                                        //            }
                                        //        }
                                        //    }
                                        //}



                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 5, 6];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 80;
                                        worksheet.Column(3).Width = 60;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report SID Client Summary";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Subscription Redemption APERD
            if (_unitRegistryRpt.ReportName.Equals("Report Subscription Redemption APERD"))
            {
                try
                {
                    var _HasSubs = 0;
                    var _HasRed = 0;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
select B.Name Fund, A.ValueDate,'Subscription' Type,C.Name FundClientName, A.UnitAmount, A.NAV, A.UnitAmount * A.NAV AUM from ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.Status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.Status = 2
where A.status = 2 and C.SACode <> '' and A.ValueDate between @datefrom and @dateto and A.Type <> 3 " + _paramFundFrom + @"
 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    _HasSubs = 1;
                                }
                                string filePath = Tools.ReportsPath + "ReportSubscriptionRedemptionAPERD" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "ReportSubscriptionRedemptionAPERD" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "UnitRegistryReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Subscription");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<ReportSubscriptionRedemptionAPERD> rList = new List<ReportSubscriptionRedemptionAPERD>();
                                    while (dr0.Read())
                                    {

                                        ReportSubscriptionRedemptionAPERD rSingle = new ReportSubscriptionRedemptionAPERD();
                                        rSingle.Fund = Convert.ToString(dr0["Fund"]);
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.Type = Convert.ToString(dr0["Type"]);
                                        rSingle.FundClientName = Convert.ToString(dr0["FundClientName"]);
                                        rSingle.UnitAmount = Convert.ToDecimal(dr0["UnitAmount"]);
                                        rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                        rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                        rList.Add(rSingle);

                                    }



                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                                group r by new { r.Fund } into rGroup
                                            select rGroup;

                                    int incRowExcel = 0;

                                    incRowExcel++;
                                    worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                    worksheet.Cells[incRowExcel, 1].Value = "Report Subscription Redemption APERD";
                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;



                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                    foreach (var rsHeader in GroupByReference)
                                    {
                                        incRowExcel++;
                                        worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fund : ";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Fund;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date";
                                        worksheet.Cells[incRowExcel, 2].Value = "Type";
                                        worksheet.Cells[incRowExcel, 3].Value = "Name";
                                        worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                        worksheet.Cells[incRowExcel, 5].Value = "NAV";
                                        worksheet.Cells[incRowExcel, 6].Value = "AUM";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        int _no = 1;

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.ValueDate;
                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundClientName;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.UnitAmount;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.NAV;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUM;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            _no++;
                                            _endRowDetail = incRowExcel;


                                        }

                                        incRowExcel++;



                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                        //foreach (var rsHeader in GroupByReference)
                                        //{

                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                    worksheet.Column(1).Width = 12;
                                    worksheet.Column(2).Width = 16;
                                    worksheet.Column(3).Width = 40;
                                    worksheet.Column(4).Width = 18;
                                    worksheet.Column(5).Width = 18;
                                    worksheet.Column(6).Width = 18;
                                    //worksheet.Column(10).AutoFit();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                   // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Report Subscription Redemption APERD";



                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                    worksheet = package.Workbook.Worksheets.Add("Redemption");

                                    DbCon.Close();
                                    DbCon.Open();
                                    using (SqlCommand cmd4 = DbCon.CreateCommand())
                                    {


                                        if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                                        {
                                            _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                        }
                                        else
                                        {
                                            _paramFundFrom = "";
                                        }

                                        cmd4.CommandText = @"
select B.Name Fund, A.ValueDate,'Redemption' Type,C.Name FundClientName, A.TotalUnitAmount, A.NAV, A.TotalUnitAmount * A.NAV AUM from ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.Status = 2
left join FundClient C on A.FundClientPK = C.FundClientPK and C.Status = 2
where A.status = 2 and C.SACode <> '' and A.ValueDate between @datefrom and @dateto and A.Type <> 3 " + _paramFundFrom + @"
                                        ";

                                        cmd4.CommandTimeout = 0;
                                        cmd4.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                        cmd4.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateFrom);

                                        using (SqlDataReader dr1 = cmd4.ExecuteReader())
                                        {
                                            if (!dr1.HasRows)
                                            {
                                                _HasRed = 1;
                                            }

                                            //ATUR DATA GROUPINGNYA DULU
                                            List<ReportSubscriptionRedemptionAPERD> rList1 = new List<ReportSubscriptionRedemptionAPERD>();
                                            while (dr1.Read())
                                            {

                                                ReportSubscriptionRedemptionAPERD rSingle1 = new ReportSubscriptionRedemptionAPERD();
                                                rSingle1.Fund = Convert.ToString(dr1["Fund"]);
                                                rSingle1.ValueDate = Convert.ToDateTime(dr1["ValueDate"]);
                                                rSingle1.Type = Convert.ToString(dr1["Type"]);
                                                rSingle1.FundClientName = Convert.ToString(dr1["FundClientName"]);
                                                rSingle1.UnitAmount = Convert.ToDecimal(dr1["TotalUnitAmount"]);
                                                rSingle1.NAV = Convert.ToDecimal(dr1["NAV"]);
                                                rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);


                                                rList1.Add(rSingle1);

                                            }



                                            var GroupByReference1 =
                                            from r in rList1
                                                //orderby r.FundName ascending
                                                    group r by new { r.Fund } into rGroup
                                            select rGroup;

                                            incRowExcel = 0;

                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Report Subscription Redemption APERD";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            foreach (var rsHeader1 in GroupByReference1)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fund : ";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.Fund;
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                incRowExcel = incRowExcel + 2;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = "Date";
                                                worksheet.Cells[incRowExcel, 2].Value = "Type";
                                                worksheet.Cells[incRowExcel, 3].Value = "Name";
                                                worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 5].Value = "NAV";
                                                worksheet.Cells[incRowExcel, 6].Value = "AUM";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                int _startRowDetail = incRowExcel;
                                                int _endRowDetail = 0;
                                                int _no = 1;


                                                //end area header
                                                foreach (var rsDetail1 in rsHeader1)
                                                {


                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail1.ValueDate;
                                                    worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                    worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail1.Type;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.FundClientName;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.UnitAmount;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.NAV;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.AUM;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    _no++;
                                                    _endRowDetail = incRowExcel;



                                                }

                                                incRowExcel++;


                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;


                                                worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            }








                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                            worksheet.Column(1).Width = 12;
                                            worksheet.Column(2).Width = 16;
                                            worksheet.Column(3).Width = 40;
                                            worksheet.Column(4).Width = 18;
                                            worksheet.Column(5).Width = 18;
                                            worksheet.Column(6).Width = 18;
                                            //worksheet.Column(10).AutoFit();
                                            worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                           // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                            worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Report Subscription Redemption APERD";



                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();




                                        }
                                    }
                                    if (_HasSubs == 1 && _HasRed == 1)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }


                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Revenue Grouping by Fund Client
            if (_unitRegistryRpt.ReportName.Equals("Report Revenue Grouping by Fund Client"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
                            --non aperd
                            select case when B.InvestorType = 1 then 'INDIVIDU' when B.InvestorType = 2 then 'INSTITUSI' else '' end InvestorType, B.Name Nasabah, C.Name TimMarketing, sum(A.Mfee) Revenue from DailyDataForCommissionRptNew A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
                            left join Agent C on A.SellingAgentPK = C.AgentPK and C.Status in (1,2)
                            where MFeeDate between @datefrom and @dateto and B.SACode = ''
                            group by B.InvestorType,B.Name,C.Name
                            having sum(A.Mfee) > 0

                            union all
                            --aperd
                            select 'APERD' InvestorType, B.Name Nasabah, C.Name TimMarketing, sum(A.MFee) Revenue from DailyDataForCommissionRptNew A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status in (1,2)
                            left join Agent C on B.SellingAgentPK = C.AgentPK and C.Status in (1,2)
                            where MFeeDate between @datefrom and @dateto and B.SACode <> ''
                            group by B.InvestorType,B.Name,C.Name
                            having sum(A.Mfee) > 0
                                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@datefrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@dateto", _unitRegistryRpt.ValueDateTo);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "Report_Revenue_Grouping_by_Fund_Client" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "Report_Revenue_Grouping_by_Fund_Client" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "Unit Registry Report";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Revenue Grouping by Fund Client");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RevenueByFundClient> rList = new List<RevenueByFundClient>();
                                        while (dr0.Read())
                                        {

                                            RevenueByFundClient rSingle = new RevenueByFundClient();
                                            rSingle.InvestorType = dr0["InvestorType"].ToString();
                                            rSingle.Nasabah = dr0["Nasabah"].ToString();
                                            rSingle.TimMarketing = dr0["TimMarketing"].ToString();
                                            rSingle.Revenue = Convert.ToDecimal(dr0["Revenue"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                orderby r.Revenue descending
                                                group r by new { r.InvestorType } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Report Revenue Grouping by Fund Client";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date from :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To     :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.InvestorType;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "NASABAH " + rsHeader.Key.InvestorType;
                                            worksheet.Cells[incRowExcel, 3].Value = "TIM MARKETING";
                                            worksheet.Cells[incRowExcel, 4].Value = "REVENUE (Rp)";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nasabah;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TimMarketing;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Revenue;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";


                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "TOTAL ";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 4];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Fund Unit Position Investment
            if (_unitRegistryRpt.ReportName.Equals("Report Fund Unit Position Investment"))
            {
                try
                {
                    string _paramFundFrom = "";

                    if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                    {
                        _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                    }
                    else
                    {
                        _paramFundFrom = "";
                    }
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
Select	A.Date Date,
		isnull(B.Nav,0) NAVToday,
		C.Name Fund,
		D.Name Client,
		isnull(MV.DescOne,'')  ClientCategory,
		A.AvgNAV AvgNAV,
		A.UnitAmount Unit
		From FundClientPosition A 
Left Join CloseNAV B on A.FundPK = B.FundPK and B.Status in (1,2) and B.Date = @datefrom
Left Join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
Left Join FundClient D on A.FundClientPK = D.FundClientPK and D.Status in (1,2)
Left Join MasterValue MV on D.Tipe = MV.Code and MV.ID = 'CompanyType' and MV.Status = 2
Where A.UnitAmount > 0 and A.Date = @datefrom " + _paramFundFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@datefrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@dateto", _unitRegistryRpt.ValueDateTo);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundUnitPositionInvestment" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "FundUnitPositionInvestment" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "Unit Registry Report";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Fund Unit Position Investment");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundUnitPositionInvestment> rList = new List<FundUnitPositionInvestment>();
                                        while (dr0.Read())
                                        {

                                            FundUnitPositionInvestment rSingle = new FundUnitPositionInvestment();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.NAVToday = Convert.ToDecimal(dr0["NAVToday"]);
                                            rSingle.Fund = dr0["Fund"].ToString();
                                            rSingle.Client = dr0["Client"].ToString();
                                            rSingle.ClientCategory = dr0["ClientCategory"].ToString();
                                            rSingle.AvgNAV = Convert.ToDecimal(dr0["AvgNAV"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            //rSingle.Cost = Convert.ToDecimal(dr0["Cost"]);
                                            //rSingle.TodayValue = Convert.ToDecimal(dr0["TodayValue"]);
                                            //rSingle.GL = Convert.ToDecimal(dr0["GL"]);
                                            //rSingle.GLPercent = Convert.ToDecimal(dr0["GLPercent"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r.Date descending
                                                group r by new { r.Date, r.Fund, r.NAVToday } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;


                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Date :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Date;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MM/yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Nav Today";
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.NAVToday;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 6].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Fund;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Client";
                                            worksheet.Cells[incRowExcel, 3].Value = "Client Category";
                                            worksheet.Cells[incRowExcel, 4].Value = "Cost";
                                            worksheet.Cells[incRowExcel, 5].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 6].Value = "Cost";
                                            worksheet.Cells[incRowExcel, 7].Value = "Today Value";
                                            worksheet.Cells[incRowExcel, 8].Value = "G/L";
                                            worksheet.Cells[incRowExcel, 9].Value = "G/L (%)";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Dashed;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Client;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientCategory;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AvgNAV;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Formula = "=(D" + incRowExcel + "*E" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Unit * rsHeader.Key.NAVToday;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 8].Formula = "=(G" + incRowExcel + "-F" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 8].Calculate();
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 9].Formula = "=IFERROR(H" + incRowExcel + "/F" + incRowExcel + ",0)";
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00%";

                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.Font.Color.SetColor(Color.MediumVioletRed);

                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Value = "Total : ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00%";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 9].Style.Font.Color.SetColor(Color.MediumVioletRed);
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Font.Bold = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 9;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 12;
                                        worksheet.Column(5).Width = 16;
                                        worksheet.Column(6).Width = 22;
                                        worksheet.Column(7).Width = 22;
                                        worksheet.Column(8).Width = 22;
                                        worksheet.Column(9).Width = 15;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Open Fund Distribution By Client Category
            if (_unitRegistryRpt.ReportName.Equals("Open Fund Distribution By Client Category"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText = @"
Create table #A
(
FundPK int,
TotalAUM numeric (22,8)
)

Create table #B
(
Unit  numeric (22,8),
FundPK int,
NAV numeric (22,8),
AUM numeric (22,8),
DescOne nvarchar(200),
FundName nvarchar(200)
)


insert into #A(FundPK,TotalAUM) 
select FundPK,SUM(AUM) TotalAUM From (
select sum(UnitAmount) Unit,A.FundPK,isnull(E.Nav,0) NAV,isnull(E.Nav,0)*sum(UnitAmount) AUM from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join MasterValue D on B.Tipe = D.Code and D.ID = 'CompanyType' and D.status in (1,2)
left join (select Nav,FundPK from CloseNav where date = @date and Status = 2) E on C.FundPK = E.FundPK
where A.Date = @date And D.Code in (1,2,3,4,8,6) 
" + _paramFundFrom + @"
--And A.FundPK = @FundPK
group by A.FundPK, E.Nav

union all
select sum(UnitAmount) Unit,A.FundPK,isnull(E.Nav,0) NAV,isnull(E.Nav,0)*sum(UnitAmount) AUM  from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join MasterValue D on B.ClientCategory = D.Code and D.ID = 'ClientCategory' and D.status in (1,2)
left join (select Nav,FundPK from CloseNav where date = @date and Status = 2) E on C.FundPK = E.FundPK
where A.Date = @date And D.Code = 1  
" + _paramFundFrom + @"
--And A.FundPK = @FundPK
group by A.FundPK,  E.Nav
)A
group by FundPK


insert into #B( Unit,FundPK,NAV,AUM,DescOne,FundName) 
select Unit,FundPK,NAV,AUM,DescOne,FundName  From (
select sum(UnitAmount) Unit,A.FundPK,isnull(E.Nav,0) NAV,isnull(E.Nav,0)*sum(UnitAmount) AUM,D.DescOne,C.Name FundName from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join MasterValue D on B.Tipe = D.Code and D.ID = 'CompanyType' and D.status in (1,2)
left join (select Nav,FundPK from CloseNav where date = @date and Status = 2) E on C.FundPK = E.FundPK
where A.Date = @date And D.Code in (1,2,3,4,8,6) 
" + _paramFundFrom + @"
--And A.FundPK = @FundPK
group by D.DescOne,A.FundPK,E.Nav,C.Name

union all
select sum(UnitAmount) Unit,A.FundPK,isnull(E.Nav,0) NAV,isnull(E.Nav,0)*sum(UnitAmount) AUM,D.DescOne,C.Name FundName from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join MasterValue D on B.ClientCategory = D.Code and D.ID = 'ClientCategory' and D.status in (1,2)
left join (select Nav,FundPK from CloseNav where date = @date and Status = 2) E on C.FundPK = E.FundPK
where A.Date = @date And D.Code = 1  
" + _paramFundFrom + @"
--And A.FundPK = @FundPK
group by D.DescOne,A.FundPK,E.Nav,C.Name
)Detail



select Unit,A.FundPK,NAV,AUM,DescOne,B.TotalAUM,A.FundName,case when B.TotalAUM = 0 then 0 else AUM/B.TotalAUM end AUMPercent From #B A
left Join #A B on A.FundPK = B.FundPK

                                ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "OpenFundDistributionByClientCategory" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "OpenFundDistributionByClientCategory" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Open Fund Distribution By Client Category");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<OpenFundDistributionByClientCategory> rList = new List<OpenFundDistributionByClientCategory>();
                                        while (dr0.Read())
                                        {

                                            OpenFundDistributionByClientCategory rSingle = new OpenFundDistributionByClientCategory();
                                            rSingle.FundName = dr0["FundName"].ToString();
                                            rSingle.Category = dr0["DescOne"].ToString();
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.AUMPercent = Convert.ToDecimal(dr0["AUMPercent"]);

                                            rList.Add(rSingle);

                                        }


                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.FundName } into rGroup
                                                select rGroup;

                                        int _date;
                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Open Fund Distribution by Client Category";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;



                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "As Of Date             :";
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            _date = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;

                                            incRowExcel++;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 2].Value = "Category";
                                            worksheet.Cells[incRowExcel, 3].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 5].Value = "% AUM";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Category;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AUMPercent;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0%";

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();

                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0%";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region AUM Detail Customer
            else if (_unitRegistryRpt.ReportName.Equals("AUM Detail Customer"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFundFrom = "";
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText = @"
                            --declare @Date datetime
                            --set @Date = '11/03/2020'

                            --DROP TABLE #Company

                            CREATE TABLE #Company
                            (
                            HeaderName nvarchar(100),
                            ClientName nvarchar(100),
                            SID  nvarchar(100),
                            AUM numeric (19,4),
                            FundID nvarchar(50),
                            Flag int
                            )

                            insert into #Company
                            select C.NamaPerusahaan,C.NamaPerusahaan,C.SID,sum(isnull(B.Nav,0) * isnull(A.UnitAmount,0)) AUM,D.ID,0 from FundClientPosition A
                            left join CloseNAV B on A.FundPK = B.FundPK and A.Date = B.Date and B.status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
                            where A.Date = @Date and C.InvestorType = 2 and isnull(C.SID,'') <> '' " + _paramFundFrom + @"
                            --and C.SID = 'ISD110574034452'
                            group by C.NamaPerusahaan,C.SID,D.ID

                            insert into #Company
                            select C.NamaPerusahaan,C.Name,C.SID,sum(isnull(B.Nav,0) * isnull(A.UnitAmount,0)) AUM,D.ID,1 from FundClientPosition A
                            left join CloseNAV B on A.FundPK = B.FundPK and A.Date = B.Date and B.status in (1,2)
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                            left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
                            where A.Date = @Date and C.InvestorType = 2 and isnull(C.SID,'') <> '' " + _paramFundFrom + @"
                            --and C.SID = 'ISD110574034452'
                            group by C.NamaPerusahaan,C.Name,C.SID,D.ID



                            DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                                @query  AS NVARCHAR(MAX)

                            select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(FundID) +',0) ' + QUOTENAME(FundID) 
                            from (SELECT DISTINCT FundID FROM #Company) A
					        left join Fund B on A.FundID = B.ID and B.status in (1,2)
					        order by case when A.FundID = 'iHajj' then 'A1'
									        when A.FundID = 'iWealth' then 'A2'
										        when A.FundID = 'iGovt' then 'A3'
											        when A.FundID = 'iIDX30' then 'A4' 
												        when A.FundID = 'iISL' then 'A5'
													        when A.FundID = 'iMoney' then 'A6'
														        when A.FundID = 'iRetcash' then 'A7'
															        when A.FundID = 'iMosy' then 'A8'
																        when A.FundID = 'iShare' then 'A9'
																	        when A.FundID = 'iRenewable' then 'B1'
																		        when A.FundID = 'iNusantara' then 'B2'
																			        when A.FundID = 'iInfra' then 'B3'
																				        when B.Type = 4 then 'Z' else A.FundID end

                                FOR XML PATH(''), TYPE
                                ).value('.', 'NVARCHAR(MAX)') 
                            ,1,1,'')


                            select @cols = STUFF((SELECT distinct ',' + QUOTENAME(FundID) 
                                                from #Company
				
                                        FOR XML PATH(''), TYPE
                                        ).value('.', 'NVARCHAR(MAX)') 
                                    ,1,1,'')


                            set @query = 'SELECT SID,ClientName,' + @colsForQuery + ' from 
                                            (
                                            SELECT HeaderName,FundID,ClientName,SID,AUM,Flag FROM #Company 
                                        ) x
                                        pivot 
                                        (
                                            SUM(AUM)
                                            for FundID in (' + @cols + ')
                                        ) p 
			                            order by HeaderName,Flag
			                            '
                            exec(@query)		



                            ";
                            cmd.CommandTimeout = 0;

                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AUMDetailCustomer" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AUM Detail Customer");

                                        int incRowExcel = 1;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "AUM Detail Customer";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date as of : ";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 2].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
                                        incRowExcel = incRowExcel + 2;


                                        int _startRowDetail = incRowExcel;
                                        int _rowCtrp = 0;
                                        int _endRowDetail = 0;
                                        int _endColDetail = 0;
                                        var _flag = "";


                                        incRowExcel = 5;

                                        while (dr0.Read())
                                        {
                                            int incColExcel = 1;

                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {

                                                worksheet.Cells[5, incColExcel].Value = dr0.GetName(inc1);
                                                worksheet.Cells[5, incColExcel].Style.Font.Bold = true;
                                                worksheet.Cells[5, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[5, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[5, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[5, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[5, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[5, 1].Style.Font.Size = 11;

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Font.Size = Tools.DefaultReportFontSize();

                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                if (incColExcel == 1 && _flag != dr0.GetValue(inc1).ToString())
                                                {
                                                    worksheet.Cells[incRowExcel + 1, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                    worksheet.Cells[incRowExcel + 1, incColExcel].Style.Font.Size = Tools.DefaultReportFontSize();
                                                    worksheet.Row(incRowExcel + 1).Style.Font.Bold = true;
                                                    worksheet.Column(incColExcel).Width = 15;
                                                    //worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                                    incRowExcel++;
                                                    _flag = dr0.GetValue(inc1).ToString();
                                                }
                                                else if (incColExcel == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                    worksheet.Column(incColExcel).Width = 50;
                                                }
                                                else if (incColExcel >= 3)
                                                {
                                                    _rowCtrp = incColExcel;
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Column(incColExcel).Width = 18;

                                                }
                                                //else
                                                //{
                                                //    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                //    worksheet.Column(incColExcel).Width = 18;
                                                //}




                                                incColExcel++;

                                            }
                                            _endColDetail = incColExcel - 1;
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Column(incColExcel).Width = 20;
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(" + worksheet.Cells[incRowExcel, 3].Address + ":" + worksheet.Cells[incRowExcel, _endColDetail].Address + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";



                                            incRowExcel++;


                                        }


                                        #region TOTAL AUM
                                        // Nav and Benchmark
                                        using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                        {

                                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                                            {
                                                _paramFundFrom = " And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                            }
                                            else
                                            {
                                                _paramFundFrom = "";
                                            }

                                            DbCon1.Open();
                                            using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                            {
                                                cmd1.CommandText =

                                                @"
                                            CREATE TABLE #Company
                                            (
                                            AUM numeric (19,4),
                                            FundID nvarchar(50),
                                            Flag int
                                            )

                                            insert into #Company
                                            select sum(isnull(B.Nav,0) * isnull(A.UnitAmount,0)) AUM,D.ID,1 from FundClientPosition A
                                            left join CloseNAV B on A.FundPK = B.FundPK and A.Date = B.Date and B.status in (1,2)
                                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
                                            left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
                                            where A.Date = @Date and C.InvestorType = 2 and isnull(C.SID,'') <> '' " + _paramFundFrom + @"
                                            --and C.SID = 'ISD110574034452'
                                            group by D.ID



                                            DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                                            @query  AS NVARCHAR(MAX)


                                              select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(FundID) +',0) ' + QUOTENAME(FundID) 
                                                                        from (SELECT DISTINCT FundID FROM #Company) A
					                                                    left join Fund B on A.FundID = B.ID and B.status in (1,2)
					                                                    order by case when A.FundID = 'iHajj' then 'A1'
									                                                    when A.FundID = 'iWealth' then 'A2'
										                                                    when A.FundID = 'iGovt' then 'A3'
											                                                    when A.FundID = 'iIDX30' then 'A4' 
												                                                    when A.FundID = 'iISL' then 'A5'
													                                                    when A.FundID = 'iMoney' then 'A6'
														                                                    when A.FundID = 'iRetcash' then 'A7'
															                                                    when A.FundID = 'iMosy' then 'A8'
																                                                    when A.FundID = 'iShare' then 'A9'
																	                                                    when A.FundID = 'iRenewable' then 'B1'
																		                                                    when A.FundID = 'iNusantara' then 'B2'
																			                                                    when A.FundID = 'iInfra' then 'B3'
																				                                                    when B.Type = 4 then 'Z' else A.FundID end

                                                                            FOR XML PATH(''), TYPE
                                                                            ).value('.', 'NVARCHAR(MAX)') 
                                                                        ,1,1,'')


                                            select @cols = STUFF((SELECT distinct ',' + QUOTENAME(FundID) 
                                                            from #Company
				
                                                    FOR XML PATH(''), TYPE
                                                    ).value('.', 'NVARCHAR(MAX)') 
                                                ,1,1,'')


                                            set @query = 'SELECT ' + @colsForQuery + ' from 
                                                        (
                                                        SELECT FundID,AUM,Flag FROM #Company 
                                                    ) x
                                                    pivot 
                                                    (
                                                        SUM(AUM)
                                                        for FundID in (' + @cols + ')
                                                    ) p 
		
		                                            '
                                            exec(@query) ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.ExecuteNonQuery();
                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {

                                                    while (dr1.Read())
                                                    {
                                                        int incColExcel = 3;

                                                        for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                        {

                                                            worksheet.Cells[incRowExcel, incColExcel].Value = dr1.GetName(inc1);
                                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Size = Tools.DefaultReportFontSize();


                                                            if (incColExcel >= 3)
                                                            {
                                                                worksheet.Cells[incRowExcel, incColExcel].Value = dr1.GetValue(inc1);
                                                                worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                                                worksheet.Column(incColExcel).Width = 18;

                                                            }


                                                            incColExcel++;

                                                        }


                                                        incRowExcel++;


                                                    }
                                                }
                                            }
                                        }

                                        #endregion



                                        worksheet.Row(2).Height = 0;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A1:Z1"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.Cells["K2:Z2"].AutoFitColumns(); // CEK DARI ENTRY ID SAMPE LAST UPDATE
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 AUM Detail Customer";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region NOA Existing And Non Existing
            if (_unitRegistryRpt.ReportName.Equals("NOA Existing And Non Existing"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
--declare @datefrom date
--declare @dateto date
--declare @ClientType int

--set @datefrom = '2020-01-01'
--set @dateto = '2020-03-31'
--set @ClientType = 1

--CLIENT TYPE
--1. INDIVIDU
--2. INSTITUSI
--3. APERD

declare @FundClientPosition table (
	orderby int,
	MonthName nvarchar(100),
	FundClientName nvarchar(200),
	FundName nvarchar(200),
	UnitAmount numeric(22,8),
	NAV numeric(22,8),
	AUM numeric(32,8)
)

declare @tableEndMonth table (
	orderby int,
	date date
)

declare @tableSelect table (
	orderby int,
	month nvarchar(100),
	Existing int,
	NonExist int,
	TotalNOA int
)

declare @counterdate date
declare @counter int

set @counterdate = @datefrom
set @counter = 1

insert into @tableEndMonth
select @counter,case when dbo.CheckTodayIsHoliday(eomonth(dateadd(month,-1,@datefrom))) = 1 then dbo.FWorkingDay(eomonth(dateadd(month,-1,@datefrom)),-1) else eomonth(dateadd(month,-1,@datefrom)) end

set @counter = @counter + 1

while @counterdate <= @dateto
begin

	insert into @tableEndMonth
	select @counter,case when dbo.CheckTodayIsHoliday(eomonth(@counterdate)) = 1 then dbo.FWorkingDay(eomonth(@counterdate),-1) else eomonth(@counterdate) end

	set @counterdate = dateadd(month,1,@counterdate)
	set @counter = @counter + 1
end

if @ClientType = 1
begin
	insert into @FundClientPosition
	select D.orderby,CONVERT(varchar(3), A.Date, 100) + ' ' + cast(year(A.Date) as nvarchar),B.Name, C.Name, UnitAmount, E.Nav, UnitAmount * E.Nav from FundClientPosition A
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
	left join Fund C on A.FundPK = C.FundPK and C.status = 2
	inner join @tableEndMonth D on A.Date = D.date
	inner join CloseNAV E on A.Date = E.date and E.Status = 2 and A.FundPK = E.FundPK
	where B.InvestorType = 1
end
else if @ClientType = 2
begin
	insert into @FundClientPosition
	select D.orderby,CONVERT(varchar(3), A.Date, 100) + ' ' + cast(year(A.Date) as nvarchar),B.Name, C.Name, UnitAmount, E.Nav, UnitAmount * E.Nav from FundClientPosition A
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
	left join Fund C on A.FundPK = C.FundPK and C.status = 2
	inner join @tableEndMonth D on A.Date = D.date
	inner join CloseNAV E on A.Date = E.date and E.Status = 2 and A.FundPK = E.FundPK
	where B.InvestorType = 2
end
else
begin
	insert into @FundClientPosition
	select B.orderby,CONVERT(varchar(3), A.Date, 100) + ' ' + cast(year(A.Date) as nvarchar),A.FundClientName, A.FundName, UnitAmount,NAV,AUM from FundClientPositionForAPERD A
	inner join @tableEndMonth B on A.Date = B.date
	where A.date between @datefrom and @dateto
end


select orderby,[Month], sum(A.Exist) Existing, sum(A.NON) NON, sum(A.Exist) + sum(A.NON) TotalNOA from (

	select orderby,MonthName [Month],FundClientName,FundName,sum(UnitAmount) Unit, case when sum(UnitAmount) = 0 then 1 else 0 end NON, case when sum(UnitAmount) = 0 then 0 else 1 end EXIST  from @FundClientPosition

	group by MonthName,FundClientName,Fundname,NAV,orderby
)A
group by orderby,[month]
order by orderby

 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@ClientType", _unitRegistryRpt.ClientType);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NOAExistingAndNonExisting" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NOAExistingAndNonExisting" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("RESUME");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NOAExistingAndNonExisting> rList = new List<NOAExistingAndNonExisting>();
                                        while (dr0.Read())
                                        {

                                            NOAExistingAndNonExisting rSingle = new NOAExistingAndNonExisting();
                                            rSingle.Month = dr0["Month"].ToString();
                                            rSingle.Existing = Convert.ToDecimal(dr0["Existing"]);
                                            rSingle.TotalNOA = Convert.ToDecimal(dr0["TotalNOA"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int _endRowDetail = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Report NOA Existing & Non Existing";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Month";
                                            worksheet.Cells[incRowExcel, 2].Value = "Existing";
                                            worksheet.Cells[incRowExcel, 3].Value = "Non Existing";
                                            worksheet.Cells[incRowExcel, 4].Value = "Total NOA";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            int _startRowDetail = incRowExcel + 1;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Month;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Existing;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Formula = "=D" + incRowExcel + "-B" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalNOA;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 3].Calculate();
                                                _no++;
                                                _endRowDetail = incRowExcel;


                                            }


                                        }

                                        var diagram = worksheet.Drawings.AddChart("chart", eChartType.ColumnClustered);

                                        var series = diagram.Series.Add("B4:B" + _endRowDetail, "A4:A" + _endRowDetail);
                                        series.Header = worksheet.Cells["B3"].Value.ToString();

                                        series = diagram.Series.Add("C4:C" + _endRowDetail, "A4:A" + _endRowDetail);
                                        series.Header = worksheet.Cells["C3"].Value.ToString();

                                        series = diagram.Series.Add("D4:D" + _endRowDetail, "A4:A" + _endRowDetail);
                                        series.Header = worksheet.Cells["D3"].Value.ToString();

                                        diagram.YAxis.MajorTickMark = eAxisTickMark.None;
                                        diagram.YAxis.MinorTickMark = eAxisTickMark.None;

                                        diagram.SetPosition(2, 0, 5, 0);


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(1).Width = 13;
                                        worksheet.Column(2).Width = 13;
                                        worksheet.Column(3).Width = 13;
                                        worksheet.Column(4).Width = 13;
                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                       // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 NOA Existing And Non Existing";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd1 = DbCon.CreateCommand())
                                        {


                                            cmd1.CommandText = @"
--declare @datefrom date
--declare @dateto date
--declare @ClientType int

--set @datefrom = '2020-01-01'
--set @dateto = '2020-03-31'
--set @ClientType = 3

--CLIENT TYPE
--1. INDIVIDU
--2. INSTITUSI
--3. APERD

declare @FundClientPosition table (
	orderby int,
	MonthName nvarchar(100),
	FundClientName nvarchar(200),
	FundName nvarchar(200),
	UnitAmount numeric(22,8),
	NAV numeric(22,8),
	AUM numeric(32,8)
)

declare @tableEndMonth table (
	orderby int,
	date date
)

declare @counterdate date
declare @counter int

set @counterdate = @datefrom
set @counter = 1

insert into @tableEndMonth
select @counter,case when dbo.CheckTodayIsHoliday(eomonth(dateadd(month,-1,@datefrom))) = 1 then dbo.FWorkingDay(eomonth(dateadd(month,-1,@datefrom)),-1) else eomonth(dateadd(month,-1,@datefrom)) end

set @counter = @counter + 1

while @counterdate <= @dateto
begin

	insert into @tableEndMonth
	select @counter,case when dbo.CheckTodayIsHoliday(eomonth(@counterdate)) = 1 then dbo.FWorkingDay(eomonth(@counterdate),-1) else eomonth(@counterdate) end

	set @counterdate = dateadd(month,1,@counterdate)
	set @counter = @counter + 1
end

if @ClientType = 1
begin
	insert into @FundClientPosition
	select D.orderby,CONVERT(varchar(3), A.Date, 100),B.Name, C.Name, UnitAmount, E.Nav, UnitAmount * E.Nav from FundClientPosition A
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
	left join Fund C on A.FundPK = C.FundPK and C.status = 2
	inner join @tableEndMonth D on A.Date = D.date
	inner join CloseNAV E on A.Date = E.date and E.Status = 2 and A.FundPK = E.FundPK
	where B.InvestorType = 1
end
else if @ClientType = 2
begin
	insert into @FundClientPosition
	select D.orderby,CONVERT(varchar(3), A.Date, 100),B.Name, C.Name, UnitAmount, E.Nav, UnitAmount * E.Nav from FundClientPosition A
	left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
	left join Fund C on A.FundPK = C.FundPK and C.status = 2
	inner join @tableEndMonth D on A.Date = D.date
	inner join CloseNAV E on A.Date = E.date and E.Status = 2 and A.FundPK = E.FundPK
	where B.InvestorType = 2
end
else
begin
	insert into @FundClientPosition
	select B.orderby,CONVERT(varchar(3), A.Date, 100),A.FundClientName, A.FundName, UnitAmount,NAV,AUM from FundClientPositionForAPERD A
	inner join @tableEndMonth B on A.Date = B.date
	where A.date between @datefrom and @dateto
end

select MonthName + case when sum(UnitAmount) = 0 then ' - NON' else ' - EXIST' end [Month],FundClientName,FundName,sum(UnitAmount) Unit, Nav,sum(UnitAmount) * NAV AUM  from @FundClientPosition

group by MonthName,FundClientName,Fundname,NAV,orderby

order by orderby,Month
                                        ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                            cmd1.Parameters.AddWithValue("@ClientType", _unitRegistryRpt.ClientType);

                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<NOAExistingAndNonExisting> rList1 = new List<NOAExistingAndNonExisting>();
                                                    while (dr1.Read())
                                                    {

                                                        NOAExistingAndNonExisting rSingle1 = new NOAExistingAndNonExisting();
                                                        rSingle1.Month = dr1["Month"].ToString();
                                                        rSingle1.FundClient = dr1["FundClientName"].ToString();
                                                        rSingle1.Fund = dr1["FundName"].ToString();
                                                        rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                        rSingle1.NAV = Convert.ToDecimal(dr1["NAV"]);


                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                        //orderby r.FundName ascending
                                                    group r by new { r.Month } into rGroup
                                                    select rGroup;

                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {
                                                        worksheet = package.Workbook.Worksheets.Add(rsHeader1.Key.Month);
                                                        incRowExcel = 1;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Client";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                                        worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 4].Value = "NAV";
                                                        worksheet.Cells[incRowExcel, 5].Value = "AUM";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        int _startRowDetail = incRowExcel;
                                                        _endRowDetail = 0;
                                                        int _no = 1;

                                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN

                                                        worksheet.Column(1).Width = 45;
                                                        worksheet.Column(2).Width = 45;
                                                        worksheet.Column(3).Width = 21;
                                                        worksheet.Column(4).Width = 21;
                                                        worksheet.Column(5).Width = 21;
                                                        //worksheet.Column(10).AutoFit();
                                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                                                                                       // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 NOA Existing And Non Existing";



                                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {


                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail1.FundClient;

                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.Fund;

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail1.NAV;
                                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                            worksheet.Cells[incRowExcel, 5].Formula = "=C" + incRowExcel + "*D" + incRowExcel;
                                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                            _no++;
                                                            _endRowDetail = incRowExcel;
                                                        }

                                                        incRowExcel++;
                                                        worksheet.PrinterSettings.FitToPage = true;
                                                        worksheet.PrinterSettings.FitToWidth = 1;
                                                        worksheet.PrinterSettings.FitToHeight = 0;
                                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];
                                                    }

                                                }

                                            }
                                        }

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }

        public List<InstrumentForInvestment> Instrument_LookupForOMSBondByMarketPK(int _trxType, int _fundPK, DateTime _date, int _marketPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<InstrumentForInvestment> L_Instrument = new List<InstrumentForInvestment>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_trxType == 1)
                        {
                            cmd.CommandText = @"select InstrumentPK,I.ID + ' - ' + I.Name InstrumentID, I.Name, I.MaturityDate, I.InterestPercent,0 Balance,  D.ID CurrencyID,I.CurrencyPK,isnull(12/B.Priority,0) PaymentType 
                            FROM  instrument I 
                            left join InstrumentType IT on I.InstrumentTypePK=IT.InstrumentTypePK and IT.status = 2 left join Currency D on I.CurrencyPK = D.CurrencyPK and D.status = 2 
                            left join MasterValue B on I.InterestPaymentType = B.Code and B.ID = 'InterestPaymentType' and B.status = 2
                            where I.status = 2 and IT.InstrumentTypePK in (2,3,8,9,13,15) and I.MarketPK = @MarketPK and MaturityDate >= @Date order by I.ID ";
                            cmd.Parameters.AddWithValue("@Date", _date);
                            cmd.Parameters.AddWithValue("@MarketPK", _marketPK);
                        }
                        else if (_trxType == 2)
                        {

                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"

                            Declare @TrailsPK int

                            select @TrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @Date  and FundPK = @FundPK   
                            )
                            and status = 2 and FundPK = @FundPK                               

                            select A.TrxBuy,A.TrxBuyType,A.InstrumentPK,A.InstrumentID,A.Balance BegBalance,sum(isnull(B.MovBalance,0)) MovBalance,A.Balance + sum(isnull(B.MovBalance,0)) Balance,A.CurrencyID,A.AcqDate,A.InterestPercent,A.MaturityDate,A.TrxBuy,A.TrxBuyType,A.AvgPrice,isnull(12/C.Priority,0) PaymentType from (

                            select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,A.Balance Balance,'IDR' CurrencyID,'1900-01-01' AcqDate,C.InterestPercent,B.MaturityDate MaturityDate,0 TrxBuy,'FP' TrxBuyType,C.AvgPrice,B.InterestPaymentType from 
							( select A.InstrumentPK,sum(A.Balance) Balance from FundPosition A    
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
                            Left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   
                            where A.FundPK = @FundPK  and A.TrailsPK = @TrailsPK and B.InstrumentTypePK in (2,3,8,9,13,15) and A.MarketPK = @MarketPK  and A.status = 2 and A.MaturityDate >= @Date
							group by A.InstrumentPK
							)A
							left join FundPosition C on A.InstrumentPK = C.InstrumentPK and C.Status = 2   
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
                            Left join Currency D on C.CurrencyPK = D.CurrencyPK and D.status = 2   
                            where C.FundPK = @FundPK  and C.TrailsPK = @TrailsPK and B.InstrumentTypePK in (2,3,8,9,13,15) and C.MarketPK = @MarketPK 
							group By A.InstrumentPK,B.ID,B.Name,A.Balance,C.InterestPercent,C.AvgPrice,B.InterestPaymentType,B.MaturityDate

                            union all
	
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR',A.ValueDate,A.InterestPercent,A.MaturityDate,InvestmentPK TrxBuy,'INV' TrxBuyType,A.DonePrice,B.InterestPaymentType
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate = @Date and StatusInvestment = 2 and StatusDealing = 2 and A.instrumentTypePK in (2,3,8,9,13,15) and OrderStatus in ('M','P') and A.MaturityDate >= @Date
                            and FundPK = @FundPK and TrxType  = 1  and A.MarketPK = @MarketPK 
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType

                            ) A 
                            left join
                            (
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR' CurrencyID,A.ValueDate,A.InterestPercent,A.MaturityDate,InvestmentPK TrxBuy,'INV' TrxBuyType,A.DonePrice,B.InterestPaymentType,'1900-01-01' AcqDate
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate = @Date and StatusInvestment <> 3 and statusDealing <> 3 and statusSettlement <> 3 and A.instrumentTypePK in (2,3,8,9,13,15) and A.MaturityDate >= @Date
                            and FundPK = @FundPK and TrxType  = 2  and A.MarketPK = @MarketPK
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType,A.AcqDate
                            ) B on  A.InstrumentPK = B.InstrumentPK and A.AcqDate = B.AcqDate
                            left join MasterValue C on A.InterestPaymentType = C.Code and C.ID = 'InterestPaymentType' and C.status = 2

                            Group By A.InstrumentPK,A.InstrumentID,A.Balance,A.CurrencyID,A.AcqDate,A.InterestPercent,A.MaturityDate,A.TrxBuy,A.TrxBuyType,A.AvgPrice,C.Priority
                            having A.Balance + sum(isnull(B.MovBalance,0)) <> 0 
							order by InstrumentPK                 

                            ";
                            cmd.Parameters.AddWithValue("@Date", _date);
                            cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                            cmd.Parameters.AddWithValue("@MarketPK", _marketPK);
                        }

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    InstrumentForInvestment M_Instrument = new InstrumentForInvestment();
                                    M_Instrument.InstrumentPK = Convert.ToInt32(dr["InstrumentPK"]);
                                    M_Instrument.ID = Convert.ToString(dr["InstrumentID"]);
                                    M_Instrument.Balance = Convert.ToDecimal(dr["Balance"]);
                                    if (_trxType == 2)
                                    {
                                        M_Instrument.BegBalance = Convert.ToDecimal(dr["BegBalance"]);
                                        M_Instrument.MovBalance = Convert.ToDecimal(dr["MovBalance"]);
                                        M_Instrument.AvgPrice = Convert.ToDecimal(dr["AvgPrice"]);
                                        M_Instrument.AcqDate = Convert.ToString(dr["AcqDate"]);
                                        M_Instrument.TrxBuy = Convert.ToInt32(dr["TrxBuy"]);
                                        M_Instrument.TrxBuyType = Convert.ToString(dr["TrxBuyType"]);
                                    }
                                    M_Instrument.InterestPercent = Convert.ToDecimal(dr["InterestPercent"]);
                                    M_Instrument.MaturityDate = Convert.ToString(dr["MaturityDate"]);
                                    M_Instrument.PaymentType = Convert.ToInt32(dr["PaymentType"]);
                                    L_Instrument.Add(M_Instrument);
                                }
                            }
                            return L_Instrument;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int Validate_CheckAvailableInstrument(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                            Declare @TrailsPK int
                            select @TrailsPK = EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @Date  and FundPK = @FundPK   
                            )
                            and status = 2 and FundPK = @FundPK                                  

                            Declare @CurrBalance numeric (18,4)

                            select @CurrBalance =  A.Balance + sum(isnull(B.MovBalance,0)) from (

                            select AB.InstrumentPK,AB.InstrumentID,sum(isnull(AB.Balance,0)) Balance,AB.CurrencyID,AB.AcqDate,AB.InterestPercent,AB.MaturityDate,AB.TrxBuy,AB.TrxBuyType, AB.AvgPrice,AB.InterestPaymentType from(
                            select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(A.Balance) Balance,'IDR' CurrencyID,'1900-01-01' AcqDate,A.InterestPercent,
                            A.MaturityDate,0 TrxBuy,'' TrxBuyType,0 AvgPrice,B.InterestPaymentType from FundPosition A    
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2    
                            Left join Currency D on A.CurrencyPK = D.CurrencyPK and D.status = 2   
                            where A.FundPK = @FundPK  and A.TrailsPK = @TrailsPK and B.InstrumentTypePK in (2,3,8,9,13,15)      and A.status = 2         
                            group by A.InstrumentPK,B.ID,B.Name,A.InterestPercent,A.MaturityDate,B.InterestPaymentType
                            union all	
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR','1900-01-01' AcqDate,A.InterestPercent,A.MaturityDate,0 TrxBuy,'' TrxBuyType,0 DonePrice,B.InterestPaymentType
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate = @Date and StatusInvestment = 2 and StatusDealing = 2 and A.instrumentTypePK in (2,3,8,9,13,15) and OrderStatus in ('M','P')
                            and FundPK = @FundPK and TrxType  = 1  
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,
                            TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType
                            )AB
                            group By AB.InstrumentPK,AB.InstrumentID,AB.CurrencyID,AB.AcqDate,AB.InterestPercent,AB.MaturityDate,AB.TrxBuy,AB.TrxBuyType, AB.AvgPrice,AB.InterestPaymentType


                            ) A 
                            left join
                            (
                            Select A.InstrumentPK,B.ID + ' - ' + B.Name InstrumentID,sum(case when A.TrxType = 1  then A.DoneVolume else
                            case when A.trxType = 2  then A.DoneVolume * -1 end end) MovBalance,'IDR' CurrencyID,'1900-01-01' ValueDate,A.InterestPercent,A.MaturityDate,0 TrxBuy,'' TrxBuyType,0 DonePrice,B.InterestPaymentType
                            from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                            Left join Bank C on B.BankPK = C.BankPK and C.status = 2 
                            where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and StatusSettlement <> 3  and A.instrumentTypePK in (2,3,8,9,13,15)
                            and FundPK = @FundPK and TrxType  = 2
                            group By A.InstrumentPK,B.ID,B.Name,B.InterestPercent,B.MaturityDate,A.ValueDate,A.InterestPercent,A.MaturityDate,TrxBuy,TrxBuyType,InvestmentPK,A.DonePrice,B.InterestPaymentType
                            ) B on  A.InstrumentPK = B.InstrumentPK
                            left join MasterValue C on A.InterestPaymentType = C.Code and C.ID = 'InterestPaymentType' and C.status = 2
                            where A.InstrumentPK = @InstrumentPK
                            Group By A.InstrumentPK,A.InstrumentID,A.Balance,A.CurrencyID,A.InterestPercent,A.MaturityDate,A.TrxBuy,A.TrxBuyType,A.AvgPrice,C.Priority
                            IF (@Balance > @CurrBalance)
                            BEGIN
	                            select 1 Result
                            END
                            ELSE
                            BEGIN
	                            select 2 Result
                            END

                           ";

                        cmd.Parameters.AddWithValue("@date", _investment.ValueDate);
                        cmd.Parameters.AddWithValue("@InstrumentPK", _investment.InstrumentPK);
                        cmd.Parameters.AddWithValue("@FundPK", _investment.FundPK);
                        cmd.Parameters.AddWithValue("@Balance", _investment.Volume);
                        //cmd.Parameters.AddWithValue("@TrxBuy", _investment.TrxBuy);
                        //cmd.Parameters.AddWithValue("@TrxBuyType", _investment.TrxBuyType);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["Result"]);

                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int EndDayTrailsFundPortfolio_Generate(string _usersID, DateTime _valueDate)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in(1,4,16)
update Investment set MarketPK = 1
update Investment set Category = null where InstrumentTypePK  <> 5

Declare @PeriodPK    int                  
Declare @maxEndDayTrailsFundPortfolioPK int                    

Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo                  
Select @maxEndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio     
set @maxEndDayTrailsFundPortfolioPK = isnull(@maxEndDayTrailsFundPortfolioPK,1)               

Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,BitValidate
,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
Select @maxEndDayTrailsFundPortfolioPK,1,1,@ValueDate,0
,'',@UsersID,@LastUpdate,@LastUpdate          

      
Create Table #ZFundPosition                  
(                  
InstrumentPK int,     
InstrumentTypePK int,                  
InstrumentID nvarchar(100),                  
FundPK int,                  
FundID nvarchar(100),                  
AvgPrice numeric(38,12),                  
LastVolume numeric(38,4),                  
ClosePrice numeric(38,12),                  
TrxAmount numeric(38,6),              
AcqDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200),
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
BitBreakable BIT
)                  
    
Create Table #ZLogicFundPosition              
(              
BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) ,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable bit,
AcqPrice NUMERIC(18,8)
)              

-- TARIK JUAL BELI DARI INVESTMENT              
Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable)               

Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,
B.InterestPercent,B.CurrencyPK,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
From               
(               
	Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
	,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
	isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
	isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.TaxExpensePercent,0) TaxExpensePercent,isnull(A.MarketPK,0) MarketPK,
	isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
	,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
	A.AcqDate,A.BitBreakable
	from (                 
	
		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type = 1 then null else AcqDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
		from Investment A 
		Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
		where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)       
		AND A.InstrumentTypePK  IN (1,5,4,6,16,10,7)         
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
	,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
	    Case when C.Type = 1 then null else AcqDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)         
		AND A.InstrumentTypePK  IN (1,5,4,6,16,10,7)        
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			
		UNION ALL

		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type = 1 then null else SettlementDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
		where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)             
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK

	)A                
	Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
	,A.ValueDate,A.CurrencyPK ,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
	,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable
)B     
Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.InterestPercent,B.CurrencyPK
,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable


-- LOGIC MASUKIN BOND PER ACQ DATE DAN ACQ VOLUME, UNTUK COVER FIFO LOGIC

DECLARE @FifoBondTrx TABLE
(
	BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) ,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable BIT,
AcqPrice NUMERIC(18,8)

)

						
DECLARE @FifoInvestmentPK int

DECLARE FIFO CURSOR FOR 
SELECT InvestmentPK 
FROM Investment 
WHERE ValueDate <= @ValueDate and trxType in (1,2) and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)         
		AND InstrumentTypePK NOT IN (1,5,4,6,16,10,7)  
OPEN FIFO  
FETCH NEXT FROM FIFO INTO @FifoInvestmentPK  

WHILE @@FETCH_STATUS = 0  
BEGIN  
	  
Insert into @FifoBondTrx	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,AcqPrice)   

		Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
	,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
	isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
	isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.TaxExpensePercent,0) TaxExpensePercent,isnull(A.MarketPK,0) MarketPK,
	isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
	,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
	A.AcqDate,A.BitBreakable,A.AcqPrice
	from (                 
	
			select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null 
			ELSE A.SettlementDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
			,A.DonePrice AcqPrice       
			from Investment A 
			Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
			where  A.InvestmentPK = @FifoInvestmentPK       AND A.TrxType = 1
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.DonePrice,A.SettlementDate
		
			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,
			CASE when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable,
			A.AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate IS NOT NULL AND A.AcqVolume > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice
		
			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume1) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate1 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate1 end AcqDate,
			CASE when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice1 AcqPrice

			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate1 IS NOT NULL AND A.AcqVolume1 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate1,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice1
			
			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume2) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate2 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate2 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice2 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate2 IS NOT NULL AND A.AcqVolume2 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate2,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice2


			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume3) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate3 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate3 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice3 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate3 IS NOT NULL AND A.AcqVolume3 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate3,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice3

						UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume4) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate4 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate4 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice4 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate4 IS NOT NULL AND A.AcqVolume4 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate4,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice4

			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume5) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate5 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate5 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice5 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate5 IS NOT NULL AND A.AcqVolume5 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate5,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice5


			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume6) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate6 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate6 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice6 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate6 IS NOT NULL AND A.AcqVolume6 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate6,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice6

						UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume7) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate7 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate7 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice7 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate7 IS NOT NULL AND A.AcqVolume7 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate7,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice7

				UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume8) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate8 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate8 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice8 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate8 IS NOT NULL AND A.AcqVolume8 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate8,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice8

			UNION ALL                  

			select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume9) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
			Case when C.Type = 1 then null else AcqDate9 end SettlementDate,              
			Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
			Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
			B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
			,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
			,A.PaymentModeOnMaturity
			,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
			,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate9 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
			A.AcqPrice9 AcqPrice
			from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
			where  A.InvestmentPK = @FifoInvestmentPK   AND A.TrxType = 2
			AND (A.AcqDate9 IS NOT NULL AND A.AcqVolume9 > 0)
			Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
			,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
			,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate9,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			,A.AcqPrice9

			)A                
	Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
	,A.ValueDate,A.CurrencyPK ,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
	,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable,A.AcqPrice

      FETCH NEXT FROM FIFO INTO @FifoInvestmentPK 
END 

CLOSE FIFO  
DEALLOCATE FIFO 


Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,AcqPrice)   

	Select SUM(BuyVolume),SUM(SellVolume),SUM(BuyAmount),SUM(SellAmount),FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,A.AcqPrice FROM @FifoBondTrx A
GROUP BY FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,A.AcqPrice





 --INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE ) ( BOND ONLY )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
Case when E.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AcqPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end AvgPrice,                     
Sum(isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0)) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
sum(isnull(A.BuyAmount,0) - (isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) 
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0))	TrxAmount
,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
AND isnull(A.AcqPrice,0) = isnull(B.AvgPrice,0)
and B.PeriodPK = @PeriodPK where E.Type in (2,5,14,9)
group by  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID, A.AcqPrice,A.AcqDate,A.MaturityDate
,A.InterestPercent,D.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,
D.InterestPaymentType,A.PriceMode,A.BitIsAmortized,E.InstrumentTypePK



 --INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE ) ( EQUITY ONLY )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
  ISNULL(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
isnull(A.BuyAmount,0) - (isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) 
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (1)



-- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate,InterestPercent
,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
from (
	Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
	1 AvgPrice,              
	isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
	1 ClosePrice,                  
	isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
	A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
	,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
	
	From #ZLogicFundPosition A              
	LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
	Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
	Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
	left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
	and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
	and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
	and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
	and B.PeriodPK = @PeriodPK where E.Type in (3)
)A  
group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO ( BOND ONLY )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
A.AvgPrice AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable

From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
	Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
	inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
	and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900') 
and A.AvgPrice = B.AvgPrice             
	where A.PeriodPK = @PeriodPK              
) and E.Type in (2,5,14,9) and A.periodPK = @PeriodPK      

-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO ( EQUITY ONLY )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable

From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
	Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
	inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
	and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')              
	where A.PeriodPK = @PeriodPK              
) and E.Type in (1) and A.periodPK = @PeriodPK        

-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,C.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable

From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
	Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
	inner join #ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
	where A.PeriodPK = @PeriodPK             
) and E.Type in (3) and A.periodPK = @PeriodPK           



-- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ValueDate,isnull(B.FundPK,0),isnull(B.InstrumentPK,0), isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0),0
From CorporateAction A 
left join  #ZFundPosition B on A.InstrumentPK = B.InstrumentPK
where A.Type = 4 and
ValueDate = @ValueDate and A.status = 2


-- CORPORATE ACTION DIVIDEN SAHAM

Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4)     
)   



-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
	Select  B.FundPK,B.InstrumentPK,B.Balance +  isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
	, SettlementDate, ValueDate 
	from Investment where statusSettlement = 2
	and InstrumentTypePK = 1 
	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
	, SettlementDate, ValueDate 
	from Investment where statusSettlement = 2
	and InstrumentTypePK = 1 
	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate


-- CORPORATE ACTION DIVIDEN RIGHTS
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
	, SettlementDate, ValueDate 
	from Investment where statusSettlement = 2
	and InstrumentTypePK = 1 
	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
	, SettlementDate, ValueDate 
	from Investment where statusSettlement = 2
	and InstrumentTypePK = 1 
	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate


-- CORPORATE ACTION DIVIDEN WARRANT
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
	, SettlementDate, ValueDate 
	from Investment where statusSettlement = 2
	and InstrumentTypePK = 1 
	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
	, SettlementDate, ValueDate 
	from Investment where statusSettlement = 2
	and InstrumentTypePK = 1 
	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate


-- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price from Exercise 
where DistributionDate  = @ValueDate and status = 2



-- CORPORATE ACTION BOND AMORTIZEN
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate


	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price)
Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate





-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = Case when c.InstrumentTypePK in (2,3,8,9,12,13,14,15) then A.AvgPrice else  isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) end ,  
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
and B.ID not like '%-W' and B.ID not like '%-R'

Group By FundPK,A.InstrumentPK,Price,A.status
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where C.Type in (1,9,2,5,14)
--AND A.LastVolume > 0






--INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2

where A.status = 2 and B.ID like '%-W' 

Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
 
where A.status = 2 and B.ID like '%-R'


-- DELETE RIGHTS AND WARRANT YANG EXPIRED
Delete A From #ZFundPosition A
Inner join 
(
	Select C.InstrumentPK from CorporateAction A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
	where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
)B on A.InstrumentPK = B.InstrumentPK

Delete A From #ZFundPosition A
Inner join 
(
	Select C.InstrumentPK from CorporateAction A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
	where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
)B on A.InstrumentPK = B.InstrumentPK

-- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE

Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from #ZFundPosition A
left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
where Date = @ValueDate


Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
Select @maxEndDayTrailsFundPortfolioPK,@maxEndDayTrailsFundPortfolioPK,1,1,'',@ValueDate,A.FundPK, FundID,                  
A.InstrumentPK,InstrumentID,AvgPrice,LastVolume
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then AvgPrice/100 else AvgPrice End * LastVolume CostValue
, ClosePrice,TrxAmount
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
AcqDate,MaturityDate,InterestPercent,CurrencyPK, Category,TaxExpensePercent,MarketPK
,isnull(InterestDaysType,0),isnull(InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(BankPK,0),isnull(BankBranchPK,0)
,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
From #ZFundPosition  A
where A.LastVolume > 0
    

Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
Where FundPositionPK = @maxEndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,16)
and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  


---------PROSES AMORTIZED DAN PRICE MODE------------------------------
update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			 
		end 
, A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			  
		end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
from FundPosition A 
left join 
(
	select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
	(
		Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
	) and status = 2
)B on A.InstrumentPK = B.InstrumentPK 
left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
where A.TrailsPK = @maxEndDayTrailsFundPortfolioPK

-- STATIC CLOSEPRICE


Declare @StaticClosePrice table
(
	InstrumentPK int,
	InstrumentTypePK int,
	ClosePrice numeric(18,8),
	FundPK int
)

Declare @FFundPK int

Declare A Cursor For
	Select FundPK from Fund where status = 2
Open A
Fetch next From A
Into @FFundPK
WHILE @@FETCH_STATUS = 0  
BEGIN
			


		Declare @CInstrumentPK int

		Declare B cursor For
			Select distinct InstrumentPK from updateclosePrice where status = 2
		Open B
		Fetch Next From B
		Into @CInstrumentPK
		While @@Fetch_Status = 0
		BEGIN
            IF EXISTS(select * from UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK and FundPK = @FFundPK and Date = @ValueDate)
            BEGIN

			insert into @StaticClosePrice
			Select A.InstrumentPK,InstrumentTypePK,A.ClosePriceValue,@FFundPK from UpdateClosePrice A
            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
            where A.status = 2 and A.InstrumentPK = @CInstrumentPK 
			and Date = (
				Select Max(Date) From UpdateClosePrice where status = 2 and InstrumentPK = @CInstrumentPK
				and Date <= @ValueDate and FundPK = @FFundPK
			)  and FundPK = @FFundPK

            END

			FETCH NEXT FROM B INTO @CInstrumentPK  
		END
		Close B
		Deallocate B


		
		Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		left join @StaticClosePrice B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
		and A.InstrumentPK in(
			select instrumentPK From @StaticClosePrice where FundPK = @FFundPK
		) and A.FundPK = @FFundPK 

	
FETCH NEXT FROM A 
INTO @FFundPK
END 

CLOSE A;  
DEALLOCATE A;
	
Update EndDayTrailsFundPortfolio set BitValidate = 1 where EndDayTrailsFundPortfolioPK = @maxEndDayTrailsFundPortfolioPK and Status = 1        

Select @maxEndDayTrailsFundPortfolioPK LastPK


                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean GenerateRptFundClientByInvestorType(string _userID, FundClientRpt _fundClientRpt)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    if (_fundClientRpt.InvestorType == 1)
                    {
                        string _paramDateFrom = "";
                        if (_fundClientRpt.ParamDate == "1")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasInd1 <> '01/01/1900' and FC.ExpiredDateIdentitasInd1 is not null  and FC.ExpiredDateIdentitasInd1 Between '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "9")
                        {
                            _paramDateFrom = " and FC.DatePengkinianData <> '01/01/1900' and FC.DatePengkinianData is not null and FC.DatePengkinianData Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "10")
                        {
                            if (_fundClientRpt.ParamMonth != "")
                            {
                                if (_fundClientRpt.ParamMonth == "1")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 1";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 1 and FC.Agama = " + _fundClientRpt.ParamReligion;

                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "2")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '02/01/1900' and MONTH(FC.TanggalLahir) = 2";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '02/01/1900' and MONTH(FC.TanggalLahir) = 2 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "3")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 3 ";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 3 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "4")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 4 ";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 4 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "5")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 5";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 5 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }
                                }
                                else if (_fundClientRpt.ParamMonth == "6")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 6";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 6 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "7")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 7";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 7 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "8")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 8";

                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 8 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "9")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 9";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 9 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "10")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 10";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 10 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "11")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 11";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 11 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }
                                else if (_fundClientRpt.ParamMonth == "12")
                                {
                                    if (_fundClientRpt.ParamReligion == "")
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 12";
                                    }
                                    else
                                    {
                                        _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 12 and FC.Agama = " + _fundClientRpt.ParamReligion;
                                    }

                                }

                            }
                            else if (_fundClientRpt.ParamMonth == "")
                            {
                                if (_fundClientRpt.ParamReligion == "")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir is not null and (month(FC.TanggalLahir)) between (month('" + _fundClientRpt.DateFrom + @"')) and (month('" + _fundClientRpt.DateTo + @"')) 
							    and (day(FC.TanggalLahir)) between (day('" + _fundClientRpt.DateFrom + "')) and (day('" + _fundClientRpt.DateTo + @"'))";
                                }
                                else
                                {
                                    _paramDateFrom = " and FC.TanggalLahir is not null and (month(FC.TanggalLahir)) between (month('" + _fundClientRpt.DateFrom + @"')) and (month('" + _fundClientRpt.DateTo + @"')) 
							    and (day(FC.TanggalLahir)) between (day('" + _fundClientRpt.DateFrom + "')) and (day('" + _fundClientRpt.DateTo + @"'))  and FC.Agama = " + _fundClientRpt.ParamReligion;
                                }

                            }

                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _cmd = @" 
                            select mv13.DescOne Religion,*
                            from FundClient fc   
                            left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2  
                            where  FC.status in(1,2) and FC.InvestorType = @InvestorType " + _paramDateFrom + @" ";

                            cmd.CommandText = _cmd;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@InvestorType", _fundClientRpt.InvestorType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundClientByIndividual" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundClientByIndividual";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientByIndividual");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                        while (dr0.Read())
                                        {
                                            FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();
                                            rSingle.InternalName = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
                                            rSingle.DOB = dr0["TanggalLahir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TanggalLahir"]);
                                            rSingle.Religion = dr0["Religion"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Religion"]);
                                            rSingle.RegistrationDateIdentitasInd1 = dr0["RegistrationDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd1"]);
                                            rSingle.ExpiredDateIdentitasInd1 = dr0["ExpiredDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd1"]);
                                            rSingle.ExpiredDateIdentitasInd2 = dr0["ExpiredDateIdentitasInd2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd2"]);
                                            rSingle.ExpiredDateIdentitasInd3 = dr0["ExpiredDateIdentitasInd3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd3"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByTitle =
                                            from r in rList
                                            group r by new { r.InvestorType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 3;

                                        foreach (var rsHeader in GroupByTitle)
                                        {

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "List Ulang Tahun Nasabah";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 17;
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                            incRowExcel = incRowExcel + 5;

                                            worksheet.Cells[incRowExcel, 1].Value = "InternalName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            if (_fundClientRpt.ParamDate == "1" || _fundClientRpt.ParamDate == "2")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "ExpiredDateIdentitasInd1";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            }
                                            else if (_fundClientRpt.ParamDate == "9")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "DOB";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Religion";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "ExpiredDateIdentitasInd1";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;

                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (_fundClientRpt.ParamDate == "10")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "DOB";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Religion";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;

                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }


                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InternalName;
                                                if (_fundClientRpt.ParamDate == "1" || _fundClientRpt.ParamDate == "2")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd1).ToString("dd/MM/yyyy");

                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else if (_fundClientRpt.ParamDate == "9")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.DOB).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Religion;
                                                    worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd1).ToString("dd/MM/yyyy");


                                                    worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else if (_fundClientRpt.ParamDate == "10")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.DOB).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Religion;

                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }

                                                _endRowDetail = incRowExcel;

                                                incRowExcel++;

                                            }

                                            if (_fundClientRpt.ParamDate == "1" || _fundClientRpt.ParamDate == "2")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (_fundClientRpt.ParamDate == "9")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (_fundClientRpt.ParamDate == "10")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }



                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                    else if (_fundClientRpt.InvestorType == 2)
                    {
                        string _paramDateFrom = "";
                        if (_fundClientRpt.ParamDate == "3")
                        {
                            _paramDateFrom = " and FC.ExpiredDateSKD <> '01/01/1900' and FC.ExpiredDateSKD is not null and FC.ExpiredDateSKD Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "4")
                        {
                            _paramDateFrom = " and FC.SIUPExpirationDate <> '01/01/1900' and FC.SIUPExpirationDate is not null and FC.SIUPExpirationDate Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "5")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns11 <> '01/01/1900' and FC.ExpiredDateIdentitasIns11 is not null and FC.ExpiredDateIdentitasIns11 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "6")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns12 <> '01/01/1900' and FC.ExpiredDateIdentitasIns12 is not null and FC.ExpiredDateIdentitasIns12 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "7")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns21 <> '01/01/1900' and FC.ExpiredDateIdentitasIns21 is not null and FC.ExpiredDateIdentitasIns21 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "8")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns22 <> '01/01/1900' and FC.ExpiredDateIdentitasIns22 is not null and FC.ExpiredDateIdentitasIns22 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "9")
                        {
                            _paramDateFrom = " and FC.DatePengkinianData <> '01/01/1900' and FC.DatePengkinianData is not null and FC.DatePengkinianData Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = @"
                                select FC.ID FundClientID,mv8.DescOne InvestorType,isnull(IC.Name,'') InternalCategory,  FC.NAME InternalName,A.Name SellingAgent,FC.SID,FC.IFUACode,
                                mv33.DescOne InvestorsRiskProfile, FC.DormantDate, case when FC.BitIsAfiliated=0 then 'No' else 'Yes' end Affiliated, Z.NAME AffiliatedWith,
                                case when FC.BitIsSuspend=0 then 'No' else 'Yes' end Suspended,mv69.DescOne KYCRiskProfile,
                                FC.NPWP,FC.RegistrationNPWP,FC.CompanyMail Email,FC.TeleponBisnis PhoneNumber,FC.TeleponSelular MobilePhone,FC.Companyfax Fax,
                                mv24.DescOne Country,mv25.DescOne Nationality,fc.SACode,mv43.DescOne CountryofDomicile,mv3.DescOne CityOfEstablishment,fc.TeleponBisnis BusinessPhone, 
                                BC4.ID BankRDN,Fc.RDNAccountNo RDNAccountName, FC.RDNAccountName RDNAccountNumber,
                                BC1.ID BankName1,Fc.NamaNasabah1 BankAccountName1, FC.NomorRekening1 BankAccountNumber1, FC.BankBranchName1, Y.ID Currency1, BC1.Name BICode1,BC1.Name BIMemberCode1,
                                BC1.ID BankName2,Fc.NamaNasabah2 BankAccountName2, FC.NomorRekening2 BankAccountNumber2, FC.BankBranchName2, W.ID Currency2, BC2.Name BICode2,BC2.Name BIMemberCode2, 
                                BC1.ID BankName3,Fc.NamaNasabah3 BankAccountName3, FC.NomorRekening3 BankAccountNumber3, FC.BankBranchName3, V.ID Currency3, BC3.Name BICode3,BC3.Name BIMemberCode3,  
                                mv34.DescOne AssetOwner,mv35.DescOne StatementType,mv36.DescOne FATCAStatus,FC.TIN,mv37.DescOne TINIssuanceCountry, FC.GIIN, FC.SubstantialOwnerName,  
                                FC.SubstantialOwnerAddress, FC.SubstantialOwnerTIN,Fc.NamaPerusahaan CompanyName, FC.AlamatPerusahaan CompanyAddress, FC.KodePosIns CompanyZipCode, mv3.DescOne CompanyCity, mv17.DescOne CompanyLegalDomicile, 
                                FC.TanggalBerdiri EstablishmentDate,FC.LokasiBerdiri EstablishmentPlace, mv44.DescOne CountryofEstablishment, FC.NoSKD SKDNumber,  FC.ExpiredDateSKD,
                                FC.NomorAnggaran ArticleOfAssociation, FC.NomorSIUP SIUPNumber,FC.SIUPExpirationDate ,FC.AssetFor1Year, FC.AssetFor2Year, FC.AssetFor3Year,
                                FC.OperatingProfitFor1Year,FC.OperatingProfitFor2Year,FC.OperatingProfitFor3Year,
                                mv18.DescOne CompanyType, mv19.DescOne CompanyCharacteristic,mv20.DescOne CompanyIncomePerAnnum,  
                                mv21.DescOne CompanySourceOfFunds,mv22.DescOne CompanyInvestmentObjective,   
                                mv45.DescOne CountryofCompany, mv46.DescOne CompanyCityName, mv26.DescOne Province, 
                                FC.NamaDepanIns1 FirstNameOfficer1,FC.NamaTengahIns1 MiddleNameOfficer1,FC.NamaBelakangIns1 LastNameOfficer1,FC.Jabatan1 PositionOfficer1,FC.PhoneIns1 PhoneNumberOfficer1, FC.EmailIns1 EmailOfficer1,
                                FC.IdentitasIns11 IDType1Officer1, FC.NoIdentitasIns11 IDNumber1Officer1, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer1, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer1,
                                FC.IdentitasIns12 IDType2Officer1, FC.NoIdentitasIns12 IDNumber2Officer1, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer1, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer1,
                                FC.IdentitasIns13 IDType3Officer1, FC.NoIdentitasIns13 IDNumber3Officer1, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer1, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer1,
                                FC.IdentitasIns14 IDType4Officer1, FC.NoIdentitasIns14 IDNumber4Officer1, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer1, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer1,
                                FC.NamaDepanIns2 FirstNameOfficer2,FC.NamaTengahIns2 MiddleNameOfficer2,FC.NamaBelakangIns2 LastNameOfficer2,FC.Jabatan2 PositionOfficer2,
                                FC.IdentitasIns21 IDType1Officer2, FC.NoIdentitasIns21 IDNumber1Officer2, FC.RegistrationDateIdentitasIns21 IDRegDate1Officer2, FC.ExpiredDateIdentitasIns21 IDExpireDate1Officer2,
                                FC.IdentitasIns22 IDType2Officer2, FC.NoIdentitasIns22 IDNumber2Officer2, FC.RegistrationDateIdentitasIns22 IDRegDate2Officer2, FC.ExpiredDateIdentitasIns22 IDExpireDate2Officer2,
                                FC.IdentitasIns23 IDType3Officer2, FC.NoIdentitasIns23 IDNumber3Officer2, FC.RegistrationDateIdentitasIns23 IDRegDate3Officer2, FC.ExpiredDateIdentitasIns23 IDExpireDate3Officer2,
                                FC.IdentitasIns24 IDType4Officer2, FC.NoIdentitasIns24 IDNumber4Officer2, FC.RegistrationDateIdentitasIns24 IDRegDate4Officer2, FC.ExpiredDateIdentitasIns24 IDExpireDate4Officer2,
                                FC.NamaDepanIns3 FirstNameOfficer3,FC.NamaTengahIns3 MiddleNameOfficer3,FC.NamaBelakangIns3 LastNameOfficer3,FC.Jabatan3 PositionOfficer3,
                                FC.IdentitasIns31 IDType1Officer3, FC.NoIdentitasIns31 IDNumber1Officer3, FC.RegistrationDateIdentitasIns31 IDRegDate1Officer3, FC.ExpiredDateIdentitasIns31 IDExpireDate1Officer3,
                                FC.IdentitasIns32 IDType2Officer3, FC.NoIdentitasIns32 IDNumber2Officer3, FC.RegistrationDateIdentitasIns32 IDRegDate2Officer3, FC.ExpiredDateIdentitasIns32 IDExpireDate2Officer3,
                                FC.IdentitasIns33 IDType3Officer3, FC.NoIdentitasIns33 IDNumber3Officer3, FC.RegistrationDateIdentitasIns33 IDRegDate3Officer3, FC.ExpiredDateIdentitasIns33 IDExpireDate3Officer3,
                                FC.IdentitasIns34 IDType4Officer3, FC.NoIdentitasIns34 IDNumber4Officer3, FC.RegistrationDateIdentitasIns34 IDRegDate4Officer3, FC.ExpiredDateIdentitasIns34 IDExpireDate4Officer3,
                                FC.NamaDepanIns4 FirstNameOfficer4,FC.NamaTengahIns4 MiddleNameOfficer4,FC.NamaBelakangIns4 LastNameOfficer4,FC.Jabatan4 PositionOfficer4,
                                FC.IdentitasIns41 IDType1Officer4, FC.NoIdentitasIns41 IDNumber1Officer4, FC.RegistrationDateIdentitasIns41 IDRegDate1Officer4, FC.ExpiredDateIdentitasIns41 IDExpireDate1Officer4,
                                FC.IdentitasIns42 IDType2Officer4, FC.NoIdentitasIns42 IDNumber2Officer4, FC.RegistrationDateIdentitasIns42 IDRegDate2Officer4, FC.ExpiredDateIdentitasIns42 IDExpireDate2Officer4,
                                FC.IdentitasIns43 IDType3Officer4, FC.NoIdentitasIns43 IDNumber3Officer4, FC.RegistrationDateIdentitasIns43 IDRegDate3Officer4, FC.ExpiredDateIdentitasIns43 IDExpireDate3Officer4,
                                FC.IdentitasIns44 IDType4Officer4, FC.NoIdentitasIns44 IDNumber4Officer4, FC.RegistrationDateIdentitasIns44 IDRegDate4Officer4, FC.ExpiredDateIdentitasIns44 IDExpireDate4Officer4,
                                FC.Description, FC.EntryUsersID, FC.EntryTime, FC.UpdateUsersID, FC.UpdateTime, FC.ApprovedUsersID, FC.ApprovedTime, FC.VoidUsersID, FC.VoidTime,
                                FC.SuspendBy, FC.SuspendTime, FC.UnSuspendBy, FC.UnSuspendTime
                                from FundClient fc   
                                left join Agent A on fc.SellingAgentPK = A.AgentPK and A.status = 2  
                                left join MasterValue mv1 on fc.KodeKotaInd1 = mv1.Code and mv1.ID = 'CityRHB' and mv1.status = 2  
                                left join MasterValue mv2 on fc.KodeKotaInd2 = mv2.Code and  mv2.ID = 'CityRHB' and mv2.status = 2  
                                left join MasterValue mv3 on fc.KodeKotaIns = mv3.Code and  mv3.ID = 'CityRHB' and mv3.status = 2  
                                left join MasterValue mv4 on fc.OtherKodeKotaInd1 = mv4.Code and mv4.ID = 'CityRHB' and mv4.status = 2  
                                left join MasterValue mv5 on fc.OtherKodeKotaInd2 = mv5.Code and mv5.ID = 'CityRHB' and mv5.status = 2  
                                left join MasterValue mv6 on fc.OtherKodeKotaInd3 = mv6.Code and mv6.ID = 'CityRHB' and mv6.status = 2  
                                left join MasterValue mv7 on fc.ClientCategory = mv7.code  and  mv7.ID = 'ClientCategory' and mv7.status = 2  
                                left join MasterValue mv8 on fc.InvestorType = mv8.code and  mv8.ID = 'InvestorType' and mv8.status = 2  
                                left join MasterValue mv9 on fc.JenisKelamin = mv9.code and  mv9.ID = 'Sex' and mv9.status = 2  
                                left join MasterValue mv10 on fc.StatusPerkawinan = mv10.code and  mv10.ID = 'MaritalStatus' and mv10.status = 2  
                                left join MasterValue mv11 on fc.Pekerjaan = mv11.code and  mv11.ID = 'Occupation' and mv11.status = 2  
                                left join MasterValue mv12 on fc.Pendidikan = mv12.code and  mv12.ID = 'EducationalBackground' and mv12.status = 2  
                                left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2  
                                left join MasterValue mv14 on fc.PenghasilanInd = mv14.code and  mv14.ID = 'IncomeIND' and mv14.status = 2  
                                left join MasterValue mv15 on fc.SumberDanaInd = mv15.code and  mv15.ID = 'IncomeSourceIND' and mv15.status = 2  
                                left join MasterValue mv16 on fc.MaksudTujuanInd = mv16.code and  mv16.ID = 'InvestmentObjectivesIND' and mv16.status = 2  
                                left join MasterValue mv17 on fc.Domisili = mv17.code and  mv17.ID = 'Domicile' and mv17.status = 2  
                                left join MasterValue mv18 on fc.Tipe = mv18.code and  mv18.ID = 'CompanyType' and mv18.status = 2  
                                left join MasterValue mv19 on fc.Karakteristik = mv19.code and  mv19.ID = 'CompanyCharacteristic' and mv19.status = 2  
                                left join MasterValue mv20 on fc.PenghasilanInstitusi = mv20.code and  mv20.ID = 'IncomeINS' and mv20.status = 2  
                                left join MasterValue mv21 on fc.SumberDanaInstitusi = mv21.code and  mv21.ID = 'IncomeSourceIND' and mv21.status = 2  
                                left join MasterValue mv22 on fc.MaksudTujuanInstitusi = mv22.code and  mv22.ID = 'InvestmentObjectivesINS' and mv22.status = 2  
                                left join MasterValue mv24 on fc.Negara = mv24.code and  mv24.ID = 'SDICountry' and mv24.status = 2  
                                left join MasterValue mv25 on fc.Nationality = mv25.code and  mv25.ID = 'Nationality' and mv25.status = 2  
                                left join MasterValue mv26 on fc.Propinsi = mv26.code and  mv26.ID = 'SDIProvince' and mv26.status = 2  
                                left join MasterValue mv27 on fc.OtherPropinsiInd1 = mv27.code and  mv27.ID = 'SDIProvince' and mv27.status = 2  
                                left join MasterValue mv28 on fc.OtherPropinsiInd2 = mv28.code and  mv28.ID = 'SDIProvince' and mv28.status = 2  
                                left join MasterValue mv29 on fc.OtherPropinsiInd3 = mv29.code and  mv29.ID = 'SDIProvince' and mv29.status = 2  
                                left join MasterValue mv30 on fc.OtherNegaraInd1 = mv30.code and  mv30.ID = 'SDICountry' and mv30.status = 2  
                                left join MasterValue mv31 on fc.OtherNegaraInd2 = mv31.code and  mv31.ID = 'SDICountry' and mv31.status = 2  
                                left join MasterValue mv32 on fc.OtherNegaraInd3 = mv32.code and  mv32.ID = 'SDICountry' and mv32.status = 2  
                                left join InternalCategory IC on fc.InternalCategoryPK = IC.InternalCategoryPK and IC.status = 2  
                                left join MasterValue mv33 on fc.InvestorsRiskProfile = mv33.code and  mv33.ID = 'InvestorsRiskProfile' and mv33.status = 2  
                                left join MasterValue mv34 on fc.AssetOwner = mv34.code and  mv34.ID = 'AssetOwner' and mv34.status = 2  
                                left join MasterValue mv35 on fc.StatementType = mv35.code and  mv35.ID = 'StatementType' and mv35.status = 2  
                                left join MasterValue mv36 on fc.fatca = mv36.code and  mv36.ID = 'FATCAInsti' and mv36.status = 2  
                                left join MasterValue mv37 on fc.TINIssuanceCountry = mv37.code and  mv37.ID = 'SDICountry' and mv37.status = 2  
                                left join MasterValue mv41 on fc.CountryOfBirth = mv41.code and  mv41.ID = 'SDICountry' and mv41.status = 2  
                                left join MasterValue mv42 on fc.CountryofCorrespondence = mv42.code and  mv42.ID = 'SDICountry' and mv42.status = 2  
                                left join MasterValue mv43 on fc.Negara = mv43.code and  mv43.ID = 'SDICountry' and mv43.status = 2  
                                left join MasterValue mv44 on fc.CountryofEstablishment = mv44.code and  mv44.ID = 'SDICountry' and mv44.status = 2  
                                left join MasterValue mv45 on fc.CountryofCompany = mv45.code and  mv45.ID = 'SDICountry' and mv45.status = 2  
                                left join MasterValue mv46 on fc.CompanyCityName = mv46.Code and mv46.ID = 'CityRHB' and mv46.status = 2  
                                left join MasterValue mv47 on fc.NatureOfBusiness = mv47.Code and mv47.ID = 'HRBusiness' and mv47.status = 2  
                                left join MasterValue mv48 on fc.Politis = mv48.Code and mv48.ID = 'PoliticallyExposed' and mv48.status = 2
                                left join MasterValue mv49 on fc.IdentitasInd1 = mv49.Code and mv49.ID = 'Identity' and mv49.status = 2
                                left join MasterValue mv50 on fc.IdentitasInd2 = mv50.Code and mv50.ID = 'Identity' and mv50.status = 2
                                left join MasterValue mv51 on fc.IdentitasInd3 = mv51.Code and mv51.ID = 'Identity' and mv51.status = 2
                                left join MasterValue mv52 on fc.IdentitasIns11 = mv52.Code and mv52.ID = 'Identity' and mv52.status = 2
                                left join MasterValue mv53 on fc.IdentitasIns12 = mv53.Code and mv53.ID = 'Identity' and mv53.status = 2
                                left join MasterValue mv54 on fc.IdentitasIns13 = mv54.Code and mv54.ID = 'Identity' and mv54.status = 2
                                left join MasterValue mv55 on fc.IdentitasIns14 = mv55.Code and mv55.ID = 'Identity' and mv55.status = 2
                                left join MasterValue mv56 on fc.IdentitasIns21 = mv56.Code and mv56.ID = 'Identity' and mv56.status = 2
                                left join MasterValue mv57 on fc.IdentitasIns22 = mv57.Code and mv57.ID = 'Identity' and mv57.status = 2
                                left join MasterValue mv58 on fc.IdentitasIns23 = mv58.Code and mv58.ID = 'Identity' and mv58.status = 2
                                left join MasterValue mv59 on fc.IdentitasIns24 = mv59.Code and mv59.ID = 'Identity' and mv59.status = 2
                                left join MasterValue mv60 on fc.IdentitasIns31 = mv60.Code and mv60.ID = 'Identity' and mv60.status = 2
                                left join MasterValue mv61 on fc.IdentitasIns32 = mv61.Code and mv61.ID = 'Identity' and mv61.status = 2
                                left join MasterValue mv62 on fc.IdentitasIns33 = mv62.Code and mv62.ID = 'Identity' and mv62.status = 2
                                left join MasterValue mv63 on fc.IdentitasIns34 = mv63.Code and mv63.ID = 'Identity' and mv63.status = 2
                                left join MasterValue mv64 on fc.IdentitasIns41 = mv64.Code and mv64.ID = 'Identity' and mv64.status = 2
                                left join MasterValue mv65 on fc.IdentitasIns42 = mv65.Code and mv65.ID = 'Identity' and mv65.status = 2
                                left join MasterValue mv66 on fc.IdentitasIns43 = mv66.Code and mv66.ID = 'Identity' and mv66.status = 2
                                left join MasterValue mv67 on fc.IdentitasIns44 = mv67.Code and mv67.ID = 'Identity' and mv67.status = 2
                                left join MasterValue mv68 on fc.SpouseOccupation = mv68.code and  mv68.ID = 'Occupation' and mv68.status = 2
                                left join MasterValue mv69 on fc.KYCRiskProfile = mv69.code and  mv69.ID = 'KYCRiskProfile' and mv69.status = 2
                                left join fundclient Z on FC.AfiliatedFromPK = Z.FundclientPK and  Z.status = 2
                                left join Currency Y on FC.MataUang1 =  Y.CurrencyPK and Y.status = 2
                                left join Currency W on FC.MataUang2 =  W.CurrencyPK and W.status = 2
                                left join Currency V on FC.MataUang3 =  V.CurrencyPK and V.status = 2
                                left join Bank BC1 on fc.NamaBank1 = BC1.BankPK and BC1.status = 2   
                                left join Bank BC2 on fc.NamaBank2 = BC2.BankPK and BC2.status = 2   
                                left join Bank BC3 on fc.NamaBank3 = BC3.BankPK and BC3.status = 2   
                                left join Bank BC4 on fc.BankRDNPK = BC4.BankPK and BC4.status = 2
                            where  FC.status in (1,2) and FC.InvestorType = @InvestorType " + _paramDateFrom + @" ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@InvestorType", _fundClientRpt.InvestorType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundClientByInstitution" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundClientByInstitution";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientByInstitution");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                        while (dr0.Read())
                                        {
                                            FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();

                                            rSingle.FundClientID = dr0["FundClientID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientID"]);
                                            rSingle.InvestorType = dr0["InvestorType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorType"]);
                                            rSingle.InternalCategory = dr0["InternalCategory"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalCategory"]);
                                            rSingle.InternalName = dr0["InternalName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalName"]);
                                            rSingle.SellingAgent = dr0["SellingAgent"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SellingAgent"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.IFUACode = dr0["IFUACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IFUACode"]);
                                            rSingle.InvestorsRiskProfile = dr0["InvestorsRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorsRiskProfile"]);
                                            rSingle.DormantDate = dr0["DormantDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DormantDate"]);
                                            rSingle.Affiliated = dr0["Affiliated"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Affiliated"]);
                                            rSingle.AffiliatedWith = dr0["AffiliatedWith"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AffiliatedWith"]);
                                            rSingle.Suspended = dr0["Suspended"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Suspended"]);
                                            rSingle.NPWP = dr0["NPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NPWP"]);
                                            rSingle.RegistrationNPWP = dr0["RegistrationNPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationNPWP"]);
                                            rSingle.Email = dr0["Email"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Email"]);
                                            rSingle.PhoneNumber = dr0["PhoneNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumber"]);
                                            rSingle.MobilePhone = dr0["MobilePhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MobilePhone"]);
                                            rSingle.BusinessPhone = dr0["BusinessPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinessPhone"]);
                                            rSingle.Fax = dr0["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax"]);
                                            rSingle.Country = dr0["Country"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Country"]);
                                            rSingle.Nationality = dr0["Nationality"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Nationality"]);
                                            rSingle.BankRDN = dr0["BankRDN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankRDN"]);
                                            rSingle.RDNAccountName = dr0["RDNAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountName"]);
                                            rSingle.RDNAccountNumber = dr0["RDNAccountNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountNumber"]);
                                            rSingle.BankName1 = dr0["BankName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName1"]);
                                            rSingle.BankAccountName1 = dr0["BankAccountName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName1"]);
                                            rSingle.BankAccountNumber1 = dr0["BankAccountNumber1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber1"]);
                                            rSingle.BankBranchName1 = dr0["BankBranchName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName1"]);
                                            rSingle.Currency1 = dr0["Currency1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency1"]);
                                            rSingle.BankName2 = dr0["BankName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName2"]);
                                            rSingle.BankAccountName2 = dr0["BankAccountName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName2"]);
                                            rSingle.BankAccountNumber2 = dr0["BankAccountNumber2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber2"]);
                                            rSingle.BankBranchName2 = dr0["BankBranchName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName2"]);
                                            rSingle.Currency2 = dr0["Currency2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency2"]);
                                            rSingle.BankName3 = dr0["BankName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName3"]);
                                            rSingle.BankAccountName3 = dr0["BankAccountName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName3"]);
                                            rSingle.BankAccountNumber3 = dr0["BankAccountNumber3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber3"]);
                                            rSingle.BankBranchName3 = dr0["BankBranchName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName3"]);
                                            rSingle.Currency3 = dr0["Currency3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency3"]);
                                            rSingle.AssetOwner = dr0["AssetOwner"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetOwner"]);
                                            rSingle.StatementType = dr0["StatementType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["StatementType"]);
                                            rSingle.FATCAStatus = dr0["FATCAStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FATCAStatus"]);
                                            rSingle.TIN = dr0["TIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TIN"]);
                                            rSingle.TINIssuanceCountry = dr0["TINIssuanceCountry"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TINIssuanceCountry"]);
                                            rSingle.GIIN = dr0["GIIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GIIN"]);
                                            rSingle.SubstantialOwnerName = dr0["SubstantialOwnerName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerName"]);
                                            rSingle.SubstantialOwnerAddress = dr0["SubstantialOwnerAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerAddress"]);
                                            rSingle.SubstantialOwnerTIN = dr0["SubstantialOwnerTIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerTIN"]);
                                            rSingle.CompanyName = dr0["CompanyName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyName"]);
                                            rSingle.CompanyAddress = dr0["CompanyAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyAddress"]);
                                            rSingle.CompanyZipCode = dr0["CompanyZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyZipCode"]);
                                            rSingle.CompanyCity = dr0["CompanyCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCity"]);
                                            rSingle.CompanyLegalDomicile = dr0["CompanyLegalDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyLegalDomicile"]);
                                            rSingle.EstablishmentDate = dr0["EstablishmentDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentDate"]);
                                            rSingle.EstablishmentPlace = dr0["EstablishmentPlace"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentPlace"]);
                                            rSingle.CountryofEstablishment = dr0["CountryofEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofEstablishment"]);
                                            rSingle.SKDNumber = dr0["SKDNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SKDNumber"]);
                                            rSingle.ExpiredDateSKD = dr0["ExpiredDateSKD"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateSKD"]);
                                            rSingle.ArticleOfAssociation = dr0["ArticleOfAssociation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ArticleOfAssociation"]);
                                            rSingle.SIUPNumber = dr0["SIUPNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPNumber"]);
                                            rSingle.SIUPExpirationDate = dr0["SIUPExpirationDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPExpirationDate"]);
                                            rSingle.AssetFor1Year = dr0["AssetFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor1Year"]);
                                            rSingle.AssetFor2Year = dr0["AssetFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor2Year"]);
                                            rSingle.AssetFor3Year = dr0["AssetFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor3Year"]);
                                            rSingle.OperatingProfitFor1Year = dr0["OperatingProfitFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor1Year"]);
                                            rSingle.OperatingProfitFor2Year = dr0["OperatingProfitFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor2Year"]);
                                            rSingle.OperatingProfitFor3Year = dr0["OperatingProfitFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor3Year"]);
                                            rSingle.CompanyType = dr0["CompanyType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyType"]);
                                            rSingle.CompanyCharacteristic = dr0["CompanyCharacteristic"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCharacteristic"]);
                                            rSingle.CompanyIncomePerAnnum = dr0["CompanyIncomePerAnnum"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyIncomePerAnnum"]);
                                            rSingle.CompanySourceOfFunds = dr0["CompanySourceOfFunds"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanySourceOfFunds"]);
                                            rSingle.CompanyInvestmentObjective = dr0["CompanyInvestmentObjective"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyInvestmentObjective"]);
                                            rSingle.CountryofCompany = dr0["CountryofCompany"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofCompany"]);
                                            rSingle.CompanyCityName = dr0["CompanyCityName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCityName"]);
                                            rSingle.Province = dr0["Province"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Province"]);
                                            rSingle.FirstNameOfficer1 = dr0["FirstNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer1"]);
                                            rSingle.MiddleNameOfficer1 = dr0["MiddleNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer1"]);
                                            rSingle.LastNameOfficer1 = dr0["LastNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer1"]);
                                            rSingle.PositionOfficer1 = dr0["PositionOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer1"]);
                                            rSingle.PhoneNumberOfficer1 = dr0["PhoneNumberOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumberOfficer1"]);
                                            rSingle.EmailOfficer1 = dr0["EmailOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EmailOfficer1"]);
                                            rSingle.IDType1Officer1 = dr0["IDType1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer1"]);
                                            rSingle.IDNumber1Officer1 = dr0["IDNumber1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer1"]);
                                            rSingle.IDRegDate1Officer1 = dr0["IDRegDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer1"]);
                                            rSingle.IDExpireDate1Officer1 = dr0["IDExpireDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer1"]);
                                            rSingle.IDType2Officer1 = dr0["IDType2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer1"]);
                                            rSingle.IDNumber2Officer1 = dr0["IDNumber2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer1"]);
                                            rSingle.IDRegDate2Officer1 = dr0["IDRegDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer1"]);
                                            rSingle.IDExpireDate2Officer1 = dr0["IDExpireDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer1"]);
                                            rSingle.IDType3Officer1 = dr0["IDType3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer1"]);
                                            rSingle.IDNumber3Officer1 = dr0["IDNumber3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer1"]);
                                            rSingle.IDRegDate3Officer1 = dr0["IDRegDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer1"]);
                                            rSingle.IDExpireDate3Officer1 = dr0["IDExpireDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer1"]);
                                            rSingle.IDType4Officer1 = dr0["IDType4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer1"]);
                                            rSingle.IDNumber4Officer1 = dr0["IDNumber4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer1"]);
                                            rSingle.IDRegDate4Officer1 = dr0["IDRegDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer1"]);
                                            rSingle.IDExpireDate4Officer1 = dr0["IDExpireDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer1"]);
                                            rSingle.FirstNameOfficer2 = dr0["FirstNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer2"]);
                                            rSingle.MiddleNameOfficer2 = dr0["MiddleNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer2"]);
                                            rSingle.LastNameOfficer2 = dr0["LastNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer2"]);
                                            rSingle.PositionOfficer2 = dr0["PositionOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer2"]);
                                            rSingle.IDType1Officer2 = dr0["IDType1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer2"]);
                                            rSingle.IDNumber1Officer2 = dr0["IDNumber1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer2"]);
                                            rSingle.IDRegDate1Officer2 = dr0["IDRegDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer2"]);
                                            rSingle.IDExpireDate1Officer2 = dr0["IDExpireDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer2"]);
                                            rSingle.IDType2Officer2 = dr0["IDType2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer2"]);
                                            rSingle.IDNumber2Officer2 = dr0["IDNumber2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer2"]);
                                            rSingle.IDRegDate2Officer2 = dr0["IDRegDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer2"]);
                                            rSingle.IDExpireDate2Officer2 = dr0["IDExpireDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer2"]);
                                            rSingle.IDType3Officer2 = dr0["IDType3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer2"]);
                                            rSingle.IDNumber3Officer2 = dr0["IDNumber3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer2"]);
                                            rSingle.IDRegDate3Officer2 = dr0["IDRegDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer2"]);
                                            rSingle.IDExpireDate3Officer2 = dr0["IDExpireDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer2"]);
                                            rSingle.IDType4Officer2 = dr0["IDType4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer2"]);
                                            rSingle.IDNumber4Officer2 = dr0["IDNumber4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer2"]);
                                            rSingle.IDRegDate4Officer2 = dr0["IDRegDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer2"]);
                                            rSingle.IDExpireDate4Officer2 = dr0["IDExpireDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer2"]);
                                            rSingle.FirstNameOfficer3 = dr0["FirstNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer3"]);
                                            rSingle.MiddleNameOfficer3 = dr0["MiddleNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer3"]);
                                            rSingle.LastNameOfficer3 = dr0["LastNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer3"]);
                                            rSingle.PositionOfficer3 = dr0["PositionOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer3"]);
                                            rSingle.IDType1Officer3 = dr0["IDType1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer3"]);
                                            rSingle.IDNumber1Officer3 = dr0["IDNumber1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer3"]);
                                            rSingle.IDRegDate1Officer3 = dr0["IDRegDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer3"]);
                                            rSingle.IDExpireDate1Officer3 = dr0["IDExpireDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer3"]);
                                            rSingle.IDType2Officer3 = dr0["IDType2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer3"]);
                                            rSingle.IDNumber2Officer3 = dr0["IDNumber2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer3"]);
                                            rSingle.IDRegDate2Officer3 = dr0["IDRegDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer3"]);
                                            rSingle.IDExpireDate2Officer3 = dr0["IDExpireDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer3"]);
                                            rSingle.IDType3Officer3 = dr0["IDType3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer3"]);
                                            rSingle.IDNumber3Officer3 = dr0["IDNumber3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer3"]);
                                            rSingle.IDRegDate3Officer3 = dr0["IDRegDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer3"]);
                                            rSingle.IDExpireDate3Officer3 = dr0["IDExpireDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer3"]);
                                            rSingle.IDType4Officer3 = dr0["IDType4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer3"]);
                                            rSingle.IDNumber4Officer3 = dr0["IDNumber4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer3"]);
                                            rSingle.IDRegDate4Officer3 = dr0["IDRegDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer3"]);
                                            rSingle.IDExpireDate4Officer3 = dr0["IDExpireDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer3"]);
                                            rSingle.FirstNameOfficer4 = dr0["FirstNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer4"]);
                                            rSingle.MiddleNameOfficer4 = dr0["MiddleNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer4"]);
                                            rSingle.LastNameOfficer4 = dr0["LastNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer4"]);
                                            rSingle.PositionOfficer4 = dr0["PositionOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer4"]);
                                            rSingle.IDType1Officer4 = dr0["IDType1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer4"]);
                                            rSingle.IDNumber1Officer4 = dr0["IDNumber1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer4"]);
                                            rSingle.IDRegDate1Officer4 = dr0["IDRegDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer4"]);
                                            rSingle.IDExpireDate1Officer4 = dr0["IDExpireDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer4"]);
                                            rSingle.IDType2Officer4 = dr0["IDType2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer4"]);
                                            rSingle.IDNumber2Officer4 = dr0["IDNumber2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer4"]);
                                            rSingle.IDRegDate2Officer4 = dr0["IDRegDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer4"]);
                                            rSingle.IDExpireDate2Officer4 = dr0["IDExpireDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer4"]);
                                            rSingle.IDType3Officer4 = dr0["IDType3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer4"]);
                                            rSingle.IDNumber3Officer4 = dr0["IDNumber3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer4"]);
                                            rSingle.IDRegDate3Officer4 = dr0["IDRegDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer4"]);
                                            rSingle.IDExpireDate3Officer4 = dr0["IDExpireDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer4"]);
                                            rSingle.IDType4Officer4 = dr0["IDType4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer4"]);
                                            rSingle.IDNumber4Officer4 = dr0["IDNumber4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer4"]);
                                            rSingle.IDRegDate4Officer4 = dr0["IDRegDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer4"]);
                                            rSingle.IDExpireDate4Officer4 = dr0["IDExpireDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer4"]);
                                            rSingle.Description = dr0["Description"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Description"]);
                                            rSingle.CityOfEstablishment = dr0["CityOfEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CityOfEstablishment"]);
                                            rSingle.SellingAgentCode = dr0["SACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SACode"]);
                                            rSingle.CountryofDomicile = dr0["CountryofDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofDomicile"]);
                                            rSingle.KYCRiskProfile = dr0["KYCRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KYCRiskProfile"]);
                                            rSingle.BICCode1 = dr0["BICode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode1"]);
                                            rSingle.BICCode2 = dr0["BICode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode2"]);
                                            rSingle.BICCode3 = dr0["BICode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode3"]);
                                            rSingle.BIMemberCode1 = dr0["BIMemberCode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode1"]);
                                            rSingle.BIMemberCode2 = dr0["BIMemberCode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode2"]);
                                            rSingle.BIMemberCode3 = dr0["BIMemberCode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode3"]);
                                            rSingle.EntryUsersID = dr0["EntryUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryUsersID"]);
                                            rSingle.EntryTime = dr0["EntryTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryTime"]);
                                            rSingle.UpdateUsersID = dr0["UpdateUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateUsersID"]);
                                            rSingle.UpdateTime = dr0["UpdateTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateTime"]);
                                            rSingle.ApprovedUsersID = dr0["ApprovedUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedUsersID"]);
                                            rSingle.ApprovedTime = dr0["ApprovedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedTime"]);
                                            rSingle.VoidUsersID = dr0["VoidUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidUsersID"]);
                                            rSingle.VoidTime = dr0["VoidTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidTime"]);
                                            rSingle.SuspendBy = dr0["SuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendBy"]);
                                            rSingle.SuspendTime = dr0["SuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendTime"]);
                                            rSingle.UnSuspendBy = dr0["UnSuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendBy"]);
                                            rSingle.UnSuspendTime = dr0["UnSuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendTime"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByTitle =
                                            from r in rList
                                            group r by new { r.InvestorType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByTitle)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Investor Type :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InvestorType;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FundClientID";
                                            worksheet.Cells[incRowExcel, 2].Value = "InvestorType";
                                            worksheet.Cells[incRowExcel, 3].Value = "InternalCategory";
                                            worksheet.Cells[incRowExcel, 4].Value = "InternalName";
                                            worksheet.Cells[incRowExcel, 5].Value = "SellingAgent";
                                            worksheet.Cells[incRowExcel, 6].Value = "NPWP";
                                            worksheet.Cells[incRowExcel, 7].Value = "RegistrationNPWP";
                                            worksheet.Cells[incRowExcel, 8].Value = "Email";
                                            worksheet.Cells[incRowExcel, 9].Value = "PhoneNumber";
                                            worksheet.Cells[incRowExcel, 10].Value = "MobilePhone";
                                            worksheet.Cells[incRowExcel, 11].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 12].Value = "SID";
                                            worksheet.Cells[incRowExcel, 13].Value = "IFUACode";
                                            worksheet.Cells[incRowExcel, 14].Value = "InvestorsRiskProfile";
                                            worksheet.Cells[incRowExcel, 15].Value = "KYCRiskProfile";
                                            worksheet.Cells[incRowExcel, 16].Value = "AssetOwner";
                                            worksheet.Cells[incRowExcel, 17].Value = "StatementType";
                                            worksheet.Cells[incRowExcel, 18].Value = "SellingAgentCode";
                                            worksheet.Cells[incRowExcel, 19].Value = "DormantDate";
                                            worksheet.Cells[incRowExcel, 20].Value = "Description";
                                            worksheet.Cells[incRowExcel, 21].Value = "Affiliated";
                                            worksheet.Cells[incRowExcel, 22].Value = "AffiliatedWith";
                                            worksheet.Cells[incRowExcel, 23].Value = "Suspended";
                                            worksheet.Cells[incRowExcel, 24].Value = "BankName1";
                                            worksheet.Cells[incRowExcel, 25].Value = "BankAccountName1";
                                            worksheet.Cells[incRowExcel, 26].Value = "BankAccountNumber1";
                                            worksheet.Cells[incRowExcel, 27].Value = "BankBranchName1";
                                            worksheet.Cells[incRowExcel, 28].Value = "Currency1";
                                            worksheet.Cells[incRowExcel, 29].Value = "BICCode1";
                                            worksheet.Cells[incRowExcel, 30].Value = "BIMemberCode1";
                                            worksheet.Cells[incRowExcel, 31].Value = "BankName2";
                                            worksheet.Cells[incRowExcel, 32].Value = "BankAccountName2";
                                            worksheet.Cells[incRowExcel, 33].Value = "BankAccountNumber2";
                                            worksheet.Cells[incRowExcel, 34].Value = "BankBranchName2";
                                            worksheet.Cells[incRowExcel, 35].Value = "Currency2";
                                            worksheet.Cells[incRowExcel, 36].Value = "BICCode2";
                                            worksheet.Cells[incRowExcel, 37].Value = "BIMemberCode2";
                                            worksheet.Cells[incRowExcel, 38].Value = "BankName3";
                                            worksheet.Cells[incRowExcel, 39].Value = "BankAccountName3";
                                            worksheet.Cells[incRowExcel, 40].Value = "BankAccountNumber3";
                                            worksheet.Cells[incRowExcel, 41].Value = "BankBranchName3";
                                            worksheet.Cells[incRowExcel, 42].Value = "Currency3";
                                            worksheet.Cells[incRowExcel, 43].Value = "BICCode3";
                                            worksheet.Cells[incRowExcel, 44].Value = "BIMemberCode3";
                                            worksheet.Cells[incRowExcel, 45].Value = "BankRDN";
                                            worksheet.Cells[incRowExcel, 46].Value = "RDNAccountName";
                                            worksheet.Cells[incRowExcel, 47].Value = "RDNAccountNumber";
                                            worksheet.Cells[incRowExcel, 48].Value = "CompanyName";
                                            worksheet.Cells[incRowExcel, 49].Value = "CompanyAddress";
                                            worksheet.Cells[incRowExcel, 50].Value = "CompanyZipCode";
                                            worksheet.Cells[incRowExcel, 51].Value = "CompanyCity";
                                            worksheet.Cells[incRowExcel, 52].Value = "CompanyLegalDomicile";
                                            worksheet.Cells[incRowExcel, 53].Value = "CountryOfDomicile";
                                            worksheet.Cells[incRowExcel, 54].Value = "CompanyType";
                                            worksheet.Cells[incRowExcel, 55].Value = "CompanyCharacteristic";
                                            worksheet.Cells[incRowExcel, 56].Value = "CompanyIncomePerAnnum";
                                            worksheet.Cells[incRowExcel, 57].Value = "CompanySourceOfFunds";
                                            worksheet.Cells[incRowExcel, 58].Value = "CompanyInvestmentObjective";
                                            worksheet.Cells[incRowExcel, 59].Value = "SKDNumber";
                                            worksheet.Cells[incRowExcel, 60].Value = "ExpiredDateSKD";
                                            worksheet.Cells[incRowExcel, 61].Value = "ArticleOfAssociation";
                                            worksheet.Cells[incRowExcel, 62].Value = "SIUPNumber";
                                            worksheet.Cells[incRowExcel, 63].Value = "SIUPExpirationDate";
                                            worksheet.Cells[incRowExcel, 64].Value = "FirstNameOfficer1";
                                            worksheet.Cells[incRowExcel, 65].Value = "MiddleNameOfficer1";
                                            worksheet.Cells[incRowExcel, 66].Value = "LastNameOfficer1";
                                            worksheet.Cells[incRowExcel, 67].Value = "PositionOfficer1";
                                            worksheet.Cells[incRowExcel, 68].Value = "PhoneNumberOfficer1";
                                            worksheet.Cells[incRowExcel, 69].Value = "EmailOfficer1";
                                            worksheet.Cells[incRowExcel, 70].Value = "IDType1Officer1";
                                            worksheet.Cells[incRowExcel, 71].Value = "IDNumber1Officer1";
                                            worksheet.Cells[incRowExcel, 72].Value = "IDRegDate1Officer1";
                                            worksheet.Cells[incRowExcel, 73].Value = "IDExpireDate1Officer1";
                                            worksheet.Cells[incRowExcel, 74].Value = "IDType2Officer1";
                                            worksheet.Cells[incRowExcel, 75].Value = "IDNumber2Officer1";
                                            worksheet.Cells[incRowExcel, 76].Value = "IDRegDate2Officer1";
                                            worksheet.Cells[incRowExcel, 77].Value = "IDExpireDate2Officer1";
                                            worksheet.Cells[incRowExcel, 78].Value = "IDType3Officer1";
                                            worksheet.Cells[incRowExcel, 79].Value = "IDNumber3Officer1";
                                            worksheet.Cells[incRowExcel, 80].Value = "IDRegDate3Officer1";
                                            worksheet.Cells[incRowExcel, 81].Value = "IDExpireDate3Officer1";
                                            worksheet.Cells[incRowExcel, 82].Value = "IDType4Officer1";
                                            worksheet.Cells[incRowExcel, 83].Value = "IDNumber4Officer1";
                                            worksheet.Cells[incRowExcel, 84].Value = "IDRegDate4Officer1";
                                            worksheet.Cells[incRowExcel, 85].Value = "IDExpireDate4Officer1";
                                            worksheet.Cells[incRowExcel, 86].Value = "FirstNameOfficer2";
                                            worksheet.Cells[incRowExcel, 87].Value = "MiddleNameOfficer2";
                                            worksheet.Cells[incRowExcel, 88].Value = "LastNameOfficer2";
                                            worksheet.Cells[incRowExcel, 89].Value = "PositionOfficer2";
                                            worksheet.Cells[incRowExcel, 90].Value = "IDType1Officer2";
                                            worksheet.Cells[incRowExcel, 91].Value = "IDNumber1Officer2";
                                            worksheet.Cells[incRowExcel, 92].Value = "IDRegDate1Officer2";
                                            worksheet.Cells[incRowExcel, 93].Value = "IDExpireDate1Officer2";
                                            worksheet.Cells[incRowExcel, 94].Value = "IDType2Officer2";
                                            worksheet.Cells[incRowExcel, 95].Value = "IDNumber2Officer2";
                                            worksheet.Cells[incRowExcel, 96].Value = "IDRegDate2Officer2";
                                            worksheet.Cells[incRowExcel, 97].Value = "IDExpireDate2Officer2";
                                            worksheet.Cells[incRowExcel, 98].Value = "IDType3Officer2";
                                            worksheet.Cells[incRowExcel, 99].Value = "IDNumber3Officer2";
                                            worksheet.Cells[incRowExcel, 100].Value = "IDRegDate3Officer2";
                                            worksheet.Cells[incRowExcel, 101].Value = "IDExpireDate3Officer2";
                                            worksheet.Cells[incRowExcel, 102].Value = "IDType4Officer2";
                                            worksheet.Cells[incRowExcel, 103].Value = "IDNumber4Officer2";
                                            worksheet.Cells[incRowExcel, 104].Value = "IDRegDate4Officer2";
                                            worksheet.Cells[incRowExcel, 105].Value = "IDExpireDate4Officer2";
                                            worksheet.Cells[incRowExcel, 106].Value = "EstablishmentDate";
                                            worksheet.Cells[incRowExcel, 107].Value = "EstablishmentPlace";
                                            worksheet.Cells[incRowExcel, 108].Value = "CountryofEstablishment";
                                            worksheet.Cells[incRowExcel, 109].Value = "CityOfEstablishment";
                                            worksheet.Cells[incRowExcel, 110].Value = "CountryofCompany";
                                            worksheet.Cells[incRowExcel, 111].Value = "CompanyCityName";
                                            worksheet.Cells[incRowExcel, 112].Value = "CompanyAddress";
                                            worksheet.Cells[incRowExcel, 113].Value = "ZIPCode";
                                            worksheet.Cells[incRowExcel, 114].Value = "BusinessPhone";
                                            worksheet.Cells[incRowExcel, 115].Value = "AssetFor1Year";
                                            worksheet.Cells[incRowExcel, 116].Value = "AssetFor2Year";
                                            worksheet.Cells[incRowExcel, 117].Value = "AssetFor3Year";
                                            worksheet.Cells[incRowExcel, 118].Value = "OperatingProfitFor1Year";
                                            worksheet.Cells[incRowExcel, 119].Value = "OperatingProfitFor2Year";
                                            worksheet.Cells[incRowExcel, 120].Value = "OperatingProfitFor3Year";
                                            worksheet.Cells[incRowExcel, 121].Value = "FirstNameOfficer3";
                                            worksheet.Cells[incRowExcel, 122].Value = "MiddleNameOfficer3";
                                            worksheet.Cells[incRowExcel, 123].Value = "LastNameOfficer3";
                                            worksheet.Cells[incRowExcel, 124].Value = "PositionOfficer3";
                                            worksheet.Cells[incRowExcel, 125].Value = "IDType1Officer3";
                                            worksheet.Cells[incRowExcel, 126].Value = "IDNumber1Officer3";
                                            worksheet.Cells[incRowExcel, 127].Value = "IDRegDate1Officer3";
                                            worksheet.Cells[incRowExcel, 128].Value = "IDExpireDate1Officer3";
                                            worksheet.Cells[incRowExcel, 129].Value = "IDType2Officer3";
                                            worksheet.Cells[incRowExcel, 130].Value = "IDNumber2Officer3";
                                            worksheet.Cells[incRowExcel, 131].Value = "IDRegDate2Officer3";
                                            worksheet.Cells[incRowExcel, 132].Value = "IDExpireDate2Officer3";
                                            worksheet.Cells[incRowExcel, 133].Value = "IDType3Officer3";
                                            worksheet.Cells[incRowExcel, 134].Value = "IDNumber3Officer3";
                                            worksheet.Cells[incRowExcel, 135].Value = "IDRegDate3Officer3";
                                            worksheet.Cells[incRowExcel, 136].Value = "IDExpireDate3Officer3";
                                            worksheet.Cells[incRowExcel, 137].Value = "IDType4Officer3";
                                            worksheet.Cells[incRowExcel, 138].Value = "IDNumber4Officer3";
                                            worksheet.Cells[incRowExcel, 139].Value = "IDRegDate4Officer3";
                                            worksheet.Cells[incRowExcel, 140].Value = "IDExpireDate4Officer3";
                                            worksheet.Cells[incRowExcel, 141].Value = "FirstNameOfficer4";
                                            worksheet.Cells[incRowExcel, 142].Value = "MiddleNameOfficer4";
                                            worksheet.Cells[incRowExcel, 143].Value = "LastNameOfficer4";
                                            worksheet.Cells[incRowExcel, 144].Value = "PositionOfficer4";
                                            worksheet.Cells[incRowExcel, 145].Value = "IDType1Officer4";
                                            worksheet.Cells[incRowExcel, 146].Value = "IDNumber1Officer4";
                                            worksheet.Cells[incRowExcel, 147].Value = "IDRegDate1Officer4";
                                            worksheet.Cells[incRowExcel, 148].Value = "IDExpireDate1Officer4";
                                            worksheet.Cells[incRowExcel, 149].Value = "IDType2Officer4";
                                            worksheet.Cells[incRowExcel, 150].Value = "IDNumber2Officer4";
                                            worksheet.Cells[incRowExcel, 151].Value = "IDRegDate2Officer4";
                                            worksheet.Cells[incRowExcel, 152].Value = "IDExpireDate2Officer4";
                                            worksheet.Cells[incRowExcel, 153].Value = "IDType3Officer4";
                                            worksheet.Cells[incRowExcel, 154].Value = "IDNumber3Officer4";
                                            worksheet.Cells[incRowExcel, 155].Value = "IDRegDate3Officer4";
                                            worksheet.Cells[incRowExcel, 156].Value = "IDExpireDate3Officer4";
                                            worksheet.Cells[incRowExcel, 157].Value = "IDType4Officer4";
                                            worksheet.Cells[incRowExcel, 158].Value = "IDNumber4Officer4";
                                            worksheet.Cells[incRowExcel, 159].Value = "IDRegDate4Officer4";
                                            worksheet.Cells[incRowExcel, 160].Value = "IDExpireDate4Officer4";
                                            worksheet.Cells[incRowExcel, 161].Value = "FATCAStatus";
                                            worksheet.Cells[incRowExcel, 162].Value = "TIN";
                                            worksheet.Cells[incRowExcel, 163].Value = "TINIssuanceCountry";
                                            worksheet.Cells[incRowExcel, 164].Value = "GIIN";
                                            worksheet.Cells[incRowExcel, 165].Value = "SubstantialOwnerName";
                                            worksheet.Cells[incRowExcel, 166].Value = "SubstantialOwnerAddress";
                                            worksheet.Cells[incRowExcel, 167].Value = "SubstantialOwnerTIN";
                                            worksheet.Cells[incRowExcel, 168].Value = "EntryUsersID";
                                            worksheet.Cells[incRowExcel, 169].Value = "EntryTime";
                                            worksheet.Cells[incRowExcel, 170].Value = "UpdateUsersID";
                                            worksheet.Cells[incRowExcel, 171].Value = "UpdateTime";
                                            worksheet.Cells[incRowExcel, 172].Value = "ApprovedUsersID";
                                            worksheet.Cells[incRowExcel, 173].Value = "ApprovedTime";
                                            worksheet.Cells[incRowExcel, 174].Value = "VoidUsersID";
                                            worksheet.Cells[incRowExcel, 175].Value = "VoidTime";
                                            worksheet.Cells[incRowExcel, 176].Value = "SuspendBy";
                                            worksheet.Cells[incRowExcel, 177].Value = "SuspendTime";
                                            worksheet.Cells[incRowExcel, 178].Value = "UnSuspendBy";
                                            worksheet.Cells[incRowExcel, 179].Value = "UnSuspendTime";
                                            string _range = "A" + incRowExcel + ":FW" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            }
                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InvestorType;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InternalCategory;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InternalName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SellingAgent;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NPWP;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.RegistrationNPWP;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Email;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PhoneNumber;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.MobilePhone;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Fax;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.IFUACode;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.InvestorsRiskProfile;
                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.KYCRiskProfile;
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.AssetOwner;
                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.StatementType;
                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.SellingAgentCode;
                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.DormantDate;
                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.Affiliated;
                                                worksheet.Cells[incRowExcel, 22].Value = rsDetail.AffiliatedWith;
                                                worksheet.Cells[incRowExcel, 23].Value = rsDetail.Suspended;
                                                worksheet.Cells[incRowExcel, 24].Value = rsDetail.BankName1;
                                                worksheet.Cells[incRowExcel, 25].Value = rsDetail.BankAccountName1;
                                                worksheet.Cells[incRowExcel, 26].Value = rsDetail.BankAccountNumber1;
                                                worksheet.Cells[incRowExcel, 27].Value = rsDetail.BankBranchName1;
                                                worksheet.Cells[incRowExcel, 28].Value = rsDetail.Currency1;
                                                worksheet.Cells[incRowExcel, 29].Value = rsDetail.BICCode1;
                                                worksheet.Cells[incRowExcel, 30].Value = rsDetail.BIMemberCode1;
                                                worksheet.Cells[incRowExcel, 31].Value = rsDetail.BankName2;
                                                worksheet.Cells[incRowExcel, 32].Value = rsDetail.BankAccountName2;
                                                worksheet.Cells[incRowExcel, 33].Value = rsDetail.BankAccountNumber2;
                                                worksheet.Cells[incRowExcel, 34].Value = rsDetail.BankBranchName2;
                                                worksheet.Cells[incRowExcel, 35].Value = rsDetail.Currency2;
                                                worksheet.Cells[incRowExcel, 36].Value = rsDetail.BICCode2;
                                                worksheet.Cells[incRowExcel, 37].Value = rsDetail.BIMemberCode2;
                                                worksheet.Cells[incRowExcel, 38].Value = rsDetail.BankName3;
                                                worksheet.Cells[incRowExcel, 39].Value = rsDetail.BankAccountName3;
                                                worksheet.Cells[incRowExcel, 40].Value = rsDetail.BankAccountNumber3;
                                                worksheet.Cells[incRowExcel, 41].Value = rsDetail.BankBranchName3;
                                                worksheet.Cells[incRowExcel, 42].Value = rsDetail.Currency3;
                                                worksheet.Cells[incRowExcel, 43].Value = rsDetail.BICCode3;
                                                worksheet.Cells[incRowExcel, 44].Value = rsDetail.BIMemberCode3;
                                                worksheet.Cells[incRowExcel, 45].Value = rsDetail.BankRDN;
                                                worksheet.Cells[incRowExcel, 46].Value = rsDetail.RDNAccountName;
                                                worksheet.Cells[incRowExcel, 47].Value = rsDetail.RDNAccountNumber;
                                                worksheet.Cells[incRowExcel, 48].Value = rsDetail.CompanyName;
                                                worksheet.Cells[incRowExcel, 49].Value = rsDetail.CompanyAddress;
                                                worksheet.Cells[incRowExcel, 50].Value = rsDetail.CompanyZipCode;
                                                worksheet.Cells[incRowExcel, 51].Value = rsDetail.CompanyCity;
                                                worksheet.Cells[incRowExcel, 52].Value = rsDetail.CompanyLegalDomicile;
                                                worksheet.Cells[incRowExcel, 53].Value = rsDetail.CountryofDomicile;
                                                worksheet.Cells[incRowExcel, 54].Value = rsDetail.CompanyType;
                                                worksheet.Cells[incRowExcel, 55].Value = rsDetail.CompanyCharacteristic;
                                                worksheet.Cells[incRowExcel, 56].Value = rsDetail.CompanyIncomePerAnnum;
                                                worksheet.Cells[incRowExcel, 57].Value = rsDetail.CompanySourceOfFunds;
                                                worksheet.Cells[incRowExcel, 58].Value = rsDetail.CompanyInvestmentObjective;
                                                worksheet.Cells[incRowExcel, 59].Value = rsDetail.SKDNumber;
                                                worksheet.Cells[incRowExcel, 60].Value = Convert.ToDateTime(rsDetail.ExpiredDateSKD).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 61].Value = rsDetail.ArticleOfAssociation;
                                                worksheet.Cells[incRowExcel, 62].Value = rsDetail.SIUPNumber;
                                                worksheet.Cells[incRowExcel, 63].Value = Convert.ToDateTime(rsDetail.SIUPExpirationDate).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 64].Value = rsDetail.FirstNameOfficer1;
                                                worksheet.Cells[incRowExcel, 65].Value = rsDetail.MiddleNameOfficer1;
                                                worksheet.Cells[incRowExcel, 66].Value = rsDetail.LastNameOfficer1;
                                                worksheet.Cells[incRowExcel, 67].Value = rsDetail.PositionOfficer1;
                                                worksheet.Cells[incRowExcel, 68].Value = rsDetail.PhoneNumberOfficer1;
                                                worksheet.Cells[incRowExcel, 69].Value = rsDetail.EmailOfficer1;
                                                worksheet.Cells[incRowExcel, 70].Value = rsDetail.IDType1Officer1;
                                                worksheet.Cells[incRowExcel, 71].Value = rsDetail.IDNumber1Officer1;
                                                worksheet.Cells[incRowExcel, 72].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 73].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 74].Value = rsDetail.IDType2Officer1;
                                                worksheet.Cells[incRowExcel, 75].Value = rsDetail.IDNumber2Officer1;
                                                worksheet.Cells[incRowExcel, 76].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 77].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 78].Value = rsDetail.IDType3Officer1;
                                                worksheet.Cells[incRowExcel, 79].Value = rsDetail.IDNumber3Officer1;
                                                worksheet.Cells[incRowExcel, 80].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 81].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 82].Value = rsDetail.IDType4Officer1;
                                                worksheet.Cells[incRowExcel, 83].Value = rsDetail.IDNumber4Officer1;
                                                worksheet.Cells[incRowExcel, 84].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 85].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 86].Value = rsDetail.FirstNameOfficer2;
                                                worksheet.Cells[incRowExcel, 87].Value = rsDetail.MiddleNameOfficer2;
                                                worksheet.Cells[incRowExcel, 88].Value = rsDetail.LastNameOfficer2;
                                                worksheet.Cells[incRowExcel, 89].Value = rsDetail.PositionOfficer2;
                                                worksheet.Cells[incRowExcel, 90].Value = rsDetail.IDType1Officer2;
                                                worksheet.Cells[incRowExcel, 91].Value = rsDetail.IDNumber1Officer2;
                                                worksheet.Cells[incRowExcel, 92].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 93].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 94].Value = rsDetail.IDType2Officer2;
                                                worksheet.Cells[incRowExcel, 95].Value = rsDetail.IDNumber2Officer2;
                                                worksheet.Cells[incRowExcel, 96].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 97].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 98].Value = rsDetail.IDType3Officer2;
                                                worksheet.Cells[incRowExcel, 99].Value = rsDetail.IDNumber3Officer2;
                                                worksheet.Cells[incRowExcel, 100].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 101].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 102].Value = rsDetail.IDType4Officer2;
                                                worksheet.Cells[incRowExcel, 103].Value = rsDetail.IDNumber4Officer2;
                                                worksheet.Cells[incRowExcel, 104].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 105].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 106].Value = Convert.ToDateTime(rsDetail.EstablishmentDate).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 107].Value = rsDetail.EstablishmentPlace;
                                                worksheet.Cells[incRowExcel, 108].Value = rsDetail.CountryofEstablishment;
                                                worksheet.Cells[incRowExcel, 109].Value = rsDetail.CityOfEstablishment;
                                                worksheet.Cells[incRowExcel, 110].Value = rsDetail.CountryofCompany;
                                                worksheet.Cells[incRowExcel, 111].Value = rsDetail.CompanyCityName;
                                                worksheet.Cells[incRowExcel, 112].Value = rsDetail.CompanyAddress;
                                                worksheet.Cells[incRowExcel, 113].Value = rsDetail.CompanyZipCode;
                                                worksheet.Cells[incRowExcel, 114].Value = rsDetail.BusinessPhone;
                                                worksheet.Cells[incRowExcel, 115].Value = rsDetail.AssetFor1Year;
                                                worksheet.Cells[incRowExcel, 116].Value = rsDetail.AssetFor2Year;
                                                worksheet.Cells[incRowExcel, 117].Value = rsDetail.AssetFor3Year;
                                                worksheet.Cells[incRowExcel, 118].Value = rsDetail.OperatingProfitFor1Year;
                                                worksheet.Cells[incRowExcel, 119].Value = rsDetail.OperatingProfitFor2Year;
                                                worksheet.Cells[incRowExcel, 120].Value = rsDetail.OperatingProfitFor3Year;
                                                worksheet.Cells[incRowExcel, 121].Value = rsDetail.FirstNameOfficer3;
                                                worksheet.Cells[incRowExcel, 122].Value = rsDetail.MiddleNameOfficer3;
                                                worksheet.Cells[incRowExcel, 123].Value = rsDetail.LastNameOfficer3;
                                                worksheet.Cells[incRowExcel, 124].Value = rsDetail.PositionOfficer3;
                                                worksheet.Cells[incRowExcel, 125].Value = rsDetail.IDType1Officer3;
                                                worksheet.Cells[incRowExcel, 126].Value = rsDetail.IDNumber1Officer3;
                                                worksheet.Cells[incRowExcel, 127].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 128].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 129].Value = rsDetail.IDType2Officer3;
                                                worksheet.Cells[incRowExcel, 130].Value = rsDetail.IDNumber2Officer3;
                                                worksheet.Cells[incRowExcel, 131].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 132].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 133].Value = rsDetail.IDType3Officer3;
                                                worksheet.Cells[incRowExcel, 134].Value = rsDetail.IDNumber3Officer3;
                                                worksheet.Cells[incRowExcel, 135].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 136].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 137].Value = rsDetail.IDType4Officer3;
                                                worksheet.Cells[incRowExcel, 138].Value = rsDetail.IDNumber4Officer3;
                                                worksheet.Cells[incRowExcel, 139].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 140].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 141].Value = rsDetail.FirstNameOfficer4;
                                                worksheet.Cells[incRowExcel, 142].Value = rsDetail.MiddleNameOfficer4;
                                                worksheet.Cells[incRowExcel, 143].Value = rsDetail.LastNameOfficer4;
                                                worksheet.Cells[incRowExcel, 144].Value = rsDetail.PositionOfficer4;
                                                worksheet.Cells[incRowExcel, 145].Value = rsDetail.IDType1Officer4;
                                                worksheet.Cells[incRowExcel, 146].Value = rsDetail.IDNumber1Officer4;
                                                worksheet.Cells[incRowExcel, 147].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 148].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 149].Value = rsDetail.IDType2Officer4;
                                                worksheet.Cells[incRowExcel, 150].Value = rsDetail.IDNumber2Officer4;
                                                worksheet.Cells[incRowExcel, 151].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 152].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 153].Value = rsDetail.IDType3Officer4;
                                                worksheet.Cells[incRowExcel, 154].Value = rsDetail.IDNumber3Officer4;
                                                worksheet.Cells[incRowExcel, 155].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 156].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 157].Value = rsDetail.IDType4Officer4;
                                                worksheet.Cells[incRowExcel, 158].Value = rsDetail.IDNumber4Officer4;
                                                worksheet.Cells[incRowExcel, 159].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 160].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 161].Value = rsDetail.FATCAStatus;
                                                worksheet.Cells[incRowExcel, 162].Value = rsDetail.TIN;
                                                worksheet.Cells[incRowExcel, 163].Value = rsDetail.TINIssuanceCountry;
                                                worksheet.Cells[incRowExcel, 164].Value = rsDetail.GIIN;
                                                worksheet.Cells[incRowExcel, 165].Value = rsDetail.SubstantialOwnerName;
                                                worksheet.Cells[incRowExcel, 166].Value = rsDetail.SubstantialOwnerAddress;
                                                worksheet.Cells[incRowExcel, 167].Value = rsDetail.SubstantialOwnerTIN;
                                                worksheet.Cells[incRowExcel, 168].Value = rsDetail.EntryUsersID;
                                                worksheet.Cells[incRowExcel, 169].Value = rsDetail.EntryTime;
                                                worksheet.Cells[incRowExcel, 170].Value = rsDetail.UpdateUsersID;
                                                worksheet.Cells[incRowExcel, 171].Value = rsDetail.UpdateTime;
                                                worksheet.Cells[incRowExcel, 172].Value = rsDetail.ApprovedUsersID;
                                                worksheet.Cells[incRowExcel, 173].Value = rsDetail.ApprovedTime;
                                                worksheet.Cells[incRowExcel, 174].Value = rsDetail.VoidUsersID;
                                                worksheet.Cells[incRowExcel, 175].Value = rsDetail.VoidTime;
                                                worksheet.Cells[incRowExcel, 176].Value = rsDetail.SuspendBy;
                                                worksheet.Cells[incRowExcel, 177].Value = rsDetail.SuspendTime;
                                                worksheet.Cells[incRowExcel, 178].Value = rsDetail.UnSuspendBy;
                                                worksheet.Cells[incRowExcel, 179].Value = rsDetail.UnSuspendTime;

                                                _endRowDetail = incRowExcel;
                                                worksheet.Cells["A" + incRowExcel + ":FW" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":FW" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                            }

                                            //_endRowDetail = incRowExcel;
                                            //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                    else if (_fundClientRpt.InvestorType == 3)
                    {
                        string _paramDateFrom = "";
                        if (_fundClientRpt.ParamDate == "9")
                        {
                            _paramDateFrom = " and FC.DatePengkinianData <> '01/01/1900' and FC.DatePengkinianData is not null and FC.DatePengkinianData Between  '" + _fundClientRpt.DateFrom + "'  " + " and '" + _fundClientRpt.DateTo + "'";
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = @"
                                select FC.ID FundClientID,mv8.DescOne InvestorType,isnull(IC.Name,'') InternalCategory,  FC.NAME InternalName,A.Name SellingAgent,FC.SID,FC.IFUACode,
                                mv33.DescOne InvestorsRiskProfile, FC.DormantDate, case when FC.BitIsAfiliated=0 then 'No' else 'Yes' end Affiliated, Z.NAME AffiliatedWith,
                                case when FC.BitIsSuspend=0 then 'No' else 'Yes' end Suspended,mv69.DescOne KYCRiskProfile,
                                FC.NPWP,FC.RegistrationNPWP,FC.CompanyMail Email,FC.TeleponBisnis PhoneNumber,FC.TeleponSelular MobilePhone,FC.Companyfax Fax,
                                mv24.DescOne Country,mv25.DescOne Nationality,fc.SACode,mv43.DescOne CountryofDomicile,mv3.DescOne CityOfEstablishment,fc.TeleponBisnis BusinessPhone, 
                                BC4.ID BankRDN,Fc.RDNAccountNo RDNAccountName, FC.RDNAccountName RDNAccountNumber,
                                BC1.ID BankName1,Fc.NamaNasabah1 BankAccountName1, FC.NomorRekening1 BankAccountNumber1, FC.BankBranchName1, Y.ID Currency1, BC1.Name BICode1,BC1.Name BIMemberCode1,
                                BC1.ID BankName2,Fc.NamaNasabah2 BankAccountName2, FC.NomorRekening2 BankAccountNumber2, FC.BankBranchName2, W.ID Currency2, BC2.Name BICode2,BC2.Name BIMemberCode2, 
                                BC1.ID BankName3,Fc.NamaNasabah3 BankAccountName3, FC.NomorRekening3 BankAccountNumber3, FC.BankBranchName3, V.ID Currency3, BC3.Name BICode3,BC3.Name BIMemberCode3,  
                                mv34.DescOne AssetOwner,mv35.DescOne StatementType,mv36.DescOne FATCAStatus,FC.TIN,mv37.DescOne TINIssuanceCountry, FC.GIIN, FC.SubstantialOwnerName,  
                                FC.SubstantialOwnerAddress, FC.SubstantialOwnerTIN,Fc.NamaPerusahaan CompanyName, FC.AlamatPerusahaan CompanyAddress, FC.KodePosIns CompanyZipCode, mv3.DescOne CompanyCity, mv17.DescOne CompanyLegalDomicile, 
                                FC.TanggalBerdiri EstablishmentDate,FC.LokasiBerdiri EstablishmentPlace, mv44.DescOne CountryofEstablishment, FC.NoSKD SKDNumber,  FC.ExpiredDateSKD,
                                FC.NomorAnggaran ArticleOfAssociation, FC.NomorSIUP SIUPNumber,FC.SIUPExpirationDate ,FC.AssetFor1Year, FC.AssetFor2Year, FC.AssetFor3Year,
                                FC.OperatingProfitFor1Year,FC.OperatingProfitFor2Year,FC.OperatingProfitFor3Year,
                                mv18.DescOne CompanyType, mv19.DescOne CompanyCharacteristic,mv20.DescOne CompanyIncomePerAnnum,  
                                mv21.DescOne CompanySourceOfFunds,mv22.DescOne CompanyInvestmentObjective,   
                                mv45.DescOne CountryofCompany, mv46.DescOne CompanyCityName, mv26.DescOne Province, 
                                FC.NamaDepanIns1 FirstNameOfficer1,FC.NamaTengahIns1 MiddleNameOfficer1,FC.NamaBelakangIns1 LastNameOfficer1,FC.Jabatan1 PositionOfficer1,FC.PhoneIns1 PhoneNumberOfficer1, FC.EmailIns1 EmailOfficer1,
                                FC.IdentitasIns11 IDType1Officer1, FC.NoIdentitasIns11 IDNumber1Officer1, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer1, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer1,
                                FC.IdentitasIns12 IDType2Officer1, FC.NoIdentitasIns12 IDNumber2Officer1, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer1, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer1,
                                FC.IdentitasIns13 IDType3Officer1, FC.NoIdentitasIns13 IDNumber3Officer1, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer1, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer1,
                                FC.IdentitasIns14 IDType4Officer1, FC.NoIdentitasIns14 IDNumber4Officer1, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer1, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer1,
                                FC.NamaDepanIns2 FirstNameOfficer2,FC.NamaTengahIns2 MiddleNameOfficer2,FC.NamaBelakangIns2 LastNameOfficer2,FC.Jabatan2 PositionOfficer2,
                                FC.IdentitasIns11 IDType1Officer2, FC.NoIdentitasIns11 IDNumber1Officer2, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer2, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer2,
                                FC.IdentitasIns12 IDType2Officer2, FC.NoIdentitasIns12 IDNumber2Officer2, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer2, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer2,
                                FC.IdentitasIns13 IDType3Officer2, FC.NoIdentitasIns13 IDNumber3Officer2, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer2, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer2,
                                FC.IdentitasIns14 IDType4Officer2, FC.NoIdentitasIns14 IDNumber4Officer2, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer2, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer2,
                                FC.NamaDepanIns3 FirstNameOfficer3,FC.NamaTengahIns3 MiddleNameOfficer3,FC.NamaBelakangIns3 LastNameOfficer3,FC.Jabatan3 PositionOfficer3,
                                FC.IdentitasIns11 IDType1Officer3, FC.NoIdentitasIns11 IDNumber1Officer3, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer3, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer3,
                                FC.IdentitasIns12 IDType2Officer3, FC.NoIdentitasIns12 IDNumber2Officer3, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer3, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer3,
                                FC.IdentitasIns13 IDType3Officer3, FC.NoIdentitasIns13 IDNumber3Officer3, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer3, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer3,
                                FC.IdentitasIns14 IDType4Officer3, FC.NoIdentitasIns14 IDNumber4Officer3, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer3, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer3,
                                FC.NamaDepanIns4 FirstNameOfficer4,FC.NamaTengahIns4 MiddleNameOfficer4,FC.NamaBelakangIns4 LastNameOfficer4,FC.Jabatan4 PositionOfficer4,
                                FC.IdentitasIns11 IDType1Officer4, FC.NoIdentitasIns11 IDNumber1Officer4, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer4, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer4,
                                FC.IdentitasIns12 IDType2Officer4, FC.NoIdentitasIns12 IDNumber2Officer4, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer4, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer4,
                                FC.IdentitasIns13 IDType3Officer4, FC.NoIdentitasIns13 IDNumber3Officer4, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer4, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer4,
                                FC.IdentitasIns14 IDType4Officer4, FC.NoIdentitasIns14 IDNumber4Officer4, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer4, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer4,

								--individu
								FC.NamaDepanInd FirstNameInd,FC.NamaTengahInd MiddleNameInd,FC.NamaBelakangInd LastNameInd, FC.TempatLahir BirthPlace,FC.TanggalLahir TanggalLahir,FC.AhliWaris Heir, FC.HubunganAhliWaris HeirRelation,FC.NatureOfBusinessLainnya NatureOfBusinessDesc,
								FC.PolitisLainnya PoliticallyExposedDesc,FC.OtherTeleponRumah OtherHomePhone, FC.OtherTeleponSelular OtherCellPhone, FC.OtherFax, FC.OtherEmail,FC.AlamatInd1 CorrespondenceAddress,FC.AlamatInd2 DomicileAddress,
								FC.KodePosInd2 DomicileZipCode,FC.OtherAlamatInd1 IdentityAddress1,FC.OtherKodePosInd1 IdentityZipCode1,FC.OtherAlamatInd2 IdentityAddress2,FC.OtherKodePosInd2 IdentityZipCode2,FC.OtherAlamatInd3 IdentityAddress3,
								FC.OtherKodePosInd3 IdentityZipCode3,FC.NoIdentitasInd1 IdentityNumber1, FC.RegistrationDateIdentitasInd1, FC.ExpiredDateIdentitasInd1, FC.NoIdentitasInd2 IdentityNumber2, FC.RegistrationDateIdentitasInd2, FC.ExpiredDateIdentitasInd2, 
								FC.NoIdentitasInd3 IdentityNumber3, FC.RegistrationDateIdentitasInd3, FC.ExpiredDateIdentitasInd3, fc.CorrespondenceRT, fc.CorrespondenceRW,FC.Description, Fc.AlamatKantorInd,fc.DomicileRT, fc.DomicileRW, fc.Identity1RT, fc.Identity1RW,FC.MotherMaidenName MotherMaidenName,
								FC.SpouseName , fc.KodeDomisiliPropinsi, fc.KodePosKantorInd, FC.KodePosInd1 CorrespondenceZipCode,
								mv1.DescOne CorrespondenceCity,mv4.DescOne IdentityCity1, mv9.DescOne GenderSex, mv10.DescOne MaritalStatus, mv11.DescOne Occupation, mv12.DescOne Education, mv13.DescOne Religion, mv14.DescOne IncomePerAnnum, mv15.DescOne SourceOfFunds,
								mv16.DescOne InvestmentObjectives, mv68.DescOne SpouseOccupation, mv47.DescOne NatureOfBusiness, mv48.DescOne PoliticallyExposed, mv42.DescOne CountryofCorrespondence, mv1.DescOne DomicileCity, 
								mv73.DescOne CountryofDomicile, mv26.DescOne Propinsi, mv27.DescOne IdentityProvince1, mv30.DescOne IdentityCountry1, mv2.DescOne IdentityCity2, mv28.DescOne IdentityProvince2, mv31.DescOne IdentityCountry2, mv6.DescOne IdentityCity3,
								mv29.DescOne IdentityProvince3, mv32.DescOne IdentityCountry3,mv41.DescOne CountryOfBirth, mv49.DescOne IdentityType1, mv50.DescOne IdentityType2, mv51.DescOne IdentityType3, mv72.DescOne KodeKotaKantorInd, mv74.DescOne KodePropinsiKantorInd,
								mv71.DescOne KodeCountryofKantor, mv70.DescOne KodeDomisiliPropinsi,

                                FC.Description, FC.EntryUsersID, FC.EntryTime, FC.UpdateUsersID, FC.UpdateTime, FC.ApprovedUsersID, FC.ApprovedTime, FC.VoidUsersID, FC.VoidTime,
                                FC.SuspendBy, FC.SuspendTime, FC.UnSuspendBy, FC.UnSuspendTime
                                from FundClient fc   
                                left join Agent A on fc.SellingAgentPK = A.AgentPK and A.status = 2  
                                left join MasterValue mv1 on fc.KodeKotaInd1 = mv1.Code and mv1.ID = 'CityRHB' and mv1.status = 2  
                                left join MasterValue mv2 on fc.KodeKotaInd2 = mv2.Code and  mv2.ID = 'CityRHB' and mv2.status = 2  
                                left join MasterValue mv3 on fc.KodeKotaIns = mv3.Code and  mv3.ID = 'CityRHB' and mv3.status = 2  
                                left join MasterValue mv7 on fc.ClientCategory = mv7.code  and  mv7.ID = 'ClientCategory' and mv7.status = 2  
                                left join MasterValue mv8 on fc.InvestorType = mv8.code and  mv8.ID = 'InvestorType' and mv8.status = 2  
                                left join MasterValue mv17 on fc.Domisili = mv17.code and  mv17.ID = 'Domicile' and mv17.status = 2  
                                left join MasterValue mv18 on fc.Tipe = mv18.code and  mv18.ID = 'CompanyType' and mv18.status = 2  
                                left join MasterValue mv19 on fc.Karakteristik = mv19.code and  mv19.ID = 'CompanyCharacteristic' and mv19.status = 2  
                                left join MasterValue mv20 on fc.PenghasilanInstitusi = mv20.code and  mv20.ID = 'IncomeINS' and mv20.status = 2  
                                left join MasterValue mv21 on fc.SumberDanaInstitusi = mv21.code and  mv21.ID = 'IncomeSourceIND' and mv21.status = 2  
                                left join MasterValue mv22 on fc.MaksudTujuanInstitusi = mv22.code and  mv22.ID = 'InvestmentObjectivesINS' and mv22.status = 2  
                                left join MasterValue mv24 on fc.Negara = mv24.code and  mv24.ID = 'SDICountry' and mv24.status = 2  
                                left join MasterValue mv25 on fc.Nationality = mv25.code and  mv25.ID = 'Nationality' and mv25.status = 2  
                                left join MasterValue mv26 on fc.Propinsi = mv26.code and  mv26.ID = 'SDIProvince' and mv26.status = 2  
                                left join InternalCategory IC on fc.InternalCategoryPK = IC.InternalCategoryPK and IC.status = 2  
                                left join MasterValue mv33 on fc.InvestorsRiskProfile = mv33.code and  mv33.ID = 'InvestorsRiskProfile' and mv33.status = 2  
                                left join MasterValue mv34 on fc.AssetOwner = mv34.code and  mv34.ID = 'AssetOwner' and mv34.status = 2  
                                left join MasterValue mv35 on fc.StatementType = mv35.code and  mv35.ID = 'StatementType' and mv35.status = 2  
                                left join MasterValue mv36 on fc.fatca = mv36.code and  mv36.ID = 'FATCAInsti' and mv36.status = 2  
                                left join MasterValue mv37 on fc.TINIssuanceCountry = mv37.code and  mv37.ID = 'SDICountry' and mv37.status = 2  
                                left join MasterValue mv41 on fc.CountryOfBirth = mv41.code and  mv41.ID = 'SDICountry' and mv41.status = 2  
                                left join MasterValue mv42 on fc.CountryofCorrespondence = mv42.code and  mv42.ID = 'SDICountry' and mv42.status = 2  
                                left join MasterValue mv43 on fc.Negara = mv43.code and  mv43.ID = 'SDICountry' and mv43.status = 2  
                                left join MasterValue mv44 on fc.CountryofEstablishment = mv44.code and  mv44.ID = 'SDICountry' and mv44.status = 2  
                                left join MasterValue mv45 on fc.CountryofCompany = mv45.code and  mv45.ID = 'SDICountry' and mv45.status = 2  
                                left join MasterValue mv46 on fc.CompanyCityName = mv46.Code and mv46.ID = 'CityRHB' and mv46.status = 2  
                                left join MasterValue mv52 on fc.IdentitasIns11 = mv52.Code and mv52.ID = 'Identity' and mv52.status = 2
                                left join MasterValue mv53 on fc.IdentitasIns12 = mv53.Code and mv53.ID = 'Identity' and mv53.status = 2
                                left join MasterValue mv54 on fc.IdentitasIns13 = mv54.Code and mv54.ID = 'Identity' and mv54.status = 2
                                left join MasterValue mv55 on fc.IdentitasIns14 = mv55.Code and mv55.ID = 'Identity' and mv55.status = 2
                                left join MasterValue mv56 on fc.IdentitasIns21 = mv56.Code and mv56.ID = 'Identity' and mv56.status = 2
                                left join MasterValue mv57 on fc.IdentitasIns22 = mv57.Code and mv57.ID = 'Identity' and mv57.status = 2
                                left join MasterValue mv58 on fc.IdentitasIns23 = mv58.Code and mv58.ID = 'Identity' and mv58.status = 2
                                left join MasterValue mv59 on fc.IdentitasIns24 = mv59.Code and mv59.ID = 'Identity' and mv59.status = 2
                                left join MasterValue mv60 on fc.IdentitasIns31 = mv60.Code and mv60.ID = 'Identity' and mv60.status = 2
                                left join MasterValue mv61 on fc.IdentitasIns32 = mv61.Code and mv61.ID = 'Identity' and mv61.status = 2
                                left join MasterValue mv62 on fc.IdentitasIns33 = mv62.Code and mv62.ID = 'Identity' and mv62.status = 2
                                left join MasterValue mv63 on fc.IdentitasIns34 = mv63.Code and mv63.ID = 'Identity' and mv63.status = 2
                                left join MasterValue mv64 on fc.IdentitasIns41 = mv64.Code and mv64.ID = 'Identity' and mv64.status = 2
                                left join MasterValue mv65 on fc.IdentitasIns42 = mv65.Code and mv65.ID = 'Identity' and mv65.status = 2
                                left join MasterValue mv66 on fc.IdentitasIns43 = mv66.Code and mv66.ID = 'Identity' and mv66.status = 2
                                left join MasterValue mv67 on fc.IdentitasIns44 = mv67.Code and mv67.ID = 'Identity' and mv67.status = 2
                                left join MasterValue mv69 on fc.KYCRiskProfile = mv69.code and  mv69.ID = 'KYCRiskProfile' and mv69.status = 2

								--individu 
                                left join MasterValue mv4 on fc.OtherKodeKotaInd1 = mv4.Code and mv4.ID = 'CityRHB' and mv4.status = 2  
                                left join MasterValue mv5 on fc.OtherKodeKotaInd2 = mv5.Code and mv5.ID = 'CityRHB' and mv5.status = 2  
                                left join MasterValue mv6 on fc.OtherKodeKotaInd3 = mv6.Code and mv6.ID = 'CityRHB' and mv6.status = 2 
                                left join MasterValue mv9 on fc.JenisKelamin = mv9.code and  mv9.ID = 'Sex' and mv9.status = 2  
                                left join MasterValue mv10 on fc.StatusPerkawinan = mv10.code and  mv10.ID = 'MaritalStatus' and mv10.status = 2  
                                left join MasterValue mv11 on fc.Pekerjaan = mv11.code and  mv11.ID = 'Occupation' and mv11.status = 2  
                                left join MasterValue mv12 on fc.Pendidikan = mv12.code and  mv12.ID = 'EducationalBackground' and mv12.status = 2  
                                left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2  
                                left join MasterValue mv14 on fc.PenghasilanInd = mv14.code and  mv14.ID = 'IncomeIND' and mv14.status = 2  
                                left join MasterValue mv15 on fc.SumberDanaInd = mv15.code and  mv15.ID = 'IncomeSourceIND' and mv15.status = 2  
                                left join MasterValue mv16 on fc.MaksudTujuanInd = mv16.code and  mv16.ID = 'InvestmentObjectivesIND' and mv16.status = 2   
                                left join MasterValue mv27 on fc.OtherPropinsiInd1 = mv27.code and  mv27.ID = 'SDIProvince' and mv27.status = 2  
                                left join MasterValue mv28 on fc.OtherPropinsiInd2 = mv28.code and  mv28.ID = 'SDIProvince' and mv28.status = 2  
                                left join MasterValue mv29 on fc.OtherPropinsiInd3 = mv29.code and  mv29.ID = 'SDIProvince' and mv29.status = 2 
                                left join MasterValue mv30 on fc.OtherNegaraInd1 = mv30.code and  mv30.ID = 'SDICountry' and mv30.status = 2  
                                left join MasterValue mv31 on fc.OtherNegaraInd2 = mv31.code and  mv31.ID = 'SDICountry' and mv31.status = 2  
                                left join MasterValue mv32 on fc.OtherNegaraInd3 = mv32.code and  mv32.ID = 'SDICountry' and mv32.status = 2  
                                left join MasterValue mv47 on fc.NatureOfBusiness = mv47.Code and mv47.ID = 'HRBusiness' and mv47.status = 2  
                                left join MasterValue mv48 on fc.Politis = mv48.Code and mv48.ID = 'PoliticallyExposed' and mv48.status = 2
                                left join MasterValue mv49 on fc.IdentitasInd1 = mv49.Code and mv49.ID = 'Identity' and mv49.status = 2
                                left join MasterValue mv50 on fc.IdentitasInd2 = mv50.Code and mv50.ID = 'Identity' and mv50.status = 2
                                left join MasterValue mv51 on fc.IdentitasInd3 = mv51.Code and mv51.ID = 'Identity' and mv51.status = 2
                                left join MasterValue mv68 on fc.SpouseOccupation = mv68.code and  mv68.ID = 'Occupation' and mv68.status = 2
								left join MasterValue mv70 on fc.KodeDomisiliPropinsi = mv70.code and  mv70.ID = 'SDIProvince' and mv70.status = 2
								left join MasterValue mv71 on fc.KodeCountryofKantor = mv71.code and  mv71.ID = 'SDICountry' and mv71.status = 2 
								left join MasterValue mv72 on fc.KodeKotaKantorInd = mv72.code and  mv72.ID = 'CityRHB' and mv72.status = 2 
								left join MasterValue mv73 on fc.CountryofDomicile = mv73.code and  mv73.ID = 'SDICountry' and mv73.status = 2
								left join MasterValue mv74 on fc.KodePropinsiKantorInd = mv74.code and  mv74.ID = 'SDIProvince' and mv74.status = 2


                                left join fundclient Z on FC.AfiliatedFromPK = Z.FundclientPK and  Z.status = 2
                                left join Currency Y on FC.MataUang1 =  Y.CurrencyPK and Y.status = 2
                                left join Currency W on FC.MataUang2 =  W.CurrencyPK and W.status = 2
                                left join Currency V on FC.MataUang3 =  V.CurrencyPK and V.status = 2
                                left join Bank BC1 on fc.NamaBank1 = BC1.BankPK and BC1.status = 2   
                                left join Bank BC2 on fc.NamaBank2 = BC2.BankPK and BC2.status = 2   
                                left join Bank BC3 on fc.NamaBank3 = BC3.BankPK and BC3.status = 2   
                                left join Bank BC4 on fc.BankRDNPK = BC4.BankPK and BC4.status = 2
                                where  FC.InvestorType in (1,2)  " + _paramDateFrom + @"  order by FC.InvestorType";
                            cmd.CommandTimeout = 0;
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundClientAll" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundClientAll";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientAll");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                        while (dr0.Read())
                                        {
                                            FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();

                                            rSingle.FundClientID = dr0["FundClientID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientID"]);
                                            rSingle.InvestorType = dr0["InvestorType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorType"]);
                                            rSingle.InternalCategory = dr0["InternalCategory"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalCategory"]);
                                            rSingle.InternalName = dr0["InternalName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalName"]);
                                            rSingle.SellingAgent = dr0["SellingAgent"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SellingAgent"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.IFUACode = dr0["IFUACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IFUACode"]);
                                            rSingle.InvestorsRiskProfile = dr0["InvestorsRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorsRiskProfile"]);
                                            rSingle.DormantDate = dr0["DormantDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DormantDate"]);
                                            rSingle.Affiliated = dr0["Affiliated"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Affiliated"]);
                                            rSingle.AffiliatedWith = dr0["AffiliatedWith"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AffiliatedWith"]);
                                            rSingle.Suspended = dr0["Suspended"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Suspended"]);
                                            rSingle.NPWP = dr0["NPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NPWP"]);
                                            rSingle.RegistrationNPWP = dr0["RegistrationNPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationNPWP"]);
                                            rSingle.Email = dr0["Email"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Email"]);
                                            rSingle.PhoneNumber = dr0["PhoneNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumber"]);
                                            rSingle.MobilePhone = dr0["MobilePhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MobilePhone"]);
                                            rSingle.BusinessPhone = dr0["BusinessPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinessPhone"]);
                                            rSingle.Fax = dr0["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax"]);
                                            rSingle.Country = dr0["Country"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Country"]);
                                            rSingle.Nationality = dr0["Nationality"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Nationality"]);
                                            rSingle.BankRDN = dr0["BankRDN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankRDN"]);
                                            rSingle.RDNAccountName = dr0["RDNAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountName"]);
                                            rSingle.RDNAccountNumber = dr0["RDNAccountNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountNumber"]);
                                            rSingle.BankName1 = dr0["BankName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName1"]);
                                            rSingle.BankAccountName1 = dr0["BankAccountName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName1"]);
                                            rSingle.BankAccountNumber1 = dr0["BankAccountNumber1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber1"]);
                                            rSingle.BankBranchName1 = dr0["BankBranchName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName1"]);
                                            rSingle.Currency1 = dr0["Currency1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency1"]);
                                            rSingle.BankName2 = dr0["BankName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName2"]);
                                            rSingle.BankAccountName2 = dr0["BankAccountName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName2"]);
                                            rSingle.BankAccountNumber2 = dr0["BankAccountNumber2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber2"]);
                                            rSingle.BankBranchName2 = dr0["BankBranchName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName2"]);
                                            rSingle.Currency2 = dr0["Currency2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency2"]);
                                            rSingle.BankName3 = dr0["BankName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName3"]);
                                            rSingle.BankAccountName3 = dr0["BankAccountName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName3"]);
                                            rSingle.BankAccountNumber3 = dr0["BankAccountNumber3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber3"]);
                                            rSingle.BankBranchName3 = dr0["BankBranchName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName3"]);
                                            rSingle.Currency3 = dr0["Currency3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency3"]);
                                            rSingle.AssetOwner = dr0["AssetOwner"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetOwner"]);
                                            rSingle.StatementType = dr0["StatementType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["StatementType"]);
                                            rSingle.FATCAStatus = dr0["FATCAStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FATCAStatus"]);
                                            rSingle.TIN = dr0["TIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TIN"]);
                                            rSingle.TINIssuanceCountry = dr0["TINIssuanceCountry"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TINIssuanceCountry"]);
                                            rSingle.GIIN = dr0["GIIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GIIN"]);
                                            rSingle.SubstantialOwnerName = dr0["SubstantialOwnerName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerName"]);
                                            rSingle.SubstantialOwnerAddress = dr0["SubstantialOwnerAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerAddress"]);
                                            rSingle.SubstantialOwnerTIN = dr0["SubstantialOwnerTIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerTIN"]);
                                            rSingle.CompanyName = dr0["CompanyName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyName"]);
                                            rSingle.CompanyAddress = dr0["CompanyAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyAddress"]);
                                            rSingle.CompanyZipCode = dr0["CompanyZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyZipCode"]);
                                            rSingle.CompanyCity = dr0["CompanyCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCity"]);
                                            rSingle.CompanyLegalDomicile = dr0["CompanyLegalDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyLegalDomicile"]);
                                            rSingle.EstablishmentDate = dr0["EstablishmentDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentDate"]);
                                            rSingle.EstablishmentPlace = dr0["EstablishmentPlace"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentPlace"]);
                                            rSingle.CountryofEstablishment = dr0["CountryofEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofEstablishment"]);
                                            rSingle.SKDNumber = dr0["SKDNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SKDNumber"]);
                                            rSingle.ExpiredDateSKD = dr0["ExpiredDateSKD"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateSKD"]);
                                            rSingle.ArticleOfAssociation = dr0["ArticleOfAssociation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ArticleOfAssociation"]);
                                            rSingle.SIUPNumber = dr0["SIUPNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPNumber"]);
                                            rSingle.SIUPExpirationDate = dr0["SIUPExpirationDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPExpirationDate"]);
                                            rSingle.AssetFor1Year = dr0["AssetFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor1Year"]);
                                            rSingle.AssetFor2Year = dr0["AssetFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor2Year"]);
                                            rSingle.AssetFor3Year = dr0["AssetFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor3Year"]);
                                            rSingle.OperatingProfitFor1Year = dr0["OperatingProfitFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor1Year"]);
                                            rSingle.OperatingProfitFor2Year = dr0["OperatingProfitFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor2Year"]);
                                            rSingle.OperatingProfitFor3Year = dr0["OperatingProfitFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor3Year"]);
                                            rSingle.CompanyType = dr0["CompanyType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyType"]);
                                            rSingle.CompanyCharacteristic = dr0["CompanyCharacteristic"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCharacteristic"]);
                                            rSingle.CompanyIncomePerAnnum = dr0["CompanyIncomePerAnnum"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyIncomePerAnnum"]);
                                            rSingle.CompanySourceOfFunds = dr0["CompanySourceOfFunds"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanySourceOfFunds"]);
                                            rSingle.CompanyInvestmentObjective = dr0["CompanyInvestmentObjective"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyInvestmentObjective"]);
                                            rSingle.CountryofCompany = dr0["CountryofCompany"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofCompany"]);
                                            rSingle.CompanyCityName = dr0["CompanyCityName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCityName"]);
                                            rSingle.Province = dr0["Province"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Province"]);
                                            rSingle.FirstNameOfficer1 = dr0["FirstNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer1"]);
                                            rSingle.MiddleNameOfficer1 = dr0["MiddleNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer1"]);
                                            rSingle.LastNameOfficer1 = dr0["LastNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer1"]);
                                            rSingle.PositionOfficer1 = dr0["PositionOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer1"]);
                                            rSingle.PhoneNumberOfficer1 = dr0["PhoneNumberOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumberOfficer1"]);
                                            rSingle.EmailOfficer1 = dr0["EmailOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EmailOfficer1"]);
                                            rSingle.IDType1Officer1 = dr0["IDType1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer1"]);
                                            rSingle.IDNumber1Officer1 = dr0["IDNumber1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer1"]);
                                            rSingle.IDRegDate1Officer1 = dr0["IDRegDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer1"]);
                                            rSingle.IDExpireDate1Officer1 = dr0["IDExpireDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer1"]);
                                            rSingle.IDType2Officer1 = dr0["IDType2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer1"]);
                                            rSingle.IDNumber2Officer1 = dr0["IDNumber2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer1"]);
                                            rSingle.IDRegDate2Officer1 = dr0["IDRegDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer1"]);
                                            rSingle.IDExpireDate2Officer1 = dr0["IDExpireDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer1"]);
                                            rSingle.IDType3Officer1 = dr0["IDType3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer1"]);
                                            rSingle.IDNumber3Officer1 = dr0["IDNumber3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer1"]);
                                            rSingle.IDRegDate3Officer1 = dr0["IDRegDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer1"]);
                                            rSingle.IDExpireDate3Officer1 = dr0["IDExpireDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer1"]);
                                            rSingle.IDType4Officer1 = dr0["IDType4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer1"]);
                                            rSingle.IDNumber4Officer1 = dr0["IDNumber4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer1"]);
                                            rSingle.IDRegDate4Officer1 = dr0["IDRegDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer1"]);
                                            rSingle.IDExpireDate4Officer1 = dr0["IDExpireDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer1"]);
                                            rSingle.FirstNameOfficer2 = dr0["FirstNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer2"]);
                                            rSingle.MiddleNameOfficer2 = dr0["MiddleNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer2"]);
                                            rSingle.LastNameOfficer2 = dr0["LastNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer2"]);
                                            rSingle.PositionOfficer2 = dr0["PositionOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer2"]);
                                            rSingle.IDType1Officer2 = dr0["IDType1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer2"]);
                                            rSingle.IDNumber1Officer2 = dr0["IDNumber1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer2"]);
                                            rSingle.IDRegDate1Officer2 = dr0["IDRegDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer2"]);
                                            rSingle.IDExpireDate1Officer2 = dr0["IDExpireDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer2"]);
                                            rSingle.IDType2Officer2 = dr0["IDType2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer2"]);
                                            rSingle.IDNumber2Officer2 = dr0["IDNumber2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer2"]);
                                            rSingle.IDRegDate2Officer2 = dr0["IDRegDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer2"]);
                                            rSingle.IDExpireDate2Officer2 = dr0["IDExpireDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer2"]);
                                            rSingle.IDType3Officer2 = dr0["IDType3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer2"]);
                                            rSingle.IDNumber3Officer2 = dr0["IDNumber3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer2"]);
                                            rSingle.IDRegDate3Officer2 = dr0["IDRegDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer2"]);
                                            rSingle.IDExpireDate3Officer2 = dr0["IDExpireDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer2"]);
                                            rSingle.IDType4Officer2 = dr0["IDType4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer2"]);
                                            rSingle.IDNumber4Officer2 = dr0["IDNumber4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer2"]);
                                            rSingle.IDRegDate4Officer2 = dr0["IDRegDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer2"]);
                                            rSingle.IDExpireDate4Officer2 = dr0["IDExpireDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer2"]);
                                            rSingle.FirstNameOfficer3 = dr0["FirstNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer3"]);
                                            rSingle.MiddleNameOfficer3 = dr0["MiddleNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer3"]);
                                            rSingle.LastNameOfficer3 = dr0["LastNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer3"]);
                                            rSingle.PositionOfficer3 = dr0["PositionOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer3"]);
                                            rSingle.IDType1Officer3 = dr0["IDType1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer3"]);
                                            rSingle.IDNumber1Officer3 = dr0["IDNumber1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer3"]);
                                            rSingle.IDRegDate1Officer3 = dr0["IDRegDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer3"]);
                                            rSingle.IDExpireDate1Officer3 = dr0["IDExpireDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer3"]);
                                            rSingle.IDType2Officer3 = dr0["IDType2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer3"]);
                                            rSingle.IDNumber2Officer3 = dr0["IDNumber2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer3"]);
                                            rSingle.IDRegDate2Officer3 = dr0["IDRegDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer3"]);
                                            rSingle.IDExpireDate2Officer3 = dr0["IDExpireDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer3"]);
                                            rSingle.IDType3Officer3 = dr0["IDType3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer3"]);
                                            rSingle.IDNumber3Officer3 = dr0["IDNumber3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer3"]);
                                            rSingle.IDRegDate3Officer3 = dr0["IDRegDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer3"]);
                                            rSingle.IDExpireDate3Officer3 = dr0["IDExpireDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer3"]);
                                            rSingle.IDType4Officer3 = dr0["IDType4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer3"]);
                                            rSingle.IDNumber4Officer3 = dr0["IDNumber4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer3"]);
                                            rSingle.IDRegDate4Officer3 = dr0["IDRegDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer3"]);
                                            rSingle.IDExpireDate4Officer3 = dr0["IDExpireDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer3"]);
                                            rSingle.FirstNameOfficer4 = dr0["FirstNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer4"]);
                                            rSingle.MiddleNameOfficer4 = dr0["MiddleNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer4"]);
                                            rSingle.LastNameOfficer4 = dr0["LastNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer4"]);
                                            rSingle.PositionOfficer4 = dr0["PositionOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer4"]);
                                            rSingle.IDType1Officer4 = dr0["IDType1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer4"]);
                                            rSingle.IDNumber1Officer4 = dr0["IDNumber1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer4"]);
                                            rSingle.IDRegDate1Officer4 = dr0["IDRegDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer4"]);
                                            rSingle.IDExpireDate1Officer4 = dr0["IDExpireDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer4"]);
                                            rSingle.IDType2Officer4 = dr0["IDType2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer4"]);
                                            rSingle.IDNumber2Officer4 = dr0["IDNumber2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer4"]);
                                            rSingle.IDRegDate2Officer4 = dr0["IDRegDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer4"]);
                                            rSingle.IDExpireDate2Officer4 = dr0["IDExpireDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer4"]);
                                            rSingle.IDType3Officer4 = dr0["IDType3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer4"]);
                                            rSingle.IDNumber3Officer4 = dr0["IDNumber3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer4"]);
                                            rSingle.IDRegDate3Officer4 = dr0["IDRegDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer4"]);
                                            rSingle.IDExpireDate3Officer4 = dr0["IDExpireDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer4"]);
                                            rSingle.IDType4Officer4 = dr0["IDType4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer4"]);
                                            rSingle.IDNumber4Officer4 = dr0["IDNumber4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer4"]);
                                            rSingle.IDRegDate4Officer4 = dr0["IDRegDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer4"]);
                                            rSingle.IDExpireDate4Officer4 = dr0["IDExpireDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer4"]);
                                            rSingle.Description = dr0["Description"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Description"]);
                                            rSingle.CityOfEstablishment = dr0["CityOfEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CityOfEstablishment"]);
                                            rSingle.SellingAgentCode = dr0["SACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SACode"]);
                                            rSingle.CountryofDomicile = dr0["CountryofDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofDomicile"]);
                                            rSingle.KYCRiskProfile = dr0["KYCRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KYCRiskProfile"]);
                                            rSingle.BICCode1 = dr0["BICode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode1"]);
                                            rSingle.BICCode2 = dr0["BICode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode2"]);
                                            rSingle.BICCode3 = dr0["BICode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode3"]);
                                            rSingle.BIMemberCode1 = dr0["BIMemberCode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode1"]);
                                            rSingle.BIMemberCode2 = dr0["BIMemberCode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode2"]);
                                            rSingle.BIMemberCode3 = dr0["BIMemberCode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode3"]);

                                            // individual
                                            rSingle.FirstNameInd = dr0["FirstNameInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameInd"]);
                                            rSingle.MiddleNameInd = dr0["MiddleNameInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameInd"]);
                                            rSingle.LastNameInd = dr0["LastNameInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameInd"]);
                                            rSingle.BirthPlace = dr0["BirthPlace"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BirthPlace"]);
                                            rSingle.CountryOfBirth = dr0["CountryOfBirth"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryOfBirth"]);
                                            rSingle.DOB = dr0["TanggalLahir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TanggalLahir"]);
                                            rSingle.GenderSex = dr0["GenderSex"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GenderSex"]);
                                            rSingle.MaritalStatus = dr0["MaritalStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaritalStatus"]);
                                            rSingle.Occupation = dr0["Occupation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Occupation"]);
                                            rSingle.Education = dr0["Education"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Education"]);
                                            rSingle.Religion = dr0["Religion"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Religion"]);
                                            rSingle.IncomePerAnnum = dr0["IncomePerAnnum"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IncomePerAnnum"]);
                                            rSingle.SourceOfFunds = dr0["SourceOfFunds"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SourceOfFunds"]);
                                            rSingle.InvestmentObjectives = dr0["InvestmentObjectives"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestmentObjectives"]);
                                            rSingle.MotherMaidenName = dr0["MotherMaidenName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MotherMaidenName"]);
                                            rSingle.SpouseName = dr0["SpouseName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SpouseName"]);
                                            rSingle.SpouseOccupation = dr0["SpouseOccupation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SpouseOccupation"]);
                                            rSingle.Heir = dr0["Heir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Heir"]);
                                            rSingle.HeirRelation = dr0["HeirRelation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["HeirRelation"]);
                                            rSingle.NatureOfBusiness = dr0["NatureOfBusiness"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NatureOfBusiness"]);
                                            rSingle.NatureOfBusinessDesc = dr0["NatureOfBusinessDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NatureOfBusinessDesc"]);
                                            rSingle.PoliticallyExposed = dr0["PoliticallyExposed"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PoliticallyExposed"]);
                                            rSingle.PoliticallyExposedDesc = dr0["PoliticallyExposedDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PoliticallyExposedDesc"]);
                                            rSingle.OtherHomePhone = dr0["OtherHomePhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherHomePhone"]);
                                            rSingle.OtherCellPhone = dr0["OtherCellPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherCellPhone"]);
                                            rSingle.OtherFax = dr0["OtherFax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherFax"]);
                                            rSingle.OtherEmail = dr0["OtherEmail"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherEmail"]);
                                            rSingle.CorrespondenceAddress = dr0["CorrespondenceAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceAddress"]);
                                            rSingle.CorrespondenceCity = dr0["CorrespondenceCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceCity"]);
                                            rSingle.CorrespondenceZipCode = dr0["CorrespondenceZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceZipCode"]);
                                            rSingle.CountryofCorrespondence = dr0["CountryofCorrespondence"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofCorrespondence"]);
                                            rSingle.DomicileAddress = dr0["DomicileAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileAddress"]);
                                            rSingle.DomicileCity = dr0["DomicileCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileCity"]);
                                            rSingle.DomicileZipCode = dr0["DomicileZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileZipCode"]);
                                            rSingle.CountryofDomicile = dr0["CountryofDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofDomicile"]);
                                            rSingle.IdentityAddress1 = dr0["IdentityAddress1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityAddress1"]);
                                            rSingle.IdentityCity1 = dr0["IdentityCity1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCity1"]);
                                            rSingle.IdentityZipCode1 = dr0["IdentityZipCode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityZipCode1"]);
                                            rSingle.IdentityProvince1 = dr0["IdentityProvince1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityProvince1"]);
                                            rSingle.Propinsi = dr0["Propinsi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Propinsi"]);
                                            rSingle.IdentityCountry1 = dr0["IdentityCountry1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCountry1"]);
                                            rSingle.IdentityAddress2 = dr0["IdentityAddress2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityAddress2"]);
                                            rSingle.IdentityCity2 = dr0["IdentityCity2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCity2"]);
                                            rSingle.IdentityZipCode2 = dr0["IdentityZipCode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityZipCode2"]);
                                            rSingle.IdentityProvince2 = dr0["IdentityProvince2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityProvince2"]);
                                            rSingle.IdentityCountry2 = dr0["IdentityCountry2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCountry2"]);
                                            rSingle.IdentityAddress3 = dr0["IdentityAddress3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityAddress3"]);
                                            rSingle.IdentityCity3 = dr0["IdentityCity3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCity3"]);
                                            rSingle.IdentityZipCode3 = dr0["IdentityZipCode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityZipCode3"]);
                                            rSingle.IdentityProvince3 = dr0["IdentityProvince3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityProvince3"]);
                                            rSingle.IdentityCountry3 = dr0["IdentityCountry3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCountry3"]);
                                            rSingle.IdentityType1 = dr0["IdentityType1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityType1"]);
                                            rSingle.IdentityNumber1 = dr0["IdentityNumber1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityNumber1"]);
                                            rSingle.RegistrationDateIdentitasInd1 = dr0["RegistrationDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd1"]);
                                            rSingle.ExpiredDateIdentitasInd1 = dr0["ExpiredDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd1"]);
                                            rSingle.IdentityType2 = dr0["IdentityType2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityType2"]);
                                            rSingle.IdentityNumber2 = dr0["IdentityNumber2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityNumber2"]);
                                            rSingle.RegistrationDateIdentitasInd2 = dr0["RegistrationDateIdentitasInd2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd2"]);
                                            rSingle.ExpiredDateIdentitasInd2 = dr0["ExpiredDateIdentitasInd2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd2"]);
                                            rSingle.IdentityType3 = dr0["IdentityType3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityType3"]);
                                            rSingle.IdentityNumber3 = dr0["IdentityNumber3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityNumber3"]);
                                            rSingle.RegistrationDateIdentitasInd3 = dr0["RegistrationDateIdentitasInd3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd3"]);
                                            rSingle.ExpiredDateIdentitasInd3 = dr0["ExpiredDateIdentitasInd3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd3"]);
                                            rSingle.AlamatKantorInd = dr0["AlamatKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AlamatKantorInd"]);
                                            rSingle.KodeKotaKantorInd = dr0["KodeKotaKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeKotaKantorInd"]);
                                            rSingle.KodePosKantorInd = dr0["KodePosKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodePosKantorInd"]);
                                            rSingle.KodePropinsiKantorInd = dr0["KodePropinsiKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodePropinsiKantorInd"]);
                                            rSingle.KodeCountryofKantor = dr0["KodeCountryofKantor"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeCountryofKantor"]);
                                            rSingle.CorrespondenceRT = dr0["CorrespondenceRT"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceRT"]);
                                            rSingle.CorrespondenceRW = dr0["CorrespondenceRW"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceRW"]);
                                            rSingle.DomicileRT = dr0["DomicileRT"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileRT"]);
                                            rSingle.DomicileRW = dr0["DomicileRW"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileRW"]);
                                            rSingle.Identity1RT = dr0["Identity1RT"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Identity1RT"]);
                                            rSingle.Identity1RW = dr0["Identity1RW"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Identity1RW"]);
                                            rSingle.KodeDomisiliPropinsi = dr0["KodeDomisiliPropinsi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeDomisiliPropinsi"]);

                                            rSingle.EntryUsersID = dr0["EntryUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryUsersID"]);
                                            rSingle.EntryTime = dr0["EntryTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryTime"]);
                                            rSingle.UpdateUsersID = dr0["UpdateUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateUsersID"]);
                                            rSingle.UpdateTime = dr0["UpdateTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateTime"]);
                                            rSingle.ApprovedUsersID = dr0["ApprovedUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedUsersID"]);
                                            rSingle.ApprovedTime = dr0["ApprovedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedTime"]);
                                            rSingle.VoidUsersID = dr0["VoidUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidUsersID"]);
                                            rSingle.VoidTime = dr0["VoidTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidTime"]);
                                            rSingle.SuspendBy = dr0["SuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendBy"]);
                                            rSingle.SuspendTime = dr0["SuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendTime"]);
                                            rSingle.UnSuspendBy = dr0["UnSuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendBy"]);
                                            rSingle.UnSuspendTime = dr0["UnSuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendTime"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByTitle =
                                            from r in rList
                                            group r by new { r.InvestorType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByTitle)
                                        {

                                            incRowExcel++;
                                            string _range = "";
                                            worksheet.Cells[incRowExcel, 1].Value = "Investor Type :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InvestorType;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            if (rsHeader.Key.InvestorType == "INDIVIDUAL")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "FundClientID";
                                                worksheet.Cells[incRowExcel, 2].Value = "OldID";
                                                worksheet.Cells[incRowExcel, 3].Value = "InvestorType";
                                                worksheet.Cells[incRowExcel, 4].Value = "InternalCategory";
                                                worksheet.Cells[incRowExcel, 5].Value = "InternalName";
                                                worksheet.Cells[incRowExcel, 6].Value = "SellingAgent";
                                                worksheet.Cells[incRowExcel, 7].Value = "SID";
                                                worksheet.Cells[incRowExcel, 8].Value = "IFUACode";
                                                worksheet.Cells[incRowExcel, 9].Value = "InvestorsRiskProfile";
                                                worksheet.Cells[incRowExcel, 10].Value = "KYCRiskProfile";
                                                worksheet.Cells[incRowExcel, 11].Value = "AssetOwner";
                                                worksheet.Cells[incRowExcel, 12].Value = "StatementType";
                                                worksheet.Cells[incRowExcel, 13].Value = "DormantDate";
                                                worksheet.Cells[incRowExcel, 14].Value = "Affiliated";
                                                worksheet.Cells[incRowExcel, 15].Value = "AffiliatedWith";
                                                worksheet.Cells[incRowExcel, 16].Value = "Suspended";
                                                worksheet.Cells[incRowExcel, 17].Value = "NPWP";
                                                worksheet.Cells[incRowExcel, 18].Value = "RegistrationNPWP";
                                                worksheet.Cells[incRowExcel, 19].Value = "Email";
                                                worksheet.Cells[incRowExcel, 20].Value = "PhoneNumber";
                                                worksheet.Cells[incRowExcel, 21].Value = "MobilePhone";
                                                worksheet.Cells[incRowExcel, 22].Value = "Fax";
                                                worksheet.Cells[incRowExcel, 23].Value = "Country";
                                                worksheet.Cells[incRowExcel, 24].Value = "Nationality";
                                                worksheet.Cells[incRowExcel, 25].Value = "BankRDN";
                                                worksheet.Cells[incRowExcel, 26].Value = "RDNAccountName";
                                                worksheet.Cells[incRowExcel, 27].Value = "RDNAccountNumber";
                                                worksheet.Cells[incRowExcel, 28].Value = "BankName1";
                                                worksheet.Cells[incRowExcel, 29].Value = "BankAccountName1";
                                                worksheet.Cells[incRowExcel, 30].Value = "BankAccountNumber1";
                                                worksheet.Cells[incRowExcel, 31].Value = "BankBranchName1";
                                                worksheet.Cells[incRowExcel, 32].Value = "Currency1";
                                                worksheet.Cells[incRowExcel, 33].Value = "BICCode1";
                                                worksheet.Cells[incRowExcel, 34].Value = "BIMemberCode1";

                                                worksheet.Cells[incRowExcel, 35].Value = "BankName2";
                                                worksheet.Cells[incRowExcel, 36].Value = "BankAccountName2";
                                                worksheet.Cells[incRowExcel, 37].Value = "BankAccountNumber2";
                                                worksheet.Cells[incRowExcel, 38].Value = "BankBranchName2";
                                                worksheet.Cells[incRowExcel, 39].Value = "Currency2";
                                                worksheet.Cells[incRowExcel, 40].Value = "BICCode2";
                                                worksheet.Cells[incRowExcel, 41].Value = "BIMemberCode2";

                                                worksheet.Cells[incRowExcel, 42].Value = "BankName3";
                                                worksheet.Cells[incRowExcel, 43].Value = "BankAccountName3";
                                                worksheet.Cells[incRowExcel, 44].Value = "BankAccountNumber3";
                                                worksheet.Cells[incRowExcel, 45].Value = "BankBranchName3";
                                                worksheet.Cells[incRowExcel, 46].Value = "Currency3";
                                                worksheet.Cells[incRowExcel, 47].Value = "BICCode3";
                                                worksheet.Cells[incRowExcel, 48].Value = "BIMemberCode3";

                                                worksheet.Cells[incRowExcel, 49].Value = "FirstNameInd";
                                                worksheet.Cells[incRowExcel, 50].Value = "MiddleNameInd";
                                                worksheet.Cells[incRowExcel, 51].Value = "LastNameInd";
                                                worksheet.Cells[incRowExcel, 52].Value = "BirthPlace";
                                                worksheet.Cells[incRowExcel, 53].Value = "CountryOfBirth";
                                                worksheet.Cells[incRowExcel, 54].Value = "DOB";
                                                worksheet.Cells[incRowExcel, 55].Value = "GenderSex";
                                                worksheet.Cells[incRowExcel, 56].Value = "MaritalStatus";
                                                worksheet.Cells[incRowExcel, 57].Value = "Occupation";
                                                worksheet.Cells[incRowExcel, 58].Value = "Education";
                                                worksheet.Cells[incRowExcel, 59].Value = "Religion";
                                                worksheet.Cells[incRowExcel, 60].Value = "IncomePerAnnum";
                                                worksheet.Cells[incRowExcel, 61].Value = "SourceOfFunds";
                                                worksheet.Cells[incRowExcel, 62].Value = "InvestmentObjectives";
                                                worksheet.Cells[incRowExcel, 63].Value = "MotherMaidenName";
                                                worksheet.Cells[incRowExcel, 64].Value = "SpouseName";
                                                worksheet.Cells[incRowExcel, 65].Value = "SpouseOccupation";
                                                worksheet.Cells[incRowExcel, 66].Value = "Heir";
                                                worksheet.Cells[incRowExcel, 67].Value = "HeirRelation";
                                                worksheet.Cells[incRowExcel, 68].Value = "NatureOfBusiness";
                                                worksheet.Cells[incRowExcel, 69].Value = "NatureOfBusinessDesc";
                                                worksheet.Cells[incRowExcel, 70].Value = "PoliticallyExposed";
                                                worksheet.Cells[incRowExcel, 71].Value = "PoliticallyExposedDesc";
                                                worksheet.Cells[incRowExcel, 72].Value = "OtherHomePhone";
                                                worksheet.Cells[incRowExcel, 73].Value = "OtherCellPhone";
                                                worksheet.Cells[incRowExcel, 74].Value = "OtherFax";
                                                worksheet.Cells[incRowExcel, 75].Value = "OtherEmail";
                                                worksheet.Cells[incRowExcel, 76].Value = "CorrespondenceAddress";
                                                worksheet.Cells[incRowExcel, 77].Value = "CorrespondenceCity";
                                                worksheet.Cells[incRowExcel, 78].Value = "CorrespondenceZipCode";
                                                worksheet.Cells[incRowExcel, 79].Value = "CorrespondenceProvince";
                                                worksheet.Cells[incRowExcel, 80].Value = "CorrespondenceRT";
                                                worksheet.Cells[incRowExcel, 81].Value = "CorrespondenceRW";
                                                worksheet.Cells[incRowExcel, 82].Value = "CountryofCorrespondence";
                                                worksheet.Cells[incRowExcel, 83].Value = "DomicileAddress";
                                                worksheet.Cells[incRowExcel, 84].Value = "KodeDomisiliPropinsi";
                                                worksheet.Cells[incRowExcel, 85].Value = "DomicileCity";
                                                worksheet.Cells[incRowExcel, 86].Value = "DomicileZipCode";
                                                worksheet.Cells[incRowExcel, 87].Value = "DomicileRT";
                                                worksheet.Cells[incRowExcel, 88].Value = "DomicileRW";
                                                worksheet.Cells[incRowExcel, 89].Value = "CountryofDomicile";
                                                worksheet.Cells[incRowExcel, 90].Value = "IdentityAddress1";
                                                worksheet.Cells[incRowExcel, 91].Value = "IdentityCity1";
                                                worksheet.Cells[incRowExcel, 92].Value = "IdentityZipCode1";
                                                worksheet.Cells[incRowExcel, 93].Value = "IdentityProvince1";
                                                worksheet.Cells[incRowExcel, 94].Value = "IdentityCountry1";
                                                worksheet.Cells[incRowExcel, 95].Value = "IdentityAddress2";
                                                worksheet.Cells[incRowExcel, 96].Value = "IdentityCity2";
                                                worksheet.Cells[incRowExcel, 97].Value = "IdentityZipCode2";
                                                worksheet.Cells[incRowExcel, 98].Value = "IdentityProvince2";
                                                worksheet.Cells[incRowExcel, 99].Value = "IdentityCountry2";
                                                worksheet.Cells[incRowExcel, 100].Value = "IdentityAddress3";
                                                worksheet.Cells[incRowExcel, 101].Value = "IdentityCity3";
                                                worksheet.Cells[incRowExcel, 102].Value = "IdentityZipCode3";
                                                worksheet.Cells[incRowExcel, 103].Value = "IdentityProvince3";
                                                worksheet.Cells[incRowExcel, 104].Value = "IdentityCountry3";
                                                worksheet.Cells[incRowExcel, 105].Value = "IdentityType1";
                                                worksheet.Cells[incRowExcel, 106].Value = "IdentityNumber1";
                                                worksheet.Cells[incRowExcel, 107].Value = "Identity1RT";
                                                worksheet.Cells[incRowExcel, 108].Value = "Identity1RW";
                                                worksheet.Cells[incRowExcel, 109].Value = "RegistrationDateIdentitasInd1";
                                                worksheet.Cells[incRowExcel, 110].Value = "ExpiredDateIdentitasInd1";
                                                worksheet.Cells[incRowExcel, 111].Value = "IdentityType2";
                                                worksheet.Cells[incRowExcel, 112].Value = "IdentityNumber2";
                                                worksheet.Cells[incRowExcel, 113].Value = "RegistrationDateIdentitasInd2";
                                                worksheet.Cells[incRowExcel, 114].Value = "ExpiredDateIdentitasInd2";
                                                worksheet.Cells[incRowExcel, 115].Value = "IdentityType3";
                                                worksheet.Cells[incRowExcel, 116].Value = "IdentityNumber3";
                                                worksheet.Cells[incRowExcel, 117].Value = "RegistrationDateIdentitasInd3";
                                                worksheet.Cells[incRowExcel, 118].Value = "ExpiredDateIdentitasInd3";
                                                worksheet.Cells[incRowExcel, 119].Value = "FATCAStatus";
                                                worksheet.Cells[incRowExcel, 120].Value = "TIN";
                                                worksheet.Cells[incRowExcel, 121].Value = "TINIssuanceCountry";
                                                worksheet.Cells[incRowExcel, 122].Value = "GIIN";
                                                worksheet.Cells[incRowExcel, 123].Value = "SubstantialOwnerName";
                                                worksheet.Cells[incRowExcel, 124].Value = "SubstantialOwnerAddress";
                                                worksheet.Cells[incRowExcel, 125].Value = "SubstantialOwnerTIN";
                                                worksheet.Cells[incRowExcel, 126].Value = "AlamatKantorInd";
                                                worksheet.Cells[incRowExcel, 127].Value = "KodeKotaKantorInd";
                                                worksheet.Cells[incRowExcel, 128].Value = "KodePosKantorInd";
                                                worksheet.Cells[incRowExcel, 129].Value = "KodePropinsiKantorInd";
                                                worksheet.Cells[incRowExcel, 130].Value = "KodeCountryofKantor";
                                                worksheet.Cells[incRowExcel, 131].Value = "Description";


                                                worksheet.Cells[incRowExcel, 132].Value = "EntryUsersID";
                                                worksheet.Cells[incRowExcel, 133].Value = "EntryTime";
                                                worksheet.Cells[incRowExcel, 134].Value = "UpdateUsersID";
                                                worksheet.Cells[incRowExcel, 135].Value = "UpdateTime";
                                                worksheet.Cells[incRowExcel, 136].Value = "ApprovedUsersID";
                                                worksheet.Cells[incRowExcel, 137].Value = "ApprovedTime";
                                                worksheet.Cells[incRowExcel, 138].Value = "VoidUsersID";
                                                worksheet.Cells[incRowExcel, 139].Value = "VoidTime";
                                                worksheet.Cells[incRowExcel, 140].Value = "SuspendBy";
                                                worksheet.Cells[incRowExcel, 141].Value = "SuspendTime";
                                                worksheet.Cells[incRowExcel, 142].Value = "UnSuspendBy";
                                                worksheet.Cells[incRowExcel, 143].Value = "UnSuspendTime";
                                                _range = "A" + incRowExcel + ":EM" + incRowExcel;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "FundClientID";
                                                worksheet.Cells[incRowExcel, 2].Value = "InvestorType";
                                                worksheet.Cells[incRowExcel, 3].Value = "InternalCategory";
                                                worksheet.Cells[incRowExcel, 4].Value = "InternalName";
                                                worksheet.Cells[incRowExcel, 5].Value = "SellingAgent";
                                                worksheet.Cells[incRowExcel, 6].Value = "NPWP";
                                                worksheet.Cells[incRowExcel, 7].Value = "RegistrationNPWP";
                                                worksheet.Cells[incRowExcel, 8].Value = "Email";
                                                worksheet.Cells[incRowExcel, 9].Value = "PhoneNumber";
                                                worksheet.Cells[incRowExcel, 10].Value = "MobilePhone";
                                                worksheet.Cells[incRowExcel, 11].Value = "Fax";
                                                worksheet.Cells[incRowExcel, 12].Value = "SID";
                                                worksheet.Cells[incRowExcel, 13].Value = "IFUACode";
                                                worksheet.Cells[incRowExcel, 14].Value = "InvestorsRiskProfile";
                                                worksheet.Cells[incRowExcel, 15].Value = "KYCRiskProfile";
                                                worksheet.Cells[incRowExcel, 16].Value = "AssetOwner";
                                                worksheet.Cells[incRowExcel, 17].Value = "StatementType";
                                                worksheet.Cells[incRowExcel, 18].Value = "SellingAgentCode";
                                                worksheet.Cells[incRowExcel, 19].Value = "DormantDate";
                                                worksheet.Cells[incRowExcel, 20].Value = "Description";
                                                worksheet.Cells[incRowExcel, 21].Value = "Affiliated";
                                                worksheet.Cells[incRowExcel, 22].Value = "AffiliatedWith";
                                                worksheet.Cells[incRowExcel, 23].Value = "Suspended";
                                                worksheet.Cells[incRowExcel, 24].Value = "BankName1";
                                                worksheet.Cells[incRowExcel, 25].Value = "BankAccountName1";
                                                worksheet.Cells[incRowExcel, 26].Value = "BankAccountNumber1";
                                                worksheet.Cells[incRowExcel, 27].Value = "BankBranchName1";
                                                worksheet.Cells[incRowExcel, 28].Value = "Currency1";
                                                worksheet.Cells[incRowExcel, 29].Value = "BICCode1";
                                                worksheet.Cells[incRowExcel, 30].Value = "BIMemberCode1";
                                                worksheet.Cells[incRowExcel, 31].Value = "BankName2";
                                                worksheet.Cells[incRowExcel, 32].Value = "BankAccountName2";
                                                worksheet.Cells[incRowExcel, 33].Value = "BankAccountNumber2";
                                                worksheet.Cells[incRowExcel, 34].Value = "BankBranchName2";
                                                worksheet.Cells[incRowExcel, 35].Value = "Currency2";
                                                worksheet.Cells[incRowExcel, 36].Value = "BICCode2";
                                                worksheet.Cells[incRowExcel, 37].Value = "BIMemberCode2";
                                                worksheet.Cells[incRowExcel, 38].Value = "BankName3";
                                                worksheet.Cells[incRowExcel, 39].Value = "BankAccountName3";
                                                worksheet.Cells[incRowExcel, 40].Value = "BankAccountNumber3";
                                                worksheet.Cells[incRowExcel, 41].Value = "BankBranchName3";
                                                worksheet.Cells[incRowExcel, 42].Value = "Currency3";
                                                worksheet.Cells[incRowExcel, 43].Value = "BICCode3";
                                                worksheet.Cells[incRowExcel, 44].Value = "BIMemberCode3";
                                                worksheet.Cells[incRowExcel, 45].Value = "BankRDN";
                                                worksheet.Cells[incRowExcel, 46].Value = "RDNAccountName";
                                                worksheet.Cells[incRowExcel, 47].Value = "RDNAccountNumber";
                                                worksheet.Cells[incRowExcel, 48].Value = "CompanyName";
                                                worksheet.Cells[incRowExcel, 49].Value = "CompanyAddress";
                                                worksheet.Cells[incRowExcel, 50].Value = "CompanyZipCode";
                                                worksheet.Cells[incRowExcel, 51].Value = "CompanyCity";
                                                worksheet.Cells[incRowExcel, 52].Value = "CompanyLegalDomicile";
                                                worksheet.Cells[incRowExcel, 53].Value = "CountryOfDomicile";
                                                worksheet.Cells[incRowExcel, 54].Value = "CompanyType";
                                                worksheet.Cells[incRowExcel, 55].Value = "CompanyCharacteristic";
                                                worksheet.Cells[incRowExcel, 56].Value = "CompanyIncomePerAnnum";
                                                worksheet.Cells[incRowExcel, 57].Value = "CompanySourceOfFunds";
                                                worksheet.Cells[incRowExcel, 58].Value = "CompanyInvestmentObjective";
                                                worksheet.Cells[incRowExcel, 59].Value = "SKDNumber";
                                                worksheet.Cells[incRowExcel, 60].Value = "ExpiredDateSKD";
                                                worksheet.Cells[incRowExcel, 61].Value = "ArticleOfAssociation";
                                                worksheet.Cells[incRowExcel, 62].Value = "SIUPNumber";
                                                worksheet.Cells[incRowExcel, 63].Value = "SIUPExpirationDate";
                                                worksheet.Cells[incRowExcel, 64].Value = "FirstNameOfficer1";
                                                worksheet.Cells[incRowExcel, 65].Value = "MiddleNameOfficer1";
                                                worksheet.Cells[incRowExcel, 66].Value = "LastNameOfficer1";
                                                worksheet.Cells[incRowExcel, 67].Value = "PositionOfficer1";
                                                worksheet.Cells[incRowExcel, 68].Value = "PhoneNumberOfficer1";
                                                worksheet.Cells[incRowExcel, 69].Value = "EmailOfficer1";
                                                worksheet.Cells[incRowExcel, 70].Value = "IDType1Officer1";
                                                worksheet.Cells[incRowExcel, 71].Value = "IDNumber1Officer1";
                                                worksheet.Cells[incRowExcel, 72].Value = "IDRegDate1Officer1";
                                                worksheet.Cells[incRowExcel, 73].Value = "IDExpireDate1Officer1";
                                                worksheet.Cells[incRowExcel, 74].Value = "IDType2Officer1";
                                                worksheet.Cells[incRowExcel, 75].Value = "IDNumber2Officer1";
                                                worksheet.Cells[incRowExcel, 76].Value = "IDRegDate2Officer1";
                                                worksheet.Cells[incRowExcel, 77].Value = "IDExpireDate2Officer1";
                                                worksheet.Cells[incRowExcel, 78].Value = "IDType3Officer1";
                                                worksheet.Cells[incRowExcel, 79].Value = "IDNumber3Officer1";
                                                worksheet.Cells[incRowExcel, 80].Value = "IDRegDate3Officer1";
                                                worksheet.Cells[incRowExcel, 81].Value = "IDExpireDate3Officer1";
                                                worksheet.Cells[incRowExcel, 82].Value = "IDType4Officer1";
                                                worksheet.Cells[incRowExcel, 83].Value = "IDNumber4Officer1";
                                                worksheet.Cells[incRowExcel, 84].Value = "IDRegDate4Officer1";
                                                worksheet.Cells[incRowExcel, 85].Value = "IDExpireDate4Officer1";
                                                worksheet.Cells[incRowExcel, 86].Value = "FirstNameOfficer2";
                                                worksheet.Cells[incRowExcel, 87].Value = "MiddleNameOfficer2";
                                                worksheet.Cells[incRowExcel, 88].Value = "LastNameOfficer2";
                                                worksheet.Cells[incRowExcel, 89].Value = "PositionOfficer2";
                                                worksheet.Cells[incRowExcel, 90].Value = "IDType1Officer2";
                                                worksheet.Cells[incRowExcel, 91].Value = "IDNumber1Officer2";
                                                worksheet.Cells[incRowExcel, 92].Value = "IDRegDate1Officer2";
                                                worksheet.Cells[incRowExcel, 93].Value = "IDExpireDate1Officer2";
                                                worksheet.Cells[incRowExcel, 94].Value = "IDType2Officer2";
                                                worksheet.Cells[incRowExcel, 95].Value = "IDNumber2Officer2";
                                                worksheet.Cells[incRowExcel, 96].Value = "IDRegDate2Officer2";
                                                worksheet.Cells[incRowExcel, 97].Value = "IDExpireDate2Officer2";
                                                worksheet.Cells[incRowExcel, 98].Value = "IDType3Officer2";
                                                worksheet.Cells[incRowExcel, 99].Value = "IDNumber3Officer2";
                                                worksheet.Cells[incRowExcel, 100].Value = "IDRegDate3Officer2";
                                                worksheet.Cells[incRowExcel, 101].Value = "IDExpireDate3Officer2";
                                                worksheet.Cells[incRowExcel, 102].Value = "IDType4Officer2";
                                                worksheet.Cells[incRowExcel, 103].Value = "IDNumber4Officer2";
                                                worksheet.Cells[incRowExcel, 104].Value = "IDRegDate4Officer2";
                                                worksheet.Cells[incRowExcel, 105].Value = "IDExpireDate4Officer2";
                                                worksheet.Cells[incRowExcel, 106].Value = "EstablishmentDate";
                                                worksheet.Cells[incRowExcel, 107].Value = "EstablishmentPlace";
                                                worksheet.Cells[incRowExcel, 108].Value = "CountryofEstablishment";
                                                worksheet.Cells[incRowExcel, 109].Value = "CityOfEstablishment";
                                                worksheet.Cells[incRowExcel, 110].Value = "CountryofCompany";
                                                worksheet.Cells[incRowExcel, 111].Value = "CompanyCityName";
                                                worksheet.Cells[incRowExcel, 112].Value = "CompanyAddress";
                                                worksheet.Cells[incRowExcel, 113].Value = "ZIPCode";
                                                worksheet.Cells[incRowExcel, 114].Value = "BusinessPhone";
                                                worksheet.Cells[incRowExcel, 115].Value = "AssetFor1Year";
                                                worksheet.Cells[incRowExcel, 116].Value = "AssetFor2Year";
                                                worksheet.Cells[incRowExcel, 117].Value = "AssetFor3Year";
                                                worksheet.Cells[incRowExcel, 118].Value = "OperatingProfitFor1Year";
                                                worksheet.Cells[incRowExcel, 119].Value = "OperatingProfitFor2Year";
                                                worksheet.Cells[incRowExcel, 120].Value = "OperatingProfitFor3Year";
                                                worksheet.Cells[incRowExcel, 121].Value = "FirstNameOfficer3";
                                                worksheet.Cells[incRowExcel, 122].Value = "MiddleNameOfficer3";
                                                worksheet.Cells[incRowExcel, 123].Value = "LastNameOfficer3";
                                                worksheet.Cells[incRowExcel, 124].Value = "PositionOfficer3";
                                                worksheet.Cells[incRowExcel, 125].Value = "IDType1Officer3";
                                                worksheet.Cells[incRowExcel, 126].Value = "IDNumber1Officer3";
                                                worksheet.Cells[incRowExcel, 127].Value = "IDRegDate1Officer3";
                                                worksheet.Cells[incRowExcel, 128].Value = "IDExpireDate1Officer3";
                                                worksheet.Cells[incRowExcel, 129].Value = "IDType2Officer3";
                                                worksheet.Cells[incRowExcel, 130].Value = "IDNumber2Officer3";
                                                worksheet.Cells[incRowExcel, 131].Value = "IDRegDate2Officer3";
                                                worksheet.Cells[incRowExcel, 132].Value = "IDExpireDate2Officer3";
                                                worksheet.Cells[incRowExcel, 133].Value = "IDType3Officer3";
                                                worksheet.Cells[incRowExcel, 134].Value = "IDNumber3Officer3";
                                                worksheet.Cells[incRowExcel, 135].Value = "IDRegDate3Officer3";
                                                worksheet.Cells[incRowExcel, 136].Value = "IDExpireDate3Officer3";
                                                worksheet.Cells[incRowExcel, 137].Value = "IDType4Officer3";
                                                worksheet.Cells[incRowExcel, 138].Value = "IDNumber4Officer3";
                                                worksheet.Cells[incRowExcel, 139].Value = "IDRegDate4Officer3";
                                                worksheet.Cells[incRowExcel, 140].Value = "IDExpireDate4Officer3";
                                                worksheet.Cells[incRowExcel, 141].Value = "FirstNameOfficer4";
                                                worksheet.Cells[incRowExcel, 142].Value = "MiddleNameOfficer4";
                                                worksheet.Cells[incRowExcel, 143].Value = "LastNameOfficer4";
                                                worksheet.Cells[incRowExcel, 144].Value = "PositionOfficer4";
                                                worksheet.Cells[incRowExcel, 145].Value = "IDType1Officer4";
                                                worksheet.Cells[incRowExcel, 146].Value = "IDNumber1Officer4";
                                                worksheet.Cells[incRowExcel, 147].Value = "IDRegDate1Officer4";
                                                worksheet.Cells[incRowExcel, 148].Value = "IDExpireDate1Officer4";
                                                worksheet.Cells[incRowExcel, 149].Value = "IDType2Officer4";
                                                worksheet.Cells[incRowExcel, 150].Value = "IDNumber2Officer4";
                                                worksheet.Cells[incRowExcel, 151].Value = "IDRegDate2Officer4";
                                                worksheet.Cells[incRowExcel, 152].Value = "IDExpireDate2Officer4";
                                                worksheet.Cells[incRowExcel, 153].Value = "IDType3Officer4";
                                                worksheet.Cells[incRowExcel, 154].Value = "IDNumber3Officer4";
                                                worksheet.Cells[incRowExcel, 155].Value = "IDRegDate3Officer4";
                                                worksheet.Cells[incRowExcel, 156].Value = "IDExpireDate3Officer4";
                                                worksheet.Cells[incRowExcel, 157].Value = "IDType4Officer4";
                                                worksheet.Cells[incRowExcel, 158].Value = "IDNumber4Officer4";
                                                worksheet.Cells[incRowExcel, 159].Value = "IDRegDate4Officer4";
                                                worksheet.Cells[incRowExcel, 160].Value = "IDExpireDate4Officer4";
                                                worksheet.Cells[incRowExcel, 161].Value = "FATCAStatus";
                                                worksheet.Cells[incRowExcel, 162].Value = "TIN";
                                                worksheet.Cells[incRowExcel, 163].Value = "TINIssuanceCountry";
                                                worksheet.Cells[incRowExcel, 164].Value = "GIIN";
                                                worksheet.Cells[incRowExcel, 165].Value = "SubstantialOwnerName";
                                                worksheet.Cells[incRowExcel, 166].Value = "SubstantialOwnerAddress";
                                                worksheet.Cells[incRowExcel, 167].Value = "SubstantialOwnerTIN";
                                                worksheet.Cells[incRowExcel, 168].Value = "EntryUsersID";
                                                worksheet.Cells[incRowExcel, 169].Value = "EntryTime";
                                                worksheet.Cells[incRowExcel, 170].Value = "UpdateUsersID";
                                                worksheet.Cells[incRowExcel, 171].Value = "UpdateTime";
                                                worksheet.Cells[incRowExcel, 172].Value = "ApprovedUsersID";
                                                worksheet.Cells[incRowExcel, 173].Value = "ApprovedTime";
                                                worksheet.Cells[incRowExcel, 174].Value = "VoidUsersID";
                                                worksheet.Cells[incRowExcel, 175].Value = "VoidTime";
                                                worksheet.Cells[incRowExcel, 176].Value = "SuspendBy";
                                                worksheet.Cells[incRowExcel, 177].Value = "SuspendTime";
                                                worksheet.Cells[incRowExcel, 178].Value = "UnSuspendBy";
                                                worksheet.Cells[incRowExcel, 179].Value = "UnSuspendTime";
                                                _range = "A" + incRowExcel + ":FW" + incRowExcel;
                                            }

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            }
                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsDetail.InvestorType == "INDIVIDUAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.OldID;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InternalName;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.SellingAgent;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.SID;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.IFUACode;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InvestorsRiskProfile;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.KYCRiskProfile;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.AssetOwner;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.StatementType;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.DormantDate;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Affiliated;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.AffiliatedWith;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.Suspended;
                                                    worksheet.Cells[incRowExcel, 17].Value = Convert.ToDateTime(rsDetail.NPWP).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.RegistrationNPWP;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.Email;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.PhoneNumber;
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.MobilePhone;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.Fax;
                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail.Country;
                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail.Nationality;
                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail.BankRDN;
                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail.RDNAccountName;
                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail.RDNAccountNumber;
                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail.BankName1;
                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail.BankAccountName1;
                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail.BankAccountNumber1;
                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail.BankBranchName1;
                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail.Currency1;
                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail.BICCode1;
                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail.BIMemberCode1;

                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail.BankName2;
                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail.BankAccountName2;
                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail.BankAccountNumber2;
                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail.BankBranchName2;
                                                    worksheet.Cells[incRowExcel, 39].Value = rsDetail.Currency2;
                                                    worksheet.Cells[incRowExcel, 40].Value = rsDetail.BICCode2;
                                                    worksheet.Cells[incRowExcel, 41].Value = rsDetail.BIMemberCode2;

                                                    worksheet.Cells[incRowExcel, 42].Value = rsDetail.BankName3;
                                                    worksheet.Cells[incRowExcel, 43].Value = rsDetail.BankAccountName3;
                                                    worksheet.Cells[incRowExcel, 44].Value = rsDetail.BankAccountNumber3;
                                                    worksheet.Cells[incRowExcel, 45].Value = rsDetail.BankBranchName3;
                                                    worksheet.Cells[incRowExcel, 46].Value = rsDetail.Currency3;
                                                    worksheet.Cells[incRowExcel, 47].Value = rsDetail.BICCode3;
                                                    worksheet.Cells[incRowExcel, 48].Value = rsDetail.BIMemberCode3;

                                                    worksheet.Cells[incRowExcel, 49].Value = rsDetail.FirstNameInd;
                                                    worksheet.Cells[incRowExcel, 50].Value = rsDetail.MiddleNameInd;
                                                    worksheet.Cells[incRowExcel, 51].Value = rsDetail.LastNameInd;
                                                    worksheet.Cells[incRowExcel, 52].Value = rsDetail.BirthPlace;
                                                    worksheet.Cells[incRowExcel, 53].Value = Convert.ToDateTime(rsDetail.CountryOfBirth).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 54].Value = rsDetail.DOB;
                                                    worksheet.Cells[incRowExcel, 55].Value = rsDetail.GenderSex;
                                                    worksheet.Cells[incRowExcel, 56].Value = rsDetail.MaritalStatus;
                                                    worksheet.Cells[incRowExcel, 57].Value = rsDetail.Occupation;
                                                    worksheet.Cells[incRowExcel, 58].Value = rsDetail.Education;
                                                    worksheet.Cells[incRowExcel, 59].Value = rsDetail.Religion;
                                                    worksheet.Cells[incRowExcel, 60].Value = rsDetail.IncomePerAnnum;
                                                    worksheet.Cells[incRowExcel, 61].Value = rsDetail.SourceOfFunds;
                                                    worksheet.Cells[incRowExcel, 62].Value = rsDetail.InvestmentObjectives;
                                                    worksheet.Cells[incRowExcel, 63].Value = rsDetail.MotherMaidenName;
                                                    worksheet.Cells[incRowExcel, 64].Value = rsDetail.SpouseName;
                                                    worksheet.Cells[incRowExcel, 65].Value = rsDetail.SpouseOccupation;
                                                    worksheet.Cells[incRowExcel, 66].Value = rsDetail.Heir;
                                                    worksheet.Cells[incRowExcel, 67].Value = rsDetail.HeirRelation;
                                                    worksheet.Cells[incRowExcel, 68].Value = rsDetail.NatureOfBusiness;
                                                    worksheet.Cells[incRowExcel, 69].Value = rsDetail.NatureOfBusinessDesc;
                                                    worksheet.Cells[incRowExcel, 70].Value = rsDetail.PoliticallyExposed;
                                                    worksheet.Cells[incRowExcel, 71].Value = rsDetail.PoliticallyExposedDesc;
                                                    worksheet.Cells[incRowExcel, 72].Value = rsDetail.OtherHomePhone;
                                                    worksheet.Cells[incRowExcel, 73].Value = rsDetail.OtherCellPhone;
                                                    worksheet.Cells[incRowExcel, 74].Value = rsDetail.OtherFax;
                                                    worksheet.Cells[incRowExcel, 75].Value = rsDetail.OtherEmail;
                                                    worksheet.Cells[incRowExcel, 76].Value = rsDetail.CorrespondenceAddress;
                                                    worksheet.Cells[incRowExcel, 77].Value = rsDetail.CorrespondenceCity;
                                                    worksheet.Cells[incRowExcel, 78].Value = rsDetail.CorrespondenceZipCode;
                                                    worksheet.Cells[incRowExcel, 79].Value = rsDetail.Propinsi;
                                                    worksheet.Cells[incRowExcel, 80].Value = rsDetail.CorrespondenceRT;
                                                    worksheet.Cells[incRowExcel, 81].Value = rsDetail.CorrespondenceRW;
                                                    worksheet.Cells[incRowExcel, 82].Value = rsDetail.CountryofCorrespondence;
                                                    worksheet.Cells[incRowExcel, 83].Value = rsDetail.DomicileAddress;
                                                    worksheet.Cells[incRowExcel, 84].Value = rsDetail.KodeDomisiliPropinsi;
                                                    worksheet.Cells[incRowExcel, 85].Value = rsDetail.DomicileCity;
                                                    worksheet.Cells[incRowExcel, 86].Value = rsDetail.DomicileZipCode;
                                                    worksheet.Cells[incRowExcel, 87].Value = rsDetail.DomicileRT;
                                                    worksheet.Cells[incRowExcel, 88].Value = rsDetail.DomicileRW;
                                                    worksheet.Cells[incRowExcel, 89].Value = rsDetail.CountryofDomicile;
                                                    worksheet.Cells[incRowExcel, 90].Value = rsDetail.IdentityAddress1;
                                                    worksheet.Cells[incRowExcel, 91].Value = rsDetail.IdentityCity1;
                                                    worksheet.Cells[incRowExcel, 92].Value = rsDetail.IdentityZipCode1;
                                                    worksheet.Cells[incRowExcel, 93].Value = rsDetail.IdentityProvince1;
                                                    worksheet.Cells[incRowExcel, 94].Value = rsDetail.IdentityCountry1;
                                                    worksheet.Cells[incRowExcel, 95].Value = rsDetail.IdentityAddress2;
                                                    worksheet.Cells[incRowExcel, 96].Value = rsDetail.IdentityCity2;
                                                    worksheet.Cells[incRowExcel, 97].Value = rsDetail.IdentityZipCode2;
                                                    worksheet.Cells[incRowExcel, 98].Value = rsDetail.IdentityProvince2;
                                                    worksheet.Cells[incRowExcel, 99].Value = rsDetail.IdentityCountry2;
                                                    worksheet.Cells[incRowExcel, 100].Value = rsDetail.IdentityAddress3;
                                                    worksheet.Cells[incRowExcel, 101].Value = rsDetail.IdentityCity3;
                                                    worksheet.Cells[incRowExcel, 102].Value = rsDetail.IdentityZipCode3;
                                                    worksheet.Cells[incRowExcel, 103].Value = rsDetail.IdentityProvince3;
                                                    worksheet.Cells[incRowExcel, 104].Value = rsDetail.IdentityCountry3;
                                                    worksheet.Cells[incRowExcel, 105].Value = rsDetail.IdentityType1;
                                                    worksheet.Cells[incRowExcel, 106].Value = rsDetail.IdentityNumber1;
                                                    worksheet.Cells[incRowExcel, 107].Value = rsDetail.Identity1RT;
                                                    worksheet.Cells[incRowExcel, 108].Value = rsDetail.Identity1RW;
                                                    worksheet.Cells[incRowExcel, 109].Value = Convert.ToDateTime(rsDetail.RegistrationDateIdentitasInd1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 110].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 111].Value = rsDetail.IdentityType2;
                                                    worksheet.Cells[incRowExcel, 112].Value = rsDetail.IdentityNumber2;
                                                    worksheet.Cells[incRowExcel, 113].Value = Convert.ToDateTime(rsDetail.RegistrationDateIdentitasInd2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 114].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 115].Value = rsDetail.IdentityType3;
                                                    worksheet.Cells[incRowExcel, 116].Value = rsDetail.IdentityNumber3;
                                                    worksheet.Cells[incRowExcel, 117].Value = Convert.ToDateTime(rsDetail.RegistrationDateIdentitasInd3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 118].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 119].Value = rsDetail.FATCAStatus;
                                                    worksheet.Cells[incRowExcel, 120].Value = rsDetail.TIN;
                                                    worksheet.Cells[incRowExcel, 121].Value = rsDetail.TINIssuanceCountry;
                                                    worksheet.Cells[incRowExcel, 122].Value = rsDetail.GIIN;
                                                    worksheet.Cells[incRowExcel, 123].Value = rsDetail.SubstantialOwnerName;
                                                    worksheet.Cells[incRowExcel, 124].Value = rsDetail.SubstantialOwnerAddress;
                                                    worksheet.Cells[incRowExcel, 125].Value = rsDetail.SubstantialOwnerTIN;
                                                    worksheet.Cells[incRowExcel, 126].Value = rsDetail.AlamatKantorInd;
                                                    worksheet.Cells[incRowExcel, 127].Value = rsDetail.KodeKotaKantorInd;
                                                    worksheet.Cells[incRowExcel, 128].Value = rsDetail.KodePosKantorInd;
                                                    worksheet.Cells[incRowExcel, 129].Value = rsDetail.KodePropinsiKantorInd;
                                                    worksheet.Cells[incRowExcel, 130].Value = rsDetail.KodeCountryofKantor;
                                                    worksheet.Cells[incRowExcel, 131].Value = rsDetail.Description;

                                                    worksheet.Cells[incRowExcel, 132].Value = rsDetail.EntryUsersID;
                                                    worksheet.Cells[incRowExcel, 133].Value = rsDetail.EntryTime;
                                                    worksheet.Cells[incRowExcel, 134].Value = rsDetail.UpdateUsersID;
                                                    worksheet.Cells[incRowExcel, 135].Value = rsDetail.UpdateTime;
                                                    worksheet.Cells[incRowExcel, 136].Value = rsDetail.ApprovedUsersID;
                                                    worksheet.Cells[incRowExcel, 137].Value = rsDetail.ApprovedTime;
                                                    worksheet.Cells[incRowExcel, 138].Value = rsDetail.VoidUsersID;
                                                    worksheet.Cells[incRowExcel, 139].Value = rsDetail.VoidTime;
                                                    worksheet.Cells[incRowExcel, 140].Value = rsDetail.SuspendBy;
                                                    worksheet.Cells[incRowExcel, 141].Value = rsDetail.SuspendTime;
                                                    worksheet.Cells[incRowExcel, 142].Value = rsDetail.UnSuspendBy;
                                                    worksheet.Cells[incRowExcel, 143].Value = rsDetail.UnSuspendTime;
                                                    _endRowDetail = incRowExcel;
                                                    incRowExcel++;

                                                    //worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InternalName;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.SellingAgent;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.NPWP;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.RegistrationNPWP;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Email;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.PhoneNumber;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.MobilePhone;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Fax;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.SID;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.IFUACode;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.InvestorsRiskProfile;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.KYCRiskProfile;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.AssetOwner;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.StatementType;
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.SellingAgentCode;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.DormantDate;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.Description;
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.Affiliated;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.AffiliatedWith;
                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail.Suspended;
                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail.BankName1;
                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail.BankAccountName1;
                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail.BankAccountNumber1;
                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail.BankBranchName1;
                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail.Currency1;
                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail.BICCode1;
                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail.BIMemberCode1;
                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail.BankName2;
                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail.BankAccountName2;
                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail.BankAccountNumber2;
                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail.BankBranchName2;
                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail.Currency2;
                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail.BICCode2;
                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail.BIMemberCode2;
                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail.BankName3;
                                                    worksheet.Cells[incRowExcel, 39].Value = rsDetail.BankAccountName3;
                                                    worksheet.Cells[incRowExcel, 40].Value = rsDetail.BankAccountNumber3;
                                                    worksheet.Cells[incRowExcel, 41].Value = rsDetail.BankBranchName3;
                                                    worksheet.Cells[incRowExcel, 42].Value = rsDetail.Currency3;
                                                    worksheet.Cells[incRowExcel, 43].Value = rsDetail.BICCode3;
                                                    worksheet.Cells[incRowExcel, 44].Value = rsDetail.BIMemberCode3;
                                                    worksheet.Cells[incRowExcel, 45].Value = rsDetail.BankRDN;
                                                    worksheet.Cells[incRowExcel, 46].Value = rsDetail.RDNAccountName;
                                                    worksheet.Cells[incRowExcel, 47].Value = rsDetail.RDNAccountNumber;
                                                    worksheet.Cells[incRowExcel, 48].Value = rsDetail.CompanyName;
                                                    worksheet.Cells[incRowExcel, 49].Value = rsDetail.CompanyAddress;
                                                    worksheet.Cells[incRowExcel, 50].Value = rsDetail.CompanyZipCode;
                                                    worksheet.Cells[incRowExcel, 51].Value = rsDetail.CompanyCity;
                                                    worksheet.Cells[incRowExcel, 52].Value = rsDetail.CompanyLegalDomicile;
                                                    worksheet.Cells[incRowExcel, 53].Value = rsDetail.CountryofDomicile;
                                                    worksheet.Cells[incRowExcel, 54].Value = rsDetail.CompanyType;
                                                    worksheet.Cells[incRowExcel, 55].Value = rsDetail.CompanyCharacteristic;
                                                    worksheet.Cells[incRowExcel, 56].Value = rsDetail.CompanyIncomePerAnnum;
                                                    worksheet.Cells[incRowExcel, 57].Value = rsDetail.CompanySourceOfFunds;
                                                    worksheet.Cells[incRowExcel, 58].Value = rsDetail.CompanyInvestmentObjective;
                                                    worksheet.Cells[incRowExcel, 59].Value = rsDetail.SKDNumber;
                                                    worksheet.Cells[incRowExcel, 60].Value = Convert.ToDateTime(rsDetail.ExpiredDateSKD).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 61].Value = rsDetail.ArticleOfAssociation;
                                                    worksheet.Cells[incRowExcel, 62].Value = rsDetail.SIUPNumber;
                                                    worksheet.Cells[incRowExcel, 63].Value = Convert.ToDateTime(rsDetail.SIUPExpirationDate).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 64].Value = rsDetail.FirstNameOfficer1;
                                                    worksheet.Cells[incRowExcel, 65].Value = rsDetail.MiddleNameOfficer1;
                                                    worksheet.Cells[incRowExcel, 66].Value = rsDetail.LastNameOfficer1;
                                                    worksheet.Cells[incRowExcel, 67].Value = rsDetail.PositionOfficer1;
                                                    worksheet.Cells[incRowExcel, 68].Value = rsDetail.PhoneNumberOfficer1;
                                                    worksheet.Cells[incRowExcel, 69].Value = rsDetail.EmailOfficer1;
                                                    worksheet.Cells[incRowExcel, 70].Value = rsDetail.IDType1Officer1;
                                                    worksheet.Cells[incRowExcel, 71].Value = rsDetail.IDNumber1Officer1;
                                                    worksheet.Cells[incRowExcel, 72].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 73].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 74].Value = rsDetail.IDType2Officer1;
                                                    worksheet.Cells[incRowExcel, 75].Value = rsDetail.IDNumber2Officer1;
                                                    worksheet.Cells[incRowExcel, 76].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 77].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 78].Value = rsDetail.IDType3Officer1;
                                                    worksheet.Cells[incRowExcel, 79].Value = rsDetail.IDNumber3Officer1;
                                                    worksheet.Cells[incRowExcel, 80].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 81].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 82].Value = rsDetail.IDType4Officer1;
                                                    worksheet.Cells[incRowExcel, 83].Value = rsDetail.IDNumber4Officer1;
                                                    worksheet.Cells[incRowExcel, 84].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 85].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 86].Value = rsDetail.FirstNameOfficer2;
                                                    worksheet.Cells[incRowExcel, 87].Value = rsDetail.MiddleNameOfficer2;
                                                    worksheet.Cells[incRowExcel, 88].Value = rsDetail.LastNameOfficer2;
                                                    worksheet.Cells[incRowExcel, 89].Value = rsDetail.PositionOfficer2;
                                                    worksheet.Cells[incRowExcel, 90].Value = rsDetail.IDType1Officer2;
                                                    worksheet.Cells[incRowExcel, 91].Value = rsDetail.IDNumber1Officer2;
                                                    worksheet.Cells[incRowExcel, 92].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 93].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 94].Value = rsDetail.IDType2Officer2;
                                                    worksheet.Cells[incRowExcel, 95].Value = rsDetail.IDNumber2Officer2;
                                                    worksheet.Cells[incRowExcel, 96].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 97].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 98].Value = rsDetail.IDType3Officer2;
                                                    worksheet.Cells[incRowExcel, 99].Value = rsDetail.IDNumber3Officer2;
                                                    worksheet.Cells[incRowExcel, 100].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 101].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 102].Value = rsDetail.IDType4Officer2;
                                                    worksheet.Cells[incRowExcel, 103].Value = rsDetail.IDNumber4Officer2;
                                                    worksheet.Cells[incRowExcel, 104].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 105].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 106].Value = Convert.ToDateTime(rsDetail.EstablishmentDate).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 107].Value = rsDetail.EstablishmentPlace;
                                                    worksheet.Cells[incRowExcel, 108].Value = rsDetail.CountryofEstablishment;
                                                    worksheet.Cells[incRowExcel, 109].Value = rsDetail.CityOfEstablishment;
                                                    worksheet.Cells[incRowExcel, 110].Value = rsDetail.CountryofCompany;
                                                    worksheet.Cells[incRowExcel, 111].Value = rsDetail.CompanyCityName;
                                                    worksheet.Cells[incRowExcel, 112].Value = rsDetail.CompanyAddress;
                                                    worksheet.Cells[incRowExcel, 113].Value = rsDetail.CompanyZipCode;
                                                    worksheet.Cells[incRowExcel, 114].Value = rsDetail.BusinessPhone;
                                                    worksheet.Cells[incRowExcel, 115].Value = rsDetail.AssetFor1Year;
                                                    worksheet.Cells[incRowExcel, 116].Value = rsDetail.AssetFor2Year;
                                                    worksheet.Cells[incRowExcel, 117].Value = rsDetail.AssetFor3Year;
                                                    worksheet.Cells[incRowExcel, 118].Value = rsDetail.OperatingProfitFor1Year;
                                                    worksheet.Cells[incRowExcel, 119].Value = rsDetail.OperatingProfitFor2Year;
                                                    worksheet.Cells[incRowExcel, 120].Value = rsDetail.OperatingProfitFor3Year;
                                                    worksheet.Cells[incRowExcel, 121].Value = rsDetail.FirstNameOfficer3;
                                                    worksheet.Cells[incRowExcel, 122].Value = rsDetail.MiddleNameOfficer3;
                                                    worksheet.Cells[incRowExcel, 123].Value = rsDetail.LastNameOfficer3;
                                                    worksheet.Cells[incRowExcel, 124].Value = rsDetail.PositionOfficer3;
                                                    worksheet.Cells[incRowExcel, 125].Value = rsDetail.IDType1Officer3;
                                                    worksheet.Cells[incRowExcel, 126].Value = rsDetail.IDNumber1Officer3;
                                                    worksheet.Cells[incRowExcel, 127].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 128].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 129].Value = rsDetail.IDType2Officer3;
                                                    worksheet.Cells[incRowExcel, 130].Value = rsDetail.IDNumber2Officer3;
                                                    worksheet.Cells[incRowExcel, 131].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 132].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 133].Value = rsDetail.IDType3Officer3;
                                                    worksheet.Cells[incRowExcel, 134].Value = rsDetail.IDNumber3Officer3;
                                                    worksheet.Cells[incRowExcel, 135].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 136].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 137].Value = rsDetail.IDType4Officer3;
                                                    worksheet.Cells[incRowExcel, 138].Value = rsDetail.IDNumber4Officer3;
                                                    worksheet.Cells[incRowExcel, 139].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 140].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 141].Value = rsDetail.FirstNameOfficer4;
                                                    worksheet.Cells[incRowExcel, 142].Value = rsDetail.MiddleNameOfficer4;
                                                    worksheet.Cells[incRowExcel, 143].Value = rsDetail.LastNameOfficer4;
                                                    worksheet.Cells[incRowExcel, 144].Value = rsDetail.PositionOfficer4;
                                                    worksheet.Cells[incRowExcel, 145].Value = rsDetail.IDType1Officer4;
                                                    worksheet.Cells[incRowExcel, 146].Value = rsDetail.IDNumber1Officer4;
                                                    worksheet.Cells[incRowExcel, 147].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 148].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 149].Value = rsDetail.IDType2Officer4;
                                                    worksheet.Cells[incRowExcel, 150].Value = rsDetail.IDNumber2Officer4;
                                                    worksheet.Cells[incRowExcel, 151].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 152].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 153].Value = rsDetail.IDType3Officer4;
                                                    worksheet.Cells[incRowExcel, 154].Value = rsDetail.IDNumber3Officer4;
                                                    worksheet.Cells[incRowExcel, 155].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 156].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 157].Value = rsDetail.IDType4Officer4;
                                                    worksheet.Cells[incRowExcel, 158].Value = rsDetail.IDNumber4Officer4;
                                                    worksheet.Cells[incRowExcel, 159].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 160].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 161].Value = rsDetail.FATCAStatus;
                                                    worksheet.Cells[incRowExcel, 162].Value = rsDetail.TIN;
                                                    worksheet.Cells[incRowExcel, 163].Value = rsDetail.TINIssuanceCountry;
                                                    worksheet.Cells[incRowExcel, 164].Value = rsDetail.GIIN;
                                                    worksheet.Cells[incRowExcel, 165].Value = rsDetail.SubstantialOwnerName;
                                                    worksheet.Cells[incRowExcel, 166].Value = rsDetail.SubstantialOwnerAddress;
                                                    worksheet.Cells[incRowExcel, 167].Value = rsDetail.SubstantialOwnerTIN;
                                                    worksheet.Cells[incRowExcel, 168].Value = rsDetail.EntryUsersID;
                                                    worksheet.Cells[incRowExcel, 169].Value = rsDetail.EntryTime;
                                                    worksheet.Cells[incRowExcel, 170].Value = rsDetail.UpdateUsersID;
                                                    worksheet.Cells[incRowExcel, 171].Value = rsDetail.UpdateTime;
                                                    worksheet.Cells[incRowExcel, 172].Value = rsDetail.ApprovedUsersID;
                                                    worksheet.Cells[incRowExcel, 173].Value = rsDetail.ApprovedTime;
                                                    worksheet.Cells[incRowExcel, 174].Value = rsDetail.VoidUsersID;
                                                    worksheet.Cells[incRowExcel, 175].Value = rsDetail.VoidTime;
                                                    worksheet.Cells[incRowExcel, 176].Value = rsDetail.SuspendBy;
                                                    worksheet.Cells[incRowExcel, 177].Value = rsDetail.SuspendTime;
                                                    worksheet.Cells[incRowExcel, 178].Value = rsDetail.UnSuspendBy;
                                                    worksheet.Cells[incRowExcel, 179].Value = rsDetail.UnSuspendTime;
                                                    _endRowDetail = incRowExcel;
                                                    incRowExcel++;
                                                    worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                //area detail


                                            }
                                            incRowExcel = incRowExcel + 2;

                                            //_endRowDetail = incRowExcel;
                                            //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public string LaporanLabaRugi(string _userID, AccountingRpt _accountingRpt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                string FilePath = Tools.ReportsPath + "LaporanLabaRugi" + "_" + _userID + ".xlsx";
                File.Copy(Tools.ReportsTemplatePath + "\\03\\" + "03_LaporanLabaRugi.xlsx", FilePath, true);
                FileInfo existingFile = new FileInfo(FilePath);
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {

                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets[1];
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets[2];
                    using (SqlConnection DbCon02 = new SqlConnection(Tools.conString))
                    {
                        DbCon02.Open();
                        using (SqlCommand cmd02 = DbCon02.CreateCommand())
                        {
                            cmd02.CommandText = @"
                                Declare @PeriodPK int
                                Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= @ValueDateTo and  B.PeriodPK = @PeriodPK
	                            and B.status <> 3 and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < @ValueDateFrom  and  B.PeriodPK = @PeriodPK 
	                            and B.status <> 3 and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     and C.Type > 2
                                Order BY C.ID";
                            cmd02.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd02.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr02 = cmd02.ExecuteReader())
                            {
                                if (dr02.HasRows)
                                {
                                    List<AccountingRpt> rList = new List<AccountingRpt>();
                                    while (dr02.Read())
                                    {
                                        AccountingRpt rSingle = new AccountingRpt();
                                        rSingle.ID = Convert.ToString(dr02["ID"]);
                                        rSingle.Name = Convert.ToString(dr02["Name"]);
                                        rSingle.PreviousBaseBalance = Convert.ToDecimal(dr02["PreviousBaseBalance"]);
                                        rSingle.BaseDebitMutasi = Convert.ToDecimal(dr02["BaseDebitMutasi"]);
                                        rSingle.BaseCreditMutasi = Convert.ToDecimal(dr02["BaseCreditMutasi"]);
                                        rSingle.CurrentBaseBalance = Convert.ToDecimal(dr02["CurrentBaseBalance"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID2 =
                                     from r in rList
                                     orderby r.ID ascending
                                     group r by new { } into rGroup
                                     select rGroup;

                                    int incRowExcel2 = 1;
                                    int _IncRow2 = 11;
                                    foreach (var rsHeader in QueryByClientID2)
                                    {

                                        worksheet1.Cells[1, 1].Value = _host.Get_CompanyName();

                                        worksheet1.Cells[3, 1].Value = "As Of : " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet1.Cells[1, 6].Value = "Date : " + Convert.ToDateTime(_datetimeNow).ToString("dd-MMM-yyyy");
                                        worksheet1.Cells[2, 6].Value = "Time : " + Convert.ToDateTime(_datetimeNow).ToString("hh:mm:ss");

                                        worksheet1.Cells[6, 2].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM");
                                        worksheet1.Cells[6, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet2.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                            worksheet2.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                            worksheet2.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                            worksheet2.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                            worksheet2.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                            worksheet2.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                            worksheet2.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                            worksheet2.Calculate();

                                            incRowExcel2++;


                                            _IncRow2 = _IncRow2 + 2;
                                        }
                                        worksheet1.Calculate();
                                        int _IncRowA5 = incRowExcel2 + 1000;

                                    }

                                    worksheet2.PrinterSettings.FitToPage = true;
                                    worksheet2.PrinterSettings.FitToWidth = 1;
                                    worksheet2.PrinterSettings.FitToHeight = 0;
                                    worksheet2.PrinterSettings.PrintArea = worksheet2.Cells[1, 1, incRowExcel2 - 1, 6];
                                    worksheet2.Column(1).AutoFit();
                                    worksheet2.Column(2).AutoFit();
                                    worksheet2.Column(3).AutoFit();
                                    worksheet2.Column(4).AutoFit();
                                    worksheet2.Column(5).AutoFit();
                                    worksheet2.Column(6).AutoFit();

                                }


                            }

                        }

                    }


                    worksheet1.Calculate();
                    package.Save();
                    return FilePath;
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string LaporanLabaRugiComparison(string _userID, AccountingRpt _accountingRpt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                string FilePath = Tools.ReportsPath + "LaporanLabaRugiComparison" + "_" + _userID + ".xlsx";
                File.Copy(Tools.ReportsTemplatePath + "\\03\\" + "03_LaporanLabaRugiComparison.xlsx", FilePath, true);
                FileInfo existingFile = new FileInfo(FilePath);
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {

                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets[1];
                    string monthFrom, monthTo;
                    int _monthFrom, _monthTo;
                    monthFrom = Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("MM");
                    _monthFrom = Convert.ToInt32(monthFrom);

                    monthTo = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MM");
                    _monthTo = Convert.ToInt32(monthTo);

                    worksheet1.Cells[5, 1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    worksheet1.Column(2).Width = 0;
                    worksheet1.Column(3).Width = 0;
                    worksheet1.Column(4).Width = 0;
                    worksheet1.Column(5).Width = 0;
                    worksheet1.Column(6).Width = 0;
                    worksheet1.Column(7).Width = 0;
                    worksheet1.Column(8).Width = 0;
                    worksheet1.Column(9).Width = 0;
                    worksheet1.Column(10).Width = 0;
                    worksheet1.Column(11).Width = 0;
                    worksheet1.Column(12).Width = 0;
                    worksheet1.Column(13).Width = 0;
                    if (1 >= _monthFrom && 1 <= _monthTo)
                    {
                        string janFrom = "01/01/" + _accountingRpt.Period;
                        string janTo = "01/31/" + _accountingRpt.Period;
                        worksheet1.Column(2).Width = 20;

                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets[2];
                        using (SqlConnection DbCon02 = new SqlConnection(Tools.conString))
                        {


                            DbCon02.Open();
                            using (SqlCommand cmd02 = DbCon02.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd02.CommandText = @"
                               SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + janTo + @"' and  B.PeriodPK = @PeriodPK"
                                + _status +
                                @"and C.Type > 2 Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + janFrom + @"' and  B.PeriodPK = @PeriodPK 
	                            and B.status <> 3 and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     and C.Type > 2
                                Order BY C.ID";
                                cmd02.CommandTimeout = 0;
                                cmd02.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr02 = cmd02.ExecuteReader())
                                {
                                    if (dr02.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr02.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr02["ID"]);
                                            rSingle.Name = Convert.ToString(dr02["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr02["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr02["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr02["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr02["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         orderby r.ID ascending
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            worksheet1.Cells[1, 1].Value = _host.Get_CompanyName();

                                            worksheet1.Cells[3, 1].Value = "As Of : " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            worksheet1.Cells[1, 6].Value = "Date : " + Convert.ToDateTime(_datetimeNow).ToString("dd-MMM-yyyy");
                                            worksheet1.Cells[2, 6].Value = "Time : " + Convert.ToDateTime(_datetimeNow).ToString("hh:mm:ss");

                                            //worksheet1.Cells[6, 2].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM");
                                            //worksheet1.Cells[6, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet2.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet2.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet2.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet2.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet2.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet2.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet2.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet2.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet2.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet2.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet2.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet2.PrinterSettings.FitToPage = true;
                                        worksheet2.PrinterSettings.FitToWidth = 1;
                                        worksheet2.PrinterSettings.FitToHeight = 0;
                                        worksheet2.PrinterSettings.PrintArea = worksheet2.Cells[1, 1, incRowExcel2, 6];
                                        worksheet2.Column(1).Width = 15;
                                        worksheet2.Column(2).Width = 15;
                                        worksheet2.Column(3).Width = 15;
                                        worksheet2.Column(4).Width = 15;
                                        worksheet2.Column(5).Width = 15;
                                        worksheet2.Column(6).Width = 15;

                                    }


                                }

                            }

                        }
                    }


                    if (2 >= _monthFrom && 2 <= _monthTo)
                    {
                        string febFrom = "02/01/" + _accountingRpt.Period;
                        string febTo = "02/28/" + _accountingRpt.Period;
                        worksheet1.Column(3).Width = 20;

                        ExcelWorksheet worksheet3 = package.Workbook.Worksheets[3];
                        using (SqlConnection DbCon03 = new SqlConnection(Tools.conString))
                        {
                            DbCon03.Open();
                            using (SqlCommand cmd03 = DbCon03.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd03.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + febTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + febFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     and C.Type > 2
                                Order BY C.ID";
                                cmd03.CommandTimeout = 0;
                                cmd03.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd03.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd03.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr03 = cmd03.ExecuteReader())
                                {
                                    if (dr03.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr03.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr03["ID"]);
                                            rSingle.Name = Convert.ToString(dr03["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr03["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr03["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr03["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr03["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet3.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet3.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet3.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet3.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet3.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet3.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet3.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet3.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet3.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet3.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet3.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet3.PrinterSettings.FitToPage = true;
                                        worksheet3.PrinterSettings.FitToWidth = 1;
                                        worksheet3.PrinterSettings.FitToHeight = 0;
                                        worksheet3.PrinterSettings.PrintArea = worksheet3.Cells[1, 1, incRowExcel2, 6];
                                        worksheet3.Column(1).AutoFit();
                                        worksheet3.Column(2).AutoFit();
                                        worksheet3.Column(3).AutoFit();
                                        worksheet3.Column(4).AutoFit();
                                        worksheet3.Column(5).AutoFit();
                                        worksheet3.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    if (3 >= _monthFrom && 3 <= _monthTo)
                    {
                        string marFrom = "03/01/" + _accountingRpt.Period;
                        string marTo = "03/31/" + _accountingRpt.Period;
                        worksheet1.Column(4).Width = 20;

                        ExcelWorksheet worksheet4 = package.Workbook.Worksheets[4];
                        using (SqlConnection DbCon04 = new SqlConnection(Tools.conString))
                        {
                            DbCon04.Open();
                            using (SqlCommand cmd04 = DbCon04.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd04.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + marTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + marFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd04.CommandTimeout = 0;
                                cmd04.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd04.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd04.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr04 = cmd04.ExecuteReader())
                                {
                                    if (dr04.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr04.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr04["ID"]);
                                            rSingle.Name = Convert.ToString(dr04["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr04["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr04["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr04["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr04["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet4.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet4.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet4.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet4.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet4.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet4.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet4.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet4.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet4.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet4.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet4.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet4.PrinterSettings.FitToPage = true;
                                        worksheet4.PrinterSettings.FitToWidth = 1;
                                        worksheet4.PrinterSettings.FitToHeight = 0;
                                        worksheet4.PrinterSettings.PrintArea = worksheet4.Cells[1, 1, incRowExcel2, 6];
                                        worksheet4.Column(1).AutoFit();
                                        worksheet4.Column(2).AutoFit();
                                        worksheet4.Column(3).AutoFit();
                                        worksheet4.Column(4).AutoFit();
                                        worksheet4.Column(5).AutoFit();
                                        worksheet4.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }

                    if (4 >= _monthFrom && 4 <= _monthTo)
                    {
                        string aprFrom = "04/01/" + _accountingRpt.Period;
                        string aprTo = "04/30/" + _accountingRpt.Period;
                        worksheet1.Column(5).Width = 20;

                        ExcelWorksheet worksheet5 = package.Workbook.Worksheets[5];
                        using (SqlConnection DbCon05 = new SqlConnection(Tools.conString))
                        {
                            DbCon05.Open();
                            using (SqlCommand cmd05 = DbCon05.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd05.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + aprTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + aprFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd05.CommandTimeout = 0;
                                cmd05.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd05.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd05.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr04 = cmd05.ExecuteReader())
                                {
                                    if (dr04.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr04.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr04["ID"]);
                                            rSingle.Name = Convert.ToString(dr04["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr04["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr04["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr04["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr04["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet5.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet5.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet5.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet5.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet5.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet5.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet5.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet5.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet5.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet5.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet5.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet5.PrinterSettings.FitToPage = true;
                                        worksheet5.PrinterSettings.FitToWidth = 1;
                                        worksheet5.PrinterSettings.FitToHeight = 0;
                                        worksheet5.PrinterSettings.PrintArea = worksheet5.Cells[1, 1, incRowExcel2, 6];
                                        worksheet5.Column(1).AutoFit();
                                        worksheet5.Column(2).AutoFit();
                                        worksheet5.Column(3).AutoFit();
                                        worksheet5.Column(4).AutoFit();
                                        worksheet5.Column(5).AutoFit();
                                        worksheet5.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    if (5 >= _monthFrom && 5 <= _monthTo)
                    {
                        string mayFrom = "05/01/" + _accountingRpt.Period;
                        string mayTo = "05/31/" + _accountingRpt.Period;
                        worksheet1.Column(6).Width = 20;

                        ExcelWorksheet worksheet6 = package.Workbook.Worksheets[6];
                        using (SqlConnection DbCon06 = new SqlConnection(Tools.conString))
                        {
                            DbCon06.Open();
                            using (SqlCommand cmd06 = DbCon06.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd06.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + mayTo + @"' and  B.PeriodPK = @PeriodPK"
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + mayFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd06.CommandTimeout = 0;
                                cmd06.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd06.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd06.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr06 = cmd06.ExecuteReader())
                                {
                                    if (dr06.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr06.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr06["ID"]);
                                            rSingle.Name = Convert.ToString(dr06["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr06["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr06["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr06["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr06["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet6.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet6.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet6.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet6.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet6.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet6.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet6.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet6.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet6.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet6.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet6.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet6.PrinterSettings.FitToPage = true;
                                        worksheet6.PrinterSettings.FitToWidth = 1;
                                        worksheet6.PrinterSettings.FitToHeight = 0;
                                        worksheet6.PrinterSettings.PrintArea = worksheet6.Cells[1, 1, incRowExcel2, 6];
                                        worksheet6.Column(1).AutoFit();
                                        worksheet6.Column(2).AutoFit();
                                        worksheet6.Column(3).AutoFit();
                                        worksheet6.Column(4).AutoFit();
                                        worksheet6.Column(5).AutoFit();
                                        worksheet6.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }




                    if (6 >= _monthFrom && 6 <= _monthTo)
                    {
                        string junFrom = "06/01/" + _accountingRpt.Period;
                        string junTo = "06/30/" + _accountingRpt.Period;
                        worksheet1.Column(7).Width = 20;

                        ExcelWorksheet worksheet7 = package.Workbook.Worksheets[7];
                        using (SqlConnection DbCon07 = new SqlConnection(Tools.conString))
                        {
                            DbCon07.Open();
                            using (SqlCommand cmd07 = DbCon07.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd07.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + junTo + @"' and  B.PeriodPK = @PeriodPK"
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + junFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd07.CommandTimeout = 0;
                                cmd07.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd07.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd07.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr07 = cmd07.ExecuteReader())
                                {
                                    if (dr07.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr07.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr07["ID"]);
                                            rSingle.Name = Convert.ToString(dr07["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr07["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr07["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr07["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr07["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet7.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet7.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet7.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet7.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet7.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet7.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet7.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet7.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet7.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet7.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet7.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet7.PrinterSettings.FitToPage = true;
                                        worksheet7.PrinterSettings.FitToWidth = 1;
                                        worksheet7.PrinterSettings.FitToHeight = 0;
                                        worksheet7.PrinterSettings.PrintArea = worksheet7.Cells[1, 1, incRowExcel2, 6];
                                        worksheet7.Column(1).AutoFit();
                                        worksheet7.Column(2).AutoFit();
                                        worksheet7.Column(3).AutoFit();
                                        worksheet7.Column(4).AutoFit();
                                        worksheet7.Column(5).AutoFit();
                                        worksheet7.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }

                    if (7 >= _monthFrom && 7 <= _monthTo)
                    {
                        string julFrom = "07/01/" + _accountingRpt.Period;
                        string julTo = "07/31/" + _accountingRpt.Period;
                        worksheet1.Column(8).Width = 20;

                        ExcelWorksheet worksheet8 = package.Workbook.Worksheets[8];
                        using (SqlConnection DbCon08 = new SqlConnection(Tools.conString))
                        {
                            DbCon08.Open();
                            using (SqlCommand cmd08 = DbCon08.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd08.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + julTo + @"' and  B.PeriodPK = @PeriodPK"
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + julFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd08.CommandTimeout = 0;
                                cmd08.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd08.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd08.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr08 = cmd08.ExecuteReader())
                                {
                                    if (dr08.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr08.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr08["ID"]);
                                            rSingle.Name = Convert.ToString(dr08["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr08["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr08["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr08["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr08["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet8.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet8.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet8.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet8.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet8.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet8.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet8.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet8.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet8.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet8.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet8.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet8.PrinterSettings.FitToPage = true;
                                        worksheet8.PrinterSettings.FitToWidth = 1;
                                        worksheet8.PrinterSettings.FitToHeight = 0;
                                        worksheet8.PrinterSettings.PrintArea = worksheet8.Cells[1, 1, incRowExcel2, 6];
                                        worksheet8.Column(1).AutoFit();
                                        worksheet8.Column(2).AutoFit();
                                        worksheet8.Column(3).AutoFit();
                                        worksheet8.Column(4).AutoFit();
                                        worksheet8.Column(5).AutoFit();
                                        worksheet8.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (8 >= _monthFrom && 8 <= _monthTo)
                    {
                        string augFrom = "08/01/" + _accountingRpt.Period;
                        string augTo = "08/31/" + _accountingRpt.Period;
                        worksheet1.Column(9).Width = 20;

                        ExcelWorksheet worksheet9 = package.Workbook.Worksheets[9];
                        using (SqlConnection DbCon09 = new SqlConnection(Tools.conString))
                        {
                            DbCon09.Open();
                            using (SqlCommand cmd09 = DbCon09.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd09.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + augTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + augFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd09.CommandTimeout = 0;
                                cmd09.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd09.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd09.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr09 = cmd09.ExecuteReader())
                                {
                                    if (dr09.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr09.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr09["ID"]);
                                            rSingle.Name = Convert.ToString(dr09["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr09["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr09["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr09["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr09["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet9.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet9.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet9.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet9.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet9.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet9.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet9.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet9.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet9.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet9.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet9.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet9.PrinterSettings.FitToPage = true;
                                        worksheet9.PrinterSettings.FitToWidth = 1;
                                        worksheet9.PrinterSettings.FitToHeight = 0;
                                        worksheet9.PrinterSettings.PrintArea = worksheet9.Cells[1, 1, incRowExcel2, 6];
                                        worksheet9.Column(1).AutoFit();
                                        worksheet9.Column(2).AutoFit();
                                        worksheet9.Column(3).AutoFit();
                                        worksheet9.Column(4).AutoFit();
                                        worksheet9.Column(5).AutoFit();
                                        worksheet9.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (9 >= _monthFrom && 9 <= _monthTo)
                    {
                        string sepFrom = "09/01/" + _accountingRpt.Period;
                        string sepTo = "09/30/" + _accountingRpt.Period;
                        worksheet1.Column(10).Width = 20;

                        ExcelWorksheet worksheet10 = package.Workbook.Worksheets[10];
                        using (SqlConnection DbCon10 = new SqlConnection(Tools.conString))
                        {
                            DbCon10.Open();
                            using (SqlCommand cmd10 = DbCon10.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd10.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + sepTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + sepFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd10.CommandTimeout = 0;
                                cmd10.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd10.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd10.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr10 = cmd10.ExecuteReader())
                                {
                                    if (dr10.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr10.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr10["ID"]);
                                            rSingle.Name = Convert.ToString(dr10["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr10["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr10["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr10["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr10["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet10.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet10.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet10.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet10.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet10.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet10.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet10.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet10.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet10.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet10.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet10.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet10.PrinterSettings.FitToPage = true;
                                        worksheet10.PrinterSettings.FitToWidth = 1;
                                        worksheet10.PrinterSettings.FitToHeight = 0;
                                        worksheet10.PrinterSettings.PrintArea = worksheet10.Cells[1, 1, incRowExcel2, 6];
                                        worksheet10.Column(1).AutoFit();
                                        worksheet10.Column(2).AutoFit();
                                        worksheet10.Column(3).AutoFit();
                                        worksheet10.Column(4).AutoFit();
                                        worksheet10.Column(5).AutoFit();
                                        worksheet10.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (10 >= _monthFrom && 10 <= _monthTo)
                    {
                        string octFrom = "10/01/" + _accountingRpt.Period;
                        string octTo = "10/31/" + _accountingRpt.Period;
                        worksheet1.Column(11).Width = 20;

                        ExcelWorksheet worksheet11 = package.Workbook.Worksheets[11];
                        using (SqlConnection DbCon11 = new SqlConnection(Tools.conString))
                        {
                            DbCon11.Open();
                            using (SqlCommand cmd11 = DbCon11.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd11.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + octTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + octFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd11.CommandTimeout = 0;
                                cmd11.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd11.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd11.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr11 = cmd11.ExecuteReader())
                                {
                                    if (dr11.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr11.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr11["ID"]);
                                            rSingle.Name = Convert.ToString(dr11["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr11["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr11["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr11["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr11["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet11.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet11.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet11.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet11.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet11.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet11.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet11.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet11.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet11.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet11.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet11.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet11.PrinterSettings.FitToPage = true;
                                        worksheet11.PrinterSettings.FitToWidth = 1;
                                        worksheet11.PrinterSettings.FitToHeight = 0;
                                        worksheet11.PrinterSettings.PrintArea = worksheet11.Cells[1, 1, incRowExcel2, 6];
                                        worksheet11.Column(1).AutoFit();
                                        worksheet11.Column(2).AutoFit();
                                        worksheet11.Column(3).AutoFit();
                                        worksheet11.Column(4).AutoFit();
                                        worksheet11.Column(5).AutoFit();
                                        worksheet11.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (11 >= _monthFrom && 11 <= _monthTo)
                    {
                        string novFrom = "11/01/" + _accountingRpt.Period;
                        string novTo = "11/30/" + _accountingRpt.Period;
                        worksheet1.Column(12).Width = 20;

                        ExcelWorksheet worksheet12 = package.Workbook.Worksheets[12];
                        using (SqlConnection DbCon12 = new SqlConnection(Tools.conString))
                        {
                            DbCon12.Open();
                            using (SqlCommand cmd12 = DbCon12.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd12.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + novTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + novFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd12.CommandTimeout = 0;
                                cmd12.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd12.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd12.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr12 = cmd12.ExecuteReader())
                                {
                                    if (dr12.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr12.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr12["ID"]);
                                            rSingle.Name = Convert.ToString(dr12["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr12["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr12["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr12["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr12["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet12.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet12.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet12.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet12.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet12.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet12.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet12.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet12.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet12.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet12.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet12.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet12.PrinterSettings.FitToPage = true;
                                        worksheet12.PrinterSettings.FitToWidth = 1;
                                        worksheet12.PrinterSettings.FitToHeight = 0;
                                        worksheet12.PrinterSettings.PrintArea = worksheet12.Cells[1, 1, incRowExcel2, 6];
                                        worksheet12.Column(1).AutoFit();
                                        worksheet12.Column(2).AutoFit();
                                        worksheet12.Column(3).AutoFit();
                                        worksheet12.Column(4).AutoFit();
                                        worksheet12.Column(5).AutoFit();
                                        worksheet12.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (12 >= _monthFrom && 12 <= _monthTo)
                    {
                        string decFrom = "12/01/" + _accountingRpt.Period;
                        string decTo = "12/31/" + _accountingRpt.Period;
                        worksheet1.Column(13).Width = 20;

                        ExcelWorksheet worksheet13 = package.Workbook.Worksheets[13];
                        using (SqlConnection DbCon13 = new SqlConnection(Tools.conString))
                        {
                            DbCon13.Open();
                            using (SqlCommand cmd13 = DbCon13.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd13.CommandText = @"
                                SELECT C.ID, C.Name, C.[Groups],C.[ParentPK],    
                                D.ID,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + decTo + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + decFrom + @"' and  B.PeriodPK = @PeriodPK "
                                + _status +
                                @" and C.Type > 2
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)        
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)   and C.Type > 2
                                Order BY C.ID";
                                cmd13.CommandTimeout = 0;
                                cmd13.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd13.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd13.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr13 = cmd13.ExecuteReader())
                                {
                                    if (dr13.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr13.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr13["ID"]);
                                            rSingle.Name = Convert.ToString(dr13["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr13["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr13["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr13["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr13["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet13.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet13.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet13.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet13.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet13.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet13.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet13.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet13.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet13.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet13.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet13.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet13.PrinterSettings.FitToPage = true;
                                        worksheet13.PrinterSettings.FitToWidth = 1;
                                        worksheet13.PrinterSettings.FitToHeight = 0;
                                        worksheet13.PrinterSettings.PrintArea = worksheet13.Cells[1, 1, incRowExcel2, 6];
                                        worksheet13.Column(1).AutoFit();
                                        worksheet13.Column(2).AutoFit();
                                        worksheet13.Column(3).AutoFit();
                                        worksheet13.Column(4).AutoFit();
                                        worksheet13.Column(5).AutoFit();
                                        worksheet13.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    package.Save();
                    return FilePath;
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean GenerateReportAccounting(string _userID, AccountingRpt _accountingRpt)
        {
            // yang uda dibenerin

            #region Account Activity
            if (_accountingRpt.ReportName.Equals("Account Activity"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            cmd.CommandText = @"
	                        --declare @Valuedatefrom datetime
                            --declare @ValueDateTo datetime
                            --set @Valuedatefrom = '08/01/2020'
                            --set @ValueDateTo ='08/31/2020'


                            Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            Declare @StartOfYear datetime
                            select @StartOfYear = DATEADD(yy, DATEDIFF(yy, 0, @Valuedatefrom), 0)

                            ------

                            DECLARE @AccountBalance TABLE
                            (
                            AccountPK INT,
                            StartBalance NUMERIC(22,4)
                            )


                            INSERT INTO @AccountBalance
                            ( AccountPK, StartBalance )
                            select DISTINCT AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,AccountPK) from Account where status in (1,2)

                            DECLARE @AccountActivity TABLE
                            (
                            AccountPK INT,
                            DocRef NVARCHAR(100),
                            AccountType INT,
                            JournalPK INT,
                            ValueDate DATETIME,
                            Reference NVARCHAR(100),
                            AccountID NVARCHAR(100),
                            AccountName NVARCHAR(100),
                            CurrencyID NVARCHAR(100),
                            OfficeID NVARCHAR(100),
                            DepartmentID NVARCHAR(100),
                            AgentID NVARCHAR(100),
                            ConsigneeID NVARCHAR(100),
                            InstrumentID NVARCHAR(100),
                            DetailDescription NVARCHAR(MAX),
                            DebitCredit NVARCHAR(5),
                            Amount NUMERIC(22,4),
                            Debit NUMERIC(22,4),
                            Credit NUMERIC(22,4),
                            Rate NUMERIC(22,4),
                            BaseDebit NUMERIC(22,4),
                            BaseCredit NUMERIC(22,4),
                            StartBalance NUMERIC(22,4)
                            )

                            INSERT INTO @AccountActivity
                            select B.AccountPK,B.DocRef,C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                            isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance      
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
                            left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
                            left join @AccountBalance J ON B.AccountPK  = J.AccountPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo  and B.AccountPK <> 0
                            and A.PeriodPK = @PeriodPK " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument + @"



                            INSERT INTO @AccountActivity
                            select B.AccountPK,'' DocRef,B.Type AccountType,0 JournalPK,@Valuedatefrom ValueDate,'' Reference,B.ID AccountID,B.Name AccountName,    
                            '' CurrencyID,'' OfficeID,'' DepartmentID,'' AgentID,'' ConsigneeID,    
                            '' InstrumentID,'' DetailDescription,'' DebitCredit,0 Amount,0 Debit,0 Credit,0 Rate,    
                            0 BaseDebit,0 BaseCredit,isnull(A.StartBalance,0) StartBalance 
                            from @AccountBalance A 
                            left join Account B on A.AccountPK = B.AccountPK and B.status in (1,2)
                            where A.AccountPK not in
                            (
	                            select AccountPK from @AccountActivity
                            ) and A.StartBalance <> 0 " + _paramAccount + @"


                            select * from @AccountActivity "
                                                            ;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivity" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountActivity" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {
                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            //rSingle.RefNo = dr0["RefNo"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.DocRef = dr0["DocRef"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DocRef"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByAccountID =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.journalPK ascending
                                            group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByAccountID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = _accountingRpt.ValueDateTo;
                                            //worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 8].Value = "BEG BALANCE :";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.StartBalance;
                                            //_rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "DOC REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "REF";
                                            worksheet.Cells[incRowExcel, 5].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 6].Value = "DEPT";
                                            worksheet.Cells[incRowExcel, 7].Value = "INST";
                                            worksheet.Cells[incRowExcel, 8].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 9].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 10].Value = "BALANCE";

                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                            }



                                            _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                            }

                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 5].Value = "BEG BALANCE :";
                                            if (_accountingRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";

                                            }
                                            else if (_accountingRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                            }
                                            else if (_accountingRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                            }
                                            else if (_accountingRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";

                                            }
                                            worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DocRef;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DepartmentID;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BaseCredit;
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Formula = "J" + _rowEndBalance + "+H" + incRowExcel + "-I" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Formula = "J" + _rowEndBalance + "-H" + incRowExcel + "+I" + incRowExcel;
                                                }
                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                //worksheet.Cells[incRowExcel, 10].Calculate();
                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }
                                                _no++;


                                            }

                                            worksheet.Cells["J" + _rowEndBalance + ":J" + _rowEndBalance].Calculate();
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:J";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Account Activity Plain
            else if (_accountingRpt.ReportName.Equals("Account Activity Plain"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramAccount = "";
                            string _paramOffice = "";
                            string _paramDepartment = "";
                            string _paramAgent = "";
                            string _paramConsignee = "";
                            string _paramInstrument = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                            {
                                _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                            }
                            else
                            {
                                _paramAccount = "";
                            }

                            if (!_host.findString(_accountingRpt.OfficeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.OfficeFrom))
                            {
                                _paramOffice = "And B.OfficePK  in ( " + _accountingRpt.OfficeFrom + " ) ";
                            }
                            else
                            {
                                _paramOffice = "";
                            }

                            if (!_host.findString(_accountingRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And B.DepartmentPK  in ( " + _accountingRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgent = "And B.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            if (!_host.findString(_accountingRpt.ConsigneeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.ConsigneeFrom))
                            {
                                _paramConsignee = "And B.ConsigneePK  in ( " + _accountingRpt.ConsigneeFrom + " ) ";
                            }
                            else
                            {
                                _paramConsignee = "";
                            }


                            if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and A.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                            }
                            cmd.CommandText = @"
                              --declare @Valuedatefrom datetime
                            --declare @ValueDateTo datetime
                            --set @Valuedatefrom = '08/01/2020'
                            --set @ValueDateTo ='08/31/2020'


                            Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            Declare @StartOfYear datetime
                            select @StartOfYear = DATEADD(yy, DATEDIFF(yy, 0, @Valuedatefrom), 0)

                            ------

                            DECLARE @AccountBalance TABLE
                            (
                            AccountPK INT,
                            StartBalance NUMERIC(22,4)
                            )


                            INSERT INTO @AccountBalance
                            ( AccountPK, StartBalance )
                            select DISTINCT AccountPK,[dbo].[FGetStartAccountBalance](@ValueDateFrom,AccountPK) from Account where status in (1,2)

                            DECLARE @AccountActivity TABLE
                            (
                            AccountPK INT,
                            DocRef NVARCHAR(100),
                            AccountType INT,
                            JournalPK INT,
                            ValueDate DATETIME,
                            Reference NVARCHAR(100),
                            AccountID NVARCHAR(100),
                            AccountName NVARCHAR(100),
                            CurrencyID NVARCHAR(100),
                            OfficeID NVARCHAR(100),
                            DepartmentID NVARCHAR(100),
                            AgentID NVARCHAR(100),
                            ConsigneeID NVARCHAR(100),
                            InstrumentID NVARCHAR(100),
                            DetailDescription NVARCHAR(MAX),
                            DebitCredit NVARCHAR(5),
                            Amount NUMERIC(22,4),
                            Debit NUMERIC(22,4),
                            Credit NUMERIC(22,4),
                            Rate NUMERIC(22,4),
                            BaseDebit NUMERIC(22,4),
                            BaseCredit NUMERIC(22,4),
                            StartBalance NUMERIC(22,4)
                            )

                            INSERT INTO @AccountActivity
                            select B.AccountPK,B.DocRef,C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName,    
                            isnull(D.ID,'') CurrencyID,isnull(E.ID,'') OfficeID,isnull(F.ID,'') DepartmentID,isnull(G.ID,'') AgentID,isnull(H.ID,'') ConsigneeID,    
                            isnull(I.ID,'') InstrumentID,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate,    
                            B.BaseDebit,B.BaseCredit,isnull(J.StartBalance,0) StartBalance      
                            from journal A    
                            left join journalDetail B on A.JournalPK = B.JournalPK    
                            left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)    
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in (1,2)    
                            left join Office E on B.OfficePK = E.OfficePK and E.status in (1,2)    
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in (1,2)    
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in (1,2)    
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in (1,2)    
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
                            left join @AccountBalance J ON B.AccountPK  = J.AccountPK   
                            Where A.ValueDate Between @ValueDateFrom and @ValueDateTo  and B.AccountPK <> 0
                            and A.PeriodPK = @PeriodPK " + _status + _paramAccount + _paramOffice + _paramDepartment + _paramAgent + _paramConsignee + _paramInstrument + @"



                            INSERT INTO @AccountActivity
                            select B.AccountPK,'' DocRef,B.Type AccountType,0 JournalPK,@Valuedatefrom ValueDate,'' Reference,B.ID AccountID,B.Name AccountName,    
                            '' CurrencyID,'' OfficeID,'' DepartmentID,'' AgentID,'' ConsigneeID,    
                            '' InstrumentID,'' DetailDescription,'' DebitCredit,0 Amount,0 Debit,0 Credit,0 Rate,    
                            0 BaseDebit,0 BaseCredit,isnull(A.StartBalance,0) StartBalance 
                            from @AccountBalance A 
                            left join Account B on A.AccountPK = B.AccountPK and B.status in (1,2)
                            where A.AccountPK not in
                            (
	                            select AccountPK from @AccountActivity
                            ) and A.StartBalance <> 0 " + _paramAccount + @"


                            select * from @AccountActivity ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@AccountFrom", _accountingRpt.AccountFrom);
                            cmd.Parameters.AddWithValue("@OfficeFrom", _accountingRpt.OfficeFrom);
                            cmd.Parameters.AddWithValue("@DepartmentFrom", _accountingRpt.DepartmentFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _accountingRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@ConsigneeFrom", _accountingRpt.ConsigneeFrom);
                            cmd.Parameters.AddWithValue("@InstrumentFrom", _accountingRpt.InstrumentFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AccountActivityPlain" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AccountActivityPlain" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Account Activity Plain");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AccountActivity> rList = new List<AccountActivity>();
                                        while (dr0.Read())
                                        {

                                            AccountActivity rSingle = new AccountActivity();
                                            rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                            rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.DocRef = dr0["DocRef"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DocRef"]);
                                            rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                            rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                            rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                            rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                            rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                            rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                            rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                            rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                            rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                            rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.AccountID, r.ValueDate ascending
                                         group r by new { r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "ACC : ";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "DATEFROM :";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 8].Value = _accountingRpt.ValueDateFrom;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "CURR ID : ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CurrencyID;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "DATETO :";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 8].Value = _accountingRpt.ValueDateTo;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "DOC REF";
                                            worksheet.Cells[incRowExcel, 4].Value = "REF";
                                            worksheet.Cells[incRowExcel, 5].Value = "DESC";
                                            worksheet.Cells[incRowExcel, 6].Value = "BASE DEBIT";
                                            worksheet.Cells[incRowExcel, 7].Value = "BASE CREDIT";
                                            worksheet.Cells[incRowExcel, 8].Value = "BALANCE";
                                            string _range = "A" + incRowExcel + ":H" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                            }


                                            _range = "A" + incRowExcel + ":H" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                            }

                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 5].Value = "BEG BALANCE";
                                            if (_accountingRpt.DecimalPlaces == 0)
                                            {

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 2)
                                            {

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 4)
                                            {

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_accountingRpt.DecimalPlaces == 6)
                                            {

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {

                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                            }
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":H" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DocRef;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DetailDescription;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseDebit;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseCredit;
                                                if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Formula = "H" + _rowEndBalance + "+F" + incRowExcel + "-G" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 8].Formula = "H" + _rowEndBalance + "-F" + incRowExcel + "+G" + incRowExcel;
                                                }

                                                if (_accountingRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else if (_accountingRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                }
                                                //worksheet.Cells[incRowExcel, 7].Calculate();

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":H" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                                //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                                //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                                //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            worksheet.Cells["G" + _rowEndBalance + ":H" + _rowEndBalance].Calculate();
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            incRowExcel = incRowExcel + 1;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                            //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                            //incRowExcel = incRowExcel + 5;
                                            //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                            //worksheet.Cells[incRowExcel, 2].Value = ")";
                                            //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                            //worksheet.Cells[incRowExcel, 6].Value = ")";
                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:H";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];

                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 ACCOUNT ACTIVITY PLAIN";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        if (_accountingRpt.ValueDateTo <= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                        }
                                        else
                                        {
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region GL Piutang Revenue
            else if (_accountingRpt.ReportName.Equals("GL Piutang Revenue"))
           {
               try
               {
                   using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                   {
                       DbCon.Open();
                       using (SqlCommand cmd = DbCon.CreateCommand())
                       {
                           string _status = "";
                           string _paramInstrument = "";
                           string _paramAccount = "";
                           string _paramAccountBy = "";
                           string _accID = "";
                           DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                           if (!_host.findString(_accountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.InstrumentFrom))
                           {
                               _paramInstrument = "And B.InstrumentPK  in ( " + _accountingRpt.InstrumentFrom + " ) ";
                           }
                           else
                           {
                               _paramInstrument = "";
                           }

                           if (!_host.findString(_accountingRpt.AccountFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AccountFrom))
                           {
                               _paramAccount = "And B.AccountPK  in ( " + _accountingRpt.AccountFrom + " ) ";
                           }
                           else
                           {
                               _paramAccount = "";
                           }
                           if (_accountingRpt.Status == 1)
                           {
                               _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 0  ";
                           }
                           else if (_accountingRpt.Status == 2)
                           {
                               _status = " and A.Status = 2 and A.Posted = 1 and A.Reversed = 1  ";
                           }
                           else if (_accountingRpt.Status == 3)
                           {
                               _status = " and A.Status = 2 and A.Posted = 0 and A.Reversed = 0  ";
                           }
                           else if (_accountingRpt.Status == 4)
                           {
                               _status = " and A.Status = 1  ";
                           }
                           else if (_accountingRpt.Status == 5)
                           {
                               _status = " and (A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4) ";
                           }
                           else if (_accountingRpt.Status == 6)
                           {
                               _status = " and (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Reversed = 0 and A.status not in (3,4)  ";
                           }

                           if (_accountingRpt.AccountBy == 1)
                           {
                               _paramAccountBy = " C.AccountPK = 88 ";
                           }
                           else if (_accountingRpt.AccountBy == 2)
                           {
                               _paramAccountBy = " C.AccountPK = 273 ";
                           }
                           cmd.CommandText = @"
                            Declare @PeriodPK int
                            Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                            select C.Type AccountType,A.JournalPK,A.ValueDate,A.Reference,C.ID AccountID,C.Name AccountName, 
                            D.ID CurrencyID,isnull(E.ID,'Belum Dialokasi') AS OfficeID,isnull(F.ID,'Belum Dialokasi') AS DepartmentID,isnull(G.ID,'Belum Dialokasi') AS AgentID,
                            isnull(H.ID,'Belum Dialokasi') AS ConsigneeID, 
                            isnull(I.ID,'Belum Dialokasi') AS InstrumentID,isnull(I.Name,'Belum Dialokasi') AS InstrumentName,B.DetailDescription,B.DebitCredit,B.Amount,B.Debit,B.Credit,B.CurrencyRate Rate, 
                            B.BaseDebit,B.BaseCredit,[dbo].[FGetStartAccountBalanceByInstrumentPK](@ValueDateFrom,B.AccountPK,B.InstrumentPK) StartBalance 
                            from journal A 
                            left join journalDetail B on A.JournalPK = B.JournalPK 
                            left join Account C on B.AccountPK = C.AccountPK and C.status in(1,2)
                            left join Currency D on B.CurrencyPK = D.CurrencyPK and D.status in(1,2)
                            left join Office E on B.OfficePK = E.OfficePK and E.status in(1,2) 
                            left join Department F on B.DepartmentPK = F.DepartmentPK and F.status in(1,2)
                            left join Agent G on B.AgentPK = G.AgentPK and G.status in(1,2)
                            left join Consignee H on B.consigneePK = H.ConsigneePK and H.status in(1,2)
                            left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.status in(1,2)
                            Where " + _paramAccountBy + @"and A.ValueDate Between @ValueDateFrom and @ValueDateTo  and A.PeriodPK = @PeriodPK  " +
                             _status + _paramInstrument;
                           cmd.CommandTimeout = 0;
                           cmd.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                           cmd.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);

                           using (SqlDataReader dr0 = cmd.ExecuteReader())
                           {
                               if (!dr0.HasRows)
                               {
                                   return false;
                               }
                               else
                               {
                                   string filePath;
                                   string pdfPath;
                                   if (_accountingRpt.AccountBy == 1)
                                   {
                                       filePath = Tools.ReportsPath + "GLPiutang" + "_" + _userID + ".xlsx";
                                       pdfPath = Tools.ReportsPath + "GLPiutang" + "_" + _userID + ".pdf";
                                   }
                                   else
                                   {
                                       filePath = Tools.ReportsPath + "GLRevenue" + "_" + _userID + ".xlsx";
                                       pdfPath = Tools.ReportsPath + "GLRevenue" + "_" + _userID + ".pdf";
                                   }

                                   FileInfo excelFile = new FileInfo(filePath);
                                   if (excelFile.Exists)
                                   {
                                       excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                       excelFile = new FileInfo(filePath);
                                   }

                                   // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                   using (ExcelPackage package = new ExcelPackage(excelFile))
                                   {
                                       package.Workbook.Properties.Title = "AccountingReport";
                                       package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                       package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                       package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                       package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                       package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                       ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("GL Piutang");


                                       //ATUR DATA GROUPINGNYA DULU
                                       List<GLPiutang> rList = new List<GLPiutang>();
                                       while (dr0.Read())
                                       {

                                           GLPiutang rSingle = new GLPiutang();
                                           rSingle.AccountType = dr0["AccountType"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt16(dr0["AccountType"]);
                                           rSingle.StartBalance = dr0["StartBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["StartBalance"]);
                                           rSingle.journalPK = dr0["journalPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["journalPK"]);
                                           rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                           rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                           rSingle.DetailDescription = dr0["DetailDescription"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DetailDescription"]);
                                           rSingle.AccountID = dr0["AccountID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountID"]);
                                           rSingle.AccountName = dr0["AccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AccountName"]);
                                           rSingle.CurrencyID = dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]);
                                           rSingle.DebitCredit = dr0["DebitCredit"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DebitCredit"]);
                                           rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                           rSingle.Debit = dr0["Debit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Debit"]);
                                           rSingle.Credit = dr0["Credit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Credit"]);
                                           rSingle.Rate = dr0["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Rate"]);
                                           rSingle.BaseDebit = dr0["BaseDebit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseDebit"]);
                                           rSingle.BaseCredit = dr0["BaseCredit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BaseCredit"]);
                                           rSingle.OfficeID = dr0["OfficeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OfficeID"]);
                                           rSingle.DepartmentID = dr0["DepartmentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DepartmentID"]);
                                           rSingle.AgentID = dr0["AgentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AgentID"]);
                                           rSingle.ConsigneeID = dr0["ConsigneeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ConsigneeID"]);
                                           rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                           rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                           rList.Add(rSingle);

                                       }



                                       var GroupByReference =
                                        from r in rList
                                        orderby r.ValueDate ascending
                                        group r by new { r.InstrumentID, r.InstrumentName, r.AccountID, r.AccountName, r.CurrencyID, r.StartBalance } into rGroup
                                        select rGroup;

                                       int incRowExcel = 0;
                                       if (_accountingRpt.AccountBy == 1)
                                       {
                                           _accID = "10401.00001";
                                       }
                                       else if (_accountingRpt.AccountBy == 2)
                                       {
                                           _accID = "50101.00001";
                                       }


                                       var _ID = Convert.ToString(_accID);
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "DATEFROM :";
                                       worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                       worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateFrom;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "DATETO :";
                                       worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                       worksheet.Cells[incRowExcel, 2].Value = _accountingRpt.ValueDateTo;
                                       incRowExcel++;

                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "ACC ID : ";
                                       worksheet.Cells[incRowExcel, 2].Value = _accID;
                                       worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                       incRowExcel++;
                                       worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                       worksheet.Cells[incRowExcel, 1].Value = "ACC NAME : ";
                                       worksheet.Cells[incRowExcel, 2].Value = "Management Fee";
                                       worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                       incRowExcel++;

                                       int _rowEndBalance = 0;
                                       foreach (var rsHeader in GroupByReference)
                                       {
                                           incRowExcel++;
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT ID : ";
                                           worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                           worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                           worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;
                                           incRowExcel++;
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT NAME : ";
                                           worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentName;
                                           incRowExcel++;
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           incRowExcel++;
                                           worksheet.Cells[incRowExcel, 1].Value = "DATE";
                                           worksheet.Cells[incRowExcel, 2].Value = "REFERENCE NO";
                                           worksheet.Cells[incRowExcel, 3].Value = "DESCRIPTION";
                                           worksheet.Cells[incRowExcel, 4].Value = "BASE DEBIT MUTASI";
                                           worksheet.Cells[incRowExcel, 5].Value = "BASE CREDIT MUTASI";
                                           worksheet.Cells[incRowExcel, 6].Value = "ENDING BALANCE";
                                           string _range = "A" + incRowExcel + ":F" + incRowExcel;
                                           using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                           {
                                               //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                               r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                               r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                               r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                               r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                               r.Style.Font.Size = 11;
                                               r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                               r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                               r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                               r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                               r.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                           }


                                           _range = "A" + incRowExcel + ":F" + incRowExcel;
                                           using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                           {
                                               //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                               r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                               r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                               r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                               r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                               r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                               r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                               //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                               r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                               r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                               r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                               r.Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                           }

                                           incRowExcel++;
                                           worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                           worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                           worksheet.Cells[incRowExcel, 3].Value = "BEG BALANCE";
                                           if (_accountingRpt.DecimalPlaces == 0)
                                           {
                                               worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                           }
                                           else if (_accountingRpt.DecimalPlaces == 2)
                                           {

                                               worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                           }
                                           else if (_accountingRpt.DecimalPlaces == 4)
                                           {

                                               worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";

                                           }
                                           else if (_accountingRpt.DecimalPlaces == 6)
                                           {

                                               worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";

                                           }
                                           else
                                           {

                                               worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";

                                           }
                                           worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.StartBalance;
                                           _rowEndBalance = incRowExcel;

                                           incRowExcel++;
                                           //int _no = 1;

                                           int _startRowDetail = incRowExcel;
                                           //int _endRowDetail = 0;
                                           //end area header

                                           foreach (var rsDetail in rsHeader)
                                           {

                                               _range = "A" + incRowExcel + ":F" + incRowExcel;
                                               using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                               {
                                                   r.Style.Font.Size = 11;
                                                   r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                   r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                   r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                   r.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                               }
                                               //area detail

                                               //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                               //worksheet.Cells[incRowExcel, 1].Value = _no;
                                               worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                               worksheet.Cells[incRowExcel, 1].Value = rsDetail.ValueDate;
                                               worksheet.Cells[incRowExcel, 2].Value = rsDetail.Reference;
                                               worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                               worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                               worksheet.Cells[incRowExcel, 4].Value = rsDetail.BaseDebit;
                                               worksheet.Cells[incRowExcel, 5].Value = rsDetail.BaseCredit;
                                               if (rsDetail.AccountType == 1 || rsDetail.AccountType == 4)
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Formula = "F" + _rowEndBalance + "+D" + incRowExcel + "-E" + incRowExcel;
                                               }
                                               else
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Formula = "F" + _rowEndBalance + "-D" + incRowExcel + "+E" + incRowExcel;
                                               }


                                               if (_accountingRpt.DecimalPlaces == 0)
                                               {
                                                   worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                   worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                               }
                                               else if (_accountingRpt.DecimalPlaces == 2)
                                               {
                                                   worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                   worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                               }
                                               else if (_accountingRpt.DecimalPlaces == 4)
                                               {
                                                   worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                   worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                               }
                                               else if (_accountingRpt.DecimalPlaces == 6)
                                               {
                                                   worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.000000";
                                                   worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.000000";
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                               }
                                               else
                                               {
                                                   worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00000000";
                                                   worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00000000";
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                               }


                                               worksheet.Cells[incRowExcel, 6].Calculate();

                                               _rowEndBalance = incRowExcel;

                                               incRowExcel++;
                                               _range = "A" + incRowExcel + ":F" + incRowExcel;
                                               using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                               {
                                                   r.Style.Font.Size = 11;
                                               }

                                               //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                               //worksheet.Cells[incRowExcel, 2].Value = rsDetail.journalPK;
                                               //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                               //worksheet.Cells[incRowExcel, 3].Value = rsDetail.DetailDescription;
                                               //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                               //worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;

                                               //worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                               //worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
                                               //worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                               //worksheet.Cells[incRowExcel, 9].Value = rsDetail.ConsigneeID;

                                               //_endRowDetail = incRowExcel;
                                               //_no++;
                                               //incRowExcel++;

                                           }
                                           //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                           //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                           //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                           //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                           //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                           //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                           //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                           //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                           incRowExcel = incRowExcel + 1;
                                           //worksheet.Cells[incRowExcel, 1].Value = "Check By";
                                           //worksheet.Cells[incRowExcel, 5].Value = "Approved By";
                                           //incRowExcel = incRowExcel + 5;
                                           //worksheet.Cells[incRowExcel, 1].Value = "(    " + rsHeader.Key.CheckedBy;
                                           //worksheet.Cells[incRowExcel, 2].Value = ")";
                                           //worksheet.Cells[incRowExcel, 5].Value = "(    " + rsHeader.Key.ApprovedBy;
                                           //worksheet.Cells[incRowExcel, 6].Value = ")";
                                           worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;

                                       }
                                       string _rangeDetail = "A:F";

                                       using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                       {
                                           //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                           r.Style.Font.Size = 11;
                                           r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                       }



                                       // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                       worksheet.PrinterSettings.FitToPage = true;
                                       worksheet.PrinterSettings.FitToWidth = 1;
                                       worksheet.PrinterSettings.FitToHeight = 0;
                                       worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                       worksheet.Column(1).Width = 20;
                                       worksheet.Column(2).Width = 20;
                                       worksheet.Column(3).Width = 38;
                                       worksheet.Column(4).Width = 20;
                                       worksheet.Column(5).Width = 20;
                                       worksheet.Column(6).Width = 20;



                                       worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                       // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                       // worksheet.PrinterSettings.FitToPage = true;
                                       //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                       // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                       worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                       worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                       //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                       worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();


                                       if (_accountingRpt.AccountBy == 1)
                                       {
                                           worksheet.HeaderFooter.OddHeader.CenteredText = "&14 GL PIUTANG";
                                       }
                                       else
                                       {
                                           worksheet.HeaderFooter.OddHeader.CenteredText = "&14 GL REVENUE";
                                       }

                                       

                                       Image img = Image.FromFile(Tools.ReportImage);
                                       worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                       if (_accountingRpt.ValueDateTo <= _compareDate)
                                       {
                                           worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftBatchReport();
                                       }
                                       else
                                       {
                                           //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                       }

                                       worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                       string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                       worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                       worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                       package.Save();
                                       if (_accountingRpt.DownloadMode == "PDF")
                                       {
                                           Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                       }
                                       return true;
                                   }

                               }
                           }
                       }
                   }

               }
               catch (Exception err)
               {
                   return false;
                   throw err;
               }
           }
           #endregion

            #region Budget to Actual
           else if (_accountingRpt.ReportName.Equals("Budget to Actual"))
           {
               try
               {
                   using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                   {
                       DbCon.Open();
                       using (SqlCommand cmd = DbCon.CreateCommand())
                       {
                           
                           cmd.CommandText =
                               @"
                                
                                Select 
                                B.ID Period
                                ,C.DescOne Month
                                ,D.ID AccountID
                                ,D.Name AccountName
                                ,E.Name DepartmentID
                                ,A.Balance Version
                                ,[dbo].[FGetAccountBalanceByDateByDepartmentPKPerMonth](@date,A.AccountPK,A.DepartmentPK,A.Month) Actual
                                from AccountBudget A
                                left join Period B on A.PeriodPK = B.PeriodPK and B.status in (1,2)
                                left join MasterValue C on C.ID = 'month' and A.Month = C.Code and C.status in (1,2)
                                left join Account D on A.AccountPK = D.AccountPK and D.status in (1,2)
                                left join Department E on A.DepartmentPK = E.DepartmentPK and E.status in (1,2)
                                where A.status = 2
                                and A.Month <= month(@date) and B.ID = Year(@Date)

                                 ";
                           cmd.CommandTimeout = 0;
                           cmd.Parameters.AddWithValue("@date", _accountingRpt.ValueDateFrom);

                           using (SqlDataReader dr0 = cmd.ExecuteReader())
                           {
                               if (!dr0.HasRows)
                               {
                                   return false;
                               }
                               else
                               {
                                   string filePath = Tools.ReportsPath + "BudgettoActual" + "_" + _userID + ".xlsx";
                                   string pdfPath = Tools.ReportsPath + "BudgettoActual" + "_" + _userID + ".pdf";
                                   FileInfo excelFile = new FileInfo(filePath);
                                   if (excelFile.Exists)
                                   {
                                       excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                       excelFile = new FileInfo(filePath);
                                   }

                                   // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                   using (ExcelPackage package = new ExcelPackage(excelFile))
                                   {
                                       package.Workbook.Properties.Title = "AccountingReport";
                                       package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                       package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                       package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                       package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                       package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                       ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Budget to Actual");


                                       //ATUR DATA GROUPINGNYA DULU
                                       List<AccountingRpt> rList = new List<AccountingRpt>();
                                       while (dr0.Read())
                                       {
                                           AccountingRpt rSingle = new AccountingRpt();
                                           rSingle.Period = Convert.ToString(dr0["Period"]);
                                           rSingle.Month = Convert.ToString(dr0["Month"]);
                                           rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                           rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                           rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                           rSingle.Version = Convert.ToDecimal(dr0["Version"]);
                                           rSingle.Actual = Convert.ToDecimal(dr0["Actual"]);
                                           //rSingle.Difference = Convert.ToDecimal(dr0["Difference"]);
                                           rList.Add(rSingle);

                                       }


                                       var QueryByFundID =
                                           from r in rList
                                           group r by new { } into rGroup
                                           select rGroup;

                                       int incRowExcel = 1;
                                       int _endRow = 0;

                                       foreach (var rsHeader in QueryByFundID)
                                       {
                                           incRowExcel++;
                                           worksheet.Cells[incRowExcel, 1].Value = "Report Budget To Actual";
                                           worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                    
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                           incRowExcel++;

                                           worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName(); 
                                           worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                    
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                           incRowExcel = incRowExcel + 2;
                                           int _startRow = incRowExcel;

                                           worksheet.Cells[incRowExcel, 1].Value = "Period";
                                           worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 2].Value = "Month";
                                           worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 3].Value = "Account ID";
                                           worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 4].Value = "Account Name";
                                           worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 5].Value = "Department";
                                           worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 6].Value = "Version";
                                           worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 7].Value = "Actual";
                                           worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                           worksheet.Cells[incRowExcel, 8].Value = "Difference";
                                           worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                           worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                           worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                           worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                           worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                                           incRowExcel++;
                                           foreach (var rsDetail in rsHeader)
                                           {

                                               worksheet.Cells[incRowExcel, 1].Value = rsDetail.Period;
                                               worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                               worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                               worksheet.Cells[incRowExcel, 2].Value = rsDetail.Month;
                                               worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                               worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountID;
                                               worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                               worksheet.Cells[incRowExcel, 4].Value = rsDetail.AccountName;
                                               worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                               worksheet.Cells[incRowExcel, 5].Value = rsDetail.DepartmentID;
                                               worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                               worksheet.Cells[incRowExcel, 6].Value = rsDetail.Version;
                                               worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                           

                                               worksheet.Cells[incRowExcel, 7].Value = rsDetail.Actual;
                                               worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                      

                                               //worksheet.Cells[incRowExcel, 8].Value = rsDetail.Difference;
                                               worksheet.Cells[incRowExcel, 8].Formula = "SUM(F" + incRowExcel + "-G" + incRowExcel + ")";
                                               worksheet.Cells[incRowExcel, 8].Calculate();
                                               worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                   


                                               if (_accountingRpt.DecimalPlaces == 0)
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                   worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                   worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                               }
                                               else if (_accountingRpt.DecimalPlaces == 2)
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                   worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                   worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                               }
                                               else if (_accountingRpt.DecimalPlaces == 4)
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                   worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                   worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                               }
                                               else if (_accountingRpt.DecimalPlaces == 6)
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.000000";
                                                   worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                   worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.000000";
                                               }
                                               else
                                               {
                                                   worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                   worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                   worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                               }

                                               _endRow = incRowExcel;
                                               incRowExcel++;
                                           }

                                           worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;


                                           worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                           worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                           worksheet.Cells["A" + _startRow + ":H" + _endRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                       }

                                       string _rangeA = "A:H" + incRowExcel;
                                       using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                       {
                                           r.Style.Font.Size = 20;
                                       }


                                       worksheet.PrinterSettings.FitToPage = true;
                                       worksheet.PrinterSettings.FitToWidth = 1;
                                       worksheet.PrinterSettings.FitToHeight = 0;
                                       worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 8];
                                       worksheet.Column(1).Width = 25;
                                       worksheet.Column(2).Width = 20;
                                       worksheet.Column(3).Width = 35;
                                       worksheet.Column(4).Width = 30;
                                       worksheet.Column(5).Width = 25;
                                       worksheet.Column(6).Width = 40;
                                       worksheet.Column(7).Width = 30;
                                       worksheet.Column(8).Width = 30;



                                       // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                       //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                       //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                       worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                       worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                       //worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report For All \n &28&B Subscription , Redemption , Switching";


                                       worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &23&B INTERNAL PROPRIETARY";
                                       worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                       worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                       worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                       // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                       worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                       worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                       worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                       worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                       Image img = Image.FromFile(Tools.ReportImage);
                                       worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                       //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                       //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                       worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderAddressLeftText();
                                       worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                       string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                       ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                       //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                       package.Save();
                                       if (_accountingRpt.DownloadMode == "PDF")
                                       {
                                           Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                       }
                                       return true;
                                   }
                               }
                           }

                       }

                   }
               }
               catch (Exception err)
               {
                   return false;
                   throw err;
               }

           }
            #endregion

            #region CSR Report
            if (_accountingRpt.ReportName.Equals("CSR Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgentFrom = "";

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgentFrom = "And A.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgentFrom = "";
                            }


                            string _paramFundFrom = "";

                            if (!_host.findString(_accountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _accountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
                            select distinct A.AgentPK,A.FundPK,isnull(B.Name,'No Agent') AgentName,C.Name FundName from AgentCSRDataForCommissionRpt A
                            left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
                            left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            where Date between DATEADD(yy, DATEDIFF(yy, 0, @DateTo), 0) and @DateTo " + _paramAgentFrom + _paramFundFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CSRReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CSRReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CSR Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CSRReport> rList = new List<CSRReport>();
                                        while (dr0.Read())
                                        {

                                            CSRReport rSingle = new CSRReport();
                                            rSingle.AgentPK = Convert.ToInt32(dr0["AgentPK"]);
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }





                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.AgentPK, r.FundPK, r.AgentName, r.FundName } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;


                                        int incRowExcelHeader = 6;

                                        int incRowExcelZ = 7;

                                        int _Border1 = 9;
                                        int _Border2 = 10;
                                        int _rowTotalanDana = 11;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Agent : ";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.AgentName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund : ";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel++;



                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText = @"
                                                             
CREATE TABLE #CSRReport
(
MonthDateDesc nvarchar(50),
MonthDate int,
No int,
AgentName nvarchar(200),
FundName nvarchar(200),
Type nvarchar(100),
Amount numeric(18,4),
A nvarchar(10)

)

Declare @LastDate datetime

DECLARE A CURSOR FOR 
	select distinct EOMONTH(Date) from ZDT_WorkingDays 
	where Date between DATEADD(yy, DATEDIFF(yy, 0, @DateTo), 0) and @DateTo 
Open A
Fetch Next From A
Into @LastDate       
While @@FETCH_STATUS = 0
BEGIN  


	insert into #CSRReport
	select FORMAT(Date, 'MMyy'),Month(Date),1,isnull(B.Name,'No Agent') AgentName,C.Name FundName,'Management Fee',MFee,'' A from AgentCSRDataForCommissionRpt A
	left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
	left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
	where Date = @LastDate and A.FundPK = @FundPK and A.AgentPK = @AgentPK


	insert into #CSRReport
	select FORMAT(Date, 'MMyy'),Month(Date),2,isnull(B.Name,'No Agent') AgentName,C.Name FundName,'Dana Program',DanaProgram,'' A from AgentCSRDataForCommissionRpt A
	left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
	left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
	where Date = @LastDate and A.FundPK = @FundPK and A.AgentPK = @AgentPK


	insert into #CSRReport
	select FORMAT(Date, 'MMyy'),Month(Date),3,isnull(B.Name,'No Agent') AgentName,C.Name FundName,'PPh ps.23',PPH23,'' A from AgentCSRDataForCommissionRpt A
	left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
	left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
	where Date = @LastDate and A.FundPK = @FundPK and A.AgentPK = @AgentPK


	insert into #CSRReport
	select FORMAT(Date, 'MMyy'),Month(Date),4,isnull(B.Name,'No Agent') AgentName,C.Name FundName,'Net Dana Program',NetDanaProgram,'' A from AgentCSRDataForCommissionRpt A
	left join Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
	left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
	where Date = @LastDate and A.FundPK = @FundPK and A.AgentPK = @AgentPK


Fetch next From A Into @LastDate              
END
Close A
Deallocate A






DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(MonthDate) +',0) ' + QUOTENAME(MonthDate) 
                    from (SELECT DISTINCT MonthDate FROM #CSRReport) A
					order by A.MonthDate
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


select @cols = STUFF((SELECT distinct ',' + QUOTENAME(MonthDate) 
                    from #CSRReport
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query = 'SELECT Type Bulan,A BeginningBalance,' + @colsForQuery + ' from 
                (
                SELECT MonthDate,No,Type,AgentName,FundName,Amount,A FROM #CSRReport 
            ) x
            pivot 
            (
                SUM(Amount)
                for MonthDate in (' + @cols + ')
            ) p 
			order by No
			'
exec(@query) ";

                                                    cmd1.CommandTimeout = 0;
                                                    //cmd1.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@AgentPK", rsHeader.Key.AgentPK);
                                                    cmd1.Parameters.AddWithValue("@FundPK", rsHeader.Key.FundPK);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {

                                                        int incColExcelHeader = 3;
                                                        int _startRowDetail = 0;
                                                        int _endRowDetail = 0;

                                                        string _header;

                                                        worksheet.Cells[incRowExcelHeader, 1].Value = "Bulan";
                                                        worksheet.Cells[incRowExcelHeader, 2].Value = "Beginning Balance";
                                                        worksheet.Cells[incRowExcelHeader, 1].Style.Font.Bold = true;
                                                        worksheet.Cells[incRowExcelHeader, 2].Style.Font.Bold = true;

                                                        for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                        {
                                                            if (inc1 > 1)
                                                            {
                                                                if (dr1.GetName(inc1).ToString() == "1")
                                                                {
                                                                    _header = "Jan-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "2")
                                                                {
                                                                    _header = "Feb-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "3")
                                                                {
                                                                    _header = "Mar-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "4")
                                                                {
                                                                    _header = "Apr-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "5")
                                                                {
                                                                    _header = "May-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "6")
                                                                {
                                                                    _header = "Jun-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "7")
                                                                {
                                                                    _header = "Jul-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "8")
                                                                {
                                                                    _header = "Aug-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "9")
                                                                {
                                                                    _header = "Sep-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "10")
                                                                {
                                                                    _header = "Oct-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "11")
                                                                {
                                                                    _header = "Nov-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else if (dr1.GetName(inc1).ToString() == "12")
                                                                {
                                                                    _header = "Dec-" + Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("yy");
                                                                }

                                                                else
                                                                {
                                                                    _header = dr1.GetName(inc1).ToString();
                                                                }




                                                                worksheet.Cells[incRowExcelHeader, incColExcelHeader].Value = _header;
                                                                worksheet.Cells[incRowExcelHeader, incColExcelHeader].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcelHeader, incColExcelHeader].Style.Font.Bold = true;
                                                                incColExcelHeader++;
                                                            }


                                                        }
                                                        while (dr1.Read())
                                                        {
                                                            int incColExcelZ = 1;
                                                            for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                            {

                                                                if (incColExcelZ >= 3)
                                                                {
                                                                    worksheet.Cells[incRowExcelZ, incColExcelZ].Value = Convert.ToDecimal(dr1.GetValue(inc1).ToString());
                                                                    worksheet.Cells[incRowExcelZ, incColExcelZ].Style.Numberformat.Format = "#,##0.00";
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[incRowExcelZ, incColExcelZ].Value = dr1.GetValue(inc1).ToString();
                                                                }

                                                                if (incRowExcelZ == _Border1 || incRowExcelZ == _Border2)
                                                                {
                                                                    worksheet.Cells[incRowExcelZ, incColExcelZ].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                }


                                                                if (incColExcelZ >= 3)
                                                                {

                                                                    int _endrow = _rowTotalanDana - 1;
                                                                    string _col1 = _host.GetAlphabet(incColExcelZ - 1);
                                                                    string _col2 = _host.GetAlphabet(incColExcelZ);

                                                                    worksheet.Cells[_rowTotalanDana, incColExcelZ].Formula = "SUM(" + _col1 + _rowTotalanDana + "+" + _col2 + _endrow + ")";
                                                                    worksheet.Cells[_rowTotalanDana, incColExcelZ].Style.Numberformat.Format = "#,##0.00";
                                                                }
                                                                else
                                                                {
                                                                    worksheet.Cells[_rowTotalanDana, 1].Value = "Totalan Dana";
                                                                    worksheet.Cells[_rowTotalanDana, 2].Value = _getStartBalanceForCSRReport(_accountingRpt.ValueDateFrom, rsHeader.Key.FundPK, rsHeader.Key.AgentPK);
                                                                    worksheet.Cells[_rowTotalanDana, 2].Style.Numberformat.Format = "#,##0.00";
                                                                }








                                                                incColExcelZ++;
                                                            }
                                                            incRowExcelZ++;

                                                        }









                                                    }
                                                }
                                            }

                                            incRowExcel = incRowExcel + 10;
                                            incRowExcelHeader = incRowExcelHeader + 13;
                                            incRowExcelZ = incRowExcelZ + 9;
                                            _Border1 = _Border1 + 13;
                                            _Border2 = _Border2 + 13;
                                            _rowTotalanDana = _rowTotalanDana + 13;
                                            //incColExcelHeader = incColExcelHeader + 10;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 17;
                                        worksheet.Column(2).Width = 17;
                                        worksheet.Column(3).Width = 17;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 17;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 17;
                                        worksheet.Column(9).Width = 17;

                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 CSR Report";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Monthly Report Accounting
            if (_accountingRpt.ReportName.Equals("Monthly Report Accounting"))
            {
                try
                {
                    string filePath;
                    filePath = Tools.ReportsPath + "MonthlyReportAccounting" + "_" + _userID + ".xlsx";

                    File.Copy(Tools.ReportsTemplatePath + "\\03\\TemplateMonthlyReportAccounting.xlsx", filePath, true);
                    FileInfo excelFile = new FileInfo(filePath);
                    using (ExcelPackage package = new ExcelPackage(excelFile))
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            #region Sheet1
                            ExcelWorksheet worksheet = package.Workbook.Worksheets[1];

                            worksheet.Cells[2, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet.Cells[5, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddYears(-1)).ToString("MMM-yy");
                            worksheet.Cells[6, 4].Value = "Y-" + Convert.ToDateTime(_accountingRpt.ValueDateTo.AddYears(-1)).ToString("yyyy");
                            worksheet.Cells[5, 5].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddMonths(-1)).ToString("MMM-yy");
                            worksheet.Cells[5, 6].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yy");


                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = @"

                                declare @Lastyear date
                                declare @periodPK int
                                declare @LastMonth date
                                declare @TableSheet1 table
                                (
	                                ExcelRow int,
	                                MovementYearMinOne numeric(32,4),
	                                EndBalanceYearMinOne numeric(32,4),
	                                MovementMonthMinOne numeric(32,4),
	                                MovementThisMonth numeric(32,4)
                                )

                                set @Lastyear = eomonth(dateadd(year,-1,@ValueDate))
                                select @periodPK = periodPK from Period where status = 2 and @Lastyear between DateFrom and DateTo

                                insert into @TableSheet1(ExcelRow)
                                select distinct ExcelRow from BalanceSheetMapping

                                update A set A.MovementYearMinOne = isnull(B.Balance,0)
                                from @TableSheet1 A 
                                left join (
	                                SELECT C.ExcelRow,
									sum(A.CurrentBaseBalance) AS Balance      
									FROM (      
										SELECT A.AccountPK,       
										SUM(B.Balance) AS CurrentBalance,       
										SUM(B.BaseBalance) AS CurrentBaseBalance,      
										SUM(B.SumDebit) AS CurrentDebit,       
										SUM(B.SumCredit) AS CurrentCredit,       
										SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
										SUM(B.SumBaseCredit) AS CurrentBaseCredit      
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
											SUM(A.Debit) AS SumDebit,      
											SUM(A.Credit) AS SumCredit,      
											SUM(A.BaseDebit) AS SumBaseDebit,      
											SUM(A.BaseCredit) AS SumBaseCredit,      
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
											WHERE  B.ValueDate <= @Lastyear and  B.PeriodPK = @PeriodPK
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE 
										(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
										Group BY A.AccountPK       
									) AS A LEFT JOIN (       
										SELECT A.AccountPK,        
										SUM(B.Balance) AS PreviousBalance,        
										SUM(B.BaseBalance) AS PreviousBaseBalance,       
										SUM(B.SumDebit) AS PreviousDebit,        
										SUM(B.SumCredit) AS PreviousCredit,        
										SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
										SUM(B.SumBaseCredit) AS PreviousBaseCredit       
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
											SUM(A.Debit) AS SumDebit,        
											SUM(A.Credit) AS SumCredit,        
											SUM(A.BaseDebit) AS SumBaseDebit,        
											SUM(A.BaseCredit) AS SumBaseCredit,        
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
											WHERE  B.ValueDate < @Lastyear  and  B.PeriodPK = @PeriodPK 
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
										Group BY A.AccountPK       
									) AS B ON A.AccountPK = B.AccountPK        
									inner join BalanceSheetMapping C on A.AccountPK = C.AccountPK
									WHERE (A.CurrentBalance <> 0)        
									OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
									OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
									OR (A.CurrentBaseBalance <> 0)        
									OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
									OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
									group by C.ExcelRow
                                ) B on A.ExcelRow = B.ExcelRow

								set @Lastyear = eomonth(dateadd(month,12 - month(@ValueDate),dateadd(year,-1,@ValueDate)))
                                select @periodPK = periodPK from Period where status = 2 and @Lastyear between DateFrom and DateTo

								update A set A.EndBalanceYearMinOne = isnull(B.Balance,0)
                                from @TableSheet1 A 
                                left join (
	                                SELECT C.ExcelRow,
									sum(A.CurrentBaseBalance) AS Balance      
									FROM (      
										SELECT A.AccountPK,       
										SUM(B.Balance) AS CurrentBalance,       
										SUM(B.BaseBalance) AS CurrentBaseBalance,      
										SUM(B.SumDebit) AS CurrentDebit,       
										SUM(B.SumCredit) AS CurrentCredit,       
										SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
										SUM(B.SumBaseCredit) AS CurrentBaseCredit      
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
											SUM(A.Debit) AS SumDebit,      
											SUM(A.Credit) AS SumCredit,      
											SUM(A.BaseDebit) AS SumBaseDebit,      
											SUM(A.BaseCredit) AS SumBaseCredit,      
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
											WHERE  B.ValueDate <= @Lastyear and  B.PeriodPK = @PeriodPK
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE 
										(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
										Group BY A.AccountPK       
									) AS A LEFT JOIN (       
										SELECT A.AccountPK,        
										SUM(B.Balance) AS PreviousBalance,        
										SUM(B.BaseBalance) AS PreviousBaseBalance,       
										SUM(B.SumDebit) AS PreviousDebit,        
										SUM(B.SumCredit) AS PreviousCredit,        
										SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
										SUM(B.SumBaseCredit) AS PreviousBaseCredit       
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
											SUM(A.Debit) AS SumDebit,        
											SUM(A.Credit) AS SumCredit,        
											SUM(A.BaseDebit) AS SumBaseDebit,        
											SUM(A.BaseCredit) AS SumBaseCredit,        
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
											WHERE  B.ValueDate < @Lastyear  and  B.PeriodPK = @PeriodPK 
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
										Group BY A.AccountPK       
									) AS B ON A.AccountPK = B.AccountPK        
									inner join BalanceSheetMapping C on A.AccountPK = C.AccountPK
									WHERE (A.CurrentBalance <> 0)        
									OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
									OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
									OR (A.CurrentBaseBalance <> 0)        
									OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
									OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
									group by C.ExcelRow
                                ) B on A.ExcelRow = B.ExcelRow

                                set @LastMonth = eomonth(dateadd(month,-1,@ValueDate))
                                select @periodPK = periodPK from Period where status = 2 and @LastMonth between DateFrom and DateTo

                                update A set A.MovementMonthMinOne = isnull(B.Balance,0)
                                from @TableSheet1 A 
                                left join (
	                                SELECT C.ExcelRow,
									sum(A.CurrentBaseBalance) AS Balance      
									FROM (      
										SELECT A.AccountPK,       
										SUM(B.Balance) AS CurrentBalance,       
										SUM(B.BaseBalance) AS CurrentBaseBalance,      
										SUM(B.SumDebit) AS CurrentDebit,       
										SUM(B.SumCredit) AS CurrentCredit,       
										SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
										SUM(B.SumBaseCredit) AS CurrentBaseCredit      
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
											SUM(A.Debit) AS SumDebit,      
											SUM(A.Credit) AS SumCredit,      
											SUM(A.BaseDebit) AS SumBaseDebit,      
											SUM(A.BaseCredit) AS SumBaseCredit,      
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
											WHERE  B.ValueDate <= @LastMonth and  B.PeriodPK = @PeriodPK
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE 
										(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
										Group BY A.AccountPK       
									) AS A LEFT JOIN (       
										SELECT A.AccountPK,        
										SUM(B.Balance) AS PreviousBalance,        
										SUM(B.BaseBalance) AS PreviousBaseBalance,       
										SUM(B.SumDebit) AS PreviousDebit,        
										SUM(B.SumCredit) AS PreviousCredit,        
										SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
										SUM(B.SumBaseCredit) AS PreviousBaseCredit       
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
											SUM(A.Debit) AS SumDebit,        
											SUM(A.Credit) AS SumCredit,        
											SUM(A.BaseDebit) AS SumBaseDebit,        
											SUM(A.BaseCredit) AS SumBaseCredit,        
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
											WHERE  B.ValueDate < @LastMonth  and  B.PeriodPK = @PeriodPK 
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
										Group BY A.AccountPK       
									) AS B ON A.AccountPK = B.AccountPK        
									inner join BalanceSheetMapping C on A.AccountPK = C.AccountPK
									WHERE (A.CurrentBalance <> 0)        
									OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
									OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
									OR (A.CurrentBaseBalance <> 0)        
									OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
									OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
									group by C.ExcelRow
                                ) B on A.ExcelRow = B.ExcelRow

                                select @periodPK = periodPK from Period where status = 2 and @ValueDate between DateFrom and DateTo

                                update A set A.MovementThisMonth = isnull(B.Balance,0)
                                from @TableSheet1 A 
                                left join (
									SELECT C.ExcelRow,
									sum(A.CurrentBaseBalance) AS Balance      
									FROM (      
										SELECT A.AccountPK,       
										SUM(B.Balance) AS CurrentBalance,       
										SUM(B.BaseBalance) AS CurrentBaseBalance,      
										SUM(B.SumDebit) AS CurrentDebit,       
										SUM(B.SumCredit) AS CurrentCredit,       
										SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
										SUM(B.SumBaseCredit) AS CurrentBaseCredit      
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
											SUM(A.Debit) AS SumDebit,      
											SUM(A.Credit) AS SumCredit,      
											SUM(A.BaseDebit) AS SumBaseDebit,      
											SUM(A.BaseCredit) AS SumBaseCredit,      
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
											WHERE  B.ValueDate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE 
										(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
										Group BY A.AccountPK       
									) AS A LEFT JOIN (       
										SELECT A.AccountPK,        
										SUM(B.Balance) AS PreviousBalance,        
										SUM(B.BaseBalance) AS PreviousBaseBalance,       
										SUM(B.SumDebit) AS PreviousDebit,        
										SUM(B.SumCredit) AS PreviousCredit,        
										SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
										SUM(B.SumBaseCredit) AS PreviousBaseCredit       
										FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
											SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
											SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
											SUM(A.Debit) AS SumDebit,        
											SUM(A.Credit) AS SumCredit,        
											SUM(A.BaseDebit) AS SumBaseDebit,        
											SUM(A.BaseCredit) AS SumBaseCredit,        
											C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
											C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
											FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
											INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
											INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
											WHERE  B.ValueDate < eomonth(@ValueDate)  and  B.PeriodPK = @PeriodPK 
											and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
											Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
											C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
											C.ParentPK7, C.ParentPK8, C.ParentPK9        
										) AS B        
										WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
										OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
										OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
										OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
										Group BY A.AccountPK       
									) AS B ON A.AccountPK = B.AccountPK        
									inner join BalanceSheetMapping C on A.AccountPK = C.AccountPK
									WHERE (A.CurrentBalance <> 0)        
									OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
									OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
									OR (A.CurrentBaseBalance <> 0)        
									OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
									OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
									group by C.ExcelRow
                                ) B on A.ExcelRow = B.ExcelRow

                                select * from @TableSheet1

                                ";
                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@ValueDate", _accountingRpt.ValueDateTo);


                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {


                                    while (dr0.Read())
                                    {

                                        worksheet.Cells[Convert.ToInt32(dr0["ExcelRow"]), 3].Value = Convert.ToDecimal(dr0["MovementYearMinOne"]);
                                        worksheet.Cells[Convert.ToInt32(dr0["ExcelRow"]), 4].Value = Convert.ToDecimal(dr0["EndBalanceYearMinOne"]);
                                        worksheet.Cells[Convert.ToInt32(dr0["ExcelRow"]), 5].Value = Convert.ToDecimal(dr0["MovementMonthMinOne"]);
                                        worksheet.Cells[Convert.ToInt32(dr0["ExcelRow"]), 6].Value = Convert.ToDecimal(dr0["MovementThisMonth"]);
                                    }
                                }
                            }
                            worksheet.Calculate();

                            #endregion

                            #region Sheet2
                            ExcelWorksheet worksheet1 = package.Workbook.Worksheets[2];

                            worksheet1.Cells[2, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet1.Cells[5, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddYears(-1)).ToString("MMM-yy");
                            worksheet1.Cells[6, 4].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddYears(-1)).ToString("MMM-yy");
                            worksheet1.Cells[6, 5].Value = "Y-" + Convert.ToDateTime(_accountingRpt.ValueDateTo.AddYears(-1)).ToString("yyyy");
                            worksheet1.Cells[5, 6].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddMonths(-1)).ToString("MMM-yy");
                            worksheet1.Cells[5, 7].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yy");
                            worksheet1.Cells[6, 8].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");

                            DbCon.Close();
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = @"

                                    
                                    declare @Lastyear date
                                    declare @periodPK int
                                    declare @LastMonth date
                                    declare @TableSheet2 table
                                    (
	                                    ExcelRow int,
	                                    MovementYearMinOne numeric(32,4),
										EndBalanceYTDYearMinOne numeric(32,4),
	                                    EndBalanceYearMinOne numeric(32,4),
	                                    MovementMonthMinOne numeric(32,4),
	                                    MovementThisMonth numeric(32,4),
	                                    EndBalanceThisMonth numeric(32,4)
                                    )

                                    set @Lastyear = dateadd(year,-1,@ValueDate)
                                    select @periodPK = periodPK from Period where status = 2 and @Lastyear between DateFrom and DateTo

                                    insert into @TableSheet2(ExcelRow)
                                    select distinct ExcelRow from ProfitAndLossMapping

                                    update A set A.MovementYearMinOne = isnull(B.Balance,0)
                                    from @TableSheet2 A 
                                    left join (
										SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.valuedate) = month(@Lastyear) and year(B.ValueDate) = year(@LastYear) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE  month(B.valuedate) = month(@Lastyear) and year(B.ValueDate) = year(@LastYear) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

									set @Lastyear = EOMONTH(@LastYear)

									update A set A.EndBalanceYTDYearMinOne = isnull(B.Balance,0)
                                    from @TableSheet2 A 
                                    left join (
										SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE B.ValueDate <= @Lastyear and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE B.ValueDate <= @Lastyear and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    set @Lastyear = eomonth(dateadd(month,12 - month(@ValueDate),dateadd(year,-1,@ValueDate)))
									select @periodPK = periodPK from Period where status = 2 and @Lastyear between DateFrom and DateTo

									update A set A.EndBalanceYearMinOne = isnull(B.Balance,0)
									from @TableSheet2 A 
									left join (
										SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE ValueDate <= @Lastyear and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE ValueDate <= @Lastyear and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
									) B on A.ExcelRow = B.ExcelRow

                                    set @LastMonth = dateadd(month,-1,@ValueDate)
                                    select @periodPK = periodPK from Period where status = 2 and @LastMonth between DateFrom and DateTo

                                    update A set A.MovementMonthMinOne = isnull(B.Balance,0)
                                    from @TableSheet2 A 
                                    left join (
										SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.valuedate) = month(@LastMonth) and year(B.ValueDate) = year(@LastMonth) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE month(B.valuedate) = month(@LastMonth) and year(B.ValueDate) = year(@LastMonth) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    select @periodPK = periodPK from Period where status = 2 and @ValueDate between DateFrom and DateTo

                                    update A set A.MovementThisMonth = isnull(B.Balance,0)
                                    from @TableSheet2 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.valuedate) = month(@ValueDate) and year(B.ValueDate) = year(@ValueDate) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE month(B.valuedate) = month(@ValueDate) and year(B.ValueDate) = year(@ValueDate) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    update A set A.EndBalanceThisMonth = isnull(B.Balance,0)
                                    from @TableSheet2 A 
                                    left join (
										SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE valuedate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE valuedate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    select * from @TableSheet2
                                    ";
                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@ValueDate", _accountingRpt.ValueDateTo);

                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {


                                    while (dr0.Read())
                                    {

                                        worksheet1.Cells[Convert.ToInt32(dr0["ExcelRow"]), 3].Value = Convert.ToDecimal(dr0["MovementYearMinOne"]);
                                        worksheet1.Cells[Convert.ToInt32(dr0["ExcelRow"]), 4].Value = Convert.ToDecimal(dr0["EndBalanceYTDYearMinOne"]);
                                        worksheet1.Cells[Convert.ToInt32(dr0["ExcelRow"]), 5].Value = Convert.ToDecimal(dr0["EndBalanceYearMinOne"]);
                                        worksheet1.Cells[Convert.ToInt32(dr0["ExcelRow"]), 6].Value = Convert.ToDecimal(dr0["MovementMonthMinOne"]);
                                        worksheet1.Cells[Convert.ToInt32(dr0["ExcelRow"]), 7].Value = Convert.ToDecimal(dr0["MovementThisMonth"]);
                                        worksheet1.Cells[Convert.ToInt32(dr0["ExcelRow"]), 8].Value = Convert.ToDecimal(dr0["EndBalanceThisMonth"]);
                                    }
                                }
                            }

                            worksheet1.Calculate();
                            #endregion

                            #region Sheet3
                            ExcelWorksheet worksheet2 = package.Workbook.Worksheets[3];

                            worksheet2.Cells[2, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet2.Cells[5, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yy");
                            worksheet2.Cells[5, 4].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM-yy");
                            worksheet2.Cells[5, 8].Value = "Tahun " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("yyyy");

                            DbCon.Close();
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = @"
                                    
                                    declare @PeriodPK int
                                    declare @TableSheet3 table
                                    (
	                                    ExcelRow int,
	                                    MovementThisMonth numeric(32,4),
	                                    BudgetThisMonth numeric(32,4),
										BudgetThisYear numeric(32,4)
                                    )

                                    insert into @TableSheet3(ExcelRow)
                                    select distinct ExcelRow from BalanceSheetMapping

                                    select @periodPK = periodPK from Period where status = 2 and @ValueDate between DateFrom and DateTo

                                    update A set A.MovementThisMonth = isnull(B.Balance,0)
                                    from @TableSheet3 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE valuedate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE valuedate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join BalanceSheetMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    update A set A.BudgetThisMonth = isnull(B.Balance,0)
                                    from @TableSheet3 A 
                                    left join (
	                                    select ExcelRow,(cast(month(@valuedate)as numeric(19,8))/12 * sum(Amount)) Balance from BudgetSummary A
	                                    where PeriodPK = @PeriodPK and A.Status in (1,2) and Type = 1
	                                    group by ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow


                                    update A set A.BudgetThisYear = isnull(B.Balance,0)
                                    from @TableSheet3 A 
                                    left join (
	                                    select ExcelRow,sum(Amount) Balance from BudgetSummary A
	                                    where PeriodPK = @PeriodPK and A.Status in (1,2) and Type = 1
	                                    group by ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    select * from @TableSheet3
                                    ";
                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@ValueDate", _accountingRpt.ValueDateTo);


                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {


                                    while (dr0.Read())
                                    {

                                        worksheet2.Cells[Convert.ToInt32(dr0["ExcelRow"]), 3].Value = Convert.ToDecimal(dr0["MovementThisMonth"]);
                                        worksheet2.Cells[Convert.ToInt32(dr0["ExcelRow"]), 4].Value = Convert.ToDecimal(dr0["BudgetThisMonth"]);
                                        worksheet2.Cells[Convert.ToInt32(dr0["ExcelRow"]), 8].Value = Convert.ToDecimal(dr0["BudgetThisYear"]);
                                    }
                                }
                            }

                            worksheet2.Calculate();
                            #endregion

                            #region Sheet4
                            ExcelWorksheet worksheet3 = package.Workbook.Worksheets[4];

                            worksheet3.Cells[2, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet3.Cells[5, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yy");
                            worksheet3.Cells[6, 5].Value = "Bulan " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");

                            DbCon.Close();
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = @"

                                    declare @periodPK int
                                    declare @Tablesheet4 table
                                    (
	                                    ExcelRow int,
	                                    MovementThisMonth numeric(32,4),
	                                    BudgetThisMonth numeric(32,4)
                                    )

                                    insert into @Tablesheet4(ExcelRow)
                                    select distinct ExcelRow from ProfitAndLossMapping

                                    select @periodPK = periodPK from Period where status = 2 and @ValueDate between DateFrom and DateTo

                                    update A set A.MovementThisMonth = isnull(B.Balance,0)
                                    from @Tablesheet4 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@valuedate) and year(B.ValueDate) = year(@ValueDate) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@valuedate) and year(B.ValueDate) = year(@ValueDate) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

									update A set A.BudgetThisMonth = isnull(B.Balance,0)
									from @TableSheet4 A 
									left join (
										select ExcelRow,(cast(month(@valuedate)as numeric(19,8))/12 * sum(Amount)) Balance from BudgetSummary A
										where PeriodPK = @PeriodPK and A.Status in (1,2) and Type = 2
										group by ExcelRow
									) B on A.ExcelRow = B.ExcelRow

                                    select * from @TableSheet4
                                    ";
                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@ValueDate", _accountingRpt.ValueDateTo);


                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {


                                    while (dr0.Read())
                                    {

                                        worksheet3.Cells[Convert.ToInt32(dr0["ExcelRow"]), 3].Value = Convert.ToDecimal(dr0["MovementThisMonth"]);
                                        worksheet3.Cells[Convert.ToInt32(dr0["ExcelRow"]), 5].Value = Convert.ToDecimal(dr0["BudgetThisMonth"]);
                                    }
                                }
                            }

                            worksheet3.Calculate();
                            #endregion

                            #region Sheet5
                            ExcelWorksheet worksheet4 = package.Workbook.Worksheets[5];

                            worksheet4.Cells[2, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet4.Cells[5, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddYears(-1)).ToString("MMM-yy");
                            worksheet4.Cells[5, 5].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo.AddMonths(-1)).ToString("MMM-yy");
                            worksheet4.Cells[5, 7].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yy");
                            worksheet4.Cells[6, 9].Value = "Bulan " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");

                            DbCon.Close();
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = @"

                                    declare @periodPK int
                                    declare @Tablesheet5 table
                                    (
	                                    ExcelRow int,
	                                    MovementLastYear numeric(32,4),
	                                    MovementPrevMonth numeric(32,4),
	                                    MovementThisMonth numeric(32,4),
	                                    BudgetThisMonth numeric(32,4)
                                    )

									declare @lastYear date
									declare @lastMonth date

                                    insert into @Tablesheet5(ExcelRow)
                                    select distinct ExcelRow from ProfitAndLossMapping


									set @lastYear = dateadd(year,-1,@ValueDate)
                                    select @periodPK = periodPK from Period where status = 2 and @lastYear between DateFrom and DateTo

									update A set A.MovementLastYear = isnull(B.Balance,0)
                                    from @Tablesheet5 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@lastYear) and year(B.ValueDate) = year(@lastYear) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@lastYear) and year(B.ValueDate) = year(@lastYear) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

									set @lastMonth = dateadd(month,-1,@ValueDate)
                                    select @periodPK = periodPK from Period where status = 2 and @lastMonth between DateFrom and DateTo
									
									update A set A.MovementPrevMonth = isnull(B.Balance,0)
                                    from @Tablesheet5 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@lastMonth) and year(B.ValueDate) = year(@lastMonth) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@lastMonth) and year(B.ValueDate) = year(@lastMonth) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow
									
                                    select @periodPK = periodPK from Period where status = 2 and @ValueDate between DateFrom and DateTo

                                    update A set A.MovementThisMonth = isnull(B.Balance,0)
                                    from @Tablesheet5 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@ValueDate) and year(B.ValueDate) = year(@ValueDate) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE month(B.ValueDate) = month(@ValueDate) and year(B.ValueDate) = year(@ValueDate) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

									update A set A.BudgetThisMonth = isnull(B.Balance,0)
									from @Tablesheet5 A 
									left join (
										select ExcelRow,(cast(month(@valuedate)as numeric(19,8))/12 * sum(Amount)) Balance from BudgetSummary A
										where PeriodPK = @PeriodPK and A.Status in (1,2) and Type = 2
										group by ExcelRow
									) B on A.ExcelRow = B.ExcelRow

                                    select * from @Tablesheet5
                                    ";
                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@ValueDate", _accountingRpt.ValueDateTo);


                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {


                                    while (dr0.Read())
                                    {

                                        worksheet4.Cells[Convert.ToInt32(dr0["ExcelRow"]), 3].Value = Convert.ToDecimal(dr0["MovementLastYear"]);
                                        worksheet4.Cells[Convert.ToInt32(dr0["ExcelRow"]), 5].Value = Convert.ToDecimal(dr0["MovementPrevMonth"]);
                                        worksheet4.Cells[Convert.ToInt32(dr0["ExcelRow"]), 7].Value = Convert.ToDecimal(dr0["MovementThisMonth"]);
                                        worksheet4.Cells[Convert.ToInt32(dr0["ExcelRow"]), 9].Value = Convert.ToDecimal(dr0["BudgetThisMonth"]);
                                    }
                                }
                            }

                            worksheet4.Calculate();
                            #endregion

                            #region Sheet6
                            ExcelWorksheet worksheet5 = package.Workbook.Worksheets[6];

                            worksheet5.Cells[2, 3].Value = "YTD " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet5.Cells[2, 9].Value = "YTD " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("yyyy");
                            worksheet5.Cells[6, 3].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM-yy");
                            worksheet5.Cells[6, 5].Value = "Budget " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMMM yyyy");
                            worksheet5.Cells[6, 9].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("yyyy");
                            worksheet5.Cells[6, 11].Value = "Budget " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("yyyy");

                            DbCon.Close();
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                cmd.CommandText = @"

                                    declare @periodPK int
                                    declare @Tablesheet6 table
                                    (
	                                    ExcelRow int,
	                                    EndingBalanceThisMonth numeric(32,4),
	                                    BudgetBalanceThisMonth numeric(32,4),
	                                    EndingBalanceThisYear numeric(32,4),
	                                    BudgetBalanceThisYear numeric(32,4)
                                    )

									declare @EndYear date

                                    insert into @Tablesheet6(ExcelRow)
                                    select distinct ExcelRow from ProfitAndLossMapping


                                    select @periodPK = periodPK from Period where status = 2 and @ValueDate between DateFrom and DateTo

									update A set A.EndingBalanceThisMonth = isnull(B.Balance,0)
                                    from @Tablesheet6 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE B.ValueDate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE B.ValueDate <= eomonth(@ValueDate) and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow


                                    update A set A.BudgetBalanceThisMonth = isnull(B.Balance,0)
                                    from @Tablesheet6 A 
                                    left join (
	                                    select ExcelRow,(cast(month(@valuedate)as numeric(19,8))/12 * sum(Amount)) Balance from BudgetSummary A
	                                    where PeriodPK = @PeriodPK and A.Status in (1,2) and Type = 2
	                                    group by ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow


									select @EndYear = DateTo from Period where status = 2 and periodpk = @periodPK
									
									update A set A.EndingBalanceThisYear = isnull(B.Balance,0)
                                    from @Tablesheet6 A 
                                    left join (
	                                    SELECT C.ExcelRow,
										sum(A.CurrentBaseBalance) AS Balance      
										FROM (      
											SELECT A.AccountPK,       
											SUM(B.Balance) AS CurrentBalance,       
											SUM(B.BaseBalance) AS CurrentBaseBalance,      
											SUM(B.SumDebit) AS CurrentDebit,       
											SUM(B.SumCredit) AS CurrentCredit,       
											SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
											SUM(B.SumBaseCredit) AS CurrentBaseCredit      
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
												SUM(A.Debit) AS SumDebit,      
												SUM(A.Credit) AS SumCredit,      
												SUM(A.BaseDebit) AS SumBaseDebit,      
												SUM(A.BaseCredit) AS SumBaseCredit,      
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
												WHERE B.ValueDate <= @EndYear and  B.PeriodPK = @PeriodPK
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
   
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE 
											(B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK) and A.Status = 2 
											Group BY A.AccountPK       
										) AS A LEFT JOIN (       
											SELECT A.AccountPK,        
											SUM(B.Balance) AS PreviousBalance,        
											SUM(B.BaseBalance) AS PreviousBaseBalance,       
											SUM(B.SumDebit) AS PreviousDebit,        
											SUM(B.SumCredit) AS PreviousCredit,        
											SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
											SUM(B.SumBaseCredit) AS PreviousBaseCredit       
											FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
												SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
												SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
												SUM(A.Debit) AS SumDebit,        
												SUM(A.Credit) AS SumCredit,        
												SUM(A.BaseDebit) AS SumBaseDebit,        
												SUM(A.BaseCredit) AS SumBaseCredit,        
												C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
												C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
												FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
												INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
												INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
												WHERE B.ValueDate <= @EndYear and  B.PeriodPK = @PeriodPK 
												and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status not in (3,4) 
												Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
												C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
												C.ParentPK7, C.ParentPK8, C.ParentPK9        
											) AS B        
											WHERE (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
											OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
											OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
											OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
											Group BY A.AccountPK       
										) AS B ON A.AccountPK = B.AccountPK        
										inner join ProfitAndLossMapping C on A.AccountPK = C.AccountPK
										WHERE (A.CurrentBalance <> 0)        
										OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
										OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
										OR (A.CurrentBaseBalance <> 0)        
										OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
										OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     
										group by C.ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    update A set A.BudgetBalanceThisYear = isnull(B.Balance,0)
                                    from @Tablesheet6 A 
                                    left join (
	                                    select ExcelRow,sum(Amount) Balance from BudgetSummary A
	                                    where PeriodPK = @PeriodPK and A.Status in (1,2) and Type = 2
	                                    group by ExcelRow
                                    ) B on A.ExcelRow = B.ExcelRow

                                    select * from @Tablesheet6
                                    ";
                                cmd.CommandTimeout = 0;
                                cmd.Parameters.AddWithValue("@ValueDate", _accountingRpt.ValueDateTo);


                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {


                                    while (dr0.Read())
                                    {

                                        worksheet5.Cells[Convert.ToInt32(dr0["ExcelRow"]), 3].Value = Convert.ToDecimal(dr0["EndingBalanceThisMonth"]);
                                        worksheet5.Cells[Convert.ToInt32(dr0["ExcelRow"]), 5].Value = Convert.ToDecimal(dr0["BudgetBalanceThisMonth"]);
                                        worksheet5.Cells[Convert.ToInt32(dr0["ExcelRow"]), 9].Value = Convert.ToDecimal(dr0["EndingBalanceThisYear"]);
                                        worksheet5.Cells[Convert.ToInt32(dr0["ExcelRow"]), 11].Value = Convert.ToDecimal(dr0["BudgetBalanceThisYear"]);
                                    }
                                }
                            }

                            worksheet5.Calculate();
                            #endregion

                        }

                        package.Save();
                        return true;
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Management Fee By Fund Type
            else if (_accountingRpt.ReportName.Equals("Management Fee By Fund Type"))
            {
                try
                {
                    decimal _TotalJan, _TotalFeb, _TotalMar, _TotalApr, _TotalMay, _TotalJun, _TotalJul, _TotalAug, _TotalSep, _TotalOct, _TotalNov, _TotalDec = 0;
                    int _startRowHeader, _endRowHeader, _paramMonth = 0;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText = @"
                            --declare @periodPK int

                            --set @periodPK = 6

                            declare @AccountPK int
                            declare @period int

                            declare @tableSelect table (
	                            ReksadanaType nvarchar(100),
	                            FundID nvarchar(100),
	                            Jan numeric(32,4),
	                            Feb numeric(32,4),
	                            Mar numeric(32,4),
	                            Apr numeric(32,4),
	                            May numeric(32,4),
	                            Jun numeric(32,4),
	                            Jul numeric(32,4),
	                            Aug numeric(32,4),
	                            Sep numeric(32,4),
	                            Oct numeric(32,4),
	                            Nov numeric(32,4),
	                            Dec numeric(32,4),
	                            paramMonth int
                            )

                            select @AccountPK = AccountPK from account where id = '50101.00001' and status = 2

                            select @period = ID from Period where status = 2 and periodpk = @PeriodPK

                            insert into @tableSelect(ReksadanaType,FundID,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec)
                            select distinct isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID,0,0,0,0,0,0,0,0,0,0,0,0 from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = @periodPK and A.InstrumentPK <> 0 and A.AccountPK = @AccountPK 

                            --jan
                            update A set Jan = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 1 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --feb
                            update A set Feb = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 2 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --mar
                            update A set mar = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 3 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --Apr
                            update A set Apr = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 4 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --may
                            update A set May = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 5 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --jun
                            update A set Jun = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 6 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --Jul
                            update A set Jul = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 7 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --Aug
                            update A set Aug = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 8 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --Sep
                            update A set Sep = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 9 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --Oct
                            update A set Oct = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 10 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --nov
                            update A set Nov = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 11 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            --dec
                            update A set dec = isnull(B.Balance,0)
                            from @tableSelect A 
                            inner join (
                            select isnull(D.Description,'') ReksadanaType,isnull(C.ID,'') FundID, sum(BaseCredit - BaseDebit) Balance from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.Status in (1,2)
                            left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
                            left join ReksadanaType D on C.ReksadanaTypePK = D.ReksadanaTypePK and D.Status in (1,2)
                            where B.PeriodPK = 6 and month(B.ValueDate) = 12 and year(B.ValueDate) = @period and B.Status in (1,2) and A.AccountPK = @AccountPK
                            group by D.Description, C.ID
                            ) B on A.FundID = B.FundID

                            if (select sum(jan) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 1
                            else if (select sum(feb) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 2
                            else if (select sum(mar) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 3
                            else if (select sum(apr) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 4
                            else if (select sum(May) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 5
                            else if (select sum(Jun) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 6
                            else if (select sum(Jul) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 7
                            else if (select sum(Aug) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 8
                            else if (select sum(Sep) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 9
                            else if (select sum(Oct) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 10
                            else if (select sum(Nov) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 11
                            else if (select sum(Dec) from @tableSelect) = 0
	                            update @tableSelect set paramMonth = 12
							else
	                            update @tableSelect set paramMonth = 0

							update @tableSelect 
							set Feb = case when paramMonth = 2 then 0 else Jan + Feb end,
							Mar = case when paramMonth in (2,3) then 0 else Jan + Feb + Mar end,
							Apr = case when paramMonth in (2,3,4) then 0 else Jan + Feb + Mar + Apr end,
							May = case when paramMonth in (2,3,4,5) then 0 else Jan + Feb + Mar + Apr + May end,
							Jun = case when paramMonth in (2,3,4,5,6) then 0 else Jan + Feb + Mar + Apr + May + Jun end,
							Jul = case when paramMonth in (2,3,4,5,6,7) then 0 else Jan + Feb + Mar + Apr + May + Jun + Jul end,
							Aug = case when paramMonth in (2,3,4,5,6,7,8) then 0 else Jan + Feb + Mar + Apr + May + Jun + Jul + Aug end,
							Sep = case when paramMonth in (2,3,4,5,6,7,8,9) then 0 else Jan + Feb + Mar + Apr + May + Jun + Jul + Aug + Sep end,
							Oct = case when paramMonth in (2,3,4,5,6,7,8,9,10) then 0 else Jan + Feb + Mar + Apr + May + Jun + Jul + Aug + Sep + Oct end,
							Nov = case when paramMonth in (2,3,4,5,6,7,8,9,11) then 0 else Jan + Feb + Mar + Apr + May + Jun + Jul + Aug + Sep + Oct + Nov end,
							Dec = case when paramMonth in (2,3,4,5,6,7,8,9,11,12) then 0 else Jan + Feb + Mar + Apr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec end

                            select *,@period PeriodID from @tableSelect

                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ManagementFeeByFundType" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ManagementFeeByFundType" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Management Fee By Fund Type");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ManagementFeeByFundType> rList = new List<ManagementFeeByFundType>();
                                        while (dr0.Read())
                                        {

                                            ManagementFeeByFundType rSingle = new ManagementFeeByFundType();
                                            rSingle.ReksadanaType = dr0["ReksadanaType"].ToString();
                                            rSingle.FundID = dr0["FundID"].ToString();
                                            rSingle.PeriodID = dr0["PeriodID"].ToString();
                                            rSingle.Jan = Convert.ToDecimal(dr0["Jan"]);
                                            rSingle.Feb = Convert.ToDecimal(dr0["Feb"]);
                                            rSingle.Mar = Convert.ToDecimal(dr0["Mar"]);
                                            rSingle.Apr = Convert.ToDecimal(dr0["Apr"]);
                                            rSingle.May = Convert.ToDecimal(dr0["May"]);
                                            rSingle.Jun = Convert.ToDecimal(dr0["Jun"]);
                                            rSingle.Jul = Convert.ToDecimal(dr0["Jul"]);
                                            rSingle.Aug = Convert.ToDecimal(dr0["Aug"]);
                                            rSingle.Sep = Convert.ToDecimal(dr0["Sep"]);
                                            rSingle.Oct = Convert.ToDecimal(dr0["Oct"]);
                                            rSingle.Nov = Convert.ToDecimal(dr0["Nov"]);
                                            rSingle.Dec = Convert.ToDecimal(dr0["Dec"]);
                                            rSingle.paramMonth = Convert.ToInt32(dr0["paramMonth"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                         from r in rList
                                         orderby r.ReksadanaType, r.FundID ascending
                                         group r by new { r.ReksadanaType, r.paramMonth, r.PeriodID } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        string _range;
                                        int _rowEndBalance = 0;
                                        _endRowHeader = 0;
                                        _TotalJan = 0;
                                        _TotalFeb = 0;
                                        _TotalMar = 0;
                                        _TotalApr = 0;
                                        _TotalMay = 0;
                                        _TotalJun = 0;
                                        _TotalJul = 0;
                                        _TotalAug = 0;
                                        _TotalSep = 0;
                                        _TotalOct = 0;
                                        _TotalNov = 0;
                                        _TotalDec = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Report Management Fee per type fund";
                                        incRowExcel++;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Row Labels";
                                        _range = "A" + incRowExcel + ":A" + incRowExcel;

                                        worksheet.Cells[incRowExcel, 2].Value = "Sum of JANUARI TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK);
                                        worksheet.Cells[incRowExcel, 3].Value = "Sum of FEBRUARI TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 4].Value = "Sum of MARET TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 5].Value = "Sum of APRIL TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 6].Value = "Sum of MEI TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 7].Value = "Sum of JUNI TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 8].Value = "Sum of JULI TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 9].Value = "Sum of AGUSTUS TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 10].Value = "Sum of SEPTEMBER TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 11].Value = "Sum of OKTOBER TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 12].Value = "Sum of NOVEMBER TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        worksheet.Cells[incRowExcel, 13].Value = "Sum of DESEMBER TAHUN " + _host.Get_PeriodID(_accountingRpt.PeriodPK) + "-YTD";
                                        _range = "A" + incRowExcel + ":M" + incRowExcel;
                                        incRowExcel++;

                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 11;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();

                                        }

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            _paramMonth = rsHeader.Key.paramMonth;
                                            _rowEndBalance = incRowExcel;


                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ReksadanaType;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Numberformat.Format = "#,##0.00";
                                            _startRowHeader = incRowExcel;

                                            incRowExcel++;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;

                                                if (rsHeader.Key.paramMonth == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    _range = "A" + incRowExcel + ":B" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 3)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    _range = "A" + incRowExcel + ":C" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    _range = "A" + incRowExcel + ":D" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 5)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    _range = "A" + incRowExcel + ":E" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    _range = "A" + incRowExcel + ":F" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 7)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    _range = "A" + incRowExcel + ":G" + incRowExcel;

                                                }
                                                else if (rsHeader.Key.paramMonth == 8)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Jul;
                                                    _range = "A" + incRowExcel + ":H" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 9)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Jul;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Aug;
                                                    _range = "A" + incRowExcel + ":I" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 10)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Jul;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Aug;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Sep;
                                                    _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 11)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Jul;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Aug;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Sep;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Oct;
                                                    _range = "A" + incRowExcel + ":K" + incRowExcel;
                                                }
                                                else if (rsHeader.Key.paramMonth == 12)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Jul;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Aug;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Sep;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Oct;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Nov;
                                                    _range = "A" + incRowExcel + ":L" + incRowExcel;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.Jan;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Feb;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Mar;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.Apr;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.May;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Jun;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Jul;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.Aug;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.Sep;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Oct;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Nov;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Dec;
                                                    _range = "A" + incRowExcel + ":M" + incRowExcel;
                                                }

                                                _TotalJan = _TotalJan + rsDetail.Jan;
                                                _TotalFeb = _TotalFeb + rsDetail.Feb;
                                                _TotalMar = _TotalMar + rsDetail.Mar;
                                                _TotalApr = _TotalApr + rsDetail.Apr;
                                                _TotalMay = _TotalMay + rsDetail.May;
                                                _TotalJun = _TotalJun + rsDetail.Jun;
                                                _TotalJul = _TotalJul + rsDetail.Jul;
                                                _TotalAug = _TotalAug + rsDetail.Aug;
                                                _TotalSep = _TotalSep + rsDetail.Sep;
                                                _TotalOct = _TotalOct + rsDetail.Oct;
                                                _TotalNov = _TotalNov + rsDetail.Nov;
                                                _TotalDec = _TotalDec + rsDetail.Dec;

                                                worksheet.Cells[_range].Style.Numberformat.Format = "#,##0.00";

                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                    r.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                }
                                                //area detail

                                                _endRowHeader = incRowExcel;
                                                incRowExcel++;

                                            }
                                            int _x = 0;
                                            _x = _startRowHeader + 1;

                                            if (rsHeader.Key.paramMonth == 2)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":B" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 3)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":C" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 4)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":D" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 5)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":E" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 6)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":F" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 7)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":G" + _startRowHeader;

                                            }
                                            else if (rsHeader.Key.paramMonth == 8)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 8].Formula = "=sum(H" + _x + ":H" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":H" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 9)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 8].Formula = "=sum(H" + _x + ":H" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 9].Formula = "=sum(I" + _x + ":I" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":I" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 10)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 8].Formula = "=sum(H" + _x + ":H" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 9].Formula = "=sum(I" + _x + ":I" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 10].Formula = "=sum(J" + _x + ":J" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":J" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 11)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 8].Formula = "=sum(H" + _x + ":H" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 9].Formula = "=sum(I" + _x + ":I" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 10].Formula = "=sum(J" + _x + ":J" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 11].Formula = "=sum(K" + _x + ":K" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":K" + _startRowHeader;
                                            }
                                            else if (rsHeader.Key.paramMonth == 12)
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 8].Formula = "=sum(H" + _x + ":H" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 9].Formula = "=sum(I" + _x + ":I" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 10].Formula = "=sum(J" + _x + ":J" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 11].Formula = "=sum(K" + _x + ":K" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 12].Formula = "=sum(L" + _x + ":L" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":L" + _startRowHeader;
                                            }
                                            else
                                            {
                                                worksheet.Cells[_startRowHeader, 2].Formula = "=sum(B" + _x + ":B" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 3].Formula = "=sum(C" + _x + ":C" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 4].Formula = "=sum(D" + _x + ":D" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 5].Formula = "=sum(E" + _x + ":E" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 6].Formula = "=sum(F" + _x + ":F" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 7].Formula = "=sum(G" + _x + ":G" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 8].Formula = "=sum(H" + _x + ":H" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 9].Formula = "=sum(I" + _x + ":I" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 10].Formula = "=sum(J" + _x + ":J" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 11].Formula = "=sum(K" + _x + ":K" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 12].Formula = "=sum(L" + _x + ":L" + _endRowHeader + ")";
                                                worksheet.Cells[_startRowHeader, 13].Formula = "=sum(M" + _x + ":M" + _endRowHeader + ")";
                                                _range = "A" + _startRowHeader + ":M" + _startRowHeader;
                                            }

                                            worksheet.Cells[_range].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[_range].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[_range].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[_range].Style.Border.Left.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["A" + _rowEndBalance + ":M" + _rowEndBalance].Calculate();


                                        }

                                        worksheet.Cells[incRowExcel, 1].Value = "Grand Total";
                                        worksheet.Cells[incRowExcel, 2].Value = _TotalJan;
                                        worksheet.Cells[incRowExcel, 3].Value = _TotalFeb;
                                        worksheet.Cells[incRowExcel, 4].Value = _TotalMar;
                                        worksheet.Cells[incRowExcel, 5].Value = _TotalApr;
                                        worksheet.Cells[incRowExcel, 6].Value = _TotalMay;
                                        worksheet.Cells[incRowExcel, 7].Value = _TotalJun;
                                        worksheet.Cells[incRowExcel, 8].Value = _TotalJul;
                                        worksheet.Cells[incRowExcel, 9].Value = _TotalAug;
                                        worksheet.Cells[incRowExcel, 10].Value = _TotalSep;
                                        worksheet.Cells[incRowExcel, 11].Value = _TotalOct;
                                        worksheet.Cells[incRowExcel, 12].Value = _TotalNov;
                                        worksheet.Cells[incRowExcel, 13].Value = _TotalDec;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";

                                        worksheet.Cells[3, _paramMonth + 1, 3, 13].Value = "";
                                        worksheet.Cells[incRowExcel, _paramMonth + 1, incRowExcel, 13].Value = "";

                                        worksheet.Cells[3, 1, 3, _paramMonth].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[3, 1, 3, _paramMonth].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[3, 1, 3, _paramMonth].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[3, 1, 3, _paramMonth].Style.Border.Right.Style = ExcelBorderStyle.Medium;



                                        string _rangeDetail = "A:M";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 13];

                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 35;
                                        worksheet.Column(7).Width = 35;
                                        worksheet.Column(8).Width = 35;
                                        worksheet.Column(9).Width = 35;
                                        worksheet.Column(10).Width = 35;
                                        worksheet.Column(11).Width = 35;
                                        worksheet.Column(12).Width = 35;
                                        worksheet.Column(13).Width = 35;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Management Fee By Fund Type";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Report CSR Per Yayasan Per Produk
            if (_accountingRpt.ReportName.Equals("Report CSR Per Yayasan Per Produk"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgentFrom = "";

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgentFrom = "And A.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgentFrom = "";
                            }


                            cmd.CommandText =
                            @"
                                --declare @DateFrom datetime
                                --declare @DateTo datetime
                                --declare @AgentPK int

                                --set @DateFrom = '08/01/2020'
                                --set @DateTo = '12/31/2020'
                                --set @AgentPK = 6
                                --DROP TABLE #AgentCSRDataForCommissionRpt


                                CREATE TABLE #AgentCSRDataForCommissionRpt
                                (
	                                FundID nvarchar(50),
	                                IntMonth  int,
	                                DanaProgram  numeric(19,2),

                                )

                                insert into #AgentCSRDataForCommissionRpt
                                select B.ID,month(Date),sum(case when FeeType = 3 then FixedAccruedAmount else DanaProgram end) from AgentCSRDataForCommissionRpt A
                                left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                where date between @DateFrom and @DateTo   " + _paramAgentFrom + @"
                                group by B.ID,month(Date)




                                DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                                    @query  AS NVARCHAR(MAX)

                                select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(IntMonth) +',0) ' + QUOTENAME(IntMonth) 
                                                    from (SELECT DISTINCT IntMonth FROM #AgentCSRDataForCommissionRpt) A
					                                order by A.IntMonth
                                            FOR XML PATH(''), TYPE
                                            ).value('.', 'NVARCHAR(MAX)') 
                                        ,1,1,'')


                                select @cols = STUFF((SELECT distinct ',' + QUOTENAME(IntMonth) 
                                                    from #AgentCSRDataForCommissionRpt
				
                                            FOR XML PATH(''), TYPE
                                            ).value('.', 'NVARCHAR(MAX)') 
                                        ,1,1,'')


                                set @query = 'SELECT FundID,' + @colsForQuery + ' from 
                                                (
                                                SELECT IntMonth,FundID,DanaProgram FROM #AgentCSRDataForCommissionRpt 
                                            ) x
                                            pivot 
                                            (
                                                SUM(DanaProgram)
                                                for IntMonth in (' + @cols + ')
                                            ) p 
			                                order by FundID
			                                '
                                exec(@query) 


                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CSR_Per_Yayasan_Per_Produk" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CSR_Per_Yayasan_Per_Produk" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CSR Per Yayasan Per Produk");


                                        //ATUR DATA GROUPINGNYA DULU


                                        int incRowExcel;

                                        int incColExcel = 1;
                                        incRowExcel = 1;
                                        // ini buat header
                                        string _header;
                                        int _startRow = 1;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            if (dr0.GetName(inc1).ToString() == "1")
                                            {
                                                _header = "January";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "2")
                                            {
                                                _header = "February";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "3")
                                            {
                                                _header = "March";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "4")
                                            {
                                                _header = "April";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "5")
                                            {
                                                _header = "May";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "6")
                                            {
                                                _header = "June";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "7")
                                            {
                                                _header = "July";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "8")
                                            {
                                                _header = "August";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "9")
                                            {
                                                _header = "September";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "10")
                                            {
                                                _header = "October";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "11")
                                            {
                                                _header = "November";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "12")
                                            {
                                                _header = "December";
                                            }

                                            else
                                            {
                                                _header = dr0.GetName(inc1).ToString();
                                            }

                                            worksheet.Cells[1, incColExcel].Value = _header;
                                            worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incColExcel++;
                                        }

                                        int _endColDetail = 0;
                                        int _endRowDetail = 0;
                                        int _startRowDetail = incRowExcel + 1;
                                        List<CSRReport> rList = new List<CSRReport>();
                                        while (dr0.Read())
                                        {
                                            CSRReport rSingle = new CSRReport();
                                            rSingle.FundName = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            if (_host.CheckColumnIsExist(dr0, "1"))
                                            {
                                                rSingle.January = Convert.ToString(dr0["1"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "2"))
                                            {
                                                rSingle.February = Convert.ToString(dr0["2"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "3"))
                                            {
                                                rSingle.March = Convert.ToString(dr0["3"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "4"))
                                            {
                                                rSingle.April = Convert.ToString(dr0["4"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "5"))
                                            {
                                                rSingle.May = Convert.ToString(dr0["5"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "6"))
                                            {
                                                rSingle.June = Convert.ToString(dr0["6"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "7"))
                                            {
                                                rSingle.July = Convert.ToString(dr0["7"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "8"))
                                            {
                                                rSingle.August = Convert.ToString(dr0["8"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "9"))
                                            {
                                                rSingle.September = Convert.ToString(dr0["9"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "10"))
                                            {
                                                rSingle.October = Convert.ToString(dr0["10"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "11"))
                                            {
                                                rSingle.November = Convert.ToString(dr0["11"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "12"))
                                            {
                                                rSingle.December = Convert.ToString(dr0["12"]);
                                            }
                                            rList.Add(rSingle);

                                            incRowExcel++;
                                            incColExcel = 1;

                                            int _rowCtrp = 0;
                                            int _endRow = 0;

                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                _rowCtrp = incColExcel;
                                                _endRow = dr0.FieldCount + 2;
                                                if (incColExcel == 1)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = Convert.ToString(dr0["FundID"]);

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0[inc1]);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.00";

                                                }


                                                incColExcel++;


                                            }
                                            worksheet.Cells[1, incColExcel].Value = "TOTAL YTD";
                                            worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(" + worksheet.Cells[incRowExcel, 2].Address + ":" + worksheet.Cells[incRowExcel, incColExcel - 1].Address + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";


                                        }
                                        _endRowDetail = incRowExcel;


                                        incRowExcel++;
                                        incColExcel = 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(" + worksheet.Cells[_startRowDetail, incColExcel].Address + ":" + worksheet.Cells[_endRowDetail, incColExcel].Address + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            incColExcel++;
                                        }

                                        incRowExcel++;
                                        incColExcel = 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "PAJAK :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "=" + worksheet.Cells[incRowExcel - 1, incColExcel].Address + "*2%";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            incColExcel++;
                                        }
                                        incRowExcel++;
                                        incColExcel = 2;
                                        worksheet.Cells[incRowExcel, 1].Value = "NET :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "=" + worksheet.Cells[incRowExcel - 2, incColExcel].Address + "-" + worksheet.Cells[incRowExcel - 1, incColExcel].Address;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            incColExcel++;
                                        }


                                        // TOLONG BUATIN TOTAL DIBAWAH YA COY




                                        int _col = incColExcel - 1;



                                        worksheet.Cells[1, 1, 1, _col].Style.Font.Bold = true;
                                        worksheet.Cells[1, 1, 1, _col].Style.Font.Size = 12;
                                        worksheet.Cells[1, 1, 1, _col].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[1, 1, 1, _col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[1, 1, incRowExcel, _col].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[1, 1, incRowExcel, _col].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, _col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[2, 3, incRowExcel, _col].Style.Numberformat.Format = "#,##0.00";


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 16];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&16 Financial Statement";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            #region Report CSR Per Yayasan Per Produk Inception
            if (_accountingRpt.ReportName.Equals("Report CSR Per Yayasan Per Produk Inception"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgentFrom = "";

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgentFrom = "And A.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgentFrom = "";
                            }


                            cmd.CommandText =
                            @"
                                
--declare @DateFrom datetime
--declare @DateTo datetime
--declare @AgentPK int

--set @DateFrom = '08/01/2020'
--set @DateTo = '12/31/2020'
--set @AgentPK = 6
--DROP TABLE #AgentCSRDataForCommissionRpt
--DROP TABLE #BegBalance
--DROP TABLE #AgentCSRDataForCommissionRptWithBegBalance

Declare @PeriodPK int
select @PeriodPK = PeriodPK from Period where @DateFrom between DateFrom and DateTo and status = 2

CREATE TABLE #AgentCSRDataForCommissionRpt
(
	FundPK int,
	FundID nvarchar(50),
	IntMonth  int,
	DanaProgram  numeric(19,2),

)

CREATE TABLE #AgentCSRDataForCommissionRptWithBegBalance
(
	FundID nvarchar(50),
	BegBalance numeric(19,2),
	IntMonth  int,
	DanaProgram  numeric(19,2),

)

CREATE TABLE #BegBalance
(
	FundPK int,
	Amount  numeric(19,2),

)

Insert into #BegBalance
select FundPK,sum(Amount) from AgentCSRBegBalance A where PeriodPK = @PeriodPK and status = 2 " + _paramAgentFrom + @"
group by FundPK


insert into #AgentCSRDataForCommissionRpt
select A.FundPK,B.ID,month(Date),sum(case when FeeType = 3 then FixedAccruedAmount else DanaProgram end) from AgentCSRDataForCommissionRpt A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
where date between @DateFrom and @DateTo " + _paramAgentFrom + @"
group by A.FundPK,B.ID,month(Date)

insert into #AgentCSRDataForCommissionRptWithBegBalance
select FundID,isnull(B.Amount,0),IntMonth,DanaProgram from #AgentCSRDataForCommissionRpt A
left join #BegBalance B on A.FundPK = B.FundPK






DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(IntMonth) +',0) ' + QUOTENAME(IntMonth) 
                    from (SELECT DISTINCT IntMonth FROM #AgentCSRDataForCommissionRptWithBegBalance) A
					order by A.IntMonth
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


select @cols = STUFF((SELECT distinct ',' + QUOTENAME(IntMonth) 
                    from #AgentCSRDataForCommissionRptWithBegBalance
				
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


set @query = 'SELECT FundID,BegBalance,' + @colsForQuery + ' from 
                (
                SELECT IntMonth,FundID,DanaProgram,BegBalance FROM #AgentCSRDataForCommissionRptWithBegBalance 
            ) x
            pivot 
            (
                SUM(DanaProgram)
                for IntMonth in (' + @cols + ')
            ) p 
			order by FundID
			'
exec(@query) 


                                ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CSR_Per_Yayasan_Per_Produk_Inception" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CSR_Per_Yayasan_Per_Produk_Inception" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CSR Per Yayasan Per Produk Inception");


                                        //ATUR DATA GROUPINGNYA DULU


                                        int incRowExcel;

                                        int incColExcel = 1;
                                        incRowExcel = 1;
                                        // ini buat header
                                        string _header;
                                        int _startRow = 1;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            if (dr0.GetName(inc1).ToString() == "1")
                                            {
                                                _header = "January";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "2")
                                            {
                                                _header = "February";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "3")
                                            {
                                                _header = "March";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "4")
                                            {
                                                _header = "April";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "5")
                                            {
                                                _header = "May";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "6")
                                            {
                                                _header = "June";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "7")
                                            {
                                                _header = "July";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "8")
                                            {
                                                _header = "August";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "9")
                                            {
                                                _header = "September";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "10")
                                            {
                                                _header = "October";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "11")
                                            {
                                                _header = "November";
                                            }

                                            else if (dr0.GetName(inc1).ToString() == "12")
                                            {
                                                _header = "December";
                                            }

                                            else
                                            {
                                                _header = dr0.GetName(inc1).ToString();
                                            }

                                            worksheet.Cells[1, incColExcel].Value = _header;
                                            worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incColExcel++;
                                        }

                                        int _endColDetail = 0;
                                        int _startRowDetail = incRowExcel + 1;
                                        int _endRowDetail = 0;

                                        List<CSRReport> rList = new List<CSRReport>();
                                        while (dr0.Read())
                                        {
                                            CSRReport rSingle = new CSRReport();
                                            rSingle.FundName = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.BegBalance = dr0["BegBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["BegBalance"]);
                                            if (_host.CheckColumnIsExist(dr0, "1"))
                                            {
                                                rSingle.January = Convert.ToString(dr0["1"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "2"))
                                            {
                                                rSingle.February = Convert.ToString(dr0["2"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "3"))
                                            {
                                                rSingle.March = Convert.ToString(dr0["3"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "4"))
                                            {
                                                rSingle.April = Convert.ToString(dr0["4"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "5"))
                                            {
                                                rSingle.May = Convert.ToString(dr0["5"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "6"))
                                            {
                                                rSingle.June = Convert.ToString(dr0["6"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "7"))
                                            {
                                                rSingle.July = Convert.ToString(dr0["7"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "8"))
                                            {
                                                rSingle.August = Convert.ToString(dr0["8"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "9"))
                                            {
                                                rSingle.September = Convert.ToString(dr0["9"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "10"))
                                            {
                                                rSingle.October = Convert.ToString(dr0["10"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "11"))
                                            {
                                                rSingle.November = Convert.ToString(dr0["11"]);
                                            }
                                            if (_host.CheckColumnIsExist(dr0, "12"))
                                            {
                                                rSingle.December = Convert.ToString(dr0["12"]);
                                            }
                                            rList.Add(rSingle);

                                            incRowExcel++;
                                            incColExcel = 1;
                                            int _rowCtrp = 0;
                                            int _endRow = 0;

                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {
                                                _rowCtrp = incColExcel;
                                                _endRow = dr0.FieldCount + 2;
                                                if (incColExcel == 1)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = Convert.ToString(dr0["FundID"]);

                                                }
                                                else if (incColExcel == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDecimal(dr0["BegBalance"]);
                                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0[inc1]);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0.00";

                                                }


                                                incColExcel++;


                                            }
                                            worksheet.Cells[1, incColExcel].Value = "TOTAL YTD";
                                            worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(" + worksheet.Cells[incRowExcel, 3].Address + ":" + worksheet.Cells[incRowExcel, incColExcel - 1].Address + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            incColExcel++;
                                            worksheet.Cells[1, incColExcel].Value = "TOTAL INCEPTION";
                                            worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(" + worksheet.Cells[incRowExcel, 2].Address + "+" + worksheet.Cells[incRowExcel, incColExcel - 1].Address + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";


                                        }
                                        _endRowDetail = incRowExcel;


                                        incRowExcel++;
                                        incColExcel = 3;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(" + worksheet.Cells[_startRowDetail, incColExcel].Address + ":" + worksheet.Cells[_endRowDetail, incColExcel].Address + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            incColExcel++;
                                        }

                                        incRowExcel++;
                                        incColExcel = 3;
                                        worksheet.Cells[incRowExcel, 1].Value = "PAJAK :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "=" + worksheet.Cells[incRowExcel - 1, incColExcel].Address + "*2%";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            incColExcel++;
                                        }
                                        incRowExcel++;
                                        incColExcel = 3;
                                        worksheet.Cells[incRowExcel, 1].Value = "NET :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                        {
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "=" + worksheet.Cells[incRowExcel - 2, incColExcel].Address + "-" + worksheet.Cells[incRowExcel - 1, incColExcel].Address;
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Font.Bold = true;
                                            incColExcel++;
                                        }
                                        // TOLONG BUATIN TOTAL DIBAWAH YA COY




                                        int _col = incColExcel - 1;



                                        worksheet.Cells[1, 1, 1, _col].Style.Font.Bold = true;
                                        worksheet.Cells[1, 1, 1, _col].Style.Font.Size = 12;
                                        worksheet.Cells[1, 1, 1, _col].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[1, 1, 1, _col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[1, 1, incRowExcel, _col].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[1, 1, incRowExcel, _col].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, _col].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[2, 3, incRowExcel, _col].Style.Numberformat.Format = "#,##0.00";


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 16];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&16 Financial Statement";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion


            #region CSR Per Yayasan
            if (_accountingRpt.ReportName.Equals("CSR Per Yayasan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramAgentFrom = "";

                            if (!_host.findString(_accountingRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_accountingRpt.AgentFrom))
                            {
                                _paramAgentFrom = "And A.AgentPK  in ( " + _accountingRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgentFrom = "";
                            }



                            cmd.CommandText = @"
                           --DROP TABLE #DanaAlokasi

                            --declare @DateFrom datetime
                            --declare @Dateto datetime

                            --set @DateFrom = '01/01/2020'
                            --set @Dateto = '09/30/2020'

                            CREATE TABLE #DanaAlokasi
                            (
                            ValueDate datetime,
                            InstrumentPK int,
                            AgentPK int,
                            DanaAlokasi numeric(19,4),
                            PPH23 numeric(19,4),
                            Total numeric(19,4)
                            )

                            DECLARE @AccountPK int

                            DECLARE A CURSOR FOR 
                            select distinct AgentCSRExpenseAccountPK from AgentCSRFund A where AgentCSRExpenseAccountPK <> 0 " + _paramAgentFrom + @"
                            OPEN A
                            FETCH NEXT FROM A INTO @AccountPK
                            WHILE @@FETCH_STATUS = 0
                            BEGIN

                            insert into #DanaAlokasi
                            select ValueDate,InstrumentPK,AgentPK,abs(sum(BaseDebit-BaseCredit)) DanaAlokasi,0 PPH23,0 Total from JournalDetail A
                            left join Journal B on A.JournalPK = B.JournalPK and B.status in (1,2)
                            where ValueDate between @DateFrom and @Dateto and AccountPK = @AccountPK and B.Posted = 1 and B.Reversed = 0 " + _paramAgentFrom + @" 
                            group by ValueDate,InstrumentPK,AgentPK

                            FETCH NEXT FROM A INTO @AccountPK
                            END
                            CLOSE A
                            DEALLOCATE A




                            select ValueDate,C.ID AgentID,B.ID Description,sum(DanaAlokasi) DanaAlokasi,sum(PPH23) PPH23,sum(Total) Total
                            from (
                            select ValueDate,InstrumentPK,AgentPK,DanaAlokasi,PPH23,Total from #DanaAlokasi
                            union all
                            select ValueDate,InstrumentPK,AgentPK,0,abs(sum(BaseDebit-BaseCredit)),0 from JournalDetail A -- PPH23
                            left join Journal B on A.JournalPK = B.JournalPK and B.status in (1,2)
                            where  ValueDate between @DateFrom and @Dateto and AccountPK = 201 and B.Posted = 1 and B.Reversed = 0 " + _paramAgentFrom + @" 
                            group by ValueDate,InstrumentPK,AgentPK
                            union all
                            select ValueDate,InstrumentPK,AgentPK,0,0,abs(sum(BaseDebit-BaseCredit)) from JournalDetail A -- TOTAL
                            left join Journal B on A.JournalPK = B.JournalPK and B.status in (1,2)
                            where  ValueDate between @DateFrom and @Dateto and AccountPK = 244 and B.Posted = 1 and B.Reversed = 0  " + _paramAgentFrom + @" 
                            group by ValueDate,InstrumentPK,AgentPK
                            ) A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                            left join Agent C on A.AgentPK = C.AgentPK and C.status in (1,2)
                            where A.InstrumentPK <> 0 
                            group by ValueDate,B.ID,C.ID
                            order by ValueDate,C.ID,B.ID


                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _accountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CSRPerYayasan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CSRPerYayasan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "AccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report CSR Per yayasan");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CSRPerYayasan> rList = new List<CSRPerYayasan>();
                                        while (dr0.Read())
                                        {

                                            CSRPerYayasan rSingle = new CSRPerYayasan();
                                            //rSingle.Name = dr0["Name"].ToString();
                                            rSingle.TanggalJournal = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.AgentID = dr0["AgentID"].ToString();
                                            rSingle.Deskripsi = dr0["Description"].ToString();
                                            rSingle.DanaAlokasi = Convert.ToDecimal(dr0["DanaAlokasi"]);
                                            rSingle.PPH23 = Convert.ToDecimal(dr0["PPH23"]);
                                            rSingle.TotalAfterTax = Convert.ToDecimal(dr0["Total"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.AgentID } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;



                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.AgentID;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                            worksheet.Cells[incRowExcel, 1].Value = "TAHUN " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("yyyy");
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;
                                            int RowR = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1, RowR, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowR, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowR, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowR, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowR].Merge = true;

                                            worksheet.Cells[incRowExcel, 2].Value = "TANGGAL";
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowR].Merge = true;

                                            worksheet.Cells[incRowExcel, 3].Value = "DESKRIPSI";
                                            worksheet.Cells["C" + incRowExcel + ":C" + RowR].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Value = "DANA ALOKASI";
                                            worksheet.Cells["D" + incRowExcel + ":D" + RowG].Merge = true;

                                            worksheet.Cells[RowR, 4].Value = "(Rp)";

                                            worksheet.Cells[incRowExcel, 5].Value = "PPH 23";
                                            worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;

                                            worksheet.Cells[RowR, 5].Value = "(Rp)";

                                            worksheet.Cells[RowB, 6].Value = "Total";
                                            worksheet.Cells[RowG, 6].Value = "(After Tax)";
                                            worksheet.Cells[RowR, 6].Value = "(Rp)";

                                            worksheet.Cells["A" + RowB + ":F" + RowR].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":F" + RowR].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":F" + RowR].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":F" + RowR].Style.Font.Size = 12;

                                            incRowExcel = incRowExcel + 2;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel + 1;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.TanggalJournal;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Deskripsi;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DanaAlokasi;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PPH23;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TotalAfterTax;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";


                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }
                                            incRowExcel++;



                                            worksheet.Cells[incRowExcel, 3].Value = "TOTAL : ";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;


                                            worksheet.Row(incRowExcel).PageBreak = _accountingRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 21;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_accountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }

        public string LaporanBalanceSheet(string _userID, AccountingRpt _accountingRpt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                string FilePath = Tools.ReportsPath + "LaporanBalanceSheet" + "_" + _userID + ".xlsx";
                File.Copy(Tools.ReportsTemplatePath + "\\03\\" + "03_LaporanBalanceSheet.xlsx", FilePath, true);
                FileInfo existingFile = new FileInfo(FilePath);
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {

                    ExcelWorksheet worksheet1 = package.Workbook.Worksheets[1];
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[2];
                    string monthFrom, monthTo;
                    int _monthFrom, _monthTo;
                    monthFrom = Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("MM");
                    _monthFrom = Convert.ToInt32(monthFrom);

                    monthTo = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MM");
                    _monthTo = Convert.ToInt32(monthTo);

                    worksheet1.Cells[5, 1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    worksheet1.Column(2).Width = 0;
                    worksheet1.Column(3).Width = 0;
                    worksheet1.Column(4).Width = 0;
                    worksheet1.Column(5).Width = 0;
                    worksheet1.Column(6).Width = 0;
                    worksheet1.Column(7).Width = 0;
                    worksheet1.Column(8).Width = 0;
                    worksheet1.Column(9).Width = 0;
                    worksheet1.Column(10).Width = 0;
                    worksheet1.Column(11).Width = 0;
                    worksheet1.Column(12).Width = 0;
                    worksheet1.Column(13).Width = 0;

                    worksheet.Column(2).Width = 0;
                    worksheet.Column(3).Width = 0;
                    worksheet.Column(4).Width = 0;
                    worksheet.Column(5).Width = 0;
                    worksheet.Column(6).Width = 0;
                    worksheet.Column(7).Width = 0;
                    worksheet.Column(8).Width = 0;
                    worksheet.Column(9).Width = 0;
                    worksheet.Column(10).Width = 0;
                    worksheet.Column(11).Width = 0;
                    worksheet.Column(12).Width = 0;
                    worksheet.Column(13).Width = 0;
                    if (1 >= _monthFrom && 1 <= _monthTo)
                    {
                        string janFrom = "01/01/" + _accountingRpt.Period;
                        string janTo = "01/31/" + _accountingRpt.Period;
                        worksheet.Column(2).Width = 20;
                        worksheet1.Column(2).Width = 20;

                        ExcelWorksheet worksheet2 = package.Workbook.Worksheets[3];
                        using (SqlConnection DbCon02 = new SqlConnection(Tools.conString))
                        {


                            DbCon02.Open();
                            using (SqlCommand cmd02 = DbCon02.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd02.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + janTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + janFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3 
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)     

								
                                Order BY C.ID";
                                cmd02.CommandTimeout = 0;
                                cmd02.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr02 = cmd02.ExecuteReader())
                                {
                                    if (dr02.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr02.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr02["ID"]);
                                            rSingle.Name = Convert.ToString(dr02["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr02["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr02["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr02["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr02["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         orderby r.ID ascending
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            worksheet1.Cells[1, 1].Value = _host.Get_CompanyName();

                                            worksheet1.Cells[3, 1].Value = "As Of : " + Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            worksheet1.Cells[1, 6].Value = "Date : " + Convert.ToDateTime(_datetimeNow).ToString("dd-MMM-yyyy");
                                            worksheet1.Cells[2, 6].Value = "Time : " + Convert.ToDateTime(_datetimeNow).ToString("hh:mm:ss");

                                            //worksheet1.Cells[6, 2].Value = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MMM");
                                            //worksheet1.Cells[6, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet2.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet2.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet2.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet2.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet2.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet2.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet2.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet2.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet2.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet2.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet2.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet2.PrinterSettings.FitToPage = true;
                                        worksheet2.PrinterSettings.FitToWidth = 1;
                                        worksheet2.PrinterSettings.FitToHeight = 0;
                                        worksheet2.PrinterSettings.PrintArea = worksheet2.Cells[1, 1, incRowExcel2, 6];
                                        worksheet2.Column(1).Width = 15;
                                        worksheet2.Column(2).Width = 15;
                                        worksheet2.Column(3).Width = 15;
                                        worksheet2.Column(4).Width = 15;
                                        worksheet2.Column(5).Width = 15;
                                        worksheet2.Column(6).Width = 15;

                                    }


                                }

                            }

                        }
                    }


                    if (2 >= _monthFrom && 2 <= _monthTo)
                    {
                        string febFrom = "02/01/" + _accountingRpt.Period;
                        string febTo = "02/28/" + _accountingRpt.Period;
                        worksheet.Column(3).Width = 20;
                        worksheet1.Column(3).Width = 20;

                        ExcelWorksheet worksheet3 = package.Workbook.Worksheets[4];
                        using (SqlConnection DbCon03 = new SqlConnection(Tools.conString))
                        {
                            DbCon03.Open();
                            using (SqlCommand cmd03 = DbCon03.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd03.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + febTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + febFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)  
								
                                Order BY C.ID";
                                cmd03.CommandTimeout = 0;
                                cmd03.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd03.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd03.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr03 = cmd03.ExecuteReader())
                                {
                                    if (dr03.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr03.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr03["ID"]);
                                            rSingle.Name = Convert.ToString(dr03["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr03["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr03["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr03["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr03["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet3.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet3.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet3.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet3.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet3.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet3.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet3.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet3.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet3.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet3.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet3.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet3.PrinterSettings.FitToPage = true;
                                        worksheet3.PrinterSettings.FitToWidth = 1;
                                        worksheet3.PrinterSettings.FitToHeight = 0;
                                        worksheet3.PrinterSettings.PrintArea = worksheet3.Cells[1, 1, incRowExcel2, 6];
                                        worksheet3.Column(1).AutoFit();
                                        worksheet3.Column(2).AutoFit();
                                        worksheet3.Column(3).AutoFit();
                                        worksheet3.Column(4).AutoFit();
                                        worksheet3.Column(5).AutoFit();
                                        worksheet3.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    if (3 >= _monthFrom && 3 <= _monthTo)
                    {
                        string marFrom = "03/01/" + _accountingRpt.Period;
                        string marTo = "03/31/" + _accountingRpt.Period;
                        worksheet.Column(4).Width = 20;
                        worksheet1.Column(4).Width = 20;

                        ExcelWorksheet worksheet4 = package.Workbook.Worksheets[5];
                        using (SqlConnection DbCon04 = new SqlConnection(Tools.conString))
                        {
                            DbCon04.Open();
                            using (SqlCommand cmd04 = DbCon04.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd04.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + marTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + marFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3 
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0) 
								
                                Order BY C.ID";
                                cmd04.CommandTimeout = 0;
                                cmd04.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd04.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd04.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr04 = cmd04.ExecuteReader())
                                {
                                    if (dr04.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr04.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr04["ID"]);
                                            rSingle.Name = Convert.ToString(dr04["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr04["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr04["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr04["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr04["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet4.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet4.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet4.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet4.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet4.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet4.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet4.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet4.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet4.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet4.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet4.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet4.PrinterSettings.FitToPage = true;
                                        worksheet4.PrinterSettings.FitToWidth = 1;
                                        worksheet4.PrinterSettings.FitToHeight = 0;
                                        worksheet4.PrinterSettings.PrintArea = worksheet4.Cells[1, 1, incRowExcel2, 6];
                                        worksheet4.Column(1).AutoFit();
                                        worksheet4.Column(2).AutoFit();
                                        worksheet4.Column(3).AutoFit();
                                        worksheet4.Column(4).AutoFit();
                                        worksheet4.Column(5).AutoFit();
                                        worksheet4.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }

                    if (4 >= _monthFrom && 4 <= _monthTo)
                    {
                        string aprFrom = "04/01/" + _accountingRpt.Period;
                        string aprTo = "04/30/" + _accountingRpt.Period;
                        worksheet.Column(5).Width = 20;
                        worksheet1.Column(5).Width = 20;

                        ExcelWorksheet worksheet5 = package.Workbook.Worksheets[6];
                        using (SqlConnection DbCon05 = new SqlConnection(Tools.conString))
                        {
                            DbCon05.Open();
                            using (SqlCommand cmd05 = DbCon05.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd05.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + aprTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + aprFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3 
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)  
								
                                Order BY C.ID";
                                cmd05.CommandTimeout = 0;
                                cmd05.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd05.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd05.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr04 = cmd05.ExecuteReader())
                                {
                                    if (dr04.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr04.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr04["ID"]);
                                            rSingle.Name = Convert.ToString(dr04["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr04["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr04["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr04["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr04["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet5.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet5.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet5.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet5.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet5.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet5.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet5.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet5.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet5.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet5.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet5.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet5.PrinterSettings.FitToPage = true;
                                        worksheet5.PrinterSettings.FitToWidth = 1;
                                        worksheet5.PrinterSettings.FitToHeight = 0;
                                        worksheet5.PrinterSettings.PrintArea = worksheet5.Cells[1, 1, incRowExcel2, 6];
                                        worksheet5.Column(1).AutoFit();
                                        worksheet5.Column(2).AutoFit();
                                        worksheet5.Column(3).AutoFit();
                                        worksheet5.Column(4).AutoFit();
                                        worksheet5.Column(5).AutoFit();
                                        worksheet5.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    if (5 >= _monthFrom && 5 <= _monthTo)
                    {
                        string mayFrom = "05/01/" + _accountingRpt.Period;
                        string mayTo = "05/31/" + _accountingRpt.Period;
                        worksheet1.Column(6).Width = 20;
                        worksheet1.Column(6).Width = 20;

                        ExcelWorksheet worksheet6 = package.Workbook.Worksheets[7];
                        using (SqlConnection DbCon06 = new SqlConnection(Tools.conString))
                        {
                            DbCon06.Open();
                            using (SqlCommand cmd06 = DbCon06.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd06.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + mayTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + mayFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3 
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0) 
								
                                Order BY C.ID";
                                cmd06.CommandTimeout = 0;
                                cmd06.CommandTimeout = 0;
                                cmd06.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd06.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd06.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr06 = cmd06.ExecuteReader())
                                {
                                    if (dr06.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr06.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr06["ID"]);
                                            rSingle.Name = Convert.ToString(dr06["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr06["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr06["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr06["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr06["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet6.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet6.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet6.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet6.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet6.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet6.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet6.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet6.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet6.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet6.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet6.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet6.PrinterSettings.FitToPage = true;
                                        worksheet6.PrinterSettings.FitToWidth = 1;
                                        worksheet6.PrinterSettings.FitToHeight = 0;
                                        worksheet6.PrinterSettings.PrintArea = worksheet6.Cells[1, 1, incRowExcel2, 6];
                                        worksheet6.Column(1).AutoFit();
                                        worksheet6.Column(2).AutoFit();
                                        worksheet6.Column(3).AutoFit();
                                        worksheet6.Column(4).AutoFit();
                                        worksheet6.Column(5).AutoFit();
                                        worksheet6.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }




                    if (6 >= _monthFrom && 6 <= _monthTo)
                    {
                        string junFrom = "06/01/" + _accountingRpt.Period;
                        string junTo = "06/30/" + _accountingRpt.Period;
                        worksheet.Column(7).Width = 20;
                        worksheet1.Column(7).Width = 20;

                        ExcelWorksheet worksheet7 = package.Workbook.Worksheets[8];
                        using (SqlConnection DbCon07 = new SqlConnection(Tools.conString))
                        {
                            DbCon07.Open();
                            using (SqlCommand cmd07 = DbCon07.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd07.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + junTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + junFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3 
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)
								
                                Order BY C.ID";
                                cmd07.CommandTimeout = 0;
                                cmd07.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd07.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd07.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr07 = cmd07.ExecuteReader())
                                {
                                    if (dr07.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr07.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr07["ID"]);
                                            rSingle.Name = Convert.ToString(dr07["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr07["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr07["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr07["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr07["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet7.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet7.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet7.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet7.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet7.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet7.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet7.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet7.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet7.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet7.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet7.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet7.PrinterSettings.FitToPage = true;
                                        worksheet7.PrinterSettings.FitToWidth = 1;
                                        worksheet7.PrinterSettings.FitToHeight = 0;
                                        worksheet7.PrinterSettings.PrintArea = worksheet7.Cells[1, 1, incRowExcel2, 6];
                                        worksheet7.Column(1).AutoFit();
                                        worksheet7.Column(2).AutoFit();
                                        worksheet7.Column(3).AutoFit();
                                        worksheet7.Column(4).AutoFit();
                                        worksheet7.Column(5).AutoFit();
                                        worksheet7.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }

                    if (7 >= _monthFrom && 7 <= _monthTo)
                    {
                        string julFrom = "07/01/" + _accountingRpt.Period;
                        string julTo = "07/31/" + _accountingRpt.Period;
                        worksheet.Column(8).Width = 20;
                        worksheet1.Column(8).Width = 20;

                        ExcelWorksheet worksheet8 = package.Workbook.Worksheets[9];
                        using (SqlConnection DbCon08 = new SqlConnection(Tools.conString))
                        {
                            DbCon08.Open();
                            using (SqlCommand cmd08 = DbCon08.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd08.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + julTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + julFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)
								
                                Order BY C.ID";
                                cmd08.CommandTimeout = 0;
                                cmd08.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd08.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd08.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr08 = cmd08.ExecuteReader())
                                {
                                    if (dr08.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr08.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr08["ID"]);
                                            rSingle.Name = Convert.ToString(dr08["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr08["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr08["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr08["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr08["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet8.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet8.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet8.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet8.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet8.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet8.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet8.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet8.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet8.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet8.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet8.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet8.PrinterSettings.FitToPage = true;
                                        worksheet8.PrinterSettings.FitToWidth = 1;
                                        worksheet8.PrinterSettings.FitToHeight = 0;
                                        worksheet8.PrinterSettings.PrintArea = worksheet8.Cells[1, 1, incRowExcel2, 6];
                                        worksheet8.Column(1).AutoFit();
                                        worksheet8.Column(2).AutoFit();
                                        worksheet8.Column(3).AutoFit();
                                        worksheet8.Column(4).AutoFit();
                                        worksheet8.Column(5).AutoFit();
                                        worksheet8.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    if (8 >= _monthFrom && 8 <= _monthTo)
                    {
                        string augFrom = "08/01/" + _accountingRpt.Period;
                        string augTo = "08/31/" + _accountingRpt.Period;
                        worksheet.Column(9).Width = 20;
                        worksheet1.Column(9).Width = 20;

                        ExcelWorksheet worksheet9 = package.Workbook.Worksheets[10];
                        using (SqlConnection DbCon09 = new SqlConnection(Tools.conString))
                        {
                            DbCon09.Open();
                            using (SqlCommand cmd09 = DbCon09.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd09.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + augTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + augFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)
								
                                Order BY C.ID";
                                cmd09.CommandTimeout = 0;
                                cmd09.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd09.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd09.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr09 = cmd09.ExecuteReader())
                                {
                                    if (dr09.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr09.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr09["ID"]);
                                            rSingle.Name = Convert.ToString(dr09["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr09["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr09["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr09["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr09["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet9.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet9.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet9.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet9.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet9.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet9.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet9.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet9.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet9.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet9.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet9.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet9.PrinterSettings.FitToPage = true;
                                        worksheet9.PrinterSettings.FitToWidth = 1;
                                        worksheet9.PrinterSettings.FitToHeight = 0;
                                        worksheet9.PrinterSettings.PrintArea = worksheet9.Cells[1, 1, incRowExcel2, 6];
                                        worksheet9.Column(1).AutoFit();
                                        worksheet9.Column(2).AutoFit();
                                        worksheet9.Column(3).AutoFit();
                                        worksheet9.Column(4).AutoFit();
                                        worksheet9.Column(5).AutoFit();
                                        worksheet9.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (9 >= _monthFrom && 9 <= _monthTo)
                    {
                        string sepFrom = "09/01/" + _accountingRpt.Period;
                        string sepTo = "09/30/" + _accountingRpt.Period;
                        worksheet.Column(10).Width = 20;
                        worksheet1.Column(10).Width = 20;

                        ExcelWorksheet worksheet10 = package.Workbook.Worksheets[11];
                        using (SqlConnection DbCon10 = new SqlConnection(Tools.conString))
                        {
                            DbCon10.Open();
                            using (SqlCommand cmd10 = DbCon10.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd10.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + sepTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK) and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + sepFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0) 
								
                                Order BY C.ID";
                                cmd10.CommandTimeout = 0;
                                cmd10.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd10.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd10.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr10 = cmd10.ExecuteReader())
                                {
                                    if (dr10.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr10.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr10["ID"]);
                                            rSingle.Name = Convert.ToString(dr10["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr10["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr10["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr10["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr10["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet10.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet10.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet10.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet10.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet10.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet10.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet10.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet10.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet10.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet10.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet10.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet10.PrinterSettings.FitToPage = true;
                                        worksheet10.PrinterSettings.FitToWidth = 1;
                                        worksheet10.PrinterSettings.FitToHeight = 0;
                                        worksheet10.PrinterSettings.PrintArea = worksheet10.Cells[1, 1, incRowExcel2, 6];
                                        worksheet10.Column(1).AutoFit();
                                        worksheet10.Column(2).AutoFit();
                                        worksheet10.Column(3).AutoFit();
                                        worksheet10.Column(4).AutoFit();
                                        worksheet10.Column(5).AutoFit();
                                        worksheet10.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (10 >= _monthFrom && 10 <= _monthTo)
                    {
                        string octFrom = "10/01/" + _accountingRpt.Period;
                        string octTo = "10/31/" + _accountingRpt.Period;
                        worksheet.Column(11).Width = 20;
                        worksheet1.Column(11).Width = 20;

                        ExcelWorksheet worksheet11 = package.Workbook.Worksheets[12];
                        using (SqlConnection DbCon11 = new SqlConnection(Tools.conString))
                        {
                            DbCon11.Open();
                            using (SqlCommand cmd11 = DbCon11.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd11.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + octTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + octFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0)
								
                                Order BY C.ID";
                                cmd11.CommandTimeout = 0;
                                cmd11.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd11.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd11.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr11 = cmd11.ExecuteReader())
                                {
                                    if (dr11.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr11.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr11["ID"]);
                                            rSingle.Name = Convert.ToString(dr11["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr11["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr11["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr11["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr11["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet11.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet11.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet11.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet11.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet11.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet11.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet11.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet11.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet11.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet11.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet11.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet11.PrinterSettings.FitToPage = true;
                                        worksheet11.PrinterSettings.FitToWidth = 1;
                                        worksheet11.PrinterSettings.FitToHeight = 0;
                                        worksheet11.PrinterSettings.PrintArea = worksheet11.Cells[1, 1, incRowExcel2, 6];
                                        worksheet11.Column(1).AutoFit();
                                        worksheet11.Column(2).AutoFit();
                                        worksheet11.Column(3).AutoFit();
                                        worksheet11.Column(4).AutoFit();
                                        worksheet11.Column(5).AutoFit();
                                        worksheet11.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (11 >= _monthFrom && 11 <= _monthTo)
                    {
                        string novFrom = "11/01/" + _accountingRpt.Period;
                        string novTo = "11/30/" + _accountingRpt.Period;
                        worksheet.Column(12).Width = 20;
                        worksheet1.Column(12).Width = 20;

                        ExcelWorksheet worksheet12 = package.Workbook.Worksheets[13];
                        using (SqlConnection DbCon12 = new SqlConnection(Tools.conString))
                        {
                            DbCon12.Open();
                            using (SqlCommand cmd12 = DbCon12.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }

                                cmd12.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + novTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + novFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3 
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2 
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0) 
								
                                Order BY C.ID";
                                cmd12.CommandTimeout = 0;
                                cmd12.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd12.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd12.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr12 = cmd12.ExecuteReader())
                                {
                                    if (dr12.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr12.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr12["ID"]);
                                            rSingle.Name = Convert.ToString(dr12["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr12["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr12["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr12["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr12["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet12.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet12.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet12.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet12.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet12.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet12.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet12.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet12.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet12.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet12.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet12.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet12.PrinterSettings.FitToPage = true;
                                        worksheet12.PrinterSettings.FitToWidth = 1;
                                        worksheet12.PrinterSettings.FitToHeight = 0;
                                        worksheet12.PrinterSettings.PrintArea = worksheet12.Cells[1, 1, incRowExcel2, 6];
                                        worksheet12.Column(1).AutoFit();
                                        worksheet12.Column(2).AutoFit();
                                        worksheet12.Column(3).AutoFit();
                                        worksheet12.Column(4).AutoFit();
                                        worksheet12.Column(5).AutoFit();
                                        worksheet12.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }



                    if (12 >= _monthFrom && 12 <= _monthTo)
                    {
                        string decFrom = "12/01/" + _accountingRpt.Period;
                        string decTo = "12/31/" + _accountingRpt.Period;
                        worksheet.Column(13).Width = 20;
                        worksheet1.Column(13).Width = 20;

                        ExcelWorksheet worksheet13 = package.Workbook.Worksheets[14];
                        using (SqlConnection DbCon13 = new SqlConnection(Tools.conString))
                        {
                            DbCon13.Open();
                            using (SqlCommand cmd13 = DbCon13.CreateCommand())
                            {
                                string _status = "";

                                if (_accountingRpt.Status == 1)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 2)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                                }
                                else if (_accountingRpt.Status == 3)
                                {
                                    _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                                }
                                else if (_accountingRpt.Status == 4)
                                {
                                    _status = " and B.Status = 1  ";
                                }
                                else if (_accountingRpt.Status == 5)
                                {
                                    _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                                }
                                else if (_accountingRpt.Status == 6)
                                {
                                    _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                                }


                                cmd13.CommandText = @"
                                SELECT C.ID, C.Name,       
                                CAST(ISNULL(B.PreviousBaseBalance, 0) AS NUMERIC(19,4)) AS PreviousBaseBalance,      
                                CAST(A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) AS NUMERIC(19,4)) AS BaseDebitMutasi,       
                                CAST(A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) AS NUMERIC(19,4)) AS BaseCreditMutasi,      
                                CAST(A.CurrentBaseBalance AS NUMERIC(19,4)) AS CurrentBaseBalance      
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,      
                                SUM(B.SumDebit) AS CurrentDebit,       
                                SUM(B.SumCredit) AS CurrentCredit,       
                                SUM(B.SumBaseDebit) AS CurrentBaseDebit,       
                                SUM(B.SumBaseCredit) AS CurrentBaseCredit      
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                SUM(A.Debit) AS SumDebit,      
                                SUM(A.Credit) AS SumCredit,      
                                SUM(A.BaseDebit) AS SumBaseDebit,      
                                SUM(A.BaseCredit) AS SumBaseCredit,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9     
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)  
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK And D.Status in (1,2)   
                                WHERE  B.ValueDate <= '" + decTo + @"' and  B.PeriodPK = @PeriodPK 
	                            " + _status + @"
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE
                                (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS A LEFT JOIN (       
                                SELECT A.AccountPK,        
                                SUM(B.Balance) AS PreviousBalance,        
                                SUM(B.BaseBalance) AS PreviousBaseBalance,       
                                SUM(B.SumDebit) AS PreviousDebit,        
                                SUM(B.SumCredit) AS PreviousCredit,        
                                SUM(B.SumBaseDebit) AS PreviousBaseDebit,        
                                SUM(B.SumBaseCredit) AS PreviousBaseCredit       
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (       
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,        
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,        
                                SUM(A.Debit) AS SumDebit,        
                                SUM(A.Credit) AS SumCredit,        
                                SUM(A.BaseDebit) AS SumBaseDebit,        
                                SUM(A.BaseCredit) AS SumBaseCredit,        
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,        
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9       
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)   
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK    And D.Status in (1,2)   
                                WHERE  B.ValueDate < '" + decFrom + @"' and  B.PeriodPK = @PeriodPK  
	                            and B.status <> 3
								
                                Group BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9        
                                ) AS B        
                                WHERE   (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)       and A.Status = 2
                                Group BY A.AccountPK       
                                ) AS B ON A.AccountPK = B.AccountPK        
                                INNER JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status in (1,2)    
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status in (1,2)   
                                WHERE (A.CurrentBalance <> 0)          
                                OR (A.CurrentDebit - ISNULL(B.PreviousDebit, 0) <> 0)        
                                OR (A.CurrentCredit - ISNULL(B.PreviousCredit, 0) <> 0)        
                                OR (A.CurrentBaseBalance <> 0)        
                                OR (A.CurrentBaseDebit - ISNULL(B.PreviousBaseDebit, 0) <> 0)        
                                OR (A.CurrentBaseCredit - ISNULL(B.PreviousBaseCredit, 0) <> 0) 
								
                                Order BY C.ID";
                                cmd13.CommandTimeout = 0;
                                cmd13.Parameters.AddWithValue("@ValueDateFrom", _accountingRpt.ValueDateFrom);
                                cmd13.Parameters.AddWithValue("@ValueDateTo", _accountingRpt.ValueDateTo);
                                cmd13.Parameters.AddWithValue("@PeriodPK", _accountingRpt.PeriodPK);

                                using (SqlDataReader dr13 = cmd13.ExecuteReader())
                                {
                                    if (dr13.HasRows)
                                    {
                                        List<AccountingRpt> rList = new List<AccountingRpt>();
                                        while (dr13.Read())
                                        {
                                            AccountingRpt rSingle = new AccountingRpt();
                                            rSingle.ID = Convert.ToString(dr13["ID"]);
                                            rSingle.Name = Convert.ToString(dr13["Name"]);
                                            rSingle.PreviousBaseBalance = Convert.ToDecimal(dr13["PreviousBaseBalance"]);
                                            rSingle.BaseDebitMutasi = Convert.ToDecimal(dr13["BaseDebitMutasi"]);
                                            rSingle.BaseCreditMutasi = Convert.ToDecimal(dr13["BaseCreditMutasi"]);
                                            rSingle.CurrentBaseBalance = Convert.ToDecimal(dr13["CurrentBaseBalance"]);
                                            rList.Add(rSingle);
                                        }
                                        var QueryByClientID2 =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel2 = 1;
                                        int _IncRow2 = 11;
                                        foreach (var rsHeader in QueryByClientID2)
                                        {

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet13.Cells[incRowExcel2, 1].Value = rsDetail.ID;
                                                worksheet13.Cells[incRowExcel2, 2].Value = rsDetail.Name;
                                                worksheet13.Cells[incRowExcel2, 3].Value = rsDetail.PreviousBaseBalance;
                                                worksheet13.Cells[incRowExcel2, 3].Style.Numberformat.Format = "#,####0.00";
                                                worksheet13.Cells[incRowExcel2, 4].Value = rsDetail.BaseDebitMutasi;
                                                worksheet13.Cells[incRowExcel2, 4].Style.Numberformat.Format = "#,####0.00";
                                                worksheet13.Cells[incRowExcel2, 5].Value = rsDetail.BaseCreditMutasi;
                                                worksheet13.Cells[incRowExcel2, 5].Style.Numberformat.Format = "#,####0.00";
                                                worksheet13.Cells[incRowExcel2, 6].Value = rsDetail.CurrentBaseBalance;
                                                worksheet13.Cells[incRowExcel2, 6].Style.Numberformat.Format = "#,####0.00";

                                                worksheet13.Calculate();

                                                incRowExcel2++;


                                                _IncRow2 = _IncRow2 + 2;
                                            }
                                            worksheet1.Calculate();
                                            int _IncRowA5 = incRowExcel2 + 1000;

                                        }

                                        worksheet13.PrinterSettings.FitToPage = true;
                                        worksheet13.PrinterSettings.FitToWidth = 1;
                                        worksheet13.PrinterSettings.FitToHeight = 0;
                                        worksheet13.PrinterSettings.PrintArea = worksheet13.Cells[1, 1, incRowExcel2, 6];
                                        worksheet13.Column(1).AutoFit();
                                        worksheet13.Column(2).AutoFit();
                                        worksheet13.Column(3).AutoFit();
                                        worksheet13.Column(4).AutoFit();
                                        worksheet13.Column(5).AutoFit();
                                        worksheet13.Column(6).AutoFit();

                                    }


                                }

                            }

                        }
                    }


                    package.Save();
                    return FilePath;
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean GenerateReportCommission(string _userID, CommissionRpt _commissionRpt)
        {
            #region CSR Fee Report
            if (_commissionRpt.ReportName.Equals("CSR Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = " And A.AgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And P.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =
                                @"
declare @CSRPercent table
(
	Date datetime,
	AgentPK INT,
	SharePercent numeric(8,4)
)

DECLARE @CAgentPK INT
DECLARE @CounterDate datetime

Declare A Cursor For
	SELECT AgentPK FROM Agent A WHERE status = 2
	AND BitIsAgentCSR = 1
	" + _paramAgent + _paramFund + @"
Open A
Fetch Next From A
INTO @CAgentPK

While @@FETCH_STATUS = 0  
Begin
	SET @CounterDate = @dateFrom
	WHILE @CounterDate <= @DateTo
	BEGIN
		INSERT INTO @CSRPercent
		        ( Date,AgentPK, SharePercent )
		SELECT @CounterDate,@CAgentPK,MiFeePercent FROM dbo.AgentFeeSetup
		WHERE status = 2 AND date =
		(
			SELECT MAX(date) FROM dbo.AgentFeeSetup WHERE AgentPK = @CAgentPK AND status = 2 AND Date <= @CounterDate
		) AND AgentPK = @CAgentPK

		SET @CounterDate = DATEADD(DAY,1,@CounterDate)
	END	

	Fetch Next From A 
	into  @CAgentPK
End	
Close A
Deallocate A



Select  isnull(B.Name,'') FundName
,isnull(A.Name,'') FundClientName
,isnull(D.ID,'') CurrencyID
,P.MfeeDate
,isnull(P.NAV,0) CloseNAV
,sum(isnull(P.SubsUnit,0)) SubsUnit
,sum(isnull(P.SubsAmount,0)) SubsAmount
,sum(isnull(P.RedemptionUnit,0)) RedempUnit
,sum(isnull(P.RedemptionAmount,0)) RedempAmount
,sum(isnull(P.UnitAmount,0)) MFeeDateUnit
,sum(isnull(P.AUM,0)) AUM
,sum(isnull(P.managementFeeAmount,0)) ManagementFee
,sum(isnull(P.AUM,0)) * ISNULL(G.SharePercent,0) / 365 /100 SharingFee
,ISNULL(G.SharePercent,0) Percentage
from [DailyDataForCommissionRpt] P
left join Fund B on P.FundPK = B.FundPK and B.status in (1,2)
left join Currency D on P.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join AgentCSRFund E on P.fundPK = E.FundPK and E.status = 2 
left join Agent A on E.AgentPK = A.AgentPK and A.status in (1,2)
LEFT JOIN @CSRPercent G ON P.MFeeDate = G.Date AND A.AgentPK = G.AgentPK
Where P.MfeeDate between @DateFrom and @DateTo and A.BitIsAgentCSR = 1
" + _paramAgent + _paramFund + @"

 And P.FundPK in
(
    Select distinct fundPK from AgentCSRFund where status = 2
)
Group by B.Name,P.NAV,P.Mfeedate,D.ID,G.SharePercent,A.Name
order by P.MfeeDate
";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CSRFeeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CSRFeeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("CSR Fee Report");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.FundClientName, r.Currency, r.Percentage } into rGroup
                                         select rGroup;

                                        bool _bit = false;
                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "CSR FEE REPORT";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "CSR Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Total Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10].Value = "FeeShare"; ;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                _bit = rsDetail.BitisAgentBank;
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SharingFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":J" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";

                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + StartRow + ":J" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();

                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";

                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 0;
                                        worksheet.Column(10).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Sharing Fee Report
            else if (_commissionRpt.ReportName.Equals("Sharing Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgentFeeType = "";
                            string _paramFundFeeType = "";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFeeType))
                            {
                                _paramAgentFeeType = " And A.SharingFeeType in ( " + _commissionRpt.AgentFeeType + " ) ";
                            }
                            else
                            {
                                _paramAgentFeeType = "";
                            }

                            if (!_host.findString(_commissionRpt.FundFeeType.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFeeType))
                            {
                                _paramFundFeeType = " And A.MFeeType in ( " + _commissionRpt.FundFeeType + " ) ";
                            }
                            else
                            {
                                _paramFundFeeType = "";
                            }

                            cmd.CommandText =
                                @"
                           
DECLARE @Table TABLE
(
	FundClientPK INT,
	FundPK INT
	
)

	
DECLARE @FundPK int
Declare @FundClientPK INT
    
CREATE TABLE #TempSharingFee
(
FundPK int,
FundName nvarchar(1000),
FundClientPK int,
FundClientName nvarchar(1000),
MFeePercent Numeric(20,6), 	
CurrencyID nvarchar(5),                            
MfeeDate datetime,
CloseNAV Numeric(20,6),
SubsUnit Numeric(24,4),
SubsAmount Numeric(24,2),
RedempUnit Numeric(24,4),
RedempAmount Numeric(24,2),
SwitchInUnit Numeric(24,4),
SwitchInAmount Numeric(24,2),
SwitchOutUnit Numeric(24,4),
SwitchOutAmount Numeric(24,2),
MFeeDateUnit numeric(24,4),
AUM Numeric(24,6),
ManagementFee Numeric(24,6),
SharingFee Numeric(24,6),
Percentage Numeric(24,6),
MFeeType nvarchar(100),   
SharingFeeType nvarchar(100)
)


INSERT INTO #TempSharingFee
Select  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(E.DescOne,'FLAT') MFeeType
,ISNULL(F.DescOne,'FLAT') SharingFeeType
from [dbo].[DailyDataForCommissionRptNew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN dbo.MasterValue E ON A.MFeeType = E.Code AND E.ID = 'FundFeeType' AND E.status IN (1,2)
LEFT JOIN dbo.MasterValue F ON A.SharingFeeType = F.Code AND F.ID = 'AgentFeeType' AND F.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
order by A.FundPK,A.FundClientPK,A.MfeeDate


INSERT INTO @Table
( FundClientPK, FundPK )
Select DISTINCT FundClientPK,FundPK from #TempSharingFee
where MfeeDate between @DateFrom and @DateTo 
group by FundPK,FundClientPK
having sum(ISNULL(AUM,0)) > 0 

	
SELECT  isnull(B.FundPK,'') FundPK
,isnull(B.Name,'') FundName
,isnull(C.FundClientPK,'') FundClientPK
,isnull(C.Name,'') FundClientName
,isnull(A.MFeePercent,0) MFeePercent
,isnull(D.ID,'') CurrencyID
,A.MfeeDate
,isnull(A.NAV,0) CloseNAV
,isnull(A.SubsUnit,0) SubsUnit
,isnull(A.SubsAmount,0) SubsAmount
,isnull(A.RedempUnit,0) RedempUnit
,isnull(A.RedempAmount,0) RedempAmount
,isnull(A.SwitchInUnit,0) SwitchInUnit
,isnull(A.SwitchInAmount,0) SwitchInAmount
,isnull(A.SwitchOutUnit,0) SwitchOutUnit
,isnull(A.SwitchOutAmount,0) SwitchOutAmount
,isnull(A.UnitAmount,0) MFeeDateUnit
,isnull(A.AUM,0) AUM
,isnull(A.MFee,0) ManagementFee
,isnull(A.AgentFee,0) SharingFee
,isnull(A.AgentFeePercent,0) Percentage
,ISNULL(G.DescOne,'FLAT') MFeeType
,ISNULL(H.DescOne,'FLAT') SharingFeeType
from [DailyDataForCommissionRptnew] A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
LEFT JOIN dbo.MasterValue G ON A.MFeeType = G.Code AND G.ID = 'FundFeeType' AND G.status IN (1,2)
LEFT JOIN dbo.MasterValue H ON A.SharingFeeType = H.Code AND H.ID = 'AgentFeeType' AND H.status IN (1,2)
Where A.MfeeDate between @DateFrom and @DateTo 
" + _paramFundClient + _paramFund + _paramAgentFeeType + _paramFundFeeType + @"
AND E.FundClientPK IS NOT null
order by A.FundPK,A.FundClientPK,A.MfeeDate
                            ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SharingFeeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SharingFeeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Statement Report");

                                        int incRowExcel = 1;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SharingFeeReport> rList = new List<SharingFeeReport>();
                                        while (dr0.Read())
                                        {
                                            SharingFeeReport rSingle = new SharingFeeReport();
                                            rSingle.FundName = Convert.ToString(dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]));
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientName"]));
                                            rSingle.ManagementFeePercent = Convert.ToDecimal(dr0["MfeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MfeePercent"]));
                                            rSingle.Currency = Convert.ToString(dr0["CurrencyID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CurrencyID"]));
                                            rSingle.Date = Convert.ToString(dr0["MfeeDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MfeeDate"]));
                                            rSingle.Nav = Convert.ToDecimal(dr0["CloseNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CloseNav"]));
                                            rSingle.SubsUnit = Convert.ToDecimal(dr0["SubsUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsUnit"]));
                                            rSingle.SubsAmount = Convert.ToDecimal(dr0["SubsAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SubsAmount"]));
                                            rSingle.RedempUnit = Convert.ToDecimal(dr0["RedempUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempUnit"]));
                                            rSingle.RedempAmount = Convert.ToDecimal(dr0["RedempAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["RedempAmount"]));
                                            rSingle.SwitchInUnit = Convert.ToDecimal(dr0["SwitchInUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInUnit"]));
                                            rSingle.SwitchInAmount = Convert.ToDecimal(dr0["SwitchInAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchInAmount"]));
                                            rSingle.SwitchOutUnit = Convert.ToDecimal(dr0["SwitchOutUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutUnit"]));
                                            rSingle.SwitchOutAmount = Convert.ToDecimal(dr0["SwitchOutAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SwitchOutAmount"]));
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["MFeeDateUnit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["MFeeDateUnit"]));
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]));
                                            rSingle.MGTFee = Convert.ToDecimal(dr0["ManagementFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFee"]));
                                            rSingle.SharingFee = Convert.ToDecimal(dr0["SharingFee"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["SharingFee"]));
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Percentage"]));

                                            rSingle.MFeeType = Convert.ToString(dr0["MFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MFeeType"]));
                                            rSingle.SharingFeeType = Convert.ToString(dr0["SharingFeeType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SharingFeeType"]));

                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         group r by new { r.FundName, r.ManagementFeePercent, r.FundClientName, r.Currency, r.Percentage, r.MFeeType, r.SharingFeeType } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "TRAILING MANAGEMENT FEE";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Portfolio";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "ClientName";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 8].Value = _host.Get_CompanyAddress();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Rate";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ManagementFeePercent + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2783 0889";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Percentage + "%";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            string _cellSharingFee = "C" + incRowExcel;

                                            worksheet.Cells[incRowExcel, 8].Value = "(6221) 2970 7333";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Management Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.MFeeType;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sharing Fee Type";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SharingFeeType;

                                            incRowExcel++;


                                            worksheet.Cells[incRowExcel, 1].Value = "Currency";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Currency;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date.";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Value = "Units";
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Value = "Amount";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "Units";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Management Fee (" + rsHeader.Key.ManagementFeePercent + ")"; ;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "2.5%";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "FeeShare(" + rsHeader.Key.Percentage + ")"; ;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":J" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            incRowExcel++;
                                            int StartRow = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                int RowC = incRowExcel;
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowD + ":J" + RowD].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                worksheet.Cells[incRowExcel, 1].Value = Convert.ToDateTime(rsDetail.Date).ToString("MM/dd/yyyy");
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsUnit + rsDetail.SwitchInUnit;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.SubsAmount + rsDetail.SwitchInAmount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedempUnit + rsDetail.SwitchOutUnit;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedempAmount + rsDetail.SwitchOutAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(" + rsDetail.MGTFee + "/" + 1.1 + ")";
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SharingFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                incRowExcel++;

                                            }


                                            int RowH = incRowExcel;
                                            int EndRow = RowH - 1;

                                            worksheet.Cells["A" + RowH + ":J" + RowH].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + StartRow + ":C" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + StartRow + ":D" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + StartRow + ":E" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + StartRow + ":F" + EndRow + ")";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + StartRow + ":I" + EndRow + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + StartRow + ":J" + EndRow + ")";
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 3].Calculate();
                                            // worksheet.Cells[incRowExcel, 4].Calculate();
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                            incRowExcel++;

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 10];
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 20;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIl";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            #region Revenue Client Summary
            if (_commissionRpt.ReportName.Equals("Revenue Client Summary"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " And A.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " And A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                            DECLARE @Table TABLE
                            (
	                            FundClientPK INT,
	                            FundPK INT,
	                            startdate date
	
                            )

                            DECLARE @Table2 TABLE
                            (
	                            FundClientPK INT,
	                            FundPK INT,
	                            startdate date
	
                            )

	
                            DECLARE @FundPK int
                            Declare @FundClientPK INT

    
                            CREATE TABLE #TempSharingFee
                            (
                            FundPK int,
                            FundName nvarchar(1000),
                            FundClientPK int,
                            FundClientName nvarchar(1000),
                            MFeePercent Numeric(20,6),                   
                            MfeeDate datetime, 	       
                            AUM Numeric(24,6),
                            ManagementFee Numeric(24,6)
                            )
                            CREATE CLUSTERED INDEX indx_TempSharingFee ON #TempSharingFee (FundPK,FundClientPK);

  
                            CREATE TABLE #TempReport
                            (
                            FundName nvarchar(1000),
                            FundPK int,
                            FundClientName nvarchar(1000),
                            FundClientPK int,
                            MFeePercent Numeric(20,6),           
                            AUM Numeric(24,6),
                            ManagementFee Numeric(24,6)
                            )

                            CREATE TABLE #TempReportALL
                            (
                            FundPK int,
                            FundName nvarchar(1000),
                            FundClientPK int,
                            FundClientName nvarchar(1000),
                            startdate date,
                            lastdate date,   
                            AUM Numeric(24,6),
                            Revenue Numeric(24,6)
                            )
                            CREATE CLUSTERED INDEX indx_TempReportALL ON #TempReportALL (FundPK,FundClientPK);

                            if @BegginingBalanceStatus = 1
                            begin
	                            INSERT INTO #TempSharingFee
	                            Select  isnull(B.FundPK,'') FundPK
	                            ,isnull(B.Name,'') FundName
	                            ,isnull(C.FundClientPK,'') FundClientPK
	                            ,isnull(C.Name,'') FundClientName
	                            ,isnull(A.MFeePercent,0) MFeePercent
	                            ,A.MfeeDate
	                            ,isnull(A.AUM,0) AUM
	                            ,isnull(A.MFee,0) ManagementFee
	                            from [dbo].[DailyDataForCommissionRptNew] A
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                            Where A.MfeeDate <= @DateTo 
	                            " + _paramFundClient + _paramFund + @"
	                            order by A.FundPK,A.FundClientPK,A.MfeeDate
                            end
                            else if @BegginingBalanceStatus = 0
                            begin
	                            INSERT INTO #TempSharingFee
	                            Select  isnull(B.FundPK,'') FundPK
	                            ,isnull(B.Name,'') FundName
	                            ,isnull(C.FundClientPK,'') FundClientPK
	                            ,isnull(C.Name,'') FundClientName
	                            ,isnull(A.MFeePercent,0) MFeePercent
	                            ,A.MfeeDate
	                            ,isnull(A.AUM,0) AUM
	                            ,isnull(A.MFee,0) ManagementFee
	                            from [dbo].[DailyDataForCommissionRptNew] A
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                            Where A.MfeeDate between @DateFrom and @DateTo 
	                            " + _paramFundClient + _paramFund + @"
	                            order by A.FundPK,A.FundClientPK,A.MfeeDate
                            end

                            if @BegginingBalanceStatus = 1
                            begin
	                            INSERT INTO @Table
	                            ( FundClientPK, FundPK )
	                            Select DISTINCT FundClientPK,FundPK from #TempSharingFee
	                            where MfeeDate <= @DateTo 
	                            group by FundPK,FundClientPK
	                            having sum(ISNULL(AUM,0)) > 0 
                            end
                            else if @BegginingBalanceStatus = 0
                            begin
	                            INSERT INTO @Table
	                            ( FundClientPK, FundPK )
	                            Select DISTINCT FundClientPK,FundPK from #TempSharingFee
	                            where MfeeDate between @DateFrom and @DateTo 
	                            group by FundPK,FundClientPK
	                            having sum(ISNULL(AUM,0)) > 0 
                            end


                            insert into @Table2
                            select A.FundPK, A.FundClientPK, min(B.ValueDate) from @table A
                            inner join ClientSubscription B on A.FundPK = B.FundPK and A.FundClientPK = B.FundClientPK and B.status = 2
                            --where FundPK =  and status = 2 --and fundpk = 82 and instrumentPK=2881
                            group by A.FundPK,A.FundClientPK
                            order by A.FundPK,A.FundClientPK asc

                            if @BegginingBalanceStatus = 1
                            begin
	                            insert into #TempReport(FundName,FundPK,FundClientName,FundClientPK,ManagementFee)
	                            select A.FundName,A.FundPK,A.FundClientName,A.FundClientPK,sum(isnull(A.ManagementFee,0)) ManagementFee from (
	                            SELECT  isnull(B.FundPK,'') FundPK
	                            ,isnull(B.Name,'') FundName
	                            ,isnull(C.FundClientPK,'') FundClientPK
	                            ,isnull(C.Name,'') FundClientName
	                            ,isnull(A.MFeePercent,0) MFeePercent
	                            ,A.MfeeDate
	                            ,isnull(A.AUM,0) AUM
	                            ,isnull(A.MFee,0) ManagementFee
	                            from [DailyDataForCommissionRptnew] A
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                            LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
	                            WHERE E.FundClientPK IS NOT null and A.MfeeDate <= @DateTo 
                                " + _paramFundClient + _paramFund + @"
	                            ) A
	                            group by A.FundName,A.FundClientName,A.FundPK,A.FundClientPK
                            end 
                            else
                            begin
                             insert into #TempReport(FundName,FundPK,FundClientName,FundClientPK,ManagementFee)
	                            select A.FundName,A.FundPK,A.FundClientName,A.FundClientPK,sum(isnull(A.ManagementFee,0)) ManagementFee from (
	                            SELECT  isnull(B.FundPK,'') FundPK
	                            ,isnull(B.Name,'') FundName
	                            ,isnull(C.FundClientPK,'') FundClientPK
	                            ,isnull(C.Name,'') FundClientName
	                            ,isnull(A.MFeePercent,0) MFeePercent
	                            ,A.MfeeDate
	                            ,isnull(A.AUM,0) AUM
	                            ,isnull(A.MFee,0) ManagementFee
	                            from [DailyDataForCommissionRptnew] A
	                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
	                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                            LEFT JOIN @Table E ON A.FundPK = E.FundPK AND A.FundClientPK = E.FundClientPK
	                            WHERE E.FundClientPK IS NOT null And MfeeDate between @DateFrom and @DateTo 
                                " + _paramFundClient + _paramFund + @"
	                            ) A
	                            group by A.FundName,A.FundClientName,A.FundPK,A.FundClientPK
                            end


                            insert into #TempReportALL(FundPK,FundClientPK,FundName,FundClientName,Aum,startdate,lastdate,Revenue)
                            select A.FundPK,A.FundClientPK,A.FundName,A.FundClientName,B.AUM,@DateFrom StartDate,@DateTo LastDate,A.ManagementFee/1.1 Revenue from #TempReport A
                            inner join #TempSharingFee B on A.FundPK = B.FundPK and A.FundClientPK = B.FundClientPK
                            where B.MfeeDate = @DateTo

                            if @BegginingBalanceStatus = 1
                            update A set A.startdate = isnull(B.MfeeDate,@datefrom) from #TempReportALL A
                            inner join DailyDataForCommissionRptNew B on A.FundPK = B.FundPK and A.FundClientPK = B.FundClientPK

                            select FundName,FundClientName,startdate,lastdate,AUM,Revenue from #TempReportALL
                            order by FundClientPk,FundPK";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@BegginingBalanceStatus", _commissionRpt.BegDate);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RevenueClientSummary" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RevenueClientSummary" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Revenue Client Summary");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RevenueClientSummary> rList = new List<RevenueClientSummary>();
                                        while (dr0.Read())
                                        {

                                            RevenueClientSummary rSingle = new RevenueClientSummary();

                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.StartDate = Convert.ToDateTime(dr0["StartDate"]);
                                            rSingle.LastDate = Convert.ToDateTime(dr0["LastDate"]);
                                            rSingle.Revenue = Convert.ToDecimal(dr0["Revenue"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    orderby r.FundName ascending
                                                group r by new { r.FundClientName } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int _no = 1;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Revenue Client Summary";
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel++;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundClientName;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Bold = true;



                                            incRowExcel++;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "AUM per " + _commissionRpt.ValueDateTo;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Start Date";
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Last Date";
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Revenue";
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells["A" + RowB + ":F" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":F" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":F" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":F" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                            incRowExcel++;
                                            incRowExcel++;

                                            int first = incRowExcel;

                                            _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.StartDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.LastDate;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd-MMM-yy";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Revenue;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;

                                                _no++;

                                            }



                                            worksheet.Cells[incRowExcel, 5].Value = "TOTAL ";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 6].Style.Font.Bold = true;

                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        }
                                        


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).Width = 13;
                                        worksheet.Column(2).Width = 75;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Revenue Client Summary";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_commissionRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Revenue Per Client Group By SID
            else if (_commissionRpt.ReportName.Equals("Revenue Per Client Group By SID"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";
                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " and A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundClientFrom))
                            {
                                _paramFundClient = " and Z.FundClientPK in ( " + _commissionRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = "And B.SellingAgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            cmd.CommandText =
                                @" 
      
Declare @DateToMinOne datetime
Declare @DateToMinTwo DATETIME
DECLARE @DateToMinThree DATETIME
DECLARE @UnitDate DATETIME
DECLARE @NAVDate datetime

Set @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
Set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)
Set @DateToMinThree = dbo.FWorkingDay(@DateTo,-3)



SET @UnitDate = CASE WHEN dbo.CheckTodayIsHoliday(@DateTo) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinTwo) = 1 THEN 
						@DateToMinThree ELSE @DateToMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinOne) = 1 THEN
							@DateToMinTwo ELSE @DateToMinOne END END


SET @NAVDate = case when dbo.CheckTodayIsHoliday(@DateTo) = 1 
	then @DateToMinOne else @DateTo END 

DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)


DECLARE @NAVList TABLE
(
	LastDate DATETIME,
	FundPK INT
)


Declare @SID table
(
FundClientPK int,
SID nvarchar(50)

)


INSERT INTO @NAVList 
        ( LastDate, FundPK )
SELECT MAX(date),FundPK FROM dbo.CloseNAV WHERE status = 2 AND Date <= @DateTo
AND FundPK IN
(
	SELECT DISTINCT fundPK FROM fund WHERE status IN (1,2)
)
GROUP BY FundPK




CREATE TABLE #NAVLISTBYDate
(
	Date DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)
CREATE CLUSTERED INDEX indx_NAVLISTBYDate ON #NAVLISTBYDate (FundPK,Date);
INSERT INTO #NAVLISTBYDate
        ( Date, FundPK, NAV )
SELECT Date,FundPK,NAV FROM dbo.CloseNAV WHERE status = 2 AND Date IN(
		SELECT DISTINCT lastdate FROM @NAVList
	)


INSERT INTO @NAV
        ( LastDate, FundPK, NAV )
SELECT A.LastDate,A.FundPK,B.Nav FROM @NAVList A
LEFT JOIN #NAVLISTBYDate B ON A.LastDate = B.Date AND A.FundPK = B.FundPK


DECLARE @FCP TABLE
(
	FundCLientPK INT,
	FundPK INT,
	Unit NUMERIC(24,8)
)
INSERT INTO @FCP
        ( FundCLientPK, FundPK, Unit )
Select A.FundClientPK,FundPK,sum(isnull(UnitAmount,0)) Unit from FundclientPosition A 
    Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
	Left Join FundClient Z on B.SID = Z.SID and Z.status in (1,2)  
	WHERE A.date = @UnitDate 
	  " + _paramFund + _paramFundClient + @"
	group by A.FundClientPK,FundPK
	

Select B.SID,B.IFUACode
,isnull(B.name,'') FundClientName
,isnull(E.name,'') AgentName
,isnull(C.ID,'') FundID
,isnull(N.unit * O.NAV,0) AUM
,sum(isnull(A.MFee,0)) TotalMfeeWithHoliday
,isnull(A.MFeePercent,0)/100 MfeePercent
, sum(isnull(A.SubsAmount,0))  Subs
, sum(isnull(A.RedempAmount,0))  Redemp
, sum(isnull(A.SwitchInAmount,0))  SwitchInAmount
, sum(isnull(A.SwitchOutAmount,0))  SwitchOutAmount
,sum(isnull(A.SubsAmount,0) - isnull(A.RedempAmount,0) + isnull(A.SwitchInAmount,0) - isnull(A.SwitchOutAmount,0)) 	NetTransaction
from [dbo].[DailyDataForCommissionRptNew] A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join Currency D on C.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2) 
left join Department F on E.DepartmentPK = F.DepartmentPK and F.status in (1,2)
left join @FCP N on A.FundClientPK = N.FundClientPK and A.FundPK = N.FundPK 
LEFT JOIN @NAV O ON A.FundPK = O.fundPK
Left Join FundClient Z on B.SID = Z.SID and Z.status in (1,2)  
Where A.MfeeDate between @DateFrom and @DateTo
" + _paramFund + _paramFundClient + @"

group by B.SID,B.IFUACode,B.name,E.name,C.ID,N.unit,A.FundPK,A.MFeePercent,O.nav
                                  ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RevenuePerClientGroupBySID" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RevenuePerClientGroupBySID" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Revenue Per Client Group By SID");

                                        int incRowExcel = 2;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RevenuePerSalesRpt> rList = new List<RevenuePerSalesRpt>();
                                        while (dr0.Read())
                                        {
                                            RevenuePerSalesRpt rSingle = new RevenuePerSalesRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUACode = Convert.ToString(dr0["IFUACode"]);
                                            rSingle.SalesName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Revenue = Convert.ToDecimal(dr0["TotalMfeeWithHoliday"]);
                                            rSingle.Fee = Convert.ToDecimal(dr0["MfeePercent"]);
                                            rSingle.NetTransaction = Convert.ToDecimal(dr0["NetTransaction"]);
                                            rSingle.Subs = Convert.ToDecimal(dr0["Subs"]);
                                            rSingle.Redemp = Convert.ToDecimal(dr0["Redemp"]);
                                            rSingle.SwitchIn = Convert.ToDecimal(dr0["SwitchInAmount"]);
                                            rSingle.SwitchOut = Convert.ToDecimal(dr0["SwitchOutAmount"]);
                                            //rSingle.NetTransactionYTD = Convert.ToDecimal(dr0["NetTransactionYTD"]);
                                            //rSingle.RevenueYTD = Convert.ToDecimal(dr0["RevenueYTD"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.SalesName ascending
                                         group r by new { r.SID } into rGroup
                                         select rGroup;

                                        worksheet.Cells[incRowExcel, 1].Value = "Revenue Per Client Group By SID";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("dd/MMM/yyyy") + " - " + Convert.ToDateTime(_commissionRpt.ValueDateTo).ToString("dd/MMM/yyyy");
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Size = 11;
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;

                                        foreach (var rsHeader in QueryBySales)
                                        {

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "SID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SID;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Sales Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Fund ID";
                                            worksheet.Cells[incRowExcel, 5].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 6].Value = "AUM";

                                            worksheet.Cells[incRowExcel, 7].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 8].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 9].Value = "Switch In";
                                            worksheet.Cells[incRowExcel, 10].Value = "Switch Out";
                                            worksheet.Cells[incRowExcel, 11].Value = "Net Transaction";

                                            worksheet.Cells[incRowExcel, 12].Value = "Revenue";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            incRowExcel++;



                                            //var QueryByFundID =
                                            //     from r2 in rsHeader
                                            //     group r2 by new { r2.FundID, r2.Fee } into rGroup2
                                            //     select rGroup2;



                                            //foreach (var rsHeader2 in QueryByFundID)
                                            //{
                                            //    decimal totalAUM = 0;
                                            //    decimal totalRevenue = 0;
                                            //    decimal totalNetTransaction = 0;
                                            //    decimal totalNetTransactionYTD = 0;
                                            //    decimal totalRevenueYTD = 0;

                                            //    worksheet.Cells[incRowExcel, 1].Value = no;
                                            //    worksheet.Cells[incRowExcel, 2].Value = rsHeader2.Key.FundID;
                                            //    worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##";
                                            //    worksheet.Cells[incRowExcel, 3].Value = rsHeader2.Key.Fee + "%";
                                            //    worksheet.Cells[incRowExcel, 4].Value = "";
                                            //    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##";
                                            //    worksheet.Cells[incRowExcel, 5].Value = "";


                                            int idx = incRowExcel;

                                            int first = incRowExcel;
                                            int _no = 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SalesName;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Fee;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "0.0000%";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Subs;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Redemp;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##";


                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.SwitchIn;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##";

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SwitchOut;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NetTransaction;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Revenue;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##";

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 11;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                //totalAUM = totalAUM + rsDetail.AUM;
                                                //totalRevenue = totalRevenue + (rsDetail.Revenue);
                                                //totalNetTransaction = totalNetTransaction + rsDetail.NetTransaction;

                                                incRowExcel++;
                                                _no++;
                                                //}

                                                //worksheet.Cells[idx, 6].Style.Numberformat.Format = "#,##";
                                                //worksheet.Cells[idx, 6].Value = totalAUM;
                                                //worksheet.Cells[idx, 7].Value = "";
                                                //worksheet.Cells[idx, 10].Style.Numberformat.Format = "#,##";
                                                //worksheet.Cells[idx, 10].Value = totalNetTransaction;

                                                //worksheet.Cells[idx, 12].Style.Numberformat.Format = "#,##";
                                                //worksheet.Cells[idx, 12].Value = totalRevenue;


                                                //worksheet.Cells[idx, 1, idx, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                //worksheet.Cells[idx, 1, idx, 11].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                            }
                                            //incRowExcel++;

                                            int last = incRowExcel - 1;


                                            worksheet.Cells[incRowExcel, 4].Value = "Total";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + first.ToString() + ":F" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + first.ToString() + ":G" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + first.ToString() + ":H" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + first.ToString() + ":I" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + first.ToString() + ":J" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + first.ToString() + ":K" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + first.ToString() + ":L" + last.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##";
                                            //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + first.ToString() + ":L" + last.ToString() + ")";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 4;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 18;
                                        worksheet.Column(8).Width = 18;
                                        worksheet.Column(9).Width = 18;
                                        worksheet.Column(10).Width = 18;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.Column(12).Width = 18;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER CLIENT GROUP BY SID";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion

            else
            {
                return false;
            }
        }

        public string LaporanFinancialStatement(string _userID, AccountingRpt _accountingRpt)
        {
            try
            {

                DateTime _datetimeNow = DateTime.Now;
                string filePath = Tools.ReportsPath + "FinancialStatement" + "_" + _userID + ".xlsx";
                File.Copy(Tools.ReportsTemplatePath + "\\03\\" + "03_FinancialStatement.xlsx", filePath, true);
                FileInfo existingFile = new FileInfo(filePath);
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {

                    #region worksheet 1
                    ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                    worksheet.Column(3).Width = 0;
                    worksheet.Column(4).Width = 0;
                    worksheet.Column(5).Width = 0;
                    worksheet.Column(6).Width = 0;
                    worksheet.Column(7).Width = 0;
                    worksheet.Column(8).Width = 0;
                    worksheet.Column(9).Width = 0;
                    worksheet.Column(10).Width = 0;
                    worksheet.Column(11).Width = 0;
                    worksheet.Column(12).Width = 0;
                    worksheet.Column(13).Width = 0;
                    worksheet.Column(14).Width = 0;

                    string monthFrom1, monthTo1;
                    int _monthFrom1, _monthTo1;
                    monthFrom1 = Convert.ToDateTime(_accountingRpt.ValueDateFrom).ToString("MM");
                    _monthFrom1 = Convert.ToInt32(monthFrom1);

                    monthTo1 = Convert.ToDateTime(_accountingRpt.ValueDateTo).ToString("MM");
                    _monthTo1 = Convert.ToInt32(monthTo1);

                    if (1 >= _monthFrom1 && 1 <= _monthTo1)
                    {

                        worksheet.Column(3).Width = 20;
                    }

                    if (2 >= _monthFrom1 && 2 <= _monthTo1)
                    {

                        worksheet.Column(4).Width = 20;
                    }

                    if (3 >= _monthFrom1 && 3 <= _monthTo1)
                    {

                        worksheet.Column(5).Width = 20;
                    }
                    if (4 >= _monthFrom1 && 4 <= _monthTo1)
                    {

                        worksheet.Column(6).Width = 20;
                    }

                    if (5 >= _monthFrom1 && 5 <= _monthTo1)
                    {

                        worksheet.Column(7).Width = 20;
                    }
                    if (6 >= _monthFrom1 && 6 <= _monthTo1)
                    {

                        worksheet.Column(8).Width = 20;
                    }

                    if (7 >= _monthFrom1 && 7 <= _monthTo1)
                    {

                        worksheet.Column(9).Width = 20;
                    }
                    if (8 >= _monthFrom1 && 8 <= _monthTo1)
                    {

                        worksheet.Column(10).Width = 20;
                    }

                    if (9 >= _monthFrom1 && 9 <= _monthTo1)
                    {

                        worksheet.Column(11).Width = 20;
                    }
                    if (10 >= _monthFrom1 && 10 <= _monthTo1)
                    {

                        worksheet.Column(12).Width = 20;
                    }

                    if (11 >= _monthFrom1 && 11 <= _monthTo1)
                    {

                        worksheet.Column(13).Width = 20;
                    }

                    if (12 >= _monthFrom1 && 12 <= _monthTo1)
                    {

                        worksheet.Column(14).Width = 20;
                    }

                    #endregion

                    #region worksheet 2
                    ExcelWorksheet worksheet2 = package.Workbook.Worksheets[2];

                    using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                    {
                        DbCon01.Open();
                        using (SqlCommand cmd01 = DbCon01.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            string _monthFrom, _monthTo;
                            _monthFrom = Convert.ToString("01/01/");

                            _monthTo = Convert.ToString("12/31/");

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                            }

                            if (_accountingRpt.ParamData == 1)
                            {
                                _paramData = " and A.Groups = 1  ";
                            }
                            else if (_accountingRpt.ParamData == 2)
                            {
                                _paramData = " and A.Groups = 0  ";
                            }
                            else if (_accountingRpt.ParamData == 3)
                            {
                                _paramData = " and A.Groups in (0,1)  ";
                            }
                            cmd01.CommandText = @"DECLARE @PeriodPK int
                                Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                                Create table #TempTBMonthly  (
                                ID nvarchar(100),
                                Name nvarchar(500),
                                CurrID nvarchar(100),
                                Groups int,
                                ParentPK int,
                                Type int, 
                                Bulan int,
                                Balance numeric(22,2),
                                InstrumentPK int,
                                AgentPK int,
                                DepartmentPK int
                                )


                                Declare @DateCounter datetime
                                set @DateCounter = @ValueDateFrom

                                Declare @DateCounterBS DATETIME
                                SET @DateCounterBS =  DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@ValueDateFrom)+1,0))



                                while (@DateCounter<= @ValueDateTo)
                                BEGIN


                                insert into #TempTBMonthly
                                SELECT C.ID, C.Name,
                                D.ID,C.Groups,C.ParentPK,1,  
                                A.bulan
                                ,CAST(A.CurrentBaseBalance  AS NUMERIC(19,4)) AS CurrentBaseBalance  
                                ,InstrumentPK,A.AgentPK,A.DepartmentPK

	                                --CAST(A.CurrentBaseBalance    AS NUMERIC(19,4)) AS CurrentBaseBalance  ,E.OracleMapping          
           
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,Bulan,B.InstrumentPK,AgentPK,B.DepartmentPK
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9,   
                                --,CASE WHEN MONTH(B.ValueDate) = 12 AND YEAR(B.ValueDate) <> YEAR(@ValueDateTo) THEN MONTH(@DateCounter) ELSE  MONTH(B.ValueDate) END bulan
                                month(@DateCounterBS) bulan
                                ,isnull(A.InstrumentPK,0) InstrumentPK
                                ,isnull(A.AgentPK,0) AgentPK
                                ,isnull(A.DepartmentPK,0) DepartmentPK
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                LEFT JOIN Account C ON A.AccountPK = C.AccountPK   AND C.Status = 2    
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK AND D.Status = 2      
                                WHERE  B.ValueDate <= @DateCounterBS AND  B.PeriodPK = @PeriodPK 

                                 " + _status + @"

                                GROUP BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9,B.ValueDate,A.InstrumentPK,A.AgentPK,A.DepartmentPK
                                ) AS B        
                                WHERE  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)   AND A.Type IN (1,2)   And A.status = 2      
                                Group BY A.AccountPK,bulan,InstrumentPK,AgentPK,B.DepartmentPK
                                ) A
                                Left JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2    
                                    --AND  A.CurrentBaseBalance <> 0  AND E.OracleMapping IS not null
                                Order BY C.ID


			
                                insert into #TempTBMonthly
                                SELECT C.ID, C.Name,
                                D.ID,C.Groups,C.ParentPK,1,  A.bulan,
                                CAST(A.CurrentBaseBalance  AS NUMERIC(19,4)) AS CurrentBaseBalance  
	                                --CAST(A.CurrentBaseBalance    AS NUMERIC(19,4)) AS CurrentBaseBalance  ,E.OracleMapping          
                                           ,InstrumentPK,A.AgentPK,A.DepartmentPK
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,Bulan,InstrumentPK,AgentPK,B.DepartmentPK
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9,   
                                --,CASE WHEN MONTH(B.ValueDate) = 12 AND YEAR(B.ValueDate) <> YEAR(@ValueDateTo) THEN MONTH(@DateCounter) ELSE  MONTH(B.ValueDate) END bulan
                                month(@DateCounterBS) bulan
                                ,isnull(A.InstrumentPK,0) InstrumentPK
                                ,isnull(A.AgentPK,0) AgentPK
                                ,isnull(A.DepartmentPK,0) DepartmentPK
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                LEFT JOIN Account C ON A.AccountPK = C.AccountPK   AND C.Status = 2    
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK AND D.Status = 2      
                                WHERE   month(B.ValueDate) <= month(@DateCounter) AND  B.PeriodPK = @PeriodPK 


                                " + _status + @"
                                  GROUP BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9,B.ValueDate,A.InstrumentPK,A.AgentPK,A.DepartmentPK
                                ) AS B        
                                WHERE  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)   AND A.Type IN (3,4)   And A.status = 2      
                                Group BY A.AccountPK,bulan,InstrumentPK,AgentPK,B.DepartmentPK
                                ) A
                                Left JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2    
                                    --AND  A.CurrentBaseBalance <> 0  AND E.OracleMapping IS not null
                                Order BY C.ID


                                SET @DateCounter = DATEADD(MONTH,1,@DateCounter)
                                SET @DateCounterBS = DATEADD(MONTH,1,@DateCounterBS)

                                SET @DateCounterBS = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@DateCounterBS)+1,0))
			
                                END

                                DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                                @query  AS NVARCHAR(MAX)
                                ,@colsForQueryBalance AS NVARCHAR(MAX)

                                select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(bulan) +',0) ' + QUOTENAME(bulan) 
                                            from (SELECT DISTINCT bulan FROM #TempTBMonthly) A
			                                order by A.bulan
                                    FOR XML PATH(''), TYPE
                                    ).value('.', 'NVARCHAR(MAX)') 
                                ,1,1,'')


	                                select @cols = STUFF((SELECT distinct ',' + QUOTENAME(bulan) 
                                            from #TempTBMonthly
				
                                    FOR XML PATH(''), TYPE
                                    ).value('.', 'NVARCHAR(MAX)') 
                                ,1,1,'')


                                select @colsForQueryBalance = STUFF((SELECT ',isnull(' + QUOTENAME(bulan) +',0) ' + QUOTENAME(Bulan) 
                                            from (SELECT DISTINCT bulan FROM #TempTBMonthly) A
			                                order by A.bulan
                                    FOR XML PATH(''), TYPE
                                    ).value('.', 'NVARCHAR(MAX)') 
                                ,1,1,'')

                                set @query = 'SELECT ID,Name,InstrumentPK,AgentPK,DepartmentPK,' + @colsForQuery + ' into #finalResult  from 
                                                    (
                                                    SELECT ID,Bulan,Balance,Name,InstrumentPK,AgentPK,DepartmentPK FROM #TempTBMonthly 
                                                ) x
                                                pivot 
                                                (
                                                    SUM(Balance)
                                                    for Bulan in (' + @cols + ')
                                                ) p 
			                                    order by id asc


				                                Select A.ID,A.Name,isnull(C.ID,'''') InstrumentID
				                                ,isnull(D.ID,'''') AgentID
				                                ,isnull(E.ID,'''') DepartmentID
				                                ,A.Groups,A.ParentPK,'+@colsForQueryBalance+'  From Account A left join #finalResult B on
				                                A.ID collate DATABASE_DEFAULT  = B.ID collate DATABASE_DEFAULT 
				                                left join Instrument C on B.instrumentPK = C.InstrumentPK and C.status in (1,2)
				                                left join Agent D on B.AgentPK = D.AgentPK and D.status in (1,2)
				                                left join Department E on B.DepartmentPK = E.DepartmentPK and E.status in (1,2)
				                                where A.Status in (1,2) 
				                                " + _paramData + @"
                                                order by A.ID
				                                ' exec(@query)
                                ";
                            cmd01.CommandTimeout = 0;
                            cmd01.Parameters.AddWithValue("@ValueDateFrom", _monthFrom + _accountingRpt.Period);
                            cmd01.Parameters.AddWithValue("@ValueDateTo", _monthTo + _accountingRpt.Period);

                            using (SqlDataReader dr0 = cmd01.ExecuteReader())
                            {

                               if (dr0.HasRows)
                                {
                                    List<FinancialStatement> rList = new List<FinancialStatement>();
                                    while (dr0.Read())
                                    {
                                        FinancialStatement rSingle = new FinancialStatement();
                                        rSingle.ID = Convert.ToString(dr0["ID"]);
                                        rSingle.Name = Convert.ToString(dr0["Name"]);
                                        rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
                                        rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
                                        rSingle.GroupsPK = dr0["Groups"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["Groups"]);
                                        rSingle.ParentPK = dr0["ParentPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["ParentPK"]);
                                        rSingle.January = Convert.ToDecimal(dr0["1"]);
                                        rSingle.February = Convert.ToDecimal(dr0["2"]);
                                        rSingle.March = Convert.ToDecimal(dr0["3"]);
                                        rSingle.April = Convert.ToDecimal(dr0["4"]);
                                        rSingle.May = Convert.ToDecimal(dr0["5"]);
                                        rSingle.June = Convert.ToDecimal(dr0["6"]);
                                        rSingle.July = Convert.ToDecimal(dr0["7"]);
                                        rSingle.August = Convert.ToDecimal(dr0["8"]);
                                        rSingle.September = Convert.ToDecimal(dr0["9"]);
                                        rSingle.October = Convert.ToDecimal(dr0["10"]);
                                        rSingle.November = Convert.ToDecimal(dr0["11"]);
                                        rSingle.Desember = Convert.ToDecimal(dr0["12"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID2 =
                                     from r in rList
                                     orderby r.ID ascending
                                     group r by new { } into rGroup
                                     select rGroup;

                                    int incRowExcel = 2;
                                    int _IncRow2 = 11;

                                    foreach (var rsHeader in QueryByClientID2)
                                    {

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet2.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                            worksheet2.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                            worksheet2.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                            worksheet2.Cells[incRowExcel, 4].Value = rsDetail.AgentID;
                                            worksheet2.Cells[incRowExcel, 5].Value = rsDetail.DepartmentID;
                                            worksheet2.Cells[incRowExcel, 6].Value = rsDetail.GroupsPK;
                                            worksheet2.Cells[incRowExcel, 7].Value = rsDetail.ParentPK;
                                            worksheet2.Cells[incRowExcel, 8].Value = rsDetail.January;
                                            worksheet2.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 9].Value = rsDetail.February;
                                            worksheet2.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 10].Value = rsDetail.March;
                                            worksheet2.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 11].Value = rsDetail.April;
                                            worksheet2.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 12].Value = rsDetail.May;
                                            worksheet2.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 13].Value = rsDetail.June;
                                            worksheet2.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 14].Value = rsDetail.July;
                                            worksheet2.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 15].Value = rsDetail.August;
                                            worksheet2.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 16].Value = rsDetail.September;
                                            worksheet2.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 17].Value = rsDetail.October;
                                            worksheet2.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 18].Value = rsDetail.November;
                                            worksheet2.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,####0.00";
                                            worksheet2.Cells[incRowExcel, 19].Value = rsDetail.Desember;
                                            worksheet2.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,####0.00";
                                            incRowExcel++;
                                        }


                                    }

                                    worksheet2.PrinterSettings.FitToPage = true;
                                    worksheet2.PrinterSettings.FitToWidth = 1;
                                    worksheet2.PrinterSettings.FitToHeight = 0;
                                    worksheet2.PrinterSettings.PrintArea = worksheet2.Cells[1, 1, incRowExcel - 1, 19];
                                    worksheet2.Column(1).AutoFit();
                                    worksheet2.Column(2).AutoFit();
                                    worksheet2.Column(3).AutoFit();
                                    worksheet2.Column(4).AutoFit();
                                    worksheet2.Column(5).AutoFit();
                                    worksheet2.Column(6).AutoFit();
                                    worksheet2.Column(7).AutoFit();
                                    worksheet2.Column(8).AutoFit();
                                    worksheet2.Column(9).AutoFit();
                                    worksheet2.Column(10).AutoFit();
                                    worksheet2.Column(11).AutoFit();
                                    worksheet2.Column(12).AutoFit();
                                    worksheet2.Column(13).AutoFit();
                                    worksheet2.Column(14).AutoFit();
                                    worksheet2.Column(15).AutoFit();
                                    worksheet2.Column(16).AutoFit();
                                    worksheet2.Column(17).AutoFit();
                                    worksheet2.Column(18).AutoFit();
                                    worksheet2.Column(19).AutoFit();

                                }
                                }


                            }

                        }
                    
            
                    #endregion

                    #region worksheet 3
                    // MKBD02
                    ExcelWorksheet worksheet3 = package.Workbook.Worksheets[3];
                    using (SqlConnection DbCon02 = new SqlConnection(Tools.conString))
                    {
                        DbCon02.Open();
                        using (SqlCommand cmd02 = DbCon02.CreateCommand())
                        {
                            string _status = "";
                            string _paramData = "";
                            string _monthFrom, _monthTo;
                            _monthFrom = Convert.ToString("01/01/");

                            _monthTo = Convert.ToString("12/31/");

                            if (_accountingRpt.Status == 1)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 2)
                            {
                                _status = " and B.Status = 2 and B.Posted = 1 and B.Reversed = 1 ";
                            }
                            else if (_accountingRpt.Status == 3)
                            {
                                _status = " and B.Status = 2 and B.Posted = 0 and B.Reversed = 0 ";
                            }
                            else if (_accountingRpt.Status == 4)
                            {
                                _status = " and B.Status = 1  ";
                            }
                            else if (_accountingRpt.Status == 5)
                            {
                                _status = " and (B.Status = 2 or B.Posted = 1) and B.Reversed = 0  and B.status <> 3 ";
                            }
                            else if (_accountingRpt.Status == 6)
                            {
                                _status = " and (B.Status = 1 Or B.Status = 2 or B.Posted = 1) and B.Reversed = 0 and B.status <> 3  ";
                            }

                            if (_accountingRpt.ParamData == 1)
                            {
                                _paramData = " and A.Groups = 1  ";
                            }
                            else if (_accountingRpt.ParamData == 2)
                            {
                                _paramData = " and A.Groups = 0  ";
                            }
                            else if (_accountingRpt.ParamData == 3)
                            {
                                _paramData = " and A.Groups in (0,1)  ";
                            }
                            cmd02.CommandText = @"DECLARE @PeriodPK int
                                Select @PeriodPK = PeriodPK from Period where @ValueDateFrom between DateFrom and DateTo and status = 2

                                Create table #TempTBMonthly  (
                                ID nvarchar(100),
                                Name nvarchar(500),
                                CurrID nvarchar(100),
                                Groups int,
                                ParentPK int,
                                Type int, 
                                Bulan int,
                                Balance numeric(22,2),
                                )


                                Declare @DateCounter datetime
                                set @DateCounter =  @ValueDateFrom 

                                Declare @DateCounterBS DATETIME
                                SET @DateCounterBS =  DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0, @ValueDateFrom )+1,0))



                                while (@DateCounter<=  @ValueDateTo )
                                BEGIN


                                insert into #TempTBMonthly
                                SELECT C.ID, C.Name,
                                D.ID,C.Groups,C.ParentPK,1,  
                                A.bulan
                                ,
                                CAST(A.CurrentBaseBalance  AS NUMERIC(19,4)) AS CurrentBaseBalance  
	                                --CAST(A.CurrentBaseBalance    AS NUMERIC(19,4)) AS CurrentBaseBalance  ,E.OracleMapping          
           
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,Bulan
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9,   
                                --,CASE WHEN MONTH(B.ValueDate) = 12 AND YEAR(B.ValueDate) <> YEAR(@ValueDateTo) THEN MONTH(@DateCounter) ELSE  MONTH(B.ValueDate) END bulan
                                month(@DateCounterBS) bulan
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                LEFT JOIN Account C ON A.AccountPK = C.AccountPK   AND C.Status = 2    
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK AND D.Status = 2      
                                WHERE  B.ValueDate <= @DateCounterBS AND  B.PeriodPK = @PeriodPK "
                                  + _status +
                                @"GROUP BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9,B.ValueDate
                                ) AS B        
                                WHERE  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)   AND A.Type IN (1,2)   And A.status = 2      
                                Group BY A.AccountPK,bulan   
                                ) A
                                Left JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2    
                                    --AND  A.CurrentBaseBalance <> 0  AND E.OracleMapping IS not null
                                Order BY C.ID


			
                                insert into #TempTBMonthly
                                SELECT C.ID, C.Name,
                                D.ID,C.Groups,C.ParentPK,1,  A.bulan,
                                CAST(A.CurrentBaseBalance  AS NUMERIC(19,4)) AS CurrentBaseBalance  
	                                --CAST(A.CurrentBaseBalance    AS NUMERIC(19,4)) AS CurrentBaseBalance  ,E.OracleMapping          
           
                                FROM (      
                                SELECT A.AccountPK,       
                                SUM(B.Balance) AS CurrentBalance,       
                                SUM(B.BaseBalance) AS CurrentBaseBalance,Bulan
                                FROM [Account] A INNER JOIN [Currency] C ON A.CurrencyPK = C.CurrencyPK, (      
                                SELECT A.AccountPK, SUM(A.Debit-A.Credit) AS Balance,       
                                SUM(A.BaseDebit-A.BaseCredit) AS BaseBalance,      
                                C.ParentPK1, C.ParentPK2, C.ParentPK3, C.ParentPK4, C.ParentPK5,      
                                C.ParentPK6, C.ParentPK7, C.ParentPK8, C.ParentPK9,   
                                --,CASE WHEN MONTH(B.ValueDate) = 12 AND YEAR(B.ValueDate) <> YEAR(@ValueDateTo) THEN MONTH(@DateCounter) ELSE  MONTH(B.ValueDate) END bulan
                                month(@DateCounterBS) bulan
                                FROM [JournalDetail] A INNER JOIN [Journal] B ON A.JournalPK = B.JournalPK      
                                LEFT JOIN Account C ON A.AccountPK = C.AccountPK   AND C.Status = 2    
                                INNER JOIN Currency D ON A.CurrencyPK = D.CurrencyPK AND D.Status = 2      
                                WHERE   month(B.ValueDate) <= month(@DateCounter) AND  B.PeriodPK = @PeriodPK "
                                  + _status +
                                @"GROUP BY A.AccountPK, C.ParentPK1, C.ParentPK2,        
                                C.ParentPK3, C.ParentPK4, C.ParentPK5, C.ParentPK6,       
                                C.ParentPK7, C.ParentPK8, C.ParentPK9,B.ValueDate
                                ) AS B        
                                WHERE  (B.AccountPK = A.AccountPK OR B.ParentPK1 = A.AccountPK OR B.ParentPK2 = A.AccountPK        
                                OR B.ParentPK3 = A.AccountPK OR B.ParentPK4 = A.AccountPK OR B.ParentPK5 = A.AccountPK        
                                OR B.ParentPK6 = A.AccountPK OR B.ParentPK7 = A.AccountPK OR B.ParentPK8 = A.AccountPK        
                                OR B.ParentPK9 = A.AccountPK)   AND A.Type IN (3,4)   And A.status = 2      
                                Group BY A.AccountPK,bulan   
                                ) A
                                Left JOIN Account C ON A.AccountPK = C.AccountPK   And C.Status = 2     
                                INNER JOIN Currency D ON C.CurrencyPK = D.CurrencyPK   And D.Status = 2    
                                    --AND  A.CurrentBaseBalance <> 0  AND E.OracleMapping IS not null
                                Order BY C.ID


                                SET @DateCounter = DATEADD(MONTH,1,@DateCounter)
                                SET @DateCounterBS = DATEADD(MONTH,1,@DateCounterBS)

                                SET @DateCounterBS = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@DateCounterBS)+1,0))
			
                                END

                                DECLARE @cols AS NVARCHAR(MAX),@colsForQuery AS NVARCHAR(MAX),
                                @query  AS NVARCHAR(MAX)
                                ,@colsForQueryBalance AS NVARCHAR(MAX)

                                select @colsForQuery = STUFF((SELECT ',isnull(' + QUOTENAME(bulan) +',0) ' + QUOTENAME(bulan) 
                                            from (SELECT DISTINCT bulan FROM #TempTBMonthly) A
			                                order by A.bulan
                                    FOR XML PATH(''), TYPE
                                    ).value('.', 'NVARCHAR(MAX)') 
                                ,1,1,'')


	                                select @cols = STUFF((SELECT distinct ',' + QUOTENAME(bulan) 
                                            from #TempTBMonthly
				
                                    FOR XML PATH(''), TYPE
                                    ).value('.', 'NVARCHAR(MAX)') 
                                ,1,1,'')


                                select @colsForQueryBalance = STUFF((SELECT ',isnull(' + QUOTENAME(bulan) +',0) ' + QUOTENAME(Bulan) 
                                            from (SELECT DISTINCT bulan FROM #TempTBMonthly) A
			                                order by A.bulan
                                    FOR XML PATH(''), TYPE
                                    ).value('.', 'NVARCHAR(MAX)') 
                                ,1,1,'')

                                set @query = 'SELECT ID,Name,' + @colsForQuery + ' into #finalResult  from 
                                                    (
                                                    SELECT ID,Bulan,Balance,Name FROM #TempTBMonthly 
                                                ) x
                                                pivot 
                                                (
                                                    SUM(Balance)
                                                    for Bulan in (' + @cols + ')
                                                ) p 
			                                    order by id asc


				                                Select A.ID,A.Name,A.Groups,A.ParentPK,'+@colsForQueryBalance+'  From Account A left join #finalResult B on
				                                A.ID collate DATABASE_DEFAULT  = B.ID collate DATABASE_DEFAULT 
				                                where A.Status in (1,2) " + _paramData + @"
                                                order by A.ID
				                                ' exec(@query)";
                            cmd02.CommandTimeout = 0;
                            cmd02.Parameters.AddWithValue("@ValueDateFrom", _monthFrom + _accountingRpt.Period);
                            cmd02.Parameters.AddWithValue("@ValueDateTo", _monthTo + _accountingRpt.Period);

                            using (SqlDataReader dr02 = cmd02.ExecuteReader())
                            {
                                if (dr02.HasRows)
                                {
                                    List<FinancialStatement> rList = new List<FinancialStatement>();
                                    while (dr02.Read())
                                    {
                                        FinancialStatement rSingle = new FinancialStatement();
                                        rSingle.ID = Convert.ToString(dr02["ID"]);
                                        rSingle.Name = Convert.ToString(dr02["Name"]);
                                        rSingle.January = Convert.ToDecimal(dr02["1"]);
                                        rSingle.February = Convert.ToDecimal(dr02["2"]);
                                        rSingle.March = Convert.ToDecimal(dr02["3"]);
                                        rSingle.April = Convert.ToDecimal(dr02["4"]);
                                        rSingle.May = Convert.ToDecimal(dr02["5"]);
                                        rSingle.June = Convert.ToDecimal(dr02["6"]);
                                        rSingle.July = Convert.ToDecimal(dr02["7"]);
                                        rSingle.August = Convert.ToDecimal(dr02["8"]);
                                        rSingle.September = Convert.ToDecimal(dr02["9"]);
                                        rSingle.October = Convert.ToDecimal(dr02["10"]);
                                        rSingle.November = Convert.ToDecimal(dr02["11"]);
                                        rSingle.Desember = Convert.ToDecimal(dr02["12"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID2 =
                                     from r in rList
                                     group r by new { r.PeriodID } into rGroup
                                     select rGroup;



                                    int incRowExcel = 1;

                                    foreach (var rsHeader in QueryByClientID2)
                                    {
                                        worksheet3.Cells[incRowExcel, 1].Value = "Period";
                                        worksheet3.Cells[incRowExcel, 2].Value = " : " + _accountingRpt.Period;
                                        incRowExcel = incRowExcel + 2;
                                        int _startRowDetail = incRowExcel;
                                        worksheet3.Cells[incRowExcel, 1].Value = "ID";
                                        worksheet3.Cells[incRowExcel, 2].Value = "Name";
                                        worksheet3.Cells[incRowExcel, 3].Value = "January";
                                        worksheet3.Cells[incRowExcel, 4].Value = "February";
                                        worksheet3.Cells[incRowExcel, 5].Value = "March";
                                        worksheet3.Cells[incRowExcel, 6].Value = "April";
                                        worksheet3.Cells[incRowExcel, 7].Value = "May";
                                        worksheet3.Cells[incRowExcel, 8].Value = "June";
                                        worksheet3.Cells[incRowExcel, 9].Value = "July";
                                        worksheet3.Cells[incRowExcel, 10].Value = "August";
                                        worksheet3.Cells[incRowExcel, 11].Value = "September";
                                        worksheet3.Cells[incRowExcel, 12].Value = "October";
                                        worksheet3.Cells[incRowExcel, 13].Value = "November";
                                        worksheet3.Cells[incRowExcel, 14].Value = "Desember";

                                        incRowExcel++;
                                        int _endRowDetail = 0;
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet3.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                            worksheet3.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                            worksheet3.Cells[incRowExcel, 3].Value = rsDetail.January;
                                            worksheet3.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 4].Value = rsDetail.February;
                                            worksheet3.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 5].Value = rsDetail.March;
                                            worksheet3.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 6].Value = rsDetail.April;
                                            worksheet3.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 7].Value = rsDetail.May;
                                            worksheet3.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 8].Value = rsDetail.June;
                                            worksheet3.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 9].Value = rsDetail.July;
                                            worksheet3.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 10].Value = rsDetail.August;
                                            worksheet3.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 11].Value = rsDetail.September;
                                            worksheet3.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 12].Value = rsDetail.October;
                                            worksheet3.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 13].Value = rsDetail.November;
                                            worksheet3.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,####0.00";
                                            worksheet3.Cells[incRowExcel, 14].Value = rsDetail.Desember;
                                            worksheet3.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,####0.00";
                                            _endRowDetail = incRowExcel;
                                            incRowExcel++;
                                        }

                                        worksheet3.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet3.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet3.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet3.Cells["A" + _startRowDetail + ":N" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                    }

                                    worksheet3.PrinterSettings.FitToPage = true;
                                    worksheet3.PrinterSettings.FitToWidth = 1;
                                    worksheet3.PrinterSettings.FitToHeight = 0;
                                    worksheet3.PrinterSettings.PrintArea = worksheet3.Cells[1, 1, incRowExcel - 1, 14];
                                    worksheet3.Column(1).AutoFit();
                                    worksheet3.Column(2).AutoFit();
                                    worksheet3.Column(3).AutoFit();
                                    worksheet3.Column(4).AutoFit();
                                    worksheet3.Column(5).AutoFit();
                                    worksheet3.Column(6).AutoFit();
                                    worksheet3.Column(7).AutoFit();
                                    worksheet3.Column(8).AutoFit();
                                    worksheet3.Column(9).AutoFit();
                                    worksheet3.Column(10).AutoFit();
                                    worksheet3.Column(11).AutoFit();
                                    worksheet3.Column(12).AutoFit();
                                    worksheet3.Column(13).AutoFit();
                                    worksheet3.Column(14).AutoFit();

                                }


                            }

                        }

                    }
                    #endregion

                    package.Save();
                    return filePath;
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public int EndDayTrailsFundPortfolio_GenerateWithParamFund(string _usersID, DateTime _valueDate, EndDayTrailsFundPortfolio _edt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
                        {
                            _paramFund = "And FundPK in ( " + _edt.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
Declare @CFundPK int
declare @EndDayTrailsFundPortfolioPK int

if object_id('tempdb..#ZFundPosition', 'u') is not null drop table #ZFundPosition 
Create Table #ZFundPosition                  
(                  
InstrumentPK int,     
InstrumentTypePK int,                  
InstrumentID nvarchar(100) COLLATE DATABASE_DEFAULT,                  
FundPK int,                  
FundID nvarchar(100) COLLATE DATABASE_DEFAULT,                  
AvgPrice numeric(38,12),                  
LastVolume numeric(38,4),                  
ClosePrice numeric(38,12),                  
TrxAmount numeric(38,6),              
AcqDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) COLLATE DATABASE_DEFAULT,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
BitBreakable bit
)                  
CREATE CLUSTERED INDEX indx_ZFundPosition ON #ZFundPosition (FundPK,InstrumentPK,InstrumentTypePK,BankPK,BankBranchPK);
    

if object_id('tempdb..#ZLogicFundPosition', 'u') is not null drop table #ZLogicFundPosition 
Create Table #ZLogicFundPosition              
(              
BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) COLLATE DATABASE_DEFAULT,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable bit
)      

CREATE CLUSTERED INDEX indx_ZLogicFundPosition ON #ZLogicFundPosition (FundPK,InstrumentPK,BankPK,BankBranchPK);


if object_id('tempdb..#ZDividenSaham', 'u') is not null drop table #ZDividenSaham
Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4)     
)      

CREATE CLUSTERED INDEX indx_ZDividenSaham ON #ZDividenSaham (FundPK,InstrumentPK);


if object_id('tempdb..#StaticClosePrice', 'u') is not null drop table #StaticClosePrice
Create table #StaticClosePrice
(
	FundPK int,
	InstrumentPK int,
	maxDate datetime
)

CREATE CLUSTERED INDEX indx_StaticClosePrice ON #StaticClosePrice (FundPK,InstrumentPK);

if object_id('tempdb..#ZFundFrom', 'u') is not null drop table #ZFundFrom
Create Table #ZFundFrom                  
(                   
	FundPK int,
	EndDayTrailsFundPortfolioPK int
)      

CREATE CLUSTERED INDEX indx_ZFundFrom  ON #ZFundFrom (FundPK,EndDayTrailsFundPortfolioPK);

if object_id('tempdb..#ZInstrument', 'u') is not null drop table #ZInstrument
Create Table #ZInstrument                  
(                   
	InstrumentPK int,
	FundPK int
)      

CREATE CLUSTERED INDEX indx_ZInstrument  ON #ZInstrument (InstrumentPK,FundPK);

if object_id('tempdb..#ZInstrumentFIFO', 'u') is not null drop table #ZInstrumentFIFO
Create Table #ZInstrumentFIFO                  
(                   
	InstrumentPK int,
	FundPK int
)      

CREATE CLUSTERED INDEX indx_ZInstrumentFIFO  ON #ZInstrumentFIFO (InstrumentPK,FundPK);

if object_id('tempdb..#FifoBondTrx', 'u') is not null drop table #FifoBondTrx 
create table #FifoBondTrx
(
	BuyVolume numeric(38,4),              
	SellVolume numeric(38,4),              
	BuyAmount numeric(38,4),       
	SellAmount numeric(38,4),            
	FundPK int,              
	InstrumentPK int,             
	ValueDate datetime,       
	SettlementDate datetime,              
	MaturityDate datetime,              
	InterestPercent numeric(38,8),
	CurrencyPK int,
	Category nvarchar(200) COLLATE DATABASE_DEFAULT,
	TaxExpensePercent numeric(19, 8),
	MarketPK int,
	InterestDaysType int,
	InterestPaymentType int,
	PaymentModeOnMaturity   int,
	PaymentInterestSpecificDate datetime,
	BankPK int,
	BankBranchPK int,
	PriceMode int,
	BitIsAmortized bit,
	AcqDate datetime,
	BitBreakable BIT
)
CREATE CLUSTERED INDEX indx_FifoBondTrx ON #FifoBondTrx (InstrumentPK,FundPK,AcqDate);

Declare @PeriodPK    int                  
Declare @maxEndDayTrailsFundPortfolioPK int       

                
Select @EndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio    
set @EndDayTrailsFundPortfolioPK = isnull(@EndDayTrailsFundPortfolioPK,1)     


insert into #ZFundFrom(FundPK,EndDayTrailsFundPortfolioPK)
--select FundPK from Fund where status in (1,2)  " + _paramFund + @" and MaturityDate >= @ValueDate
--select FundPK,row_number() over (order by FundPK desc) + @EndDayTrailsFundPortfolioPK from Fund where status in (1,2) and MaturityDate >= @ValueDate
select FundPK,row_number() over (order by FundPK desc) + @EndDayTrailsFundPortfolioPK from Fund where status in (1,2) 
" + _paramFund + @" 
--and FundPk = 72
and MaturityDate >= @ValueDate
--PARAM FUND

--update fifobond ketika mature

declare @maxDate date
set @maxDate = dbo.FWorkingDay(@ValueDate,-1)

-- CEK MATURITY FIFO BOND
declare @maxFifoDate date
set @maxFifoDate = '2019-10-18'

insert into #ZInstrument
select distinct A.InstrumentPK,A.FundPK from FundPosition A
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
where date = @maxDate and A.MaturityDate <= @ValueDate and InstrumentTypePK in (2,3,8,9,13,15)
and FundPk in (select FundPK from #ZFundFrom)

insert into #ZInstrumentFIFO
select distinct A.InstrumentPK,A.FundPK from FundPosition A
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
where date = @maxDate and A.MaturityDate > @ValueDate and InstrumentTypePK in (2,3,8,9,13,15) and A.status = 2
and FundPk in (select FundPK from #ZFundFrom)

--INSERT DATA INVESTMENT BARU
declare @FifoInvestmentBuyPK int
declare @FifoInvestmentSellPK int
declare @FifoAcqDate date
declare @FifoAcqVolume numeric(32,8)
declare @FifoAcqPrice numeric(18,8)
declare @FifoDoneVolume numeric(32,8)
declare @FifoFundPk int
declare @FifoInstrumentPK int
declare @FifoFundPositionAdjustmentPK int
declare @FifoVol numeric(32,8)
declare @FifoTempVol numeric(32,8)

DECLARE A CURSOR
FOR 

	select InvestmentPK InvestmentBuyPK,0 InvestmentSellPK,SettlementDate AcqDate,DoneVolume AcqVolume,DonePrice AcqPrice, DoneVolume, A.FundPK, A.InstrumentPK, 0 FundPositionAdjustmentPK from Investment A
	inner join #ZInstrumentFIFO B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
	where TrxType = 1 and StatusSettlement = 2 and ValueDate > @maxFifoDate and InvestmentPK not in (select InvestmentBuyPK from FifoBondPositionTemp )
 
OPEN A;
 
FETCH NEXT FROM A INTO @FifoInvestmentBuyPK,@FifoInvestmentSellPK,@FifoAcqDate,@FifoAcqVolume,@FifoAcqPrice,@FifoDoneVolume,@FifoFundPk,@FifoInstrumentPK,@FifoFundPositionAdjustmentPK
 
WHILE @@FETCH_STATUS = 0
    BEGIN
		
		select @FifoVol =  sum(DoneVolume) from Investment where TrxType = 1 and StatusSettlement = 2 and StatusInvestment = 2 and StatusDealing = 2 and 
		SettlementDate = @FifoAcqDate and DonePrice = @FifoAcqPrice and fundpk = @FifoFundPk and InstrumentPK = @FifoInstrumentPK

		select @FifoTempVol = sum(AcqVolume) from FifoBondPositionTemp where AcqDate = @FifoAcqDate and AcqPrice = @FifoAcqPrice and fundpk = @FifoFundPk and InstrumentPK = @FifoInstrumentPK

		if @FifoTempVol is null
		begin
			insert into FifoBondPositionTemp
			select @FifoInvestmentBuyPK,@FifoInvestmentSellPK,@FifoAcqDate,@FifoAcqVolume,@FifoAcqPrice,@FifoDoneVolume,@FifoFundPk,@FifoInstrumentPK,@FifoFundPositionAdjustmentPK
			--select 'insert'
		end
		else 
		begin
			if @FifoVol <> @FifoTempVol 
			begin
				update FifoBondPositionTemp set AcqVolume = AcqVolume + @FifoAcqVolume, RemainingVolume = RemainingVolume + @FifoAcqVolume, InvestmentBuyPK = @FifoInvestmentBuyPK
				where AcqDate = @FifoAcqDate and AcqPrice = @FifoAcqPrice and fundpk = @FifoFundPk and InstrumentPK = @FifoInstrumentPK
				--select @FifoAcqVolume
			end
		end

        FETCH NEXT FROM A INTO @FifoInvestmentBuyPK,@FifoInvestmentSellPK,@FifoAcqDate,@FifoAcqVolume,@FifoAcqPrice,@FifoDoneVolume,@FifoFundPk,@FifoInstrumentPK,@FifoFundPositionAdjustmentPK
    END;
 
CLOSE A;
 
DEALLOCATE A;

--UPDATE BOND MATURE

update A set RemainingVolume = 0 from FiFoBondPosition A
inner join (
select FiFoBondPositionPK from FiFoBondPosition A
inner join #ZInstrument B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK
where A.status in (1,2) and RemainingVolume is null or RemainingVolume != 0
) B on A.FiFoBondPositionPK = B.FiFoBondPositionPK

update A set RemainingVolume = 0 from FifoBondPositionTemp A
inner join (
select InvestmentBuyPK from FifoBondPositionTemp A
inner join #ZInstrument B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK
where RemainingVolume is null or RemainingVolume != 0
) B on A.InvestmentBuyPK = B.InvestmentBuyPK

update FundPosition set status = 3,LastUpdate=@lastUpdate where Date = @ValueDate and status = 2 and FundPK in (select FundPK from #ZFundFrom)
update EndDayTrailsFundPortfolio set status = 3,VoidUsersID = @UsersID,VoidTime = @lastUpdate,LastUpdate=@lastUpdate
where ValueDate = @ValueDate and status = 2 and FundPK in (select FundPK from #ZFundFrom)          

UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in (1,4,16)  and ValueDate = @ValueDate
update Investment set MarketPK = 1  where ValueDate = @ValueDate
update Investment set Category = null where InstrumentTypePK  <> 5  and ValueDate = @ValueDate
        
Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  

Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,FundPK,BitValidate
,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
Select EndDayTrailsFundPortfolioPK,1,2,@ValueDate,FundPK,0
,'',@UsersID,@LastUpdate,@LastUpdate  
from #ZFundFrom A     

-- SETUP DATA SELL FIFO DARI INVESTMENT

Insert into #FifoBondTrx(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,CurrencyPK,Category,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable,ValueDate)   

Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,
isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.MarketPK,0) MarketPK,
isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
A.AcqDate,A.BitBreakable,A.ValueDate
from (                 
	
		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,
		CASE when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable,
		A.AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate IS NOT NULL AND A.AcqVolume > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice
		
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume1) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate1 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate1 end AcqDate,
		CASE when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice1 AcqPrice

		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate1 IS NOT NULL AND A.AcqVolume1 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate1,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice1
			
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume2) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate2 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate2 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice2 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate2 IS NOT NULL AND A.AcqVolume2 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate2,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice2


		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume3) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate3 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate3 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice3 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate3 IS NOT NULL AND A.AcqVolume3 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate3,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice3

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume4) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate4 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate4 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice4 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate4 IS NOT NULL AND A.AcqVolume4 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate4,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice4

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume5) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate5 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate5 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice5 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16) and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate5 IS NOT NULL AND A.AcqVolume5 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate5,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice5


		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume6) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate6 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate6 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice6 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate6 IS NOT NULL AND A.AcqVolume6 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate6,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice6

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume7) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate7 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate7 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice7 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate7 IS NOT NULL AND A.AcqVolume7 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate7,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice7

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume8) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate8 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate8 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice8 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate8 IS NOT NULL AND A.AcqVolume8 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate8,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice8

		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(A.AcqVolume9) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate9 end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate9 end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       ,
		A.AcqPrice9 AcqPrice
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where  ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK  not in (1,4,5,6,16)  and A.FundPK in (select FundPK from #ZFundFrom)
		AND (A.AcqDate9 IS NOT NULL AND A.AcqVolume9 > 0)
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate9,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		,A.AcqPrice9

		)A                
Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate
,A.ValueDate,A.CurrencyPK ,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable,A.AcqPrice       
                             

-- TARIK JUAL BELI DARI INVESTMENT              
Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,CurrencyPK,Category,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable)               

Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.CurrencyPK,B.Category,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
From               
(               
	Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
	,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
	isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
	isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.MarketPK,0) MarketPK,
	isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
	,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
	A.AcqDate,A.BitBreakable
	from (                 
	
		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type in (1,2,5,6,9,14) then null else AcqDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
		from Investment A 
		Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
		where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK <> 6 and A.FundPK in (select FundPK from #ZFundFrom)         
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
		UNION ALL                  

		select InstrumentPK,BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,SettlementDate,MaturityDate,InterestPercent,ValueDate,CurrencyPK,Category,
		MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable from #FifoBondTrx


        UNION ALL                  

        select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
        Case when C.Type = 1 then null else AcqDate end SettlementDate,              
        Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
        Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
        B.CurrencyPK,A.Category,A.MarketPK
        ,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
        ,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
        ,A.PaymentModeOnMaturity
        ,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
        ,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
        from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
        left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
        where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK in (1,4,5,16)  and A.FundPK in (select FundPK from #ZFundFrom)                     
        Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
        ,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
        ,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
		

		UNION ALL

		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type = 1 then null else SettlementDate end SettlementDate,              
		Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
		Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.MarketPK
			,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK
		,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
		where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.FundPK in (select FundPK from #ZFundFrom)              
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK

		-- REKSDANA--
		UNION ALL
		select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
		Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
		Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
		Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
		from Investment A 
		Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
		where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK = 6   and A.FundPK in (select FundPK from #ZFundFrom)           
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
		,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
		UNION ALL                  

		select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
		Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
		Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
		Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,        
		B.CurrencyPK,A.Category,A.MarketPK
		,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
		,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
		,A.PaymentModeOnMaturity
		,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
		,case when B.InstrumentTypePK = 5 then 0 else A.PriceMode end PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
		from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
		where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK = 6   and A.FundPK in (select FundPK from #ZFundFrom)                
		Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
		,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
		,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
	

	)A                
	Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
	,A.ValueDate,A.CurrencyPK ,A.Category,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
	,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable
)B     
Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.CurrencyPK
,B.Category,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable

update A set TaxExpensePercent = B.TaxExpensePercent from #ZLogicFundPosition A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)



--INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
isnull(A.BuyAmount,0) - (isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) 
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,D.CurrencyPK, A.Category,D.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
--and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (1,2,4,5,14,9)



-- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate
,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
from (
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
1 AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
1 ClosePrice,                  
isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,D.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From #ZLogicFundPosition A              
LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
--and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (3)
)A  
group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
isnull(dbo.[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),C.CurrencyPK, A.Category,isnull(C.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')              
where A.PeriodPK = @PeriodPK              
) and E.Type in (1,2,4,5,14,9) and A.periodPK = @PeriodPK   and A.FundPK in (select FundPK from #ZFundFrom)          

-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,C.CurrencyPK, A.Category,C.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
where A.PeriodPK = @PeriodPK             
) and E.Type in (3) and A.periodPK = @PeriodPK   and A.FundPK in (select FundPK from #ZFundFrom)          


-- CORPORATE ACTION DIVIDEN SAHAM

-- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
	                    
delete CorporateActionResult where Date = @ValueDate and FundPK in (select FundPK from #ZFundFrom)  


-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.ExDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.ExDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null and C.FundPK in (select FundPK from #ZFundFrom) 
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.ExDate,B.FundPK,A.InstrumentPK,isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 



-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null and B.FundPK in (select FundPK from #ZFundFrom) 
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION DIVIDEN RIGHTS
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION DIVIDEN WARRANT
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price,0 from Exercise 
where DistributionDate  = @ValueDate and status = 2  and FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION BOND AMORTIZEN
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

--Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
--Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
--from CorporateAction A
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK = 1 
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
--and B.ValueDate >= A.ValueDate
--left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
--where A.Type = 2 and A.Status = 2 and A.PaymentDate = @ValueDate
--and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
and B.ID not like '%-W' and B.ID not like '%-R'
WHERE A.Date <= @ValueDate and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 

Group By FundPK,A.InstrumentPK,Price,A.status
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where C.Type in (1,9,2,5,14)
--AND A.LastVolume > 0  
and A.FundPK = B.FundPK


                
-- EXERCISE BELUM ADA DI FUNDPOSITION, UNTUK RIGHTS/WARRANT
IF NOT EXISTS
(
Select * from #ZFundPosition A 
left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where Date >= @ValueDate and DistributionDate > @valuedate and status = 2
)
BEGIN
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice,
TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PriceMode,BitIsAmortized)
Select A.InstrumentRightsPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,A.Price,BalanceExercise,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
A.Price * BalanceExercise,null,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,0,0,1,0 from Exercise A
left join Instrument B on A.InstrumentRightsPK = B.InstrumentPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
where Date >= @ValueDate and DistributionDate > @valuedate and A.status = 2  and A.FundPK in (select FundPK from #ZFundFrom) 
END




---- EXERCISE BELUM ADA DI FUNDPOSITION, UNTUK DISTRIBUTED DATE
--IF NOT EXISTS
--(
--Select * from #ZFundPosition A 
--left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
--where DistributionDate  = @ValueDate and status = 2
--)
--BEGIN
--Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice,
--TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PriceMode,BitIsAmortized)
--Select A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,A.Price,BalanceExercise,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
--A.Price * BalanceExercise,null,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,0,0,1,0 from Exercise A
--left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
--left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
--where DistributionDate  <= @ValueDate and A.status = 2
--END


--INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2

where A.status = 2 and B.ID like '%-W' and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 



Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,4,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
 
where A.status = 2 and B.ID like '%-R' and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 


                       
-- UPDATE POSISI ZFUNDPOSITION + FUND POSITION ADJUSTMENT
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = [dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
SELECT FundPK,A.InstrumentPK,case when sum(balance) = 0 then 0 else sum(Price*Balance) / SUM(balance) end Price, sum(Balance) Balance,A.status,
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  THEN A.AcqDate ELSE NULL END AcqDate
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
WHERE A.status = 2 AND A.Date <= @ValueDate and PeriodPK = @PeriodPK and A.FundPK in (select FundPK from #ZFundFrom) 
Group By FundPK,A.InstrumentPK,A.status,B.InstrumentTypePK,A.AcqDate
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
AND isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900') and A.FundPK = B.FundPK




--INSERT INSTRUMENT YANG ADA DI FUND POSITION ADJUSTMENT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  

SELECT A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID, 
[dbo].[FGetLastAvgFromInvestment] (@ValueDate,A.InstrumentPK,A.FundPK),
SUM(A.Balance),dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
SUM(Balance*Price),
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  then  A.AcqDate else null End ,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,NULL,B.TaxExpensePercent,B.MarketPK
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
where A.status = 2 AND A.AcqDate <= @ValueDate and PeriodPK = @PeriodPK and A.FundPK in (select FundPK from #ZFundFrom) 
and NOT EXISTS 
(SELECT * FROM #ZFundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(C.AcqDate,'01/01/1900'))
GROUP BY A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,B.TaxExpensePercent,B.MarketPK,A.AcqDate



-- DELETE RIGHTS AND WARRANT YANG EXPIRED
Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
)B on A.InstrumentPK = B.InstrumentPK

Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
)B on A.InstrumentPK = B.InstrumentPK

-- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE


IF  EXISTS
(
Select * from #ZFundPosition A 
left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where Date >= @ValueDate and DistributionDate > @valuedate and status = 2 and A.FundPK in (select FundPK from #ZFundFrom) 
)
BEGIN
Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from #ZFundPosition A
left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
where Date = @ValueDate and A.FundPK in (select FundPK from #ZFundFrom) 
END


Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
Select C.EndDayTrailsFundPortfolioPK,C.EndDayTrailsFundPortfolioPK,1,2,'',@ValueDate,A.FundPK, FundID,                  
A.InstrumentPK,InstrumentID,CONVERT(decimal(18,12),AvgPrice),LastVolume
,case when A.InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume CostValue
, ClosePrice,TrxAmount
,case when A.InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
AcqDate,A.MaturityDate,D.InterestPercent,A.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,isnull(A.InterestDaysType,0),isnull(A.InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(A.BankPK,0),isnull(A.BankBranchPK,0)
,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
From #ZFundPosition  A WITH (NOLOCK)
left join Fund B on A.FundPK = B.FundPK
left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2) 
inner join #ZFundFrom C on A.FundPK = C.FundPK
where A.LastVolume > 0 and B.status in (1,2)  and A.FundPK in (select FundPK from #ZFundFrom)

IF NOT EXISTS(
select InvestmentPK from Investment 
where ValueDate > @ValueDate and InstrumentTypePK in (2,3,8,9,11,13,14,15) and TrxType = 2 and StatusInvestment = 2 and statusDealing <> 3 and StatusSettlement <> 3 and FundPK in (select FundPK from #ZFundFrom) 
)
BEGIN
	delete FifoBondHistorical where date = @ValueDate and FundPK in (select FundPK from #ZFundFrom) 

	insert into FifoBondHistorical (Date,FundPK,FundID,InstrumentID,AcqDate,AcqPrice,AcqVolume,LastUpdate)
	select @ValueDate Date,A.FundPK,B.ID FundID,C.ID InstrumentID,AcqDate,AcqPrice,sum(A.RemaningVolume) Volume, @LastUpdate from (
	select FundPK,InstrumentPK,AcqDate,AcqPrice,case when Remainingvolume is null then AcqVolume else RemainingVolume end RemaningVolume from FiFoBondPosition where (RemainingVolume is null and InvestmentPK = 0) or RemainingVolume != 0
	union all
	select FundPK,InstrumentPK,AcqDate,AcqPrice,RemainingVolume from FifoBondPositionTemp where RemainingVolume != 0
	union all
	select FundPK,InstrumentPK,SettlementDate,DonePrice,DoneVolume from Investment where ValueDate > '2019-10-18' and TrxType = 1 and statussettlement = 2 and statusdealing = 2 and statusinvestment = 2 and InstrumentTypePK in (2,3,8,9,13,15) and InvestmentPK not in ( 
	select InvestmentBuyPK from FifoBondPositionTemp
	)
	) A 
	left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.Status in (1,2) 
	where A.FundPK in  (select FundPK from #ZFundFrom) 
	group by A.FundPK,B.ID,C.ID,AcqDate,AcqPrice
END




Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
left join #ZFundFrom B on FP.FundPK = B.FundPK 
Where FundPositionPK = B.EndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,6,16)
and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  and FP.FundPK in (select FundPK from #ZFundFrom)  


---------PROSES AMORTIZED DAN PRICE MODE------------------------------
update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			 
		end 
, A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			  
		end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
from FundPosition A 
left join 
(
	select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
	(
		Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
	) and status = 2
)B on A.InstrumentPK = B.InstrumentPK 
left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
where A.FundPK in (select FundPK from #ZFundFrom)  and Date = @ValueDate and A.status = 2

-- STATIC CLOSEPRICE

insert into #StaticClosePrice
select distinct FundPK,instrumentPK,max(Date) maxDate from UpdateClosePrice 
where Date <= @ValueDate and status = 2 
and fundPK in
(
	Select FundPK from #ZFundFrom
)
group by FundPK,InstrumentPK
order by FundPK,InstrumentPK asc

--select * from #StaticClosePrice order by FundPK,instrumentPK,maxDate asc

	
--Select A.FundPK,A.InstrumentPK,B.ClosePriceValue ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
--left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
--left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
--where A.maxDate = @ValueDate

--order by fundPK,InstrumentPK

		--select A.FundPK,A.InstrumentPK,B.ClosePrice, A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		--INNER join (
		--	Select A.FundPK,A.InstrumentPK,case when (B.ClosePriceValue is not null ) then B.ClosePriceValue else D.ClosePriceValue end ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
		--	left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
		--	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
		--	left join ClosePrice D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2)

		--)B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		--inner join #ZFundFrom C on A.FundPK = C.FundPK 
		--where A.Date = @ValueDate and A.TrailsPK = C.EndDayTrailsFundPortfolioPK
		--and A.Status = 2
		--order by A.FundPK,A.InstrumentPK


		Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) 
		then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		INNER join (
				
Select A.FundPK,A.InstrumentPK,B.ClosePriceValue ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
where isnull(B.ClosePriceValue,0) > 0 and A.maxDate = @ValueDate

		)B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK 
		inner join #ZFundFrom C on A.FundPK = C.FundPK
		where A.Date = @ValueDate and A.TrailsPK = C.EndDayTrailsFundPortfolioPK
		and A.Status = 2

		--Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		--left join #StaticClosePrice B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		--where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
		--and A.InstrumentPK in(
		--	select instrumentPK From #StaticClosePrice where FundPK = @CFundPK
		--) and A.FundPK = @CFundPK and A.status = 2

-- update TrxBuy di Investment untuk Sell / Rollover

declare @DTrxBuy int
declare @DInvestmentPK int
declare @DInstrumentPK int
declare @DFundPK int
declare @DDate datetime
declare @DNewIdentity bigint

DECLARE C CURSOR FOR 
select TrxBuy,InvestmentPK,B.InstrumentPK,B.FundPK,B.Date from Investment A
left join FundPosition B on A.TrxBuy = B.[Identity]
where B.Date = @valuedate and InstrumentTypePK not in (1,4,16) and StatusInvestment in (1,2) and TrxType in (2,3)
Open C
Fetch Next From C
Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate     
While @@FETCH_STATUS = 0
BEGIN   

set @DNewIdentity = 0
select @DNewIdentity = [Identity] from FundPosition where InstrumentPK = @DInstrumentPK and FundPK = @DFundPK and Date = @DDate and status in (1,2)

update Investment set TrxBuy = @DNewIdentity where InvestmentPK = @DInvestmentPK and StatusInvestment in (1,2)

Fetch next From C Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate                  
END
Close C
Deallocate C  

	
Update A set BitValidate = 1, LogMessages = B.ID + ' - ' + B.Name from EndDayTrailsFundPortfolio A  
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
where A.FundPK in (select FundPK from #ZFundFrom)  and A.Status = 2 and ValueDate = @ValueDate       

--Fetch next From A Into @CFundPK
--END
--Close A
--Deallocate A


                        Select (select max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio) LastPK
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public Boolean GenerateReportCompliance(string _userID, OjkRpt _OjkRpt)
        {

            #region SiPesat
            if (_OjkRpt.ReportName.Equals("4"))
            {
                #region Txt
                if (_OjkRpt.DownloadMode == "Txt")
                {
                    try
                    {
                        DateTime _datetimeNow = DateTime.Now;
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"
                        
                        DECLARE @NoIDPJK nvarchar(30)

                        BEGIN
                        SET NOCOUNT ON

                        select @NoIDPJK = NoIDPJK  from Company where Status in(1,2)
                        set @NoIDPJK = isnull(@NoIDPJK,'')

                        create table #Text(
                        [ResultText] [nvarchar] (1000) NULL
                        )

                        DECLARE @Table TABLE
                        (
	                        FundClientPK INT,
	                        Date Datetime
                        )

                        DECLARE @CFundClientPK INT

                        Declare A Cursor FOR
	                        SELECT DISTINCT fundclientpK FROM dbo.ClientSubscription WHERE status <> 3 AND Posted = 1 AND Revised = 0
                        Open A
                        Fetch Next From A
                        INTO @CFundClientPK

                        While @@FETCH_STATUS = 0  
                        Begin
	
	                        INSERT INTO @Table
                                ( FundClientPK, Date )
                           SELECT TOP 1 FundClientPK,ValueDate FROM dbo.ClientSubscription 
                           WHERE FundClientPK = @CFundClientPK AND status <> 3 AND posted = 1 AND Revised = 0
                           ORDER BY ValueDate asc

	                        Fetch Next From A 
	                        into @CFundClientPK
                        End	
                        Close A
                        Deallocate A



                        insert into #Text

                        select @NoIDPJK + '|' + RTRIM(LTRIM(isnull(InvestorType,''))) + '|' +
                        RTRIM(LTRIM(ISNULL(TempatLahir,''))) + '|' +
                        RTRIM(LTRIM(ISNULL(Name,''))) + '|' +
                        Case when InvestorType = 1 then convert(nvarchar(15),isnull(TanggalLahir,''),105 ) else '' end + '|' + 
                        Case when InvestorType = 1 then convert(nvarchar(15),ISNULL(AlamatInd1,'')) else AlamatPerusahaan end + '|' +
                        CAST(CASE when InvestorType = 1 and
                        IdentitasInd1 in(1,7) then NoIdentitasInd1 else  ' ' end as nvarchar(30)) + '|' +
                        CAST(case when InvestorType = 1 and IdentitasInd1 in(2,3,4,5,6) then
                        NoIdentitasInd1 else ' ' end as nvarchar(30)) + '|' +
                        RTRIM(LTRIM(ISNULL(SID,''))) + '|' +
                        RTRIM(LTRIM(ISNULL(NPWP,'')))
                        from FundClient A
                        LEFT JOIN @Table B ON A.FundClientPK = B.FundClientPK
                        WHERE B.Date between @ValueDateFrom and @ValueDateTo  and A.SACode = ''  and status in (1,2) 
                        AND B.FundClientPK IS NOT null

                        select * from #Text

                            END ";
                                cmd.Parameters.AddWithValue("@ValueDateFrom", _OjkRpt.ValueDateFrom);
                                cmd.Parameters.AddWithValue("@ValueDateTo", _OjkRpt.ValueDateTo);

                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr.HasRows)
                                    {


                                        string filePath = Tools.ARIATextPath + "Sipesat.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            while (dr.Read())
                                            {

                                                file.WriteLine(Convert.ToString(dr["ResultText"]));
                                            }
                                            return true;
                                        }

                                    }
                                    return false;
                                }

                            }
                        }
                    }
                    catch (Exception err)
                    {
                        throw err;
                    }

                }


                #endregion

                #region Excel
                else
                {
                    if (_OjkRpt.ReportName.Equals("4"))
                    {
                        int rowcell = 0;
                        try
                        {
                            using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                            {
                                DbCon.Open();
                                using (SqlCommand cmd = DbCon.CreateCommand())
                                {
                                    cmd.CommandText = @"
                        DECLARE @NoIDPJK nvarchar(30)


                        select @NoIDPJK = NoIDPJK  from Company where Status in(1,2)
                        set @NoIDPJK = isnull(@NoIDPJK,'')

                        create table #Text(
                        [ResultText] [nvarchar] (1000) NULL
                        )

                        DECLARE @Table TABLE
                        (
	                        FundClientPK INT,
	                        Date Datetime
                        )

                        DECLARE @CFundClientPK INT

                        Declare A Cursor FOR
	                        SELECT DISTINCT fundclientpK FROM dbo.ClientSubscription WHERE status <> 3 AND Posted = 1 AND Revised = 0
                        Open A
                        Fetch Next From A
                        INTO @CFundClientPK

                        While @@FETCH_STATUS = 0  
                        Begin
	
	                        INSERT INTO @Table
                                ( FundClientPK, Date )
                           SELECT TOP 1 FundClientPK,ValueDate FROM dbo.ClientSubscription 
                           WHERE FundClientPK = @CFundClientPK AND status <> 3 AND posted = 1 AND Revised = 0
                           ORDER BY ValueDate asc

	                        Fetch Next From A 
	                        into @CFundClientPK
                        End	
                        Close A
                        Deallocate A


                        select @NoIDPJK IDPJK ,isnull(InvestorType,'') InvestorType,ISNULL(TempatLahir,'') TempatLahir,
                        ISNULL(Name,'') Name,
                        Case when InvestorType = 1 then isnull(TanggalLahir,'') else '' end TanggalLahir, 
                        Case when InvestorType = 1 then ISNULL(AlamatInd1,'') else AlamatPerusahaan end Alamat,
                        CASE when InvestorType = 1 and IdentitasInd1 in (1,7) then NoIdentitasInd1 else  ' ' end NoKTP,
                        case when InvestorType = 1 and IdentitasInd1 in (2,3,4,5,6) then NoIdentitasInd1 else ' ' end NoIDLain,
                        ISNULL(SID,'') ID,
                        ISNULL(NPWP,'') NPWP
                        from FundClient A
                        LEFT JOIN @Table B ON A.FundClientPK = B.FundClientPK
                        WHERE B.Date between @ValueDateFrom and @ValueDateTo  and A.SACode = ''  and status in (1,2) 
                        AND B.FundClientPK IS NOT null


                        ";
                                    cmd.CommandTimeout = 0;
                                    cmd.Parameters.AddWithValue("@ValueDateFrom", _OjkRpt.ValueDateFrom);
                                    cmd.Parameters.AddWithValue("@ValueDateTo", _OjkRpt.ValueDateTo);
                                    using (SqlDataReader dr0 = cmd.ExecuteReader())
                                    {
                                        if (!dr0.HasRows)
                                        {
                                            return false;
                                        }
                                        else
                                        {
                                            string filePath = Tools.ReportsPath + "Sipesat_" + _userID + ".xlsx";
                                            int incRowExcel = 0;
                                            int _startRowDetail, _endRowDetail;
                                            FileInfo excelFile = new FileInfo(filePath);
                                            if (excelFile.Exists)
                                            {
                                                excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                                excelFile = new FileInfo(filePath);
                                            }

                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                            using (ExcelPackage package = new ExcelPackage(excelFile))
                                            {
                                                package.Workbook.Properties.Title = "Sipesat";
                                                package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                                package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                                package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                                package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                                package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SiPesatReport");

                                                List<SipesatRpt> rList = new List<SipesatRpt>();
                                                while (dr0.Read())
                                                {
                                                    SipesatRpt rSingle = new SipesatRpt();

                                                    rSingle.InvestorType = Convert.ToInt32(dr0["InvestorType"]);
                                                    rSingle.ClientName = Convert.ToString(dr0["Name"]);
                                                    rSingle.TempatLahir = Convert.ToString(dr0["TempatLahir"]);
                                                    rSingle.TanggalLahir = Convert.ToString(dr0["TanggalLahir"]);
                                                    rSingle.Alamat = Convert.ToString(dr0["Alamat"]);
                                                    rSingle.NoKTP = Convert.ToString(dr0["NoKTP"]);
                                                    rSingle.NoIDLain = Convert.ToString(dr0["NoIDLain"]);
                                                    rSingle.ID = Convert.ToString(dr0["ID"]);
                                                    rSingle.NPWP = Convert.ToString(dr0["NPWP"]);
                                                    rSingle.IDPJK = Convert.ToString(dr0["IDPJK"]);

                                                    rList.Add(rSingle);
                                                }

                                                var GroupByReference =
                                                    from r in rList
                                                    group r by new { } into rGroup
                                                    select rGroup;
                                                foreach (var rsHeader in GroupByReference)
                                                {

                                                    incRowExcel++;
                                                    _startRowDetail = incRowExcel;
                                                    worksheet.Cells[incRowExcel, 1].Value = "ID PJK";
                                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 2].Value = "Kode Nasabah";
                                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 3].Value = "Nama Nasabah";
                                                    worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 4].Value = "Tempat Lahir";
                                                    worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 5].Value = "Tanggal Lahir";
                                                    worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 6].Value = "Alamat";
                                                    worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 7].Value = "KTP";
                                                    worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 8].Value = "Identitas Lain";
                                                    worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 9].Value = "CIF/Kepesertaan";
                                                    worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 10].Value = "NPWP";
                                                    worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                    incRowExcel++;

                                                    //end area header
                                                    foreach (var rsDetail in rsHeader)
                                                    {

                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.IDPJK;
                                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.InvestorType;
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.TempatLahir;
                                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.TanggalLahir;
                                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.Alamat;
                                                        worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                        //worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.NoKTP;
                                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.NoIDLain;
                                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.ID;
                                                        worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.NPWP;
                                                        worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        _endRowDetail = incRowExcel;
                                                        incRowExcel++;


                                                        worksheet.Cells["A" + _startRowDetail + ":J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + _startRowDetail + ":J" + _startRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                        worksheet.Cells["A" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                    }
                                                    int _endRow = incRowExcel - 1;
                                                    worksheet.Cells["A" + _endRow + ":J" + _endRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;
                                                    worksheet.Row(incRowExcel).PageBreak = true;
                                                }


                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                worksheet.PrinterSettings.FitToPage = true;
                                                worksheet.PrinterSettings.FitToWidth = 1;
                                                worksheet.PrinterSettings.FitToHeight = 0;
                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                                worksheet.Cells.AutoFitColumns(0);
                                                worksheet.Column(1).Width = 20;
                                                worksheet.Column(2).Width = 20;
                                                worksheet.Column(3).Width = 40;
                                                worksheet.Column(4).Width = 20;
                                                worksheet.Column(5).Width = 20;
                                                worksheet.Column(6).Width = 40;
                                                worksheet.Column(7).Width = 20;
                                                worksheet.Column(8).Width = 20;
                                                worksheet.Column(9).Width = 20;
                                                worksheet.Column(10).Width = 20;
                                                worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                // worksheet.PrinterSettings.FitToPage = true;
                                                //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                worksheet.HeaderFooter.OddHeader.CenteredText = "&14 SiPesat Report";
                                                worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderLeftText();

                                                Image img = Image.FromFile(Tools.ReportImage);
                                                worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                                package.Save();
                                                return true;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception err)
                        {
                            return false;
                            throw err;
                        }

                    }

                }

                #endregion

                return true;
            }//else if
            #endregion

            #region KPD
            else if (_OjkRpt.ReportName.Equals("5"))
            {
                #region Txt

                if (_OjkRpt.DownloadMode == "Txt")
                {
                    try
                    {
                        DateTime _datetimeNow = DateTime.Now;
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {
                                string _companyCode = "";


                                string _paramFund = "";

                                if (!_host.findString(_OjkRpt.Fund.ToLower(), "0", ",") && !string.IsNullOrEmpty(_OjkRpt.Fund))
                                {
                                    _paramFund = "And A.FundPK in ( " + _OjkRpt.Fund + " ) ";
                                }
                                else
                                {
                                    _paramFund = "";
                                }

                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"

                        create table #Text(      
                        [ResultText] [nvarchar](1000)  NULL          
                        )                        
        
                        truncate table #Text --     

          DECLARE @CFundPK INT
DECLARE @CFundClientPK INT

DECLARE @NAV TABLE
(
	FundPK INT,
	NAV NUMERIC(22,4)
)

INSERT INTO @NAV
        ( FundPK, NAV )
SELECT FundPK,ISNULL(A.Nav,0) FROM dbo.CloseNAV A
WHERE Date = (
SELECT MAX(date) FROM closeNAV WHERE status = 2 AND Date <= @Date
) " + _paramFund + @"


DECLARE @Text table (      
[ResultText] [nvarchar](1000)  NULL          
)                        

--drop Table @KPD--
DECLARE @KPD Table 
(
	KodeNasabah NVARCHAR(5),
	NamaNasabah NVARCHAR(200),
	NoKontrak NVARCHAR(100),
	TglKontrakFrom NVARCHAR(50),
	TglKontrakTo NVARCHAR(50),
	NoAdendum NVARCHAR(100),
	TglAdendum NVARCHAR(100),
	NilaiInvestasiAwalIDR NUMERIC(22,4),
	NilaiInvestasiAwalNonIDR NUMERIC(22,4),
	NilaiInvestasiAkhirIDR NUMERIC(22,4),
	NilaiInvestasiAkhirNonIDR NUMERIC(22,4),
	JenisEfek NVARCHAR(100),
	DnLn NVARCHAR(2),
	JumlahEfek NUMERIC(22,4),
	NilaiPembelian NUMERIC(22,4),
	NilaiNominal NUMERIC(22,4),
	HPW NUMERIC(22,4),
	Deposito NUMERIC(22,4),
	TotalNilai NUMERIC(22,4),
	KodeBK NVARCHAR(10),
	Keterangan NVARCHAR(50),
	SID NVARCHAR(100)
)

DECLARE A CURSOR FOR 
SELECT distinct A.FundPK,A.FundClientPK 
from dbo.FundClientPosition A
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
where A.Date = @Date and B.FundTypeInternal = 2
AND A.UnitAmount > 1  " + _paramFund + @"
Open A
Fetch Next From A
Into @CFundPK,@CFundClientPK
While @@FETCH_STATUS = 0
Begin
	
	INSERT INTO @KPD
	        ( KodeNasabah ,
	          NamaNasabah ,
	          NoKontrak ,
	          TglKontrakFrom ,
	          TglKontrakTo ,
	          NoAdendum ,
	          TglAdendum ,
	          NilaiInvestasiAwalIDR ,
	          NilaiInvestasiAwalNonIDR ,
	          NilaiInvestasiAkhirIDR ,
	          NilaiInvestasiAkhirNonIDR ,
	          JenisEfek ,
	          DnLn ,
	          JumlahEfek ,
	          NilaiPembelian ,
	          NilaiNominal ,
	          HPW ,
	          Deposito ,
	          TotalNilai ,
	          KodeBK ,
	          Keterangan ,
	          SID
	        )
	SELECT ISNULL(B.InvestorType,1) 
	,ISNULL(B.Name,'') 
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,isnull(CONVERT(VARCHAR(8), C.KPDDateToContract, 112),0)
	,ISNULL(C.KPDNoAdendum,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateAdendum, 112),0)
	,ISNULL(D.TotalInvestasiAwalIDR,0)
	,ISNULL(E.TotalInvestasiAwalNonIDR,0)
	,ISNULL(D.TotalUnitIDR,0) * ISNULL(F.NAV,0)
	,ISNULL(E.TotalUnitNonIDR,0) * ISNULL(F.NAV,0)
	,ISNULL(G.InstrumentID,'') JenisEfek
	,1 DnLn
	,ISNULL(G.Balance,0) JumlahEfek
	,ISNULL(G.CostValue,0) NilaiPembelian
	,0 NilaiNominal
	,ISNULL(G.ClosePrice,0) HPW
	,ISNULL(H.BalanceDeposito,0) Deposito
	,ISNULL(G.Balance,0) * ISNULL(G.ClosePrice,0) TotalNilai
	,ISNULL(J.NKPDCode,'') KodeBK
	,ISNULL(G.InstrumentID,'') Keterangan
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN
    (
		SELECT FundClientPK, SUM(ISNULL(A.CashAmount,0)) TotalInvestasiAwalIDR,SUM(ISNULL(A.TotalUnitAmount,0)) TotalUnitIDR FROM dbo.ClientSubscription A
		WHERE A.FundPK = @CFundPK AND A.status <> 3 AND A.Posted = 1 AND A.Revised =0
		AND A.CurrencyPK = 1 AND A.FundclientPK = @CFundClientPK
		GROUP BY A.FundClientPK
	)D ON A.FundClientPK = D.FundClientPK
	LEFT JOIN
    (
		SELECT FundClientPK, SUM(ISNULL(A.CashAmount,0)) TotalInvestasiAwalNonIDR 
		,SUM(ISNULL(A.TotalUnitAmount,0)) TotalUnitNonIDR
		FROM dbo.ClientSubscription A
		WHERE A.FundPK = @CFundPK AND A.status <> 3 AND A.Posted = 1 AND A.Revised =0
		AND A.CurrencyPK <> 1 AND A.FundclientPK = @CFundClientPK
		GROUP BY A.FundClientPK
	)E ON A.FundClientPK = D.FundClientPK
	LEFT JOIN @NAV F ON A.FundPK = F.FundPK
	LEFT JOIN
    (
		SELECT A.FundPK,A.InstrumentID,ISNULL(A.Balance,0) Balance 
		,ISNULL(A.CostValue,0) CostValue
		,ISNULL(A.ClosePrice,0) ClosePrice
		FROM dbo.FundPosition A
		WHERE A.Date = @Date
	)G ON A.FundPK = G.FundPK
	LEFT JOIN 
	(
		SELECT FundPK, SUM(ISNULL(A.Balance,0)) BalanceDeposito
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		WHERE A.Date = @Date AND B.InstrumentTypePK = 5
		GROUP BY A.FundPK
	)H ON A.FundPK = H.FundPK
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK

	
	UNION ALL

	SELECT  ISNULL(B.InvestorType,1) 
	,'0'
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'998'
	,'1'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@Date,3,@CFundPK)
	,ISNULL(J.NKPDCode,'') KodeBK
	,'0'
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK
	

	UNION ALL

	SELECT  ISNULL(B.InvestorType,1) 
	,'0'
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'997'
	,'1'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@Date,40,@CFundPK)
	,ISNULL(J.NKPDCode,'') KodeBK
	,'0'
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK

	UNION ALL

	SELECT  ISNULL(B.InvestorType,1) 
	,'0'
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'996'
	,'1'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@Date,64,@CFundPK)
	,ISNULL(J.NKPDCode,'') KodeBK
	,'0'
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK



Fetch next From A Into @CFundPK,@CFundClientPK
end
Close A
Deallocate A

insert into #Text
 
select 
isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeNasabah,'')))),'') + --1
'|' + isnull(RTRIM(LTRIM(isnull(NamaNasabah,''))),'')  +    --2
'|' + isnull(RTRIM(LTRIM(isnull(NoKontrak,''))),'')  +  --3
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TglKontrakFrom,'')))),'')  +  --4
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TglKontrakTo,'')))),'')  +  --5
'|' + isnull(RTRIM(LTRIM(isnull(NoAdendum,''))),'')  +  --6
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TglAdendum,'')))),'')  +  --7
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAwalIDR,0))),'')  +  --8
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAwalNonIDR,0))),'')  + --9
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAkhirIDR,0))),'')  + --10
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAkhirNonIDR,0))),'')  +  --11
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JenisEfek,'')))),'')  +  --12
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(DnLn,'')))),'')  + --13
'|' + isnull(RTRIM(LTRIM(isnull(JumlahEfek,0))),'')  + --14
'|' + isnull(RTRIM(LTRIM(isnull(NilaiPembelian,0))),'')  +  --15
'|' + isnull(RTRIM(LTRIM(isnull(NilaiNominal,0))),'')  +  --16
'|' + isnull(RTRIM(LTRIM(isnull(HPW,0))),'')  +  --17
'|' + isnull(RTRIM(LTRIM(isnull(Deposito,0))),'')  +  --18
'|' + isnull(RTRIM(LTRIM(isnull(TotalNilai,0))),'')  +  --19
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeBK,'')))),'') + --20
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(Keterangan,'')))),'') + --21
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))),'') --22
from @KPD

select * from #text

                         ";
                                cmd.Parameters.AddWithValue("@Date", _OjkRpt.Date);
                                //cmd.Parameters.AddWithValue("@FundPK", _Fund);

                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr.HasRows)
                                    {


                                        _companyCode = _host.Get_CompanyID();
                                        string filePath = Tools.ARIATextPath + _companyCode + "KPD.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            while (dr.Read())
                                            {
                                                file.WriteLine(Convert.ToString(dr["ResultText"]));
                                            }
                                            //return Tools.HtmlARIATextPath + _companyCode + "KPD.txt";
                                            return true;
                                        }

                                    }
                                    return false;
                                }

                            }
                        }
                    }
                    catch (Exception err)
                    {
                        throw err;
                    }

                }

                #endregion

                #region Excel

                if (_OjkRpt.DownloadMode == "Excel")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                string _paramFund = "";

                                if (!_host.findString(_OjkRpt.Fund.ToLower(), "0", ",") && !string.IsNullOrEmpty(_OjkRpt.Fund))
                                {
                                    _paramFund = "And A.FundPK in ( " + _OjkRpt.Fund + " ) ";
                                }
                                else
                                {
                                    _paramFund = "";
                                }

                                cmd.CommandTimeout = 0;
                                cmd.CommandText =
                                @"

DECLARE @CFundPK INT
DECLARE @CFundClientPK INT

DECLARE @NAV TABLE
(
	FundPK INT,
	NAV NUMERIC(22,4)
)

INSERT INTO @NAV
        ( FundPK, NAV )
SELECT FundPK,ISNULL(A.Nav,0) FROM dbo.CloseNAV A
WHERE Date = (
SELECT MAX(date) FROM closeNAV WHERE status = 2 AND Date <= @Date
) " + _paramFund + @"


DECLARE @Text table (      
[ResultText] [nvarchar](1000)  NULL          
)                        

--drop Table @KPD--
DECLARE @KPD Table 
(
	KodeNasabah NVARCHAR(5),
	NamaNasabah NVARCHAR(200),
	NoKontrak NVARCHAR(100),
	TglKontrakFrom NVARCHAR(50),
	TglKontrakTo NVARCHAR(50),
	NoAdendum NVARCHAR(100),
	TglAdendum NVARCHAR(100),
	NilaiInvestasiAwalIDR NUMERIC(22,4),
	NilaiInvestasiAwalNonIDR NUMERIC(22,4),
	NilaiInvestasiAkhirIDR NUMERIC(22,4),
	NilaiInvestasiAkhirNonIDR NUMERIC(22,4),
	JenisEfek NVARCHAR(100),
	DnLn NVARCHAR(2),
	JumlahEfek NUMERIC(22,4),
	NilaiPembelian NUMERIC(22,4),
	NilaiNominal NUMERIC(22,4),
	HPW NUMERIC(22,4),
	Deposito NUMERIC(22,4),
	TotalNilai NUMERIC(22,4),
	KodeBK NVARCHAR(10),
	Keterangan NVARCHAR(50),
	SID NVARCHAR(100)
)

DECLARE A CURSOR FOR 
SELECT distinct A.FundPK,A.FundClientPK 
from dbo.FundClientPosition A
LEFT JOIN Fund B ON A.FundPK = B.FundPK AND B.status IN (1,2)
where A.Date = @Date and B.FundTypeInternal = 2 
AND A.UnitAmount > 1 " + _paramFund + @"
Open A
Fetch Next From A
Into @CFundPK,@CFundClientPK
While @@FETCH_STATUS = 0
Begin
	
	INSERT INTO @KPD
	        ( KodeNasabah ,
	          NamaNasabah ,
	          NoKontrak ,
	          TglKontrakFrom ,
	          TglKontrakTo ,
	          NoAdendum ,
	          TglAdendum ,
	          NilaiInvestasiAwalIDR ,
	          NilaiInvestasiAwalNonIDR ,
	          NilaiInvestasiAkhirIDR ,
	          NilaiInvestasiAkhirNonIDR ,
	          JenisEfek ,
	          DnLn ,
	          JumlahEfek ,
	          NilaiPembelian ,
	          NilaiNominal ,
	          HPW ,
	          Deposito ,
	          TotalNilai ,
	          KodeBK ,
	          Keterangan ,
	          SID
	        )
	SELECT ISNULL(B.InvestorType,1) 
	,ISNULL(B.Name,'') 
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,isnull(CONVERT(VARCHAR(8), C.KPDDateToContract, 112),0)
	,ISNULL(C.KPDNoAdendum,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateAdendum, 112),0)
	,ISNULL(D.TotalInvestasiAwalIDR,0)
	,ISNULL(E.TotalInvestasiAwalNonIDR,0)
	,ISNULL(D.TotalUnitIDR,0) * ISNULL(F.NAV,0)
	,ISNULL(E.TotalUnitNonIDR,0) * ISNULL(F.NAV,0)
	,ISNULL(G.InstrumentID,'') JenisEfek
	,1 DnLn
	,ISNULL(G.Balance,0) JumlahEfek
	,ISNULL(G.CostValue,0) NilaiPembelian
	,0 NilaiNominal
	,ISNULL(G.ClosePrice,0) HPW
	,ISNULL(H.BalanceDeposito,0) Deposito
	,ISNULL(G.Balance,0) * ISNULL(G.ClosePrice,0) TotalNilai
	,ISNULL(J.NKPDCode,'') KodeBK
	,ISNULL(G.InstrumentID,'') Keterangan
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN
    (
		SELECT FundClientPK, SUM(ISNULL(A.CashAmount,0)) TotalInvestasiAwalIDR,SUM(ISNULL(A.TotalUnitAmount,0)) TotalUnitIDR FROM dbo.ClientSubscription A
		WHERE A.FundPK = @CFundPK AND A.status <> 3 AND A.Posted = 1 AND A.Revised =0
		AND A.CurrencyPK = 1 AND A.FundclientPK = @CFundClientPK
		GROUP BY A.FundClientPK
	)D ON A.FundClientPK = D.FundClientPK
	LEFT JOIN
    (
		SELECT FundClientPK, SUM(ISNULL(A.CashAmount,0)) TotalInvestasiAwalNonIDR 
		,SUM(ISNULL(A.TotalUnitAmount,0)) TotalUnitNonIDR
		FROM dbo.ClientSubscription A
		WHERE A.FundPK = @CFundPK AND A.status <> 3 AND A.Posted = 1 AND A.Revised =0
		AND A.CurrencyPK <> 1 AND A.FundclientPK = @CFundClientPK
		GROUP BY A.FundClientPK
	)E ON A.FundClientPK = D.FundClientPK
	LEFT JOIN @NAV F ON A.FundPK = F.FundPK
	LEFT JOIN
    (
		SELECT A.FundPK,A.InstrumentID,ISNULL(A.Balance,0) Balance 
		,ISNULL(A.CostValue,0) CostValue
		,ISNULL(A.ClosePrice,0) ClosePrice
		FROM dbo.FundPosition A
		WHERE A.Date = @Date
	)G ON A.FundPK = G.FundPK
	LEFT JOIN 
	(
		SELECT FundPK, SUM(ISNULL(A.Balance,0)) BalanceDeposito
		FROM dbo.FundPosition A
		LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
		WHERE A.Date = @Date AND B.InstrumentTypePK = 5
		GROUP BY A.FundPK
	)H ON A.FundPK = H.FundPK
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK

	
	UNION ALL

	SELECT  ISNULL(B.InvestorType,1) 
	,'0'
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'998'
	,'1'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@Date,3,@CFundPK)
	,ISNULL(J.NKPDCode,'') KodeBK
	,'0'
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK
	

	UNION ALL

	SELECT  ISNULL(B.InvestorType,1) 
	,'0'
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'997'
	,'1'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@Date,40,@CFundPK)
	,ISNULL(J.NKPDCode,'') KodeBK
	,'0'
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK

	UNION ALL

	SELECT  ISNULL(B.InvestorType,1) 
	,'0'
	,ISNULL(C.KPDNoContract,'') 
	,isnull(CONVERT(VARCHAR(8), C.KPDDateFromContract, 112),0)
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,'996'
	,'1'
	,'0'
	,'0'
	,'0'
	,'0'
	,'0'
	,[dbo].[FGetGroupAccountFundJournalBalanceByFundPK](@Date,64,@CFundPK)
	,ISNULL(J.NKPDCode,'') KodeBK
	,'0'
	,ISNULL(B.SID,'') SID
	FROM dbo.FundClientPosition A
	LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.status  IN (1,2)
	LEFT JOIN Fund C ON A.FundPK = C.FundPK AND C.status IN (1,2)
	LEFT JOIN dbo.BankBranch I ON C.BankBranchPK = I.BankBranchPK AND I.status IN (1,2)
	LEFT JOIN Bank J ON I.BankPK = J.BankPK AND J.status IN (1,2)
	WHERE A.Date = @Date AND A.FundPK = @CFundPK AND A.FundclientPK = @CFundClientPK



Fetch next From A Into @CFundPK,@CFundClientPK
end
Close A
Deallocate A

SELECT * FROM @KPD
                            ";


                                //cmd.Parameters.AddWithValue("@date", _sInvestRpt.ParamDate);

                                cmd.Parameters.AddWithValue("@Date", _OjkRpt.Date);
                                //cmd.Parameters.AddWithValue("@FundPK", _sInvestRpt.FundFrom);

                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "KPD" + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "KPD" + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }


                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "KPDReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("KPD Report");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<KPD> rList = new List<KPD>();
                                            while (dr0.Read())
                                            {


                                                KPD rSingle = new KPD();
                                                rSingle.KodeNasabah = Convert.ToString(dr0["KodeNasabah"]);
                                                rSingle.NamaNasabah = Convert.ToString(dr0["NamaNasabah"]);
                                                rSingle.NomorKontrak = Convert.ToString(dr0["NoKontrak"]);
                                                rSingle.TanggalKontrak = Convert.ToString(dr0["TglKontrakFrom"]);
                                                rSingle.TanggalJatuhTempo = Convert.ToString(dr0["TglKontrakTo"]);
                                                rSingle.NomorAdendum = Convert.ToString(dr0["NoAdendum"]);
                                                rSingle.TanggalAdendum = Convert.ToString(dr0["TglAdendum"]);
                                                rSingle.NilaiInvestasiAwalIDR = Convert.ToString(dr0["NilaiInvestasiAwalIDR"]);
                                                rSingle.NilaiInvestasiAwalNonIDR = Convert.ToString(dr0["NilaiInvestasiAwalNonIDR"]);
                                                rSingle.NilaiInvestasiAkhir = Convert.ToString(dr0["NilaiInvestasiAkhirIDR"]);
                                                rSingle.NilaiInvestasiAkhirNonIDR = Convert.ToString(dr0["NilaiInvestasiAkhirNonIDR"]);
                                                rSingle.JenisEfek = Convert.ToString(dr0["JenisEfek"]);
                                                rSingle.KodeKategoriEfek = Convert.ToInt32(dr0["DnLn"]);
                                                rSingle.JumlahEfek = Convert.ToString(dr0["JumlahEfek"]);
                                                rSingle.NilaiPembelian = Convert.ToString(dr0["NilaiPembelian"]);
                                                rSingle.NilaiNominal = Convert.ToString(dr0["NilaiNominal"]);
                                                rSingle.HPW = Convert.ToString(dr0["HPW"]);
                                                rSingle.Deposito = Convert.ToString(dr0["Deposito"]);
                                                rSingle.TotalInvestasi = Convert.ToString(dr0["TotalNilai"]);
                                                rSingle.KodeBK = Convert.ToString(dr0["KodeBK"]);
                                                rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);
                                                rSingle.SID = Convert.ToString(dr0["SID"]);
                                                rList.Add(rSingle);

                                            }

                                            var QueryByClientID =
                                             from r in rList
                                             group r by new { } into rGroup
                                             select rGroup;

                                            int incRowExcel = 0;
                                            int _startRowDetail = 0;
                                            foreach (var rsHeader in QueryByClientID)
                                            {

                                                incRowExcel++;
                                                //Row A = 2
                                                int RowA = incRowExcel;
                                                int RowB = incRowExcel + 1;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.WrapText = true;

                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);

                                                worksheet.Cells[incRowExcel, 1].Value = "Kode Nasabah";
                                                worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                                worksheet.Cells[incRowExcel, 3].Value = "Nomer Kontrak";
                                                worksheet.Cells[incRowExcel, 4].Value = "Tanggal Kontrak";
                                                worksheet.Cells[incRowExcel, 5].Value = "Tanggal Jatuh Tempo";
                                                worksheet.Cells[incRowExcel, 6].Value = "Nomer Adendum";
                                                worksheet.Cells[incRowExcel, 7].Value = "Tanggal Adendum";
                                                worksheet.Cells[incRowExcel, 8].Value = "Nilai Investasi Awal IDR";
                                                worksheet.Cells[incRowExcel, 9].Value = "Nilai Investasi Awal Non IDR";
                                                worksheet.Cells[incRowExcel, 10].Value = "Nilai investasi Akhir IDR";
                                                worksheet.Cells[incRowExcel, 11].Value = "Nilai investasi Akhir Non IDR";
                                                worksheet.Cells[incRowExcel, 12].Value = "Kode Efek";
                                                worksheet.Cells[incRowExcel, 13].Value = "Kode Kategori Efek";
                                                worksheet.Cells[incRowExcel, 14].Value = "Jumlah Efek";
                                                worksheet.Cells[incRowExcel, 15].Value = "Nilai Pembelian";
                                                worksheet.Cells[incRowExcel, 16].Value = "Nilai Nominal";
                                                worksheet.Cells[incRowExcel, 17].Value = "HPW";
                                                worksheet.Cells[incRowExcel, 18].Value = "Deposito";
                                                worksheet.Cells[incRowExcel, 19].Value = "Total Investasi";
                                                worksheet.Cells[incRowExcel, 20].Value = "Kode BK";
                                                worksheet.Cells[incRowExcel, 21].Value = "Keterangan";
                                                worksheet.Cells[incRowExcel, 22].Value = "SID";

                                                //area header
                                                int _endRowDetail = 0;
                                                int _startRow = incRowExcel;
                                                incRowExcel++;
                                                _startRowDetail = incRowExcel;
                                                foreach (var rsDetail in rsHeader)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.KodeNasabah;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaNasabah;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.NomorKontrak;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.TanggalKontrak;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.TanggalJatuhTempo;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.NomorAdendum;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TanggalAdendum;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NilaiInvestasiAwalIDR;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.NilaiInvestasiAwalNonIDR;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NilaiInvestasiAkhir;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.NilaiInvestasiAkhirNonIDR;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.JenisEfek;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.KodeKategoriEfek;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.JumlahEfek;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.NilaiPembelian;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.NilaiNominal;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.HPW;
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.Deposito;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.TotalInvestasi;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.KodeBK;
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.Keterangan;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.SID;

                                                    _endRowDetail = incRowExcel;

                                                    incRowExcel++;


                                                }

                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSeaGreen);
                                                //worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                                //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Calculate();
                                                //worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Calculate();
                                                //worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Calculate();
                                                //worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Calculate();
                                                //worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Calculate();
                                                //worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Calculate();
                                                //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Calculate();
                                                //worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Calculate();
                                                //worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Calculate();
                                                //worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Calculate();
                                                //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Calculate();
                                                //worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Calculate();
                                                //worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Calculate();
                                                //worksheet.Cells["N" + incRowExcel + ":O" + incRowExcel].Calculate();
                                                //worksheet.Cells["O" + incRowExcel + ":P" + incRowExcel].Calculate();
                                                //worksheet.Cells["P" + incRowExcel + ":Q" + incRowExcel].Calculate();
                                                //worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Calculate();
                                                //worksheet.Cells["R" + incRowExcel + ":S" + incRowExcel].Calculate();
                                                //worksheet.Cells["S" + incRowExcel + ":T" + incRowExcel].Calculate();
                                                //worksheet.Cells["T" + incRowExcel + ":U" + incRowExcel].Calculate();
                                                //worksheet.Cells["U" + incRowExcel + ":V" + incRowExcel].Calculate();
                                                //worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Font.Bold = true;

                                                worksheet.Cells["A" + _startRow + ":V" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _startRow + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _startRow + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                            }



                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 1;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 22];
                                            worksheet.Column(1).Width = 9;
                                            worksheet.Column(2).Width = 35;
                                            worksheet.Column(3).Width = 20;
                                            worksheet.Column(4).Width = 20;
                                            worksheet.Column(5).Width = 20;
                                            worksheet.Column(6).Width = 20;
                                            worksheet.Column(7).Width = 20;
                                            worksheet.Column(8).Width = 20;
                                            worksheet.Column(9).Width = 20;
                                            worksheet.Column(10).Width = 20;
                                            worksheet.Column(11).Width = 20;
                                            worksheet.Column(12).Width = 20;
                                            worksheet.Column(13).Width = 20;
                                            worksheet.Column(14).Width = 20;
                                            worksheet.Column(15).Width = 20;
                                            worksheet.Column(16).Width = 20;
                                            worksheet.Column(17).Width = 20;
                                            worksheet.Column(18).Width = 20;
                                            worksheet.Column(19).Width = 20;
                                            worksheet.Column(20).Width = 20;
                                            worksheet.Column(21).Width = 20;
                                            worksheet.Column(22).Width = 20;



                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells["A3:O14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 KPD REPORT";

                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                            package.Save();
                                            return true;
                                        }
                                    }
                                }

                            }

                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }



                #endregion

                return true;
            }//else if
            #endregion

            #region Exposure All Fund
            if (_OjkRpt.ReportName.Equals("21"))
            {
                #region Txt
                if (_OjkRpt.DownloadMode == "Txt")
                {
                    try
                    {
                        DateTime _datetimeNow = DateTime.Now;
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"
                                
                                ";
                                cmd.Parameters.AddWithValue("@ValueDateFrom", _OjkRpt.ValueDateFrom);

                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr.HasRows)
                                    {


                                        string filePath = Tools.ARIATextPath + "Pelanggaran tgl" + Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd MMMM yyyy") + ".txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            while (dr.Read())
                                            {

                                                file.WriteLine(Convert.ToString(dr["ResultText"]));
                                            }
                                            return true;
                                        }

                                    }
                                    return false;
                                }

                            }
                        }
                    }
                    catch (Exception err)
                    {
                        throw err;
                    }

                }


                #endregion

                #region Excel
                else
                {
                    if (_OjkRpt.ReportName.Equals("21"))
                    {
                        int rowcell = 0;
                        try
                        {
                            using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                            {
                                DbCon.Open();
                                using (SqlCommand cmd = DbCon.CreateCommand())
                                {
                                    cmd.CommandText = @"
                                     --declare @date date
--set @date = '2020-09-18'

declare @ClientCode nvarchar(20)
set @ClientCode = '03'

declare @InstrumentPK int
declare @Amount numeric(22,4)
declare @paramBondRating int

set @InstrumentPK = 0
set @Amount = 0

--setup variable
begin
	Declare @PeriodPK int

	select @PeriodPK = PeriodPK from Period where @Date between DateFrom and DateTo and status = 2

	Declare @TrailsPK int
	Declare @MaxDateEndDayFP datetime
	Declare @TotalMarketValue numeric(26,6)
	Declare @TotalMarketValueAllFund numeric(26,6)
	DECLARE @QInstrumentPK int
	DECLARE @PInstrumentPK int

	DECLARE @EInstrumentPK INT
	DECLARE @EAmount NUMERIC(22,4)
	DECLARE @EFundPK INT

	DECLARE @WInstrumentPK INT
	DECLARE @WAmount NUMERIC(22,4)

	DECLARE @CFundPK INT
	DECLARE @CType INT
	DECLARE @CParameter INT
	DECLARE @CMinExp NUMERIC(8,4)
	DECLARE @CMaxExp NUMERIC(8,4)
	DECLARE @CWarningMinExp NUMERIC(8,4)
	DECLARE @CWarningMaxExp NUMERIC(8,4)
	DECLARE @CMinVal NUMERIC(22,4)
	DECLARE @CMaxVal NUMERIC(22,4)
	DECLARE @CWarningMinVal NUMERIC(8,4)
	DECLARE @CWarningMaxVal NUMERIC(8,4)

	DECLARE @TotalInvestmentAllFundForCounterpartExposure numeric(26,6)
	Declare @FundPK int
	
	declare @TotalDirectInvestment numeric(26,6)
	declare @TotalLandAndProperty numeric(26,6)
	declare @yesterday date

	DECLARE @Exposure TABLE
	(
	FundPK INT,
	Exposure INT,
	ExposureID nvarchar(100) COLLATE DATABASE_DEFAULT,
	Parameter INT,
	ParameterDesc nvarchar(100) COLLATE DATABASE_DEFAULT,

	MarketValue numeric(30,4),
	ExposurePercent numeric(18,8),

	MinExposurePercent numeric(18,8),
	WarningMinExposure numeric(18,8),
	AlertWarningMinExposure BIT,
	AlertMinExposure bit,

	MaxExposurePercent numeric(18,8),
	WarningMaxExposure numeric(18,8),
	AlertWarningMaxExposure BIT,
	AlertMaxExposure BIT,

	MinValue NUMERIC(22,4),
	WarningMinValue NUMERIC(22,4),
	AlertWarningMinValue BIT,
	AlertMinValue BIT,

	MaxValue NUMERIC(22,4),
	WarningMaxValue NUMERIC(22,4),
	AlertWarningMaxValue BIT,
	AlertMaxValue bit,
	Behavior nvarchar(100)

	)


	DECLARE @InvestmentPosition TABLE
	(
		FundPK INT,
		InstrumentPK INT,
		Amount NUMERIC(22,4)
	)

	DECLARE @InvestmentPrice TABLE
	(
		InstrumentPK INT,
		Price NUMERIC(22,4)
	)

	DECLARE @InvestmentPositionALLFund TABLE
	(
		FundPK int,
		InstrumentPK INT,
		Amount NUMERIC(22,4)
	)

	Declare @PositionForExp1 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp2 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp3 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp4 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp5 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp9 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp10 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp13 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	DECLARE @InstrumentIndex TABLE
	(
		InstrumentPK INT,
		[IndexPK] int
	)

	Declare @PositionForExp14 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp16 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp18 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp19 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(32,4),
		ExposurePercent NUMERIC(10,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp20 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)


	Declare @PositionForExp22 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)


	Declare @PositionForExp23 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp24 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp25 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp26 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp27 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp28 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(30,4),
		AUM numeric(30,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

	Declare @PositionForExp29 TABLE
	(
		FundPK INT,
		Exposure INT,
		ExposureDesc NVARCHAR(200),
		Parameter INT,
		ParameterDesc NVARCHAR(200),
		InstrumentPK INT,
		InstrumentID NVARCHAR(100),
		MarketValue NUMERIC(22,4),
		AUM numeric(22,4),
		ExposurePercent NUMERIC(8,4),
		Behavior nvarchar(100)
	)

end

 --type di fundexposure 
-- 1 -> | INSTRUMENT TYPE GROUP | DONE
-- 2 | BOND | DONE
-- 3 | SECTOR | DONE
-- 4 | INSTRUMENT TYPE | DONE
-- 5 | EQUITY | DONE
-- 9 | ALL FUND PER BANK | DONE
-- 10 | PER FUND PER BANK | DONE
-- 13 | ISSUER | DONE
-- 14 | INDEX | DONE
-- 15 | SYARIAH ONLY - BELUM
-- 16 | TOTAL PORTFOLIO | DONE
-- 17 | ALL FUND EQUITY < Market CAP - BELUM
-- 18 | ISSUER ALL FUND | DONE

-- 20 | COUNTERPART EXPOSURE
-- 22 | DIRECT INVESTMENT
-- 23 | LAND AND PROPERTY

-- 24 | CAMEL SCORE BANK PER FUND | 
-- 25 | BOND RATING | DONE
-- 26 | TOTAL FOREIGN PORTFOLIO PER FUND |  DONE
-- 27 | KIK EBA PER COUNTERPART | DONE
-- 28 | INVESTMENT OTHER THAN DEPOSIT | DONE
-- 29 | AFFILIATED INVESTMENT | DONE


select @TotalMarketValueAllFund = SUM(ISNULL(aum,0)) From closeNav
where Date = (
	 select max(date) from CloseNAV where date <= @Date AND status = 2
)
and status = 2 

SET @TotalMarketValueAllFund = ISNULL(@TotalMarketValueAllFund,1)

set @yesterday = dbo.FWorkingDay(@date,-1)

DECLARE Z CURSOR FOR 
Select distinct FundPK from FundExposure  where status = 2

Open Z
Fetch Next From Z
Into @FundPK

While @@FETCH_STATUS = 0
Begin


--SETUP--
BEGIN


Select @TrailsPK = EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
endDayTrailsFundPortfolio where 
valuedate = 
(
	Select max(ValueDate) from endDayTrailsFundPortfolio where
	valuedate < @Date  and status = 2  
	and FundPK = @FundPK 
)
and status = 2  
and FundPK = @FundPK 


select @TotalMarketValue = aum From closeNav
where Date = (
	 select max(date) from CloseNAV where date <= @Date
	 and FundPK = @FundPK and status = 2
)
and FundPK = @FundPK
and status = 2 


set @TotalMarketValue = isnull(@TotalMarketValue,1) 

select @TotalInvestmentAllFundForCounterpartExposure = SUM(case when TrxType = 1 then ISNULL(DoneAmount,0) else ISNULL(DoneAmount,0) * -1 end)
FROM dbo.Investment A
LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
WHERE  ValueDate <= @Date  and A.PeriodPK = @PeriodPK and StatusSettlement = 2
AND C.GroupType in (1,2)

SET @TotalInvestmentAllFundForCounterpartExposure = ISNULL(@TotalInvestmentAllFundForCounterpartExposure,1)

--select @TotalDirectInvestment = sum(A.NetAmount - isnull(B.NetAmountSell,0)) from DirectInvestment A
--left join SellDirectInvestment B on A.DirectInvestmentPK = B.DirectInvestmentPK and B.status = 2
--where A.Status = 2 and Valuedate <= @Date and fundpk = @FundPK
--group by  A.FundPK,A.DirectInvestmentPK,A.ProjectName
--having sum(A.NetAmount - isnull(B.NetAmountSell,0)) > 0

set @TotalDirectInvestment = isnull(@TotalDirectInvestment,0)

--select @TotalLandAndProperty = sum(A.BuyNetAmount - isnull(A.SellNetAmount,0)) from LandAndProperty A
--where A.Status = 2 and BuyValueDate <= @Date and fundpk = @FundPK
--group by  A.FundPK,A.LandAndPropertyPK,A.Nama
--having sum(A.BuyNetAmount - isnull(A.SellNetAmount,0)) > 0

set @TotalLandAndProperty = isnull(@TotalDirectInvestment,0)


Declare Q Cursor For
	SELECT DISTINCT InstrumentPK FROM dbo.Investment A
	WHERE 
	 A.ValueDate > @MaxDateEndDayFP AND A.ValueDate <= @Date
	and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3 
	-- PARAM DISINI
	AND A.FundPK = @FundPK 

Open Q
Fetch Next From Q
INTO @QInstrumentPK
While @@FETCH_STATUS = 0  
BEGIN

	INSERT INTO @InvestmentPrice
	        ( InstrumentPK, Price )
	SELECT A.InstrumentPK,ISNULL(ClosePriceValue,0) FROM ClosePrice A
	left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status in (1,2)
	WHERE A.status = 2 AND A.instrumentPK = @QInstrumentPK  and 
    date =
	(
		SELECT MAX(Date) FROM dbo.ClosePrice WHERE status = 2 AND instrumentPK = @QInstrumentPK AND date <= @Date
	)
    union all
	select InstrumentPK,1 from Instrument where InstrumentPK = @QInstrumentPK and InstrumentTypePK in (5,10)

	Fetch Next From Q
	INTO @QInstrumentPK
End	
Close Q
Deallocate Q

INSERT INTO @InvestmentPosition
        ( FundPK, InstrumentPK, Amount )
SELECT FundPK,A.InstrumentPK, SUM(ISNULL(CASE WHEN A.DoneVolume > 0 THEN A.DoneVolume * ISNULL(B.Price,A.DonePrice) * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END
ELSE A.DoneAmount * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END END,0)
/ case when A.InstrumentTypePK not in (1,4,5,6,16) then 100 else 1 end
) 
FROM Investment A
LEFT JOIN @InvestmentPrice B ON A.InstrumentPK = B.InstrumentPK 
WHERE  
 A.ValueDate > @MaxDateEndDayFP AND A.ValueDate <= @Date
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3  

-- PARAM DISINI
AND A.FundPK = @FundPK 

GROUP BY FundPK,A.InstrumentPK


INSERT INTO @InvestmentPositionALLFund
        ( FundPK,InstrumentPK, Amount )
SELECT A.FundPK,A.InstrumentPK, SUM(ISNULL(CASE WHEN A.DoneVolume > 0 THEN A.DoneVolume * ISNULL(B.Price,A.DonePrice) * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END
ELSE A.DoneAmount * CASE WHEN A.TrxType = 2 THEN  -1 ELSE 1 END END,0)
/ case when A.InstrumentTypePK not in (1,4,5,6,16) then 100 else 1 end
) 
FROM Investment A
LEFT JOIN @InvestmentPrice B ON A.InstrumentPK = B.InstrumentPK 
WHERE   A.ValueDate > @MaxDateEndDayFP AND A.ValueDate <= @Date
and A.StatusInvestment <> 3 and A.StatusDealing <> 3 and A.StatusSettlement <> 3  
GROUP BY A.InstrumentPK,A.FundPK

END

	--1--
	BEGIN
	
	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 1
		)
	BEGIN
		INSERT INTO @PositionForExp1
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,1,ISNULL(E.DescOne,''),ISNULL(C.GroupType,0),ISNULL(D.DescOne,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON C.GroupType = D.Code AND D.id = 'InstrumentGroupType' AND D.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 1 AND E.ID = 'ExposureType' AND E.status IN (1,2)

			WHERE  Date = @MaxDateEndDayFP and A.Status = 2
			AND D.DescOne IS NOT NULL

			-- PARAM DISINI
	AND A.FundPK = @FundPK 

			GROUP BY D.DescOne,C.GroupType,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	END



	END

	--2--
	BEGIN



	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 2
		)
	BEGIN
		INSERT INTO @PositionForExp2
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,2,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 2 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP 
			AND C.GroupType = 2 and A.Status = 2 --and B.InstrumentTypePK not in (2,12,13,14,15)
			-- PARAM DISINI
	AND A.FundPK = @FundPK 

			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	END



	END

	--3--
	BEGIN


	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 3
		)
	BEGIN
		INSERT INTO @PositionForExp3
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,3,ISNULL(E.DescOne,''),ISNULL(C.SectorPK,0),ISNULL(D.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.SubSector C ON B.SectorPK =  C.SubSectorPK AND C.status IN (1,2)
			LEFT JOIN Sector D ON C.SectorPK = D.SectorPK AND D.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 3 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP  and A.Status = 2
			AND D.ID IS NOT NULL
			-- PARAM DISINI
	AND A.FundPK = @FundPK 
			GROUP BY D.ID,C.SectorPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	

	
	END


	END

	--4--
	BEGIN

	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 4
		)
	BEGIN
		INSERT INTO @PositionForExp4
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,4,ISNULL(E.DescOne,''),ISNULL(B.InstrumentTypePK,0),ISNULL(C.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 4 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP  --and B.InstrumentTypePK not in (2,13,15)
			AND C.ID IS NOT NULL and A.Status = 2
			-- PARAM DISINI
	AND A.FundPK = @FundPK 
			GROUP BY C.ID,B.InstrumentTypePK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	
	END

	END

	--5--
	BEGIN

	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 5
		)
	BEGIN
		INSERT INTO @PositionForExp5
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,5,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 5 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP --
			AND C.GroupType = 1 and A.Status = 2
			-- PARAM DISINI
	AND A.FundPK = @FundPK 
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	

	END


	END

	--10--
	BEGIN


	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 10
		)
	BEGIN
		INSERT INTO @PositionForExp10
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,10,ISNULL(E.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 10 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			LEFT JOIN Bank G ON B.BankPK = G.BankPK AND G.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP 
			AND C.GroupType = 3 and A.Status = 2
			AND ISNULL(G.ID,'') <> ''
			-- PARAM DISINI
	AND A.FundPK = @FundPK 
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,G.BankPK,G.ID

	
	END


	END

	--13--
	BEGIN


	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 13
		)
	BEGIN
		INSERT INTO @PositionForExp13
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,13,ISNULL(E.DescOne,''),ISNULL(C.IssuerPK,0),ISNULL(C.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.Issuer C ON B.IssuerPK =  C.IssuerPK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 13 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP 
			AND C.ID IS NOT NULL and A.Status = 2

			--PARAM DISINI
	AND FundPk = @FundPK 
			GROUP BY C.ID,C.IssuerPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	
	END


	END

	--14--
	BEGIN



	Declare P Cursor For
			SELECT DISTINCT InstrumentPK FROM dbo.FundPosition A WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP 
	Open P
	Fetch Next From P
	INTO @PInstrumentPK

	While @@FETCH_STATUS = 0  
	Begin
	
		INSERT INTO @InstrumentIndex
				( InstrumentPK, IndexPK )
		SELECT @InstrumentPK,IndexPK FROM dbo.InstrumentIndex WHERE Date = (
			SELECT MAX(Date) FROM dbo.InstrumentIndex WHERE status = 2 AND InstrumentPK = @PInstrumentPK
		)AND InstrumentPK = @InstrumentPK AND Status = 2 
	
		Fetch Next From P
		into @PInstrumentPK
	End	
	Close P
	Deallocate P


	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 14
		)
	BEGIN
		INSERT INTO @PositionForExp14
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,14,ISNULL(E.DescOne,''),ISNULL(C.IndexPK,0),ISNULL(D.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN @InstrumentIndex C ON B.InstrumentPK =  C.InstrumentPK
			LEFT JOIN dbo.[Index] D ON C.IndexPK = D.IndexPK AND D.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 14 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP 
			AND D.ID IS NOT NULL and A.Status = 2

			--PARAM DISINI
	AND FundPk = @FundPK 

			GROUP BY D.ID,C.IndexPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK


	
	END


	END

	--16--
	BEGIN
	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 16
		)
	BEGIN
		INSERT INTO @PositionForExp16
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,16,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @MaxDateEndDayFP and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 16 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @MaxDateEndDayFP  --and B.InstrumentTypePK not in (2,13,15)
			AND B.ID IS NOT NULL and A.Status = 2

			--PARAM DISINI
	AND FundPk = @FundPK 

			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK
	

	END

	END

	--20--
	BEGIN

	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK AND status = 2
		AND Type = 20
		)
	BEGIN
		INSERT INTO @PositionForExp20
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,20,ISNULL(E.DescOne,''),ISNULL(G.CounterpartPK,0),ISNULL(G.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.DoneAmount,0)) MarketValue
			,@TotalInvestmentAllFundForCounterpartExposure
			, SUM(ISNULL(A.DoneAmount,0)) /  @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @Date and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.Investment A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 20 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			LEFT JOIN Counterpart G ON A.CounterpartPK = G.CounterpartPK AND G.status IN (1,2)
			WHERE  ValueDate <= @Date and PeriodPK = @PeriodPK and StatusSettlement = 2
			AND C.GroupType in (1,2) 
			--PARAM DISINI
	AND FundPk = @FundPK 

			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,G.CounterpartPK,G.ID
		

	END


	END

	----22--
	--BEGIN

	--IF EXISTS(
	--	SELECT TOP 1 Type FROM dbo.FundExposure WHERE status = 2
	--	AND Type = 22
	--	)
	--BEGIN
	--	INSERT INTO @PositionForExp22
	--			( FundPK ,
	--			  Exposure ,
	--			  ExposureDesc,
	--			  Parameter ,
	--			  ParameterDesc ,
	--			  InstrumentPK,
	--			  InstrumentID ,
	--			  MarketValue ,
	--			  AUM ,
	--			  ExposurePercent,
	--			  Behavior
	--			)


	--		select C.FundPK,22,ISNULL(E.DescOne,''),C.DirectInvestmentPK,''
	--		,0,ISNULL(C.ProjectName ,'')
	--		,SUM(ISNULL(C.NetAmount,0)) MarketValue
	--		,@TotalMarketValue
	--		, SUM(ISNULL(C.NetAmount,0)) /  @TotalMarketValue * 100 ExposurePercent,''
	--		from (
	--		select A.FundPK,A.DirectInvestmentPK,A.ProjectName,sum(A.NetAmount - isnull(B.NetAmountSell,0)) NetAmount from DirectInvestment A
	--		left join SellDirectInvestment B on A.DirectInvestmentPK = B.DirectInvestmentPK and B.status = 2
	--		where A.Status = 2 and Valuedate <= @MaxDateEndDayFP and fundpk = @FundPK
	--		group by  A.FundPK,A.DirectInvestmentPK,A.ProjectName
	--		having sum(A.NetAmount - isnull(B.NetAmountSell,0)) > 0
	--		)C
	--		LEFT JOIN dbo.MasterValue E ON E.Code = 22 AND E.ID = 'ExposureType' AND E.status IN (1,2)

	--		-- PARAM DISINI
	--		AND C.FundPK = @FundPK 
	--		GROUP BY C.FundPK,E.DescOne,C.DirectInvestmentPK,C.ProjectName

	
	--END

	--END

	----23--
	--BEGIN

	--IF EXISTS(
	--	SELECT TOP 1 Type FROM dbo.FundExposure WHERE status = 2
	--	AND Type = 23
	--	)
	--BEGIN
	--	INSERT INTO @PositionForExp23
	--			( FundPK ,
	--			  Exposure ,
	--			  ExposureDesc,
	--			  Parameter ,
	--			  ParameterDesc ,
	--			  InstrumentPK,
	--			  InstrumentID ,
	--			  MarketValue ,
	--			  AUM ,
	--			  ExposurePercent,
	--			  Behavior
	--			)


	--		select C.FundPK,23,ISNULL(E.DescOne,''),C.LandAndPropertyPK,''
	--		,0,ISNULL(C.Nama ,'')
	--		,SUM(ISNULL(C.NetAmount,0)) MarketValue
	--		,@TotalMarketValue
	--		, SUM(ISNULL(C.NetAmount,0)) /  @TotalMarketValue * 100 ExposurePercent,''
	--		from (
	--		select A.FundPK,A.LandAndPropertyPK,A.Nama,sum(A.BuyNetAmount - isnull(A.SellNetAmount,0)) NetAmount from LandAndProperty A
	--		where A.Status = 2 and BuyValueDate <= @MaxDateEndDayFP and fundpk = @FundPK
	--		group by  A.FundPK,A.LandAndPropertyPK,A.Nama
	--		having sum(A.BuyNetAmount - isnull(A.SellNetAmount,0)) > 0
	--		)C
	--		LEFT JOIN dbo.MasterValue E ON E.Code = 23 AND E.ID = 'ExposureType' AND E.status IN (1,2)

	--		-- PARAM DISINI
	--		AND C.FundPK = @FundPK 
	--		GROUP BY C.FundPK,E.DescOne,C.LandAndPropertyPK,C.Nama

	
	--END

	--END

	--24--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK and status = 2
			AND Type = 24
		)
		BEGIN
			INSERT INTO @PositionForExp24
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
					  Behavior
					)
			SELECT A.FundPK,24,ISNULL(E.DescOne,''),ISNULL(F.BankPK,0),isnull(F.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,''
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 24 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			left join Bank F on A.BankPK = F.BankPK and F.Status in (1,2)
			WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP and B.InstrumentTypePK in (5,10)
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,F.ID,F.BankPK
	

		END

	END

	--25--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK and status = 2
			AND Type = 25
		)
		BEGIN
			select @paramBondRating = parameter from FundExposure where fundpk = @FundPK and Type = 25

			INSERT INTO @PositionForExp25
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
					  Behavior
					)
			SELECT A.FundPK,25,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),isnull(B.ID + ',Rating :' + B.BondRating,'') 
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			,100 ExposurePercent,''
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 25 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			left join dbo.MasterValue G on B.BondRating = G.DescOne and G.ID = 'BondRating' and G.Status in (1,2)
			left join Bank F on A.BankPK = F.BankPK and F.Status in (1,2)
			WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP and B.InstrumentTypePK in (2,3,8,9,13,15) and BondRating <> '' and G.Priority > @paramBondRating
			group by A.FundPK,E.DescOne,A.InstrumentPK,B.ID,B.BondRating
	

		END

	END

	--26--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK and status = 2
	AND Type = 26
		)
		BEGIN
			INSERT INTO @PositionForExp26
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
					  Behavior
					)
			SELECT A.FundPK,26,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),isnull(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,''
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 26 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP
			and B.BitIsForeign = 1
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK
	

		END

	END

	--27--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK and status = 2
	AND Type = 27
		)
		BEGIN
			INSERT INTO @PositionForExp27
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
					  Behavior
					)
			SELECT A.FundPK,27,ISNULL(E.DescOne,''),ISNULL(B.CounterpartPK,0),isnull(F.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,''
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 27 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			left join Counterpart F on B.CounterpartPK = F.CounterpartPK and F.Status in (1,2)
			WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP and B.InstrumentTypePK in (8)
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK, B.CounterpartPK,F.ID
	

		END

	END
	
	--28--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK and status = 2
	AND Type = 28
		)
		BEGIN
			INSERT INTO @PositionForExp28
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
					  Behavior
					)
			SELECT A.FundPK,28,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),isnull(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,(SUM(ISNULL(A.MarketValue ,0) ) + @TotalDirectInvestment + @TotalLandAndProperty) MarketValue
			,@TotalMarketValue
			, (SUM(ISNULL(A.MarketValue,0)) + @TotalDirectInvestment + @TotalLandAndProperty) /  @TotalMarketValue * 100 ExposurePercent,''
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 28 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP and B.InstrumentTypePK not in (5,10)
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK
	

		END

	END
	
	--29--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = @FundPK and status = 2
	AND Type = 29
		)
		BEGIN
			INSERT INTO @PositionForExp29
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
					  Behavior
					)
			SELECT A.FundPK,29,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),isnull(B.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValue
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValue * 100 ExposurePercent,''
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 29 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE A.FundPK = @FundPK AND Date = @MaxDateEndDayFP
			and B.Affiliated = 1
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK
	

		END

	END


-- HANDLE DATA INVESTMENT PER FUND

if @MaxDateEndDayFP = @yesterday
BEGIN



	DECLARE W Cursor For
			SELECT InstrumentPK,case when @ClientCode = 21 then 0 else Amount end Amount FROM @InvestmentPosition WHERE fundPK = @FundPK
	Open W
	Fetch Next From W
	INTO @WInstrumentPK,@WAmount
	
	While @@FETCH_STATUS = 0  
	BEGIN
    
		--1--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp1 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp1 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

		
			INSERT INTO @PositionForExp1
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,1,ISNULL(D.DescOne,''),ISNULL(B.GroupType,0),ISNULL(C.DescOne,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 
			,''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue C ON B.GroupType = C.Code AND C.id = 'InstrumentGroupType' AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 1 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
			AND C.DescOne IS NOT NULL
		END

		--2--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp2 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp2 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp2
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,2,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 2 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND B.GroupType = 2 --and A.InstrumentTypePK not in (2,12,13,14,15)
			AND isnull(@WInstrumentPK,0) <> 0
		END
		
		--3--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp3 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp3 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp3
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,3,ISNULL(D.DescOne,''),ISNULL(B.SectorPK,0),ISNULL(C.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.SubSector B ON A.SectorPK =  B.SubSectorPK AND B.status IN (1,2)
			LEFT JOIN Sector C ON B.SectorPK = C.SectorPK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 3 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
		END

		--4--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp4 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp4 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp4
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,4,ISNULL(D.DescOne,''),ISNULL(A.InstrumentTypePK,0),ISNULL(B.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 4 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0 AND isnull(B.ID,'') <> ''
		END

		--5--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp5 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp5 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp5
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,5,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 5 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
			AND B.GroupType = 1
		END

		--10--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp10 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp10 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp10
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,10,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 10 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND ISNULL(G.ID,'')  <> ''
			AND isnull(@WInstrumentPK,0) <> 0
		END

		--13--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp13 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp13 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp13
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,13,ISNULL(D.DescOne,''),ISNULL(B.IssuerPK,0),ISNULL(B.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.Issuer B ON A.IssuerPK = B.IssuerPK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 13 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
			AND ISNULL(B.ID,'')  <> ''
		END

		--14--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp14 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp14 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			INSERT INTO @PositionForExp14
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,14,ISNULL(D.DescOne,''),ISNULL(B.IndexPK,0),ISNULL(C.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN @InstrumentIndex B ON A.InstrumentPK =  B.InstrumentPK
			LEFT JOIN dbo.[Index] C ON B.IndexPK = C.IndexPK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 14 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND C.ID IS NOT null
			AND isnull(@WInstrumentPK,0) <> 0
			AND ISNULL(C.ID,'')  <> ''
		END

		--16--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp16 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp16 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

		
			INSERT INTO @PositionForExp16
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,16,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 16 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2)
			AND isnull(@WInstrumentPK,0) <> 0
		END

		--24--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp26 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp24 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
		
			INSERT INTO @PositionForExp24
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,24,ISNULL(D.DescOne,''),ISNULL(A.BankPK,0),ISNULL(E.ID,'')
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 24 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			left join Bank E on A.BankPK = E.BankPK and E.Status in (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2) and B.InstrumentTypePK in (5,10)
			AND isnull(@WInstrumentPK,0) <> 0
		END
		
		--25--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp25 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp25 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN
			select @paramBondRating = parameter from FundExposure where fundpk = @FundPK and Type = 25

			INSERT INTO @PositionForExp25
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,25,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,100,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 25 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			left join dbo.MasterValue G on A.BondRating = G.DescOne and G.ID = 'BondRating' and G.Status in (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2) and A.InstrumentTypePK in (2,3,8,9,13,15) and A.BondRating <> ''  and G.Priority > @paramBondRating
			AND isnull(@WInstrumentPK,0) <> 0

		END

		--26--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp26 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp26 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

			INSERT INTO @PositionForExp26
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,26,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 26 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2) and A.BitIsForeign = 1
			AND isnull(@WInstrumentPK,0) <> 0

		END
		
		--27--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp27 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp27 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

			INSERT INTO @PositionForExp27
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,27,ISNULL(D.DescOne,''),ISNULL(A.CounterpartPK,0),ISNULL(E.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 27 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			left join Counterpart E on A.CounterpartPK = E.CounterpartPK and E.Status in (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2) and B.InstrumentTypePK = 8
			AND isnull(@WInstrumentPK,0) <> 0

		END
		
		--28--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp28 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp28 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

			INSERT INTO @PositionForExp28
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,28,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,(ISNULL(@WAmount,0) + @TotalDirectInvestment + @TotalLandAndProperty)
			,ISNULL(@TotalMarketValue,0)
			,(ISNULL(@WAmount,0) + @TotalDirectInvestment + @TotalLandAndProperty)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 28 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2) and A.InstrumentTypePK not in (5,10)
			AND isnull(@WInstrumentPK,0) <> 0

		END
		
		--29--
		IF EXISTS(
				SELECT TOP 1 * FROM @PositionForExp29 WHERE InstrumentPK = @WInstrumentPK
		)
		BEGIN
			UPDATE @PositionForExp29 SET MarketValue = MarketValue + ISNULL(@WAmount,0)
			,ExposurePercent = (MarketValue + ISNULL(@WAmount,0)) / @TotalMarketValue * 100
			WHERE InstrumentPK = @WInstrumentPK
		END
		ELSE
		BEGIN

			INSERT INTO @PositionForExp29
		        ( FundPK ,
		          Exposure ,
		          ExposureDesc ,
		          Parameter ,
		          ParameterDesc ,
		          InstrumentPK ,
		          InstrumentID ,
		          MarketValue ,
		          AUM ,
		          ExposurePercent,
					  Behavior
		        )
			SELECT @FundPK,29,ISNULL(D.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(A.ID,'') 
			,ISNULL(@WInstrumentPK,0),ISNULL(A.ID,'')
			,ISNULL(@WAmount,0)
			,ISNULL(@TotalMarketValue,0)
			,ISNULL(@WAmount,0)/ISNULL(@TotalMarketValue,0) * 100 ,
			''
			FROM dbo.Instrument A
			LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
			LEFT JOIN dbo.MasterValue D ON D.Code = 29 AND D.ID = 'ExposureType' AND D.status IN (1,2)
			WHERE A.InstrumentPK = @WInstrumentPK AND A.status IN (1,2) and A.Affiliated = 1
			AND isnull(@WInstrumentPK,0) <> 0

		END
		
		FETCH Next From W
		into @WInstrumentPK,@WAmount
	END	
	Close W
	Deallocate W



END



-- PROSES EXPOSURE AKHIR
BEGIN


Declare A Cursor For
	SELECT FundPK,CAST(Type AS INT) Type,Parameter,MinExposurePercent,MaxExposurePercent 
	,WarningMinExposurePercent,WarningMaxExposurePercent,MinValue
	,MaxValue,WarningMinValue,WarningMaxValue
	FROM dbo.FundExposure WHERE status = 2 
	AND FundPK = @FundPK
	ORDER BY Type asc


Open A
Fetch Next From A
INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
,@CWarningMinVal,@CWarningMaxVal
While @@FETCH_STATUS = 0  
Begin

	IF @CType = 1
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )

		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp1 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp1
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 2
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp2 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp2
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 2 AND @CParameter = 0
	BEGIN
	INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
	SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp2 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp2
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 3
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp3 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp3
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 3 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc  + ' | ALL PARAM ',
		Parameter,ParameterDesc 
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp3 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp3
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 4
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp4 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp4
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 5
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp5 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp5
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 5 AND @CParameter = 0
	BEGIN
	INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
	SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp5 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp5
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 10
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp10 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp10
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 10 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp10 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp10
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 13
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp13 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp13
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 13 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp13 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp13
		where FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 14
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp14 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp14
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 14 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp14 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp14
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END
	
	IF @CType = 16
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )

		SELECT FundPK,Exposure,ExposureDesc,
		0,''
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp16 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp16
		where  FundPK = @CFundPK
		GROUP BY FundPK,Exposure,ExposureDesc
	END

	IF @CType = 20
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp20 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp20
		WHERE Parameter = @CParameter and FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	IF @CType = 20 AND @CParameter = 0
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
					  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalInvestmentAllFundForCounterpartExposure * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,
		case when exists (select * from @PositionForExp20 where Behavior = 'ACTIVE' and Parameter = @CParameter and FundPK = @CFundPK) then 'ACTIVE' else '' end
		FROM @PositionForExp20
		where  FundPK = @CFundPK
		GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
	END

	--IF @CType = 24
	--BEGIN
	--	INSERT INTO @Exposure
	--	        ( 
	--			  FundPK,
	--			  Exposure,
	--			  ExposureID ,
	--	          Parameter ,
	--			  ParameterDesc ,
	--	          MarketValue ,
	--	          ExposurePercent ,
	--	          MinExposurePercent ,
	--	          WarningMinExposure ,
	--			  AlertWarningMinExposure,
	--	          AlertMinExposure ,
	--	          MaxExposurePercent ,
	--	          WarningMaxExposure ,
	--			  AlertWarningMaxExposure ,
	--	          AlertMaxExposure ,
	--	          MinValue ,
	--	          WarningMinValue ,
	--			  AlertWarningMinValue ,
	--	          AlertMinValue ,
	--	          MaxValue ,
	--	          WarningMaxValue ,
	--			  AlertWarningMaxValue ,
	--	          AlertMaxValue,
	--			  Behavior
	--	        )
	--	SELECT A.FundPK,Exposure,ExposureDesc,
	--	Parameter,ParameterDesc
	--	,SUM(ISNULL(MarketValue,0)) MarketValue
	--	, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
	--	,0,0,0,0,isnull(C.ExposurePercent,0),0,0,0,0,0,0,0,0,0,0,0,''
	--	FROM @PositionForExp24 A
	--	left join Bank B on A.Parameter = B.BankPK and B.Status in (1,2)
	--	left join CamelMapping C on B.CamelScore between C.FromValue and C.ToValue and A.FundPK = C.FundPK
	--	WHERE Parameter = @CParameter
	--	GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,C.ExposurePercent,A.FundPK
	--END

	--IF @CType = 24 and @CParameter = 0
	--BEGIN

	--	INSERT INTO @Exposure
	--	        ( 
	--			  FundPK,
	--			  Exposure,
	--			  ExposureID ,
	--	          Parameter ,
	--			  ParameterDesc ,
	--	          MarketValue ,
	--	          ExposurePercent ,
	--	          MinExposurePercent ,
	--	          WarningMinExposure ,
	--			  AlertWarningMinExposure,
	--	          AlertMinExposure ,
	--	          MaxExposurePercent ,
	--	          WarningMaxExposure ,
	--			  AlertWarningMaxExposure ,
	--	          AlertMaxExposure ,
	--	          MinValue ,
	--	          WarningMinValue ,
	--			  AlertWarningMinValue ,
	--	          AlertMinValue ,
	--	          MaxValue ,
	--	          WarningMaxValue ,
	--			  AlertWarningMaxValue ,
	--	          AlertMaxValue,
	--			  Behavior
	--	        )
	--	SELECT A.FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
	--	Parameter,ParameterDesc
	--	,SUM(ISNULL(MarketValue,0)) MarketValue
	--	, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
	--	,0,0,0,0,isnull(C.ExposurePercent,0),0,0,0,0,0,0,0,0,0,0,0,''
	--	FROM @PositionForExp24 A
	--	left join Bank B on A.Parameter = B.BankPK and B.Status in (1,2)
	--	left join CamelMapping C on B.CamelScore between C.FromValue and C.ToValue and A.FundPK = C.FundPK
	--	GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,C.ExposurePercent,A.FundPK
	--END

	IF @CType = 25
	BEGIN

		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
				  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0))
		,100 ExposurePercent
		,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,''
		FROM @PositionForExp25
		GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,FundPK

	END

	IF @CType = 26
	BEGIN
		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
				  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc,
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,''
		FROM @PositionForExp26
		WHERE Parameter = @CParameter
		GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,FundPK
	END

	IF @CType = 26 and @CParameter = 0
	BEGIN

		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
				  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,''
		FROM @PositionForExp26
		GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,FundPK
	END

	IF @CType = 27 and @CParameter = 0
	BEGIN

		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
				  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,''
		FROM @PositionForExp27
		GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,FundPK
	END

	IF @CType = 28 and @CParameter = 0
	BEGIN

		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
				  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,''
		FROM @PositionForExp28
		GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,FundPK
	END
	
	IF @CType = 29 and @CParameter = 0
	BEGIN

		INSERT INTO @Exposure
		        ( 
				  FundPK,
				  Exposure,
				  ExposureID ,
		          Parameter ,
				  ParameterDesc ,
		          MarketValue ,
		          ExposurePercent ,
		          MinExposurePercent ,
		          WarningMinExposure ,
				  AlertWarningMinExposure,
		          AlertMinExposure ,
		          MaxExposurePercent ,
		          WarningMaxExposure ,
				  AlertWarningMaxExposure ,
		          AlertMaxExposure ,
		          MinValue ,
		          WarningMinValue ,
				  AlertWarningMinValue ,
		          AlertMinValue ,
		          MaxValue ,
		          WarningMaxValue ,
				  AlertWarningMaxValue ,
		          AlertMaxValue,
				  Behavior
		        )
		SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
		Parameter,ParameterDesc
		,SUM(ISNULL(MarketValue,0)) MarketValue
		, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
		,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0,''
		FROM @PositionForExp29
		GROUP BY Parameter,ParameterDesc,Exposure,ExposureDesc,FundPK
	END

	Fetch Next From A 
	INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
	,@CWarningMinVal,@CWarningMaxVal 
End	
Close A
Deallocate A

END



Fetch next From Z 
Into @FundPK
END
Close Z
Deallocate Z



--ALL FUND (9,18,19)
begin
	Select @TrailsPK = EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
	endDayTrailsFundPortfolio where 
	valuedate = 
	(
		Select max(ValueDate) from endDayTrailsFundPortfolio where
		valuedate <= @Date  and status = 2 
	)
	and status = 2 

	declare @tableMarketCap table 
	(
		InstrumentPK int,
		valuedate date,
		MarketCap numeric(32,8)
	)

	insert into @tableMarketCap(InstrumentPK,valuedate)
	select InstrumentPK,max(date) from InstrumentIndex where Status = 2
	group by InstrumentPK

	update A set A.MarketCap = isnull(B.MarketCap,0)
	from @tableMarketCap A
	left join InstrumentIndex B on A.InstrumentPK = B.InstrumentPK and A.valuedate = B.Date and B.Status = 2


	--9--
	BEGIN

	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = 0 AND status = 2
		AND Type = 9
		)
	BEGIN
		INSERT INTO @PositionForExp9
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,9,ISNULL(E.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValueAllFund
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValueAllFund * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @Date and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 9 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			LEFT JOIN Bank G ON B.BankPK = G.BankPK AND G.status IN (1,2)
			WHERE  Date = @Date  and A.Status = 2
			AND C.GroupType = 3
			GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,G.BankPK,G.ID
		


	
	END


	END
	
	--18--
	BEGIN



	IF EXISTS(
		SELECT TOP 1 Type FROM dbo.FundExposure WHERE FundPK = 0 AND status = 2
		AND Type = 18
		)
	BEGIN
		INSERT INTO @PositionForExp18
				( FundPK ,
				  Exposure ,
				  ExposureDesc,
				  Parameter ,
				  ParameterDesc ,
				  InstrumentPK,
				  InstrumentID ,
				  MarketValue ,
				  AUM ,
				  ExposurePercent,
				  Behavior
				)
		SELECT A.FundPK,18,ISNULL(E.DescOne,''),ISNULL(C.IssuerPK,0),ISNULL(C.ID,'')
			,ISNULL(A.InstrumentPK,0)
			,ISNULL(B.ID ,'')
			,SUM(ISNULL(A.MarketValue,0)) MarketValue
			,@TotalMarketValueAllFund
			, SUM(ISNULL(A.MarketValue,0)) /  @TotalMarketValueAllFund * 100 ExposurePercent,
			case when exists(select * from Investment where valuedate = @Date and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
			FROM dbo.FundPosition A
			LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
			LEFT JOIN dbo.Issuer C ON B.IssuerPK =  C.IssuerPK AND C.status IN (1,2)
			LEFT JOIN dbo.MasterValue E ON E.Code = 18 AND E.ID = 'ExposureType' AND E.status IN (1,2)
			WHERE  Date = @Date and A.Status = 2
			AND C.ID IS NOT NULL
			GROUP BY C.ID,C.IssuerPK,A.FundPK,B.ID,E.DescOne,A.InstrumentPK

	
	END


	END

	--19--
	BEGIN
		IF EXISTS(
			SELECT TOP 1 Type FROM dbo.FundExposure WHERE status = 2 and fundpk = 0
			AND Type = 19
			)
		BEGIN
			INSERT INTO @PositionForExp19
					( FundPK ,
					  Exposure ,
					  ExposureDesc,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
				  Behavior
					)
			SELECT A.FundPK,19,ISNULL(E.DescOne,''),ISNULL(A.InstrumentPK,0),ISNULL(B.ID,'')
				,ISNULL(A.InstrumentPK,0)
				,ISNULL(B.ID ,'')
				,SUM(ISNULL(A.MarketValue,0)) MarketValue
				,isnull(F.MarketCap,0)
				,case when isnull(F.MarketCap,0) = 0 then 0 else SUM(ISNULL(A.MarketValue,0)) /  isnull(F.MarketCap,0) * 100 end ExposurePercent,
				case when exists(select * from Investment where valuedate = @Date and StatusSettlement = 2 and InstrumentPK = A.InstrumentPK and FundPK = A.FundPK and TrxType = 1) then 'ACTIVE' else '' end
				FROM dbo.FundPosition A
				LEFT JOIN dbo.Instrument B ON A.InstrumentPK = B.InstrumentPK AND B.status IN (1,2)
				LEFT JOIN dbo.InstrumentType C ON B.InstrumentTypePK = C.InstrumentTypePK AND C.status IN (1,2)
				LEFT JOIN dbo.MasterValue E ON E.Code = 19 AND E.ID = 'ExposureType' AND E.status IN (1,2)
				left join @tableMarketCap F on A.InstrumentPK = F.InstrumentPK
				WHERE Date = @Date and B.InstrumentTypePK in (1,4,16)
				GROUP BY A.FundPK,B.ID,E.DescOne,A.InstrumentPK,F.MarketCap,A.MarketValue

	END
	END



	-- HANDLE DATA INVESTMENT ALL FUND
	if @MaxDateEndDayFP = @yesterday
	BEGIN


		DECLARE E Cursor For
				SELECT InstrumentPK,Amount,FundPK FROM @InvestmentPositionALLFund 
		Open E
		Fetch Next From E
		INTO @EInstrumentPK,@EAmount,@EFundPK
		While @@FETCH_STATUS = 0  
		BEGIN

			--9--
			IF EXISTS(
					SELECT TOP 1 * FROM @PositionForExp9 WHERE InstrumentPK = @InstrumentPK
			)
			BEGIN
				UPDATE @PositionForExp9 SET MarketValue = MarketValue + ISNULL(@EAmount,0)
				,ExposurePercent = (MarketValue + ISNULL(@EAmount,0)) / @TotalMarketValueAllFund * 100
				WHERE InstrumentPK = @EInstrumentPK AND FundPK = @FundPK
			END
			ELSE
			BEGIN
				INSERT INTO @PositionForExp9
					( FundPK ,
					  Exposure ,
					  ExposureDesc ,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK ,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
						  Behavior
					)
				SELECT @EFundPK,9,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
				,ISNULL(@EInstrumentPK,0),ISNULL(A.ID,'')
				,ISNULL(@EAmount,0)
				,ISNULL(@TotalMarketValueAllFund,0)
				,ISNULL(@EAmount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 ,
				''
				FROM dbo.Instrument A
				LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
				LEFT JOIN dbo.MasterValue D ON D.Code = 9 AND D.ID = 'ExposureType' AND D.status IN (1,2)
				LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
				WHERE A.InstrumentPK = @EInstrumentPK AND A.status IN (1,2)
				AND isnull(@EInstrumentPK,0) <> 0
				AND B.GroupType = 3
			END

			--18--
			IF EXISTS(
					SELECT TOP 1 * FROM @PositionForExp18 WHERE InstrumentPK = @InstrumentPK
			)
			BEGIN
				UPDATE @PositionForExp18 SET MarketValue = MarketValue + ISNULL(@EAmount,0)
				,ExposurePercent = (MarketValue + ISNULL(@EAmount,0)) / @TotalMarketValueAllFund * 100
				WHERE InstrumentPK = @EInstrumentPK AND FundPK = @FundPK
			END
			ELSE
			BEGIN
				INSERT INTO @PositionForExp18
					( FundPK ,
					  Exposure ,
					  ExposureDesc ,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK ,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent,
						  Behavior
					)
				SELECT @EFundPK,18,ISNULL(D.DescOne,''),ISNULL(A.IssuerPK,0),ISNULL(B.ID,'') 
				,ISNULL(@EInstrumentPK,0),ISNULL(A.ID,'')
				,ISNULL(@EAmount,0)
				,ISNULL(@TotalMarketValueAllFund,0)
				,ISNULL(@EAmount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 ,
				''
				FROM dbo.Instrument A
				LEFT JOIN dbo.Issuer B ON A.IssuerPK =  B.IssuerPK AND B.status IN (1,2)
				LEFT JOIN dbo.MasterValue D ON D.Code = 18 AND D.ID = 'ExposureType' AND D.status IN (1,2)
				WHERE A.InstrumentPK = @EInstrumentPK AND A.status IN (1,2)
				AND isnull(@EInstrumentPK,0) <> 0
				AND ISNULL(B.ID,'')  <> ''
		
			END

			--19--
			IF EXISTS(
					SELECT TOP 1 * FROM @PositionForExp19 WHERE InstrumentPK = @InstrumentPK
			)
			BEGIN
				UPDATE @PositionForExp19 SET MarketValue = MarketValue + ISNULL(@EAmount,0)
				,ExposurePercent = (MarketValue + ISNULL(@EAmount,0)) / @TotalInvestmentAllFundForCounterpartExposure * 100
				WHERE InstrumentPK = @EInstrumentPK AND FundPK = @FundPK
			END
			ELSE
			BEGIN
				INSERT INTO @PositionForExp19
					( FundPK ,
					  Exposure ,
					  ExposureDesc ,
					  Parameter ,
					  ParameterDesc ,
					  InstrumentPK ,
					  InstrumentID ,
					  MarketValue ,
					  AUM ,
					  ExposurePercent
					)
				SELECT @EFundPK,9,ISNULL(D.DescOne,''),ISNULL(G.BankPK,0),ISNULL(G.ID,'') 
				,ISNULL(@EInstrumentPK,0),ISNULL(A.ID,'')
				,ISNULL(@EAmount,0)
				,ISNULL(@TotalMarketValueAllFund,0)
				,ISNULL(@EAmount,0)/ISNULL(@TotalMarketValueAllFund,0) * 100 
				FROM dbo.Instrument A
				LEFT JOIN dbo.InstrumentType B ON A.InstrumentTypePK = B.InstrumentTypePK AND B.status IN (1,2)
				LEFT JOIN dbo.MasterValue D ON D.Code = 9 AND D.ID = 'ExposureType' AND D.status IN (1,2)
				LEFT JOIN Bank G ON A.BankPK = G.BankPK AND G.status IN (1,2)
				WHERE A.InstrumentPK = @EInstrumentPK AND A.status IN (1,2)
				AND isnull(@EInstrumentPK,0) <> 0
				AND B.GroupType = 3
			END


		
		FETCH Next From E
			into @EInstrumentPK,@EAmount,@EFundPK
		End	
		Close E
		Deallocate E

	END

	--PROSES EXPOSURE AKHIR ALL FUND ALL PARAMETER
	BEGIN
	Declare A Cursor For
		SELECT FundPK,CAST(Type AS INT) Type,Parameter,MinExposurePercent,MaxExposurePercent 
		,WarningMinExposurePercent,WarningMaxExposurePercent,MinValue
		,MaxValue,WarningMinValue,WarningMaxValue
		FROM dbo.FundExposure WHERE status = 2 
		AND FundPK = 0
		ORDER BY Type asc
	Open A
	Fetch Next From A
	INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
	,@CWarningMinVal,@CWarningMaxVal
	While @@FETCH_STATUS = 0  
	Begin

		IF @CType = 9 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp9
			WHERE Parameter = @CParameter
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 9 AND @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp9
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 18 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp18
			WHERE Parameter = @CParameter 
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 18 and @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					) 
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValueAllFund * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp18
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 19 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			,case when isnull(F.MarketCap,0) = 0 then 0 else SUM(ISNULL(MarketValue,0)) / isnull(F.MarketCap,0) * 100 end ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp19 A
			left join @tableMarketCap F on A.InstrumentPK = F.InstrumentPK
			WHERE Parameter = @CParameter 
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc,F.MarketCap
		END

		IF @CType = 19 AND @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			,case when isnull(F.MarketCap,0) = 0 then 0 else SUM(ISNULL(MarketValue,0)) / isnull(F.MarketCap,0) * 100 end ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp19 A
			left join @tableMarketCap F on A.InstrumentPK = F.InstrumentPK
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc,F.MarketCap

		END


	

		IF @CType = 22 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp22
			WHERE Parameter = @CParameter 
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 22 and @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					) 
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp22
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END


		IF @CType = 23 AND @CParameter <> 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					)
			SELECT FundPK,Exposure,ExposureDesc,
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp23
			WHERE Parameter = @CParameter 
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

		IF @CType = 23 and @CParameter = 0
		BEGIN
			INSERT INTO @Exposure
					( 
					  FundPK,
					  Exposure,
					  ExposureID ,
					  Parameter ,
					  ParameterDesc ,
					  MarketValue ,
					  ExposurePercent ,
					  MinExposurePercent ,
					  WarningMinExposure ,
					  AlertWarningMinExposure,
					  AlertMinExposure ,
					  MaxExposurePercent ,
					  WarningMaxExposure ,
					  AlertWarningMaxExposure ,
					  AlertMaxExposure ,
					  MinValue ,
					  WarningMinValue ,
					  AlertWarningMinValue ,
					  AlertMinValue ,
					  MaxValue ,
					  WarningMaxValue ,
					  AlertWarningMaxValue ,
					  AlertMaxValue
					) 
			SELECT FundPK,Exposure,ExposureDesc + ' | ALL PARAM ',
			Parameter,ParameterDesc
			,SUM(ISNULL(MarketValue,0)) MarketValue
			, SUM(ISNULL(MarketValue,0)) / @TotalMarketValue * 100 ExposurePercent
			,@CMinExp,@CWarningMinExp,0,0,@CMaxExp,@CWarningMaxExp,0,0,@CMinVal,@CWarningMinVal,0,0,@CMaxVal,@CWarningMaxVal,0,0
			FROM @PositionForExp23
			GROUP BY FundPK,Parameter,ParameterDesc,Exposure,ExposureDesc
		END

	Fetch Next From A 
		INTO @CFundPK,@CType,@CParameter,@CMinExp,@CMaxExp,@CWarningMinExp,@CWarningMaxExp,@CMinVal,@CMaxVal
		,@CWarningMinVal,@CWarningMaxVal 
	End	
	Close A
	Deallocate A
END

end




update @Exposure 
SET AlertMinExposure = 1 WHERE ExposurePercent < MinExposurePercent AND MinExposurePercent > 0
update @Exposure 
SET AlertWarningMinExposure = 1 WHERE ExposurePercent < WarningMinExposure AND WarningMinExposure > 0
UPDATE @Exposure
SET AlertMaxExposure = 1 WHERE ExposurePercent > MaxExposurePercent AND MaxExposurePercent > 0
UPDATE @Exposure
SET AlertWarningMaxExposure = 1 WHERE ExposurePercent > WarningMaxExposure AND WarningMaxExposure > 0
UPDATE @Exposure
SET AlertMinValue = 1 WHERE MarketValue < MinValue AND MinValue > 0
UPDATE @Exposure
SET AlertWarningMinValue = 1 WHERE MarketValue < WarningMinValue AND WarningMinValue > 0
UPDATE @Exposure
SET AlertMaxValue = 1 WHERE MarketValue > MaxValue AND MaxValue > 0
UPDATE @Exposure
SET AlertWarningMaxValue = 1 WHERE MarketValue > WarningMaxValue AND WarningMaxValue > 0

--select * from @PositionForExp19
--select * from @Exposure

select B.ID FundID,ExposureID,ParameterDesc Parameter,ExposurePercent ExpPercent,MaxExposurePercent MaxPercent,
MinExposurePercent MinPercent,MarketValue Value,isnull(C.AUM,0) TotalAUM, isnull(D.DescOne,'') TypeMutualFund,
F.ID BankCustodian, B.EffectiveDate OJKEffectiveDate from @Exposure A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join CloseNAV C on A.FundPK = C.FundPK and C.Status in (1,2) and C.Date = @date
left join MasterValue D on B.Type = D.Code and D.ID = 'FundType' and D.Status in (1,2)
left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.Status in (1,2)
left join Bank F on E.BankPK = F.BankPK and F.Status in (1,2)
where (ExposurePercent > 0 or MarketValue > 0) and Exposure not in (9,18,19) and (AlertMaxExposure = 1 or AlertMinExposure = 1 or AlertWarningMaxExposure = 1 or AlertWarningMinExposure = 1 or AlertMaxValue = 1 or AlertMaxExposure = 1)

union all

select B.ID FundID,ExposureID,ParameterDesc Parameter,ExposurePercent ExpPercent,MaxExposurePercent MaxPercent,
MinExposurePercent MinPercent,MarketValue Value,isnull(C.AUM,0) TotalAUM, isnull(D.DescOne,'') TypeMutualFund,
F.ID BankCustodian, B.EffectiveDate OJKEffectiveDate from @Exposure A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join CloseNAV C on A.FundPK = C.FundPK and C.Status in (1,2) and C.Date = @date
left join MasterValue D on B.Type = D.Code and D.ID = 'FundType' and D.Status in (1,2)
left join BankBranch E on B.BankBranchPK = E.BankBranchPK and E.Status in (1,2)
left join Bank F on E.BankPK = F.BankPK and F.Status in (1,2)
where (ExposurePercent > 0 or MarketValue > 0 ) and Exposure in (9,18,19) and (AlertMaxExposure = 1 or AlertMinExposure = 1 or AlertWarningMaxExposure = 1 or AlertWarningMinExposure = 1 or AlertMaxValue = 1 or AlertMaxExposure = 1)



                                    ";
                                    cmd.CommandTimeout = 0;
                                    cmd.Parameters.AddWithValue("@Date", _OjkRpt.ValueDateFrom);
                                    using (SqlDataReader dr0 = cmd.ExecuteReader())
                                    {
                                        if (!dr0.HasRows)
                                        {
                                            return false;
                                        }
                                        else
                                        {
                                            string filePath = Tools.ReportsPath + "Pelanggaran tgl" + Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd MMMM yyyy") + "_" + _userID + ".xlsx";

                                            FileInfo excelFile = new FileInfo(filePath);
                                            if (excelFile.Exists)
                                            {
                                                excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                                excelFile = new FileInfo(filePath);
                                            }

                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                            using (ExcelPackage package = new ExcelPackage(excelFile))
                                            {
                                                package.Workbook.Properties.Title = "ExposureAllFund";
                                                package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                                package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                                package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                                package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                                package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ExposureAllFund");

                                                List<ExposureAllFund> rList = new List<ExposureAllFund>();
                                                while (dr0.Read())
                                                {
                                                    ExposureAllFund rSingle = new ExposureAllFund();

                                                    rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                                    rSingle.ExposureID = Convert.ToString(dr0["ExposureID"]);
                                                    rSingle.Parameter = Convert.ToString(dr0["Parameter"]);
                                                    rSingle.ExpPercent = Convert.ToDecimal(dr0["ExpPercent"]);
                                                    rSingle.MaxPercent = Convert.ToDecimal(dr0["MaxPercent"]);
                                                    rSingle.MinPercent = Convert.ToDecimal(dr0["MinPercent"]);
                                                    rSingle.Value = Convert.ToDecimal(dr0["Value"]);
                                                    rSingle.TotalAUM = Convert.ToDecimal(dr0["TotalAUM"]);
                                                    rSingle.TypeMutualFund = Convert.ToString(dr0["TypeMutualFund"]);
                                                    rSingle.BankCustodian = Convert.ToString(dr0["BankCustodian"]);
                                                    rSingle.OJKEffectiveDate = Convert.ToDateTime(dr0["OJKEffectiveDate"]);

                                                    rList.Add(rSingle);
                                                }

                                                var GroupByReference =
                                                    from r in rList
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                int incRowExcel = 0;
                                                int _startRowDetail, _endRowDetail;

                                                foreach (var rsHeader in GroupByReference)
                                                {

                                                    incRowExcel++;
                                                    _startRowDetail = incRowExcel;
                                                    worksheet.Cells[incRowExcel, 1].Value = "Fund ID";
                                                    worksheet.Cells[incRowExcel, 2].Value = "Exposure ID";
                                                    worksheet.Cells[incRowExcel, 3].Value = "Parameter";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Exp Percent";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Max Percent";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Min Percent";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Value";
                                                    worksheet.Cells[incRowExcel, 8].Value = "Total AUM";
                                                    worksheet.Cells[incRowExcel, 9].Value = "Type Mutual Fund";
                                                    worksheet.Cells[incRowExcel, 10].Value = "Bank Custodian";
                                                    worksheet.Cells[incRowExcel, 11].Value = "OJK Effective Date";
                                                    //worksheet.Row(incRowExcel).Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Bold = true;
                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Color.SetColor(Color.MediumVioletRed);


                                                    //end area header
                                                    foreach (var rsDetail in rsHeader)
                                                    {
                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundID;

                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.ExposureID;

                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.Parameter;

                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.ExpPercent;
                                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaxPercent;
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.MinPercent;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.Value;
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.TotalAUM;
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.TypeMutualFund;

                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.BankCustodian;

                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.OJKEffectiveDate;
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "dd MMM yyyy";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        _endRowDetail = incRowExcel;


                                                    }

                                                    worksheet.Row(incRowExcel).PageBreak = true;
                                                }


                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                worksheet.PrinterSettings.FitToPage = true;
                                                worksheet.PrinterSettings.FitToWidth = 1;
                                                worksheet.PrinterSettings.FitToHeight = 0;
                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                worksheet.Column(1).Width = 18;
                                                worksheet.Column(2).Width = 25;
                                                worksheet.Column(3).Width = 40;
                                                worksheet.Column(4).Width = 12;
                                                worksheet.Column(5).Width = 12;
                                                worksheet.Column(6).Width = 12;
                                                worksheet.Column(7).Width = 22;
                                                worksheet.Column(8).Width = 20;
                                                worksheet.Column(9).Width = 20;
                                                worksheet.Column(10).Width = 20;
                                                worksheet.Column(11).Width = 20;
                                                worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                // worksheet.PrinterSettings.FitToPage = true;
                                                //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                //worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Exposure All Fund";
                                                worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderLeftText();

                                                Image img = Image.FromFile(Tools.ReportImage);
                                                worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                                package.Save();
                                                return true;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception err)
                        {
                            return false;
                            throw err;
                        }

                    }

                }

                #endregion

                return true;
            }//else if
            #endregion



            else
            {
                return false;
            }
        }

        public string PTPDeposito_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, bool _param5, Investment _investment)
        {

            try
            {

                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _mature = "";
                        if (_param5 == true)
                        {
                            _mature = @"union all
                            select A.Reference,A.valuedate, A.MaturityDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneAmount Quantity, 
                            A.DoneAmount TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                            A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                            0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneAmount OldTradeAmount,A.InterestPercent OldInterestPercent,A.MaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneAmount * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate, 
                            round(A.DoneAmount * (A.InterestPercent/100)/case when B.InterestDaysType in (2) then DATEDIFF(DAY, J.DateFrom, J.DateTo) + 1 else case when B.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,A.Reference ParentReference,B.InterestDaysType
                            from InvestmentMature A
                            left join Investment B on A.InvestmentPK = B.InvestmentPK and B.StatusSettlement = 2 and B.InvestmentPK <> 0 
                            left join Fund C on A.FundID = C.ID and C.status = 2
                            left join instrument D on B.instrumentpk = D.instrumentpk and D.status = 2  
                            left join Bank F on B.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on B.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join Period J on B.PeriodPK = J.PeriodPK and J.status = 2
                            where A.MaturityDate = @ValueDate and Selected = 1";
                        }
                        else
                        {
                            _mature = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @TrailsPK int
                        Declare @MaxDateEndDayFP datetime

                        select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                        where ValueDate = 
                        (
                        select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                        )
                        and status = 2   --and FundPK = @FundPK

                        BEGIN  
                                SET NOCOUNT ON         
          
                            create table #Text(      
                            [ResultText] [nvarchar](1000)  NULL          
                            )                        
        
                        truncate table #Text  
                        insert into #Text     
                        select ''     
                        insert into #Text
                        Select  
                        'NEWM' -- 1.Transaction Status
                        + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                        + '|' + @CompanyID -- 3.IM Code
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                        + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                        + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                        + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                        else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                        + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                        else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                        + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                        + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                        else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                        + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                        else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                        else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                        else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                        else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                        else '' end -- 14.Investment.InterestPaymentType              
                        + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                        + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                        + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                        + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                        + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                        + '|' + case when A.TrxType = 2  then cast(isnull(cast(SUM(ISNULL(A.TradeAmount * A.BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.ValueDate) as decimal(30,2)),'')as nvarchar)  else '' end -- 20.Withdrawal Interest
                        + '|' + case when A.TrxType = 2  then cast(isnull(cast(SUM(ISNULL(A.TradeAmount * A.BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.ValueDate) + A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 21.Total Withdrawal Amount
                        + '|' + -- 22.Rollover Type
                        + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                        + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                        + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                        + '|' + case when A.Mature = 1 then cast(isnull(cast((SUM(ISNULL(A.TradeAmount * InterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.MaturityDate) + A.TradeAmount )* -1 as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((SUM(ISNULL(A.TradeAmount * A.BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.ValueDate) + A.TradeAmount )* -1 as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end-- 26.Amount to be Transfer
                        + '|' + -- 27.Statutory Type
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                        + '|' + RTRIM(LTRIM((isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                        + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                        + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                        + '|' + '' 
                        from (      
                        select A.Reference,case when A.TrxType = 3 then J.ValueDate else A.valuedate end valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                        A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                        A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                        A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                        A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                        case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                        round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.InterestDaysType
                        from investment A
                        left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                        left join Fund C on A.fundpk = C.fundpk and C.status = 2
                        left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                        left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                        left join Bank F on A.BankPK = F.BankPK and F.status = 2
                        left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                        left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                        left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                        left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                        and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                        and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                        and J.StatusSettlement = 2
                        left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                        where    
                        A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                        " + _paramSettlementPK + @"
                        and A.statusdealing = 2

                        Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                        A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                        A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                        A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                        A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,J.ValueDate ,D.CurrencyPK,F.USDPTPCode


                            " + _mature + @"

                        )A    
                        Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                        A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                        A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                        A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference 
                        order by A.ValueDate Asc
                        select * from #text 
                        END


                                    ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Deposito.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Deposito.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
 BEGIN  
SET NOCOUNT ON         
DROP TABLE IF EXISTS dbo.#Text
DROP TABLE IF EXISTS dbo.#TaxAmount

create table #TaxAmount(      
InvestmentPK int,
TaxAmount [nvarchar](1000)  NULL,
TotalAmount [nvarchar](1000)  NULL          
)                        
        
truncate table #TaxAmount      


create table #Text(      
InvestmentPK int,
[ResultText] [nvarchar](max)  NULL          
)                        
        
truncate table #Text      
insert into #Text(InvestmentPK,ResultText)     
select 0,'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'      
        
insert into #Text(InvestmentPK,ResultText) 
Select  A.InvestmentPK,
'NEWM' --1
+ '|' + ''
+ '|' + '1'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + @CompanyID
+ '|' + isnull(A.BrokerCode,'')
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + cast(isnull(A.TrxType,'') as nvarchar)
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,0)), '')as nvarchar) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + '0'
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,0)),'')as nvarchar) end 
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end 
+ '|' + case when A.TrxType = 1 then cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,0)) as nvarchar) else 'Tax Amount' end
+ '|' + case when A.TrxType = 1 then case when A.TotalAmount = 0 then '' else cast(isnull(cast(isnull(sum(A.DonePrice * A.Quantity)/100,0)  + isnull(A.InterestAmount,0) - isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal(30,0)),'') as nvarchar) end else 'Total Amount' end
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankAccountNo,'')))) end              
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
+ '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
+ '|' + '' 
from (      
select A.InvestmentPK,A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK in (3,8,9,15) then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,C.NPWP BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentTrType from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
left join InvestmentTaxDataAcq G on A.InvestmentPK = G.InvestmentPK and G.AcqNo = 1
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15) 
" + _paramSettlementPK + @" 
and A.statusdealing = 2 

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType
order by A.ValueDate Asc

								
						

declare @counter int
set @counter = 1
while (@counter <= 30)
begin
	update A set A.ResultText = A.ResultText
	+ case when B.TrxType = 1 then '' else 
	+ '|' + case when B.TrxType = 1 then '' else '2' end  
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(B.Reference,'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.DoneAmount = 0 then '' else cast(isnull(cast(B.DoneAmount as decimal(30,0)), '')as nvarchar) end end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.AcqDate, 112),'')))) end    
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqPrice = 0 then '' else cast(isnull(cast(B.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.AcqAmount = 0 then '' else cast(isnull(B.AcqAmount, '') as nvarchar) end end     
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxGainAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), B.DaysOfHoldingInterest , 112),'')))) end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.IncomeTaxInterestAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.IncomeTaxInterestAmount,0) as decimal(30,0)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TotalTaxIncomeAmount = 0 then cast(0 as nvarchar) when (B.IncomeTaxGainAmount + B.IncomeTaxInterestAmount) < 0 then cast(0 as nvarchar) else cast(isnull(cast(B.TotalTaxIncomeAmount as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxExpensePercent = 0 then cast(0 as nvarchar) else cast(isnull(cast(isnull(B.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
	+ '|' + case when B.TrxType = 1 then '' else case when B.TaxAmount = 0 then cast(0 as nvarchar) else cast(isnull(cast(ceiling(B.TaxAmount) as decimal(30,0)),'')as nvarchar) end  end 
	End  
	from #Text A
	left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
	where A.InvestmentPK != 0 and B.AcqNo = @counter

	set @counter = @counter + 1
end	


insert into #TaxAmount
select A.InvestmentPK,cast(sum(CEILING(B.TaxAmount)) as numeric(30,2)), cast(round(A.DoneAmount,0) + round(A.DoneAccruedInterest,0) - sum(CEILING(B.TaxAmount))  as numeric(30,2)) from Investment A
left join InvestmentTaxDataAcq B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 and A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15)
" + _paramSettlementPK + @" 
and A.statusdealing = 2 
group by A.InvestmentPK,A.DoneAmount,A.DoneAccruedInterest

update A set ResultText = REPLACE(ResultText,'Tax Amount',B.TaxAmount) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

update A set ResultText = REPLACE(ResultText,'Total Amount',B.TotalAmount) from #Text A 
left join #TaxAmount B on A.InvestmentPK = B.InvestmentPK
where A.InvestmentPK != 0 

select ResultText from #text 
END                                

";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Bond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }


        public string ImportOmsEquityTemp(string _fileSource, string _userID, string _valueDate)
        {
            string _msg = string.Empty;
            DateTime _now = DateTime.Now;
            try
            {
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table dbo.OmsEquityImportTemp";
                        cmd2.ExecuteNonQuery();
                    }
                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.OmsEquityImportTemp";
                    bulkCopy.WriteToServer(CreateDataTableFromOMSEquityTempExcelFile(_fileSource));
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        // logic Checks
                        // 1. Instrument sudah ada atau belum di investment sesuai valudate
                        // 2. instrument sudah ada atau belum di master instrument
                        // 3. check enddaytrails fund portfolio di hari itu uda ada apa belum
                        // 4. check available cash
                        // 5. check price exposure
                        // 6. 
                        cmd2.CommandTimeout = 0;
                        cmd2.CommandText =
                            @"
                              --declare @ValueDate		date,
--    @UsersID		nvarchar(100),
--    @LastUpdate		datetime

--set @ValueDate		= '2020-07-09'
--set @UsersID		= 'sa'
--set @LastUpdate		= getdate()
--drop table #TableSelectData

Declare @CurReference nvarchar(100)  
Declare @PK int    
Declare @CFundID nvarchar(100)
	
	           
declare @success	int,
@msg		nvarchar(max)

set @success	= 1
set @msg		= ''


if exists (select * from OmsEquityImportTemp where BuySell <> 'B/S' and InstrumentID  <> '')
begin
begin

if not exists (
select distinct InstrumentID
from OmsEquityImportTemp 
where BuySell <> 'B/S' and InstrumentID not in (select distinct ID from Instrument where [Status] = 2) and InstrumentID <> ''
)
begin
	begin transaction

	declare @PeriodPK		int,
			@Type			nvarchar(100),
			@LastNo			int

	declare @MaxInvestmentPK		bigint,
			@CInstrumentPK			int,
			@CInstrumentTypePK		int,
			@CFundPK				int,
			@CMarketPK				int,
			@CLotInShare			numeric(18,4),
			@CBuySell				nvarchar(20),
			@CInstrumentID			nvarchar(100),
			@CPrice					numeric(22,6),
			@CLot					numeric(22,4),
			@CVolume					numeric(22,4),
			@CAmount				numeric(22,4),
			@CBitContinueSave		bit
		
	select @PeriodPK = PeriodPK 
	from Period 
	where @ValueDate between DateFrom and DateTo and [Status] = 2

		set @Type	= 'INV'
		set @LastNo	= 0

	declare @Cp1 nvarchar(100), @Cp2 nvarchar(100), @Cp3 nvarchar(100), @Cp4 nvarchar(100), @Cp5 nvarchar(100),
			@Cp6 nvarchar(100), @Cp7 nvarchar(100), @Cp8 nvarchar(100), @Cp9 nvarchar(100), @Cp10 nvarchar(100),
			@Cp11 nvarchar(100), @Cp12 nvarchar(100), @Cp13 nvarchar(100), @Cp14 nvarchar(100), @Cp15 nvarchar(100), @Cp16 nvarchar(100)
												
	declare @BitOMSEndDayTrailsFundPortfolio	bit,
			@BitAvailableCash					bit,
			@MinPrice							numeric(18,4),
			@MaxPrice							numeric(18,4),
			@Validate							bit,
			@ExposureType						nvarchar(100),
			@ExposureID							nvarchar(100),
			@AlertExposure						int,
			@ExposurePercent					numeric(18,4),
			@MaxExposurePercent					numeric(18,4),
			@MinExposurePercent					numeric(18,4),
			@TrxBuy								int,
			@TrxBuyType							nvarchar(50),
			@MethodType							int,
			@BitAvailableInstrument				bit

	declare @LastRow int
		set @LastRow = 0

	create table #TableSelectData (
		BuySell nvarchar(20),
		InstrumentID nvarchar(20),
		Price numeric(18,4),
		Lot numeric(22,4),
		Volume numeric(22,4),
		Amount numeric(32,6),
		MarketPK int,
		InstrumentPK int,
		InstrumentTypePK int,
		LotInShare numeric(32,6),
		FundPK int,
		MethodType int,
		BitContinueSave int
	)

	
	declare @Query nvarchar(max)
	declare @counter int
		set @counter = 1

	declare curImport cursor for
			select top 1 F1 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F1 is not null and F1 <> 'Spare Fund'
			union all
			select top 1 F2 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F2 is not null and F2 <> 'Spare Fund'
			union all
			select top 1 F3 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F3 is not null and F3 <> 'Spare Fund'
			union all
			select top 1 F4 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F4 is not null and F4 <> 'Spare Fund'
			union all
			select top 1 F5 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F5 is not null and F5 <> 'Spare Fund'
			union all
			select top 1 F6 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F6 is not null and F6 <> 'Spare Fund'
			union all
			select top 1 F7 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F7 is not null and F7 <> 'Spare Fund'
			union all
			select top 1 F8 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F8 is not null and F8 <> 'Spare Fund'
			union all
			select top 1 F9 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F9 is not null and F9 <> 'Spare Fund'
			union all
			select top 1 F10 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F10 is not null and F10 <> 'Spare Fund'
			union all
			select top 1 F11 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F11 is not null and F11 <> 'Spare Fund'
			union all
			select top 1 F12 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F12 is not null and F12 <> 'Spare Fund'
			union all
			select top 1 F13 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F13 is not null and F13 <> 'Spare Fund'
			union all
			select top 1 F14 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F14 is not null and F14 <> 'Spare Fund'
			union all
			select top 1 F15 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F15 is not null and F15 <> 'Spare Fund'
			union all
			select top 1 F16 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F16 is not null and F16 <> 'Spare Fund'

			union all
			select top 1 F17 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F17 is not null and F17 <> 'Spare Fund'
			union all
			select top 1 F18 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F18 is not null and F18 <> 'Spare Fund'
			union all
			select top 1 F19 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F19 is not null and F19 <> 'Spare Fund'
			union all
			select top 1 F20 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F20 is not null and F20 <> 'Spare Fund'
			union all
			select top 1 F21 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F21 is not null and F21 <> 'Spare Fund'
			union all
			select top 1 F22 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F22 is not null and F22 <> 'Spare Fund'

			union all
			select top 1 F23 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F23 is not null and F23 <> 'Spare Fund'
			union all
			select top 1 F24 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F24 is not null and F24 <> 'Spare Fund'
			union all
			select top 1 F25 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F25 is not null and F25 <> 'Spare Fund'
			union all
			select top 1 F26 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F26 is not null and F26 <> 'Spare Fund'
			union all
			select top 1 F27 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F27 is not null and F27 <> 'Spare Fund'

			union all
			select top 1 F28 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F28 is not null and F28 <> 'Spare Fund'
			union all
			select top 1 F29 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F29 is not null and F29 <> 'Spare Fund'
			union all
			select top 1 F30 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F30 is not null and F30 <> 'Spare Fund'
			union all
			select top 1 F31 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F31 is not null and F31 <> 'Spare Fund'
			union all
			select top 1 F32 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F32 is not null and F32 <> 'Spare Fund'

			union all
			select top 1 F33 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F33 is not null and F33 <> 'Spare Fund'
			union all
			select top 1 F34 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F34 is not null and F34 <> 'Spare Fund'
			union all
			select top 1 F35 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F35 is not null and F35 <> 'Spare Fund'
			union all
			select top 1 F36 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F36 is not null and F36 <> 'Spare Fund'
			union all
			select top 1 F37 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F37 is not null and F37 <> 'Spare Fund'

			union all
			select top 1 F38 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F38 is not null and F38 <> 'Spare Fund'
			union all
			select top 1 F39 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F39 is not null and F39 <> 'Spare Fund'
			union all
			select top 1 F40 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F40 is not null and F40 <> 'Spare Fund'
			union all
			select top 1 F41 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F41 is not null and F41 <> 'Spare Fund'
			union all
			select top 1 F42 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F42 is not null and F42 <> 'Spare Fund'

			union all
			select top 1 F43 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F43 is not null and F43 <> 'Spare Fund'
			union all
			select top 1 F44 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F44 is not null and F44 <> 'Spare Fund'
			union all
			select top 1 F45 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F45 is not null and F45 <> 'Spare Fund'
			union all
			select top 1 F46 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F46 is not null and F46 <> 'Spare Fund'
			union all
			select top 1 F47 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F47 is not null and F47 <> 'Spare Fund'

			union all
			select top 1 F48 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F48 is not null and F48 <> 'Spare Fund'
			union all
			select top 1 F49 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F49 is not null and F49 <> 'Spare Fund'
			union all
			select top 1 F50 from OmsEquityImportTemp where BuySell = 'B/S' and InstrumentID  <> '' and F50 is not null and F50 <> 'Spare Fund'
	open curImport

	fetch next from curImport
	into @Cp1

	while @@fetch_status = 0  

	begin  
		if @Cp1 <> 'Spare Fund' and isnull(@Cp1, '') <> '' and len(@Cp1) <> 0
		begin
			set @Query = 'truncate table #TableSelectData
							insert into #TableSelectData
							select 
							a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
										cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F' + cast(@Counter as nvarchar) + ', 0) as numeric(22,4)) as CLot, 
										cast(isnull(a.F' + cast(@Counter as nvarchar) + ', 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
										cast(isnull(a.F' + cast(@Counter as nvarchar) + ', 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
										b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
										cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave
									from OmsEquityImportTemp a
										left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
										left join Fund c on c.ID ='''+ @Cp1 +''' and c.[Status] = 2
						where a.BuySell <> ''B/S'' and cast(F' + cast(@Counter as nvarchar) + ' as numeric(22,4)) > 0 and a.InstrumentID  <> '''' and B.InstrumentTypePK in (1,4,16)
					'

					exec(@Query)


			declare curCp1 Cursor For
											
				select BuySell,InstrumentID,Price,Lot,Volume,Amount,MarketPK,InstrumentPK,InstrumentTypePK, LotInShare, FundPK, MethodType, BitContinueSave from #TableSelectData
			open curCp1

			fetch next from curCp1   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave

			while @@fetch_status = 0  
			begin
					
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 11
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 12
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 13
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposurePerFundPK] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount)
														
								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
									set @success	= 14
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end
														
								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

										Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
										substring(right(reference,4),1,2) = month(@ValueDate) 

										if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
										and substring(right(reference,4),1,2) = month(@ValueDate)  )    
										BEGIN
											Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
											and substring(right(reference,4),1,2) = month(@ValueDate) 
										END
										ELSE
										BEGIN
											Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
											Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
										END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
										
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

										Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
										substring(right(reference,4),1,2) = month(@ValueDate) 

										if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
										and substring(right(reference,4),1,2) = month(@ValueDate)  )    
										BEGIN
											Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
											and substring(right(reference,4),1,2) = month(@ValueDate) 
										END
										ELSE
										BEGIN
											Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
											Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
										END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 15
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 16
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 17
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment													
								--select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

								Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
								substring(right(reference,4),1,2) = month(@ValueDate) 

								if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
								and substring(right(reference,4),1,2) = month(@ValueDate)  )    
								BEGIN
									Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
									and substring(right(reference,4),1,2) = month(@ValueDate) 
								END
								ELSE
								BEGIN
									Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
									Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
								END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, 0 as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									1 as StatusInvestment, 0 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,4)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate, 3) as SettlementDate, 'Import' as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,4)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 0 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				set @LastRow = @MaxInvestmentPK

				fetch next from curCp1   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave
			end   
			close curCp1
			deallocate curCp1
		end


		set @Counter = @Counter + 1

		fetch next from curImport 
		into @Cp1
	end   
	close curImport
	deallocate curImport

if(@success < 10)
begin
	commit transaction
	set @msg = 'Import OMS Equity Success'
end
Else
begin
	rollback transaction
end
end
else
begin
	set @msg = 'Check Master Instrument'
end
end
end
select @msg as ResultMsg

                            ";
                        cmd2.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd2.Parameters.AddWithValue("@UsersID", _userID);
                        cmd2.Parameters.AddWithValue("@LastUpdate", _now);
                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                        {
                            if (!dr2.HasRows)
                            {
                                _msg = "Import OMS Equity Canceled, import data not found!";
                            }
                            else
                            {
                                dr2.Read();
                                _msg = Convert.ToString(dr2["ResultMsg"]);
                            }
                        }
                    }
                }

                return _msg;
            }
            catch (Exception err)
            {
                return "Import OMS Equity Error : " + err.Message.ToString();
                throw err;
            }
        }


        private DataTable CreateDataTableFromOMSEquityTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BuySell";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Price";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F1";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F2";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F3";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F4";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F5";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F6";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F7";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F8";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F9";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F10";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F11";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F12";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F13";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F14";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F15";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F16";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F17";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F18";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F19";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F20";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F21";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F22";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F23";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F24";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F25";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F26";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F27";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F28";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F29";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F30";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F31";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F32";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F33";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F34";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F35";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F36";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F37";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F38";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F39";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F40";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F41";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F42";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F43";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F44";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F45";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F46";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F47";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F48";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F49";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F50";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    FileInfo excelFile = new FileInfo(_path);
                    using (ExcelPackage package = new ExcelPackage(excelFile))
                    {
                        int i = 1;
                        ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                        int lastColumn = worksheet.Cells.Where(cell => !cell.Value.ToString().Equals("")).Last().End.Column;
                        while (i <= worksheet.Cells.Where(cell => !cell.Value.ToString().Equals("")).Last().End.Row)
                        {
                            dr = dt.NewRow();
                            dr["BuySell"] = worksheet.Cells[i, 1].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 1].Value.ToString();
                            dr["InstrumentID"] = worksheet.Cells[i, 2].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 2].Value.ToString();
                            dr["Price"] = worksheet.Cells[i, 3].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 3].Value.ToString();

                            if (4 <= lastColumn)
                            {
                                dr["F1"] = worksheet.Cells[i, 4].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 4].Value.ToString();
                            }

                            if (5 <= lastColumn)
                            {
                                dr["F2"] = worksheet.Cells[i, 5].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 5].Value.ToString();
                            }
                            if (6 <= lastColumn)
                            {
                                dr["F3"] = worksheet.Cells[i, 6].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 6].Value.ToString();
                            }
                            if (7 <= lastColumn)
                            {
                                dr["F4"] = worksheet.Cells[i, 7].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 7].Value.ToString();
                            }
                            if (8 <= lastColumn)
                            {
                                dr["F5"] = worksheet.Cells[i, 8].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 8].Value.ToString();
                            }
                            if (9 <= lastColumn)
                            {
                                dr["F6"] = worksheet.Cells[i, 9].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 9].Value.ToString();
                            }

                            if (10 <= lastColumn)
                            {
                                dr["F7"] = worksheet.Cells[i, 10].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 10].Value.ToString();
                            }
                            if (11 <= lastColumn)
                            {
                                dr["F8"] = worksheet.Cells[i, 11].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 11].Value.ToString();
                            }
                            if (12 <= lastColumn)
                            {
                                dr["F9"] = worksheet.Cells[i, 12].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 12].Value.ToString();
                            }
                            if (13 <= lastColumn)
                            {
                                dr["F10"] = worksheet.Cells[i, 13].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 13].Value.ToString();
                            }
                            if (14 <= lastColumn)
                            {
                                dr["F11"] = worksheet.Cells[i, 14].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 14].Value.ToString();
                            }
                            if (15 <= lastColumn)
                            {
                                dr["F12"] = worksheet.Cells[i, 15].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 15].Value.ToString();
                            }
                            if (16 <= lastColumn)
                            {
                                dr["F13"] = worksheet.Cells[i, 16].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 16].Value.ToString();
                            }
                            if (17 <= lastColumn)
                            {
                                dr["F14"] = worksheet.Cells[i, 17].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 17].Value.ToString();
                            }
                            if (18 <= lastColumn)
                            {
                                dr["F15"] = worksheet.Cells[i, 18].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 18].Value.ToString();
                            }
                            if (19 <= lastColumn)
                            {
                                dr["F16"] = worksheet.Cells[i, 19].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 19].Value.ToString();
                            }
                            if (20 <= lastColumn)
                            {
                                dr["F17"] = worksheet.Cells[i, 20].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 20].Value.ToString();
                            }
                            if (21 <= lastColumn)
                            {
                                dr["F18"] = worksheet.Cells[i, 21].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 21].Value.ToString();
                            }
                            if (22 <= lastColumn)
                            {
                                dr["F19"] = worksheet.Cells[i, 22].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 22].Value.ToString();
                            }
                            if (23 <= lastColumn)
                            {
                                dr["F20"] = worksheet.Cells[i, 23].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 23].Value.ToString();
                            }
                            if (24 <= lastColumn)
                            {
                                dr["F21"] = worksheet.Cells[i, 24].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 24].Value.ToString();
                            }
                            if (25 <= lastColumn)
                            {
                                dr["F22"] = worksheet.Cells[i, 25].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 25].Value.ToString();
                            }
                            if (26 <= lastColumn)
                            {
                                dr["F23"] = worksheet.Cells[i, 26].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 26].Value.ToString();
                            }
                            if (27 <= lastColumn)
                            {
                                dr["F24"] = worksheet.Cells[i, 27].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 27].Value.ToString();
                            }
                            if (28 <= lastColumn)
                            {
                                dr["F25"] = worksheet.Cells[i, 28].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 28].Value.ToString();
                            }
                            if (29 <= lastColumn)
                            {
                                dr["F26"] = worksheet.Cells[i, 29].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 29].Value.ToString();
                            }
                            if (30 <= lastColumn)
                            {
                                dr["F27"] = worksheet.Cells[i, 30].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 30].Value.ToString();
                            }
                            if (31 <= lastColumn)
                            {
                                dr["F28"] = worksheet.Cells[i, 31].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 31].Value.ToString();
                            }
                            if (32 <= lastColumn)
                            {
                                dr["F29"] = worksheet.Cells[i, 32].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 32].Value.ToString();
                            }
                            if (33 <= lastColumn)
                            {
                                dr["F30"] = worksheet.Cells[i, 33].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 33].Value.ToString();
                            }
                            if (34 <= lastColumn)
                            {
                                dr["F31"] = worksheet.Cells[i, 34].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 34].Value.ToString();
                            }
                            if (35 <= lastColumn)
                            {
                                dr["F32"] = worksheet.Cells[i, 35].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 35].Value.ToString();
                            }
                            if (36 <= lastColumn)
                            {
                                dr["F33"] = worksheet.Cells[i, 36].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 36].Value.ToString();
                            }
                            if (37 <= lastColumn)
                            {
                                dr["F34"] = worksheet.Cells[i, 37].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 37].Value.ToString();
                            }
                            if (38 <= lastColumn)
                            {
                                dr["F35"] = worksheet.Cells[i, 38].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 38].Value.ToString();
                            }
                            if (39 <= lastColumn)
                            {
                                dr["F36"] = worksheet.Cells[i, 39].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 39].Value.ToString();
                            }
                            if (40 <= lastColumn)
                            {
                                dr["F37"] = worksheet.Cells[i, 40].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 40].Value.ToString();
                            }
                            if (41 <= lastColumn)
                            {
                                dr["F38"] = worksheet.Cells[i, 41].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 41].Value.ToString();
                            }
                            if (42 <= lastColumn)
                            {
                                dr["F39"] = worksheet.Cells[i, 42].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 42].Value.ToString();
                            }
                            if (43 <= lastColumn)
                            {
                                dr["F40"] = worksheet.Cells[i, 43].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 43].Value.ToString();
                            }
                            if (44 <= lastColumn)
                            {
                                dr["F41"] = worksheet.Cells[i, 44].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 44].Value.ToString();
                            }
                            if (45 <= lastColumn)
                            {
                                dr["F42"] = worksheet.Cells[i, 45].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 45].Value.ToString();
                            }
                            if (46 <= lastColumn)
                            {
                                dr["F43"] = worksheet.Cells[i, 46].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 46].Value.ToString();
                            }
                            if (47 <= lastColumn)
                            {
                                dr["F44"] = worksheet.Cells[i, 47].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 47].Value.ToString();
                            }
                            if (48 <= lastColumn)
                            {
                                dr["F45"] = worksheet.Cells[i, 48].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 48].Value.ToString();
                            }
                            if (49 <= lastColumn)
                            {
                                dr["F46"] = worksheet.Cells[i, 49].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 49].Value.ToString();
                            }
                            if (50 <= lastColumn)
                            {
                                dr["F47"] = worksheet.Cells[i, 50].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 50].Value.ToString();
                            }
                            if (51 <= lastColumn)
                            {
                                dr["F48"] = worksheet.Cells[i, 51].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 51].Value.ToString();
                            }
                            if (52 <= lastColumn)
                            {
                                dr["F49"] = worksheet.Cells[i, 52].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 52].Value.ToString();
                            }
                            if (53 <= lastColumn)
                            {
                                dr["F50"] = worksheet.Cells[i, 53].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 53].Value.ToString();
                            }
                            dt.Rows.Add(dr);
                            i++;

                        }





                    }


                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        private DataTable CreateDataTableFromDealingTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "CounterpartID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BoardType";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "ValueDate";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "SettledDate";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BuySell";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Price";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F1";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F2";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F3";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F4";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F5";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F6";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F7";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F8";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F9";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F10";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F11";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F12";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F13";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F14";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F15";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F16";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F17";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F18";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F19";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F20";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F21";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F22";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F23";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F24";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F25";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F26";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F27";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F28";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F29";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F30";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F31";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F32";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F33";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F34";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F35";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F36";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F37";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F38";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F39";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F40";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F41";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F42";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F43";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F44";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F45";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F46";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F47";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F48";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F49";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F50";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    FileInfo excelFile = new FileInfo(_path);
                    using (ExcelPackage package = new ExcelPackage(excelFile))
                    {
                        int i = 1;
                        ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                        int lastColumn = worksheet.Cells.Where(cell => !cell.Value.ToString().Equals("")).Last().End.Column;
                        while (i <= worksheet.Cells.Where(cell => !cell.Value.ToString().Equals("")).Last().End.Row)
                        {
                            dr = dt.NewRow();
                            dr["CounterpartID"] = worksheet.Cells[i, 1].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 1].Value.ToString();
                            dr["BoardType"] = worksheet.Cells[i, 2].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 2].Value.ToString();
                            dr["ValueDate"] = worksheet.Cells[i, 3].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 3].Value.ToString();
                            dr["SettledDate"] = worksheet.Cells[i, 4].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 4].Value.ToString();
                            dr["BuySell"] = worksheet.Cells[i, 5].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 5].Value.ToString();
                            dr["InstrumentID"] = worksheet.Cells[i, 6].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 6].Value.ToString();
                            dr["Price"] = worksheet.Cells[i, 7].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 7].Value.ToString();

                            if (8 <= lastColumn)
                            {
                                dr["F1"] = worksheet.Cells[i, 8].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 8].Value.ToString();
                            }

                            if (9 <= lastColumn)
                            {
                                dr["F2"] = worksheet.Cells[i, 9].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 9].Value.ToString();
                            }
                            if (10 <= lastColumn)
                            {
                                dr["F3"] = worksheet.Cells[i, 10].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 10].Value.ToString();
                            }
                            if (11 <= lastColumn)
                            {
                                dr["F4"] = worksheet.Cells[i, 11].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 11].Value.ToString();
                            }
                            if (12 <= lastColumn)
                            {
                                dr["F5"] = worksheet.Cells[i, 12].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 12].Value.ToString();
                            }
                            if (13 <= lastColumn)
                            {
                                dr["F6"] = worksheet.Cells[i, 13].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 13].Value.ToString();
                            }

                            if (14 <= lastColumn)
                            {
                                dr["F7"] = worksheet.Cells[i, 14].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 14].Value.ToString();
                            }
                            if (15 <= lastColumn)
                            {
                                dr["F8"] = worksheet.Cells[i, 15].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 15].Value.ToString();
                            }
                            if (16 <= lastColumn)
                            {
                                dr["F9"] = worksheet.Cells[i, 16].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 16].Value.ToString();
                            }
                            if (17 <= lastColumn)
                            {
                                dr["F10"] = worksheet.Cells[i, 17].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 17].Value.ToString();
                            }
                            if (18 <= lastColumn)
                            {
                                dr["F11"] = worksheet.Cells[i, 18].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 18].Value.ToString();
                            }
                            if (19 <= lastColumn)
                            {
                                dr["F12"] = worksheet.Cells[i, 19].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 19].Value.ToString();
                            }
                            if (20 <= lastColumn)
                            {
                                dr["F13"] = worksheet.Cells[i, 20].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 20].Value.ToString();
                            }
                            if (21 <= lastColumn)
                            {
                                dr["F14"] = worksheet.Cells[i, 21].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 21].Value.ToString();
                            }
                            if (22 <= lastColumn)
                            {
                                dr["F15"] = worksheet.Cells[i, 22].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 22].Value.ToString();
                            }
                            if (23 <= lastColumn)
                            {
                                dr["F16"] = worksheet.Cells[i, 23].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 23].Value.ToString();
                            }
                            if (24 <= lastColumn)
                            {
                                dr["F17"] = worksheet.Cells[i, 24].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 24].Value.ToString();
                            }
                            if (25 <= lastColumn)
                            {
                                dr["F18"] = worksheet.Cells[i, 25].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 25].Value.ToString();
                            }
                            if (26 <= lastColumn)
                            {
                                dr["F19"] = worksheet.Cells[i, 26].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 26].Value.ToString();
                            }
                            if (27 <= lastColumn)
                            {
                                dr["F20"] = worksheet.Cells[i, 27].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 27].Value.ToString();
                            }
                            if (28 <= lastColumn)
                            {
                                dr["F21"] = worksheet.Cells[i, 28].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 28].Value.ToString();
                            }
                            if (29 <= lastColumn)
                            {
                                dr["F22"] = worksheet.Cells[i, 29].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 29].Value.ToString();
                            }
                            if (30 <= lastColumn)
                            {
                                dr["F23"] = worksheet.Cells[i, 30].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 30].Value.ToString();
                            }
                            if (31 <= lastColumn)
                            {
                                dr["F24"] = worksheet.Cells[i, 31].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 31].Value.ToString();
                            }
                            if (32 <= lastColumn)
                            {
                                dr["F25"] = worksheet.Cells[i, 32].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 32].Value.ToString();
                            }
                            if (33 <= lastColumn)
                            {
                                dr["F26"] = worksheet.Cells[i, 33].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 33].Value.ToString();
                            }
                            if (34 <= lastColumn)
                            {
                                dr["F27"] = worksheet.Cells[i, 34].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 34].Value.ToString();
                            }
                            if (35 <= lastColumn)
                            {
                                dr["F28"] = worksheet.Cells[i, 35].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 35].Value.ToString();
                            }
                            if (36 <= lastColumn)
                            {
                                dr["F29"] = worksheet.Cells[i, 36].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 36].Value.ToString();
                            }
                            if (37 <= lastColumn)
                            {
                                dr["F30"] = worksheet.Cells[i, 37].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 37].Value.ToString();
                            }
                            if (38 <= lastColumn)
                            {
                                dr["F31"] = worksheet.Cells[i, 38].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 38].Value.ToString();
                            }
                            if (39 <= lastColumn)
                            {
                                dr["F32"] = worksheet.Cells[i, 39].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 39].Value.ToString();
                            }
                            if (40 <= lastColumn)
                            {
                                dr["F33"] = worksheet.Cells[i, 40].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 40].Value.ToString();
                            }
                            if (41 <= lastColumn)
                            {
                                dr["F34"] = worksheet.Cells[i, 41].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 41].Value.ToString();
                            }
                            if (42 <= lastColumn)
                            {
                                dr["F35"] = worksheet.Cells[i, 42].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 42].Value.ToString();
                            }
                            if (43 <= lastColumn)
                            {
                                dr["F36"] = worksheet.Cells[i, 43].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 43].Value.ToString();
                            }
                            if (44 <= lastColumn)
                            {
                                dr["F37"] = worksheet.Cells[i, 44].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 44].Value.ToString();
                            }
                            if (45 <= lastColumn)
                            {
                                dr["F38"] = worksheet.Cells[i, 45].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 45].Value.ToString();
                            }
                            if (46 <= lastColumn)
                            {
                                dr["F39"] = worksheet.Cells[i, 46].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 46].Value.ToString();
                            }
                            if (47 <= lastColumn)
                            {
                                dr["F40"] = worksheet.Cells[i, 47].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 47].Value.ToString();
                            }
                            if (48 <= lastColumn)
                            {
                                dr["F41"] = worksheet.Cells[i, 48].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 48].Value.ToString();
                            }
                            if (49 <= lastColumn)
                            {
                                dr["F42"] = worksheet.Cells[i, 49].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 49].Value.ToString();
                            }
                            if (50 <= lastColumn)
                            {
                                dr["F43"] = worksheet.Cells[i, 50].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 50].Value.ToString();
                            }
                            if (51 <= lastColumn)
                            {
                                dr["F44"] = worksheet.Cells[i, 51].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 51].Value.ToString();
                            }
                            if (52 <= lastColumn)
                            {
                                dr["F45"] = worksheet.Cells[i, 52].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 52].Value.ToString();
                            }
                            if (53 <= lastColumn)
                            {
                                dr["F46"] = worksheet.Cells[i, 53].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 53].Value.ToString();
                            }
                            if (54 <= lastColumn)
                            {
                                dr["F47"] = worksheet.Cells[i, 54].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 54].Value.ToString();
                            }
                            if (55 <= lastColumn)
                            {
                                dr["F48"] = worksheet.Cells[i, 55].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 55].Value.ToString();
                            }
                            if (56 <= lastColumn)
                            {
                                dr["F49"] = worksheet.Cells[i, 56].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 56].Value.ToString();
                            }
                            if (57 <= lastColumn)
                            {
                                dr["F50"] = worksheet.Cells[i, 57].Value.Equals(DBNull.Value) == true ? "" : worksheet.Cells[i, 57].Value.ToString();
                            }
                            dt.Rows.Add(dr);
                            i++;
                        }
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }


        public string ImportDealingEquityTemp(string _fileSource, string _userID, string _valueDate)
        {
            string _msg = string.Empty;
            DateTime _now = DateTime.Now;
            try
            {
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table dbo.DealingEquityImportTemp_03";
                        cmd2.ExecuteNonQuery();
                    }
                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.DealingEquityImportTemp_03";
                    bulkCopy.WriteToServer(CreateDataTableFromDealingTempExcelFile(_fileSource));
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        // 1. Check ada investment yang approve apa engga
                        // 2. check master counterpart
                        // 3. check master instruments
                        // 4. 
                        cmd2.CommandTimeout = 0;
                        cmd2.CommandText =
                            @"
                             --declare @ValueDate		date,
--                                		@UsersID		nvarchar(100),
--                                		@LastUpdate		datetime

--                                	set @ValueDate		= '2020-04-23'
--                                	set @UsersID		= 'admin'
--                                	set @LastUpdate		= '2020-04-23'

--									drop table #TableSelectData

                                declare @success	bit,
		                                @msg		nvarchar(max)

	                                set @success	= 1
	                                set @msg		= ''


									create table #TableSelectData (
										CounterpartID nvarchar(20),
										BuySell nvarchar(20),
										InstrumentID nvarchar(20),
										Price numeric(18,4),
										Lot numeric(22,4),
										Amount numeric(32,6),
										BoardType int,
										ValueDate date,
										SettledDate date
									)

                                if exists (select * from DealingEquityImportTemp_03 where BuySell <> 'B/S' and InstrumentID  <> '')
                                begin
	                                -- Cek Data Import
	                                if exists (
		                                select *
		                                from Investment
		                                where StatusInvestment = 2 and StatusDealing = 1 and ValueDate = @ValueDate
			                                and InstrumentPK in (
				                                select distinct b.InstrumentPK
				                                from DealingEquityImportTemp_03 a
					                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
				                                where a.BuySell <> 'B/S' and A.InstrumentID  <> ''
			                                )
	                                )
	                                begin
		                                -- Cek Master Counterpart
		                                if not exists (
			                                select distinct CounterpartID
			                                from DealingEquityImportTemp_03
			                                where BuySell <> 'B/S' and InstrumentID  <> ''
				                                and CounterpartID not in (select distinct ID from Counterpart where [Status] = 2 
				                                and CounterpartPK in (select distinct CounterpartPK from CounterpartCommission where [Status] = 2 and BoardType = 1))
		                                )
		                                begin
			                                -- Cek Master Counterpart & Instrument
			                                if not exists (
				                                select distinct InstrumentID
				                                from DealingEquityImportTemp_03
				                                where BuySell <> 'B/S' 
					                                and InstrumentID not in (select distinct ID from Instrument where [Status] = 2) and InstrumentID  <> ''
			                                )
			                                begin
				                                begin transaction

				                                begin try
					                                declare @InvestmentPK			int,
							                                @InstrumentPK			int,
							                                @CounterpartPK			int,
							                                @FundPK					int,
							                                @DealingPK				int,
							                                @MaxDealingPK			int,  
							                                @CCounterpartID			nvarchar(100),
							                                @CBuySell				nvarchar(20),
							                                @CInstrumentID			nvarchar(100),
							                                @CPrice					numeric(22,6),
							                                @CLot					numeric(22,4),
							                                @CAmount				numeric(22,4),
							                                @DonePrice				numeric(22,6),
							                                @DoneLot				numeric(22,4),
							                                @DoneAmount				numeric(22,4),
                                                            @CValueDate		        datetime,
                                                            @CSettledDate	        datetime,
                                                            @CBoardType				int,
															@Query					nvarchar(max),
															@Counter				int

													set @Counter = 1

					                                declare @Cp1 nvarchar(100)

					                                declare curImport cursor for
						                                select top 1 F1 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F1 is not null
														union all
														select top 1 F2 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F2 is not null
														union all
														select top 1 F3 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F3 is not null
														union all
														select top 1 F4 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F4 is not null
														union all
														select top 1 F5 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F5 is not null
														union all
														select top 1 F6 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F6 is not null
														union all
														select top 1 F7 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F7 is not null
														union all
														select top 1 F8 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F8 is not null
														union all
														select top 1 F9 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F9 is not null
														union all
														select top 1 F10 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F10 is not null
														union all
														select top 1 F11 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F11 is not null
														union all
														select top 1 F12 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F12 is not null
														union all
														select top 1 F13 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F13 is not null
														union all
														select top 1 F14 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F14 is not null
														union all
														select top 1 F15 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F15 is not null
														union all
														select top 1 F16 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F16 is not null
														union all
														select top 1 F17 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F17 is not null
														union all
														select top 1 F18 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F18 is not null
														union all
														select top 1 F19 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F19 is not null
														union all
														select top 1 F20 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F20 is not null
														union all
														select top 2 F21 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F22 is not null
														union all
														select top 2 F22 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F22 is not null
														union all
														select top 2 F23 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F23 is not null
														union all
														select top 2 F24 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F24 is not null
														union all
														select top 2 F25 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F25 is not null
														union all
														select top 2 F26 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F26 is not null
														union all
														select top 2 F27 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F27 is not null
														union all
														select top 2 F28 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F28 is not null
														union all
														select top 2 F29 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F29 is not null
														union all
														select top 2 F30 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F30 is not null
														union all
														select top 3 F31 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F31 is not null
														union all
														select top 3 F32 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F32 is not null
														union all
														select top 3 F33 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F33 is not null
														union all
														select top 3 F34 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F34 is not null
														union all
														select top 3 F35 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F35 is not null
														union all
														select top 3 F36 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F36 is not null
														union all
														select top 3 F37 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F37 is not null
														union all
														select top 3 F38 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F38 is not null
														union all
														select top 3 F39 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F39 is not null
														union all
														select top 3 F40 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F40 is not null
														union all
														select top 4 F41 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F41 is not null
														union all
														select top 4 F42 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F42 is not null
														union all
														select top 4 F43 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F43 is not null
														union all
														select top 4 F44 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F44 is not null
														union all
														select top 4 F45 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F45 is not null
														union all
														select top 4 F46 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F46 is not null
														union all
														select top 4 F47 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F47 is not null
														union all
														select top 4 F48 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F48 is not null
														union all
														select top 4 F49 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F49 is not null
														union all
														select top 4 F50 from DealingEquityImportTemp_03 where BuySell = 'B/S' and InstrumentID  <> '' and F50 is not null
					                                open curImport

					                                fetch next from curImport
					                                into @Cp1

					                                while @@fetch_status = 0  
					                                begin  
						                                if @Cp1 <> 'Spare Fund' and isnull(@Cp1, '') <> '' and len(@Cp1) <> 0
						                                begin

																set @Query = 'truncate table #TableSelectData
										                                insert into #TableSelectData
										                                select 
										                                a.CounterpartID,a.BuySell, a.InstrumentID, 
										                                cast(isnull(a.Price, 0) as numeric(22,4)),cast(isnull(a.F' + cast(@Counter as nvarchar) + ', 0) as numeric(22,4)), 
										                                cast(isnull(a.F' + cast(@Counter as nvarchar) + ', 0) as numeric(22,4)) * 100 * cast(isnull(a.Price, 0) as numeric(22,4)),
										                                case when a.BoardType = ''RG'' then 1 
												                                when a.BoardType = ''NG'' then 2 
													                                when a.BoardType = ''TS'' then 3 
														                                when a.BoardType = ''IDX'' then 4 
                                                                                            when a.BoardType = ''ETF'' then 5 
															                                else 6 end,
										                                A.ValueDate,A.SettledDate
									                                from DealingEquityImportTemp_03 a
										                                left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
										                                left join Fund c on c.ID ='''+ @Cp1 +''' and c.[Status] = 2
									                                where a.BuySell <> ''B/S'' and cast(F' + cast(@Counter as nvarchar) + ' as numeric(22,4)) > 0 and a.InstrumentID  <> ''''
								                                '
								                                exec(@Query)

 
																DECLARE AB CURSOR FOR 
																	select CounterpartID,BuySell,InstrumentID,Price,Lot,Amount,BoardType,ValueDate,settledDate from #TableSelectData
																OPEN AB;
 
																FETCH NEXT FROM AB INTO 
																	@CCounterpartID, @CBuySell,@CInstrumentID,@CPrice,@CLot,@CAmount,@CBoardType,@CValueDate,@CSettledDate
 
																WHILE @@FETCH_STATUS = 0
																	BEGIN

																		--select @CCounterpartID as CCounterpartID, @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CSettledDate,@CBoardType
								
																		select @InstrumentPK = InstrumentPK from Instrument where ID = @CInstrumentID and [Status] = 2
																		select @CounterpartPK = CounterpartPK from Counterpart where ID = @CCounterpartID and [Status] = 2
																		select @FundPK = FundPK from Fund where ID = @Cp1 and [Status] = 2
																		select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment 

																		set @InvestmentPK = 0
																		set @DealingPK = 0
																		set @DonePrice = 0
																		set @DoneLot = 0
																		set @DoneAmount = 0

																		if exists (select * from Investment 
																		where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
																			and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL') and DoneLot = @CLot)
																		begin
																			select 
																				@InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
																				@DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
																			from Investment 
																			where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
																				and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL') and DoneLot = @CLot
																		end
																		else
																		begin
																			select 
																				@InvestmentPK = isnull(InvestmentPK, 0), @DealingPK = isnull(DealingPK, 0), 
																				@DonePrice = isnull(DonePrice, 0), @DoneLot = isnull(DoneLot, 0), @DoneAmount = isnull(DoneAmount, 0)
																			from Investment 
																			where ValueDate = @ValueDate and StatusInvestment = 2 and InstrumentPK = @InstrumentPK and FundPK = @FundPK
																				and StatusDealing <> 3 and StatusSettlement <> 3 and (Orderstatus is null or OrderStatus = 'PARTIAL')	
																		end	

																		set @InvestmentPK = isnull(@InvestmentPK, 0)
																		set @DealingPK = isnull(@DealingPK, 0)
																		set @DonePrice = isnull(@DonePrice, 0)
																		set @DoneLot = isnull(@DoneLot, 0)
																		set @DoneAmount = isnull(@DoneAmount, 0)							
		
																		---- Cek Data
																		--select @InstrumentPK, @InvestmentPK, @DonePrice, @DoneLot, @DealingPK, case when @DoneLot = @CLot then 'sama' else 'beda' end
																		--select @CBuySell,@CPrice,@DonePrice,@CLot,@DoneLot

																		if (@DoneLot = @CLot)
																		begin
																			if @CBuySell = 'B'
																			begin
																				if @CPrice <= @DonePrice and @CLot <= @DoneLot
																				begin
																					update Investment set 
																							BoardType = @CBoardType,
																							SettlementDate = @CSettledDate,
																							CounterpartPK = @CounterpartPK, 
																							SettlementMode = 1, -- Default 'RVP'
																							OrderStatus = 'O', -- Default 'OPEN'
																							DonePrice = @CPrice, DoneLot = @CLot, 
																							DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
																							UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
																							ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
																					where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																							and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
																				end
																			end

																			if @CBuySell = 'S'
																			begin
																				update Investment set 
																							BoardType = @CBoardType,
																							SettlementDate = @CSettledDate,
																							CounterpartPK = @CounterpartPK, 
																							SettlementMode = 2, -- Default 'RVP'
																							OrderStatus = 'O', -- Default 'OPEN'
																							DonePrice = @CPrice, DoneLot = @CLot, 
																							DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
																							UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
																							ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
																				where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																							and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
																			end
																		end
																		else
																		begin
																			if @CBuySell = 'B'
																			begin
																				if @CPrice <= @DonePrice and @CLot <= @DoneLot
																				begin
																					if @CPrice <= @DonePrice and @CLot = @DoneLot
																					begin
																						update Investment set 
																							BoardType = @CBoardType,
																							SettlementDate = @CSettledDate,
																							CounterpartPK = @CounterpartPK, 
																							SettlementMode = 1, -- Default 'RVP'
																							OrderStatus = 'O', -- Default 'OPEN'
																							DonePrice = @CPrice, DoneLot = @CLot, 
																							DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
																							UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
																							ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
																						where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																							and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
																					end
																					else
																					begin
																						-- Split Buy
																						if @CPrice <= @DonePrice and @CLot < @DoneLot
																						begin
																							insert into [dbo].[Investment] (
																								[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
																								[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
																								[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
																								[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
																								[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
																								[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
																								[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
																								[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
																								[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
																								[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
																								[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
																								[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
																								[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
																								[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
																								[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
																								[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
																								[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
																								[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
																							)
																							select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
																								[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
																								@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
																								[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
																								@CSettledDate, [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
																								@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
																								[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
																								[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
																								[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
																								[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
																								@CBoardType as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
																								[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
																								[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
																								@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
																								@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
																								[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
																								[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
																								[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
																								[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
																							from Investment 
																							where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
																						end

																						if (@DoneLot - @CLot) = 0
																						begin
																							update Investment set 
																								StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
																								UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
																							where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																								and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
																						end
																						else
																						begin
																							if @DoneLot > 0
																							begin
																								update Investment set 
																									BoardType = @CBoardType,
																									SettlementDate = @CSettledDate,
																									DoneLot = @DoneLot - isnull(@CLot, 0), 
																									DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
																									DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
																									UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
																								where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																									and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
																							end                                 
																						end
																					end
																				end
																			end

																			if @CBuySell = 'S'
																			begin
																				if @CPrice >= @DonePrice and @CLot <= @DoneLot
																				begin
																					if @CPrice >= @DonePrice and @CLot = @DoneLot
																					begin
																						update Investment set 
																							BoardType = @CBoardType,
																							SettlementDate = @CSettledDate,
																							CounterpartPK = @CounterpartPK, 
																							SettlementMode = 2, -- Default 'RVP'
																							OrderStatus = 'O', -- Default 'OPEN'
																							DonePrice = @CPrice, DoneLot = @CLot, 
																							DoneVolume = @CLot * 100, DoneAmount = @CLot * 100 * @CPrice,
																							UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, 
																							ApprovedDealingID = @UsersID, ApprovedDealingTime = @LastUpdate, LastUpdate = @LastUpdate
																							where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																							and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK
																					end
																					else
																					begin
																						-- Split Sell
																						if @CPrice >= @DonePrice and @CLot < @DoneLot
																						begin
																							insert into [dbo].[Investment] (
																								[InvestmentPK], [DealingPK], [SettlementPK], [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], [Notes],
																								[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
																								[CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
																								[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
																								[SettlementDate], [AcqDate], [InvestmentNotes], [DoneLot], [DoneVolume], [DonePrice], [DoneAmount], [Tenor], 
																								[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
																								[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
																								[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
																								[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], [SettlementMode], 
																								[BoardType], [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate], 
																								[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], [EntryUsersID], [EntryTime],
																								[UpdateUsersID], [UpdateTime], [ApprovedUsersID], [ApprovedTime], [VoidUsersID], [VoidTime], [EntryDealingID], [EntryDealingTime], 
																								[UpdateDealingID], [UpdateDealingTime], [ApprovedDealingID], [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
																								[EntrySettlementID], [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
																								[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID],
																								[LastUpdate], [LastUpdateDB], [SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
																								[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
																								[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType]
																							)
																							select 0 as [InvestmentPK], @MaxDealingPK, [SettlementPK], 1 as [HistoryPK], [StatusInvestment], [StatusDealing], [StatusSettlement], 'Split' as [Notes],
																								[ValueDate], [MarketPK], [PeriodPK], [Category], [InstructionDate], [Reference], [InstrumentTypePK], [TrxType], [TrxTypeID],
																								@CounterpartPK as [CounterpartPK], [InstrumentPK], [FundPK], [FundCashRefPK], [OrderPrice], [Lot], [LotInShare], [RangePrice], [AcqPrice], [Volume], [Amount],
																								[InterestPercent], [BreakInterestPercent], [AccruedInterest], [DoneAccruedInterest], [LastCouponDate], [NextCouponDate], [MaturityDate],
																								@CSettledDate, [AcqDate], [InvestmentNotes], @CLot as [DoneLot], @CLot * 100 as [DoneVolume], 
																								@CPrice as [DonePrice], @CLot * 100 * [DonePrice] as [DoneAmount], [Tenor],
																								[CommissionPercent], [LevyPercent], [KPEIPercent], [VATPercent], [WHTPercent], [OTCPercent], [IncomeTaxSellPercent], 
																								[IncomeTaxInterestPercent], [IncomeTaxGainPercent], [CommissionAmount], [LevyAmount], [KPEIAmount], [VATAmount], [WHTAmount], 
																								[OTCAmount], [IncomeTaxSellAmount], [IncomeTaxInterestAmount], [IncomeTaxGainAmount], [TotalAmount], [CurrencyRate], [AcqPrice1], 
																								[AcqDate1], [AcqPrice2], [AcqDate2], [AcqPrice3], [AcqDate3], [AcqPrice4], [AcqDate4], [AcqPrice5], [AcqDate5], 1 as [SettlementMode],
																								@CBoardType as [BoardType], 'O' as [OrderStatus], [InterestDaysType], [InterestPaymentType], [PaymentModeOnMaturity], [PaymentInterestSpecificDate],
																								[PriceMode], [BitIsAmortized], [Posted], [PostedBy], [PostedTime], [Revised], [RevisedBy], [RevisedTime], @UsersID as [EntryUsersID], @LastUpdate as [EntryTime],
																								[UpdateUsersID], [UpdateTime], @UsersID as [ApprovedUsersID], @LastUpdate as [ApprovedTime], [VoidUsersID], [VoidTime], @UsersID as [EntryDealingID], @LastUpdate as [EntryDealingTime], 
																								@UsersID as [UpdateDealingID], @LastUpdate as [UpdateDealingTime], @UsersID as [ApprovedDealingID], @LastUpdate as [ApprovedDealingTime], [VoidDealingID], [VoidDealingTime],
																								@UsersID as [EntrySettlementID], @LastUpdate as [EntrySettlementTime], [UpdateSettlementID], [UpdateSettlementTime], [ApprovedSettlementID], [ApprovedSettlementTime], 
																								[VoidSettlementID], [VoidSettlementTime], [DBUserID], [DBTerminalID], @LastUpdate as [LastUpdate], [LastUpdateDB], 
																								[SelectedInvestment], [SelectedDealing], [SelectedSettlement], [BankBranchPK], [BankPK], [AcqVolume],
																								[AcqVolume1], [AcqVolume2], [AcqVolume3], [AcqVolume4], [AcqVolume5], [AcqPrice6], [AcqVolume6], [AcqDate6], [AcqPrice7], [AcqVolume7],
																								[AcqDate7], [AcqPrice8], [AcqVolume8], [AcqDate8], [AcqPrice9], [AcqVolume9], [AcqDate9], [TaxExpensePercent], [TrxBuy], [TrxBuyType] 
																							from Investment 
																							where InvestmentPK = @InvestmentPK and DealingPK = @DealingPK
																						end

																						if (@DoneLot - @CLot) = 0
																						begin
																							update Investment set 
																								StatusDealing = 3, OrderStatus = 'R', InvestmentNotes = 'Previous Split', 
																								UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
																							where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																								and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
																						end
																						else
																						begin
																							if @DoneLot > 0
																							begin
																								update Investment set 
																									BoardType = @CBoardType,
																									SettlementDate = @CSettledDate,
																									DoneLot = @DoneLot - isnull(@CLot, 0), 
																									DoneVolume = (@DoneLot - isnull(@CLot, 0)) * 100, 
																									DoneAmount = (@DoneLot - isnull(@CLot, 0)) * @DonePrice * 100, OrderStatus = 'P',
																									UpdateDealingID = @UsersID, UpdateDealingTime = @LastUpdate, LastUpdate = @LastUpdate 
																								where InvestmentPK = @InvestmentPK and ValueDate = @ValueDate and StatusInvestment = 2
																									and StatusDealing <> 3 and StatusSettlement <> 3 and DealingPK = @DealingPK and StatusDealing = 1
																							end                                 
																						end
																					end
																				end
																			end
																		end


																		

																		FETCH NEXT FROM AB 
																		INTO @CCounterpartID, @CBuySell,@CInstrumentID,@CPrice,@CLot,@CAmount,@CBoardType,@CValueDate,@CSettledDate
																	END;
 
																CLOSE AB; 
																DEALLOCATE AB;

																set @Counter = @Counter + 1

						                                end
						                                fetch next from curImport 
						                                into @Cp1
					                                end   
					                                close curImport
					                                deallocate curImport
				                                end 
												try
				                                begin catch
					                                rollback transaction
					                                set @success	= 0
					                                set @msg		= cast(error_message() as nvarchar(max))
				                                end catch

				                                if(@success = 1)
				                                begin
					                                commit transaction
					                                set @msg = 'Import Dealing Equity Success'
				                                end
			                                end
			                                else
			                                begin
				                                set @msg = 'Import Dealing Equity Canceled, import data does not exist in master instrument!'
			                                end
		                                end
		                                else
		                                begin
			                                set @msg = 'Import Dealing Equity Canceled, import data does not exist in master counterpart!'
		                                end
	                                end
	                                else
	                                begin
		                                set @msg = 'Import Dealing Equity Canceled, import data or data pending not found!'
	                                end
                                end
                                else
                                begin
	                                set @msg = 'Import Dealing Equity Canceled, import data not found!'
                                end

                                select @msg as ResultMsg
                            ";
                        cmd2.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd2.Parameters.AddWithValue("@UsersID", _userID);
                        cmd2.Parameters.AddWithValue("@LastUpdate", _now);
                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                        {
                            if (!dr2.HasRows)
                            {
                                _msg = "Import Dealing Equity Canceled, import data not found!";
                            }
                            else
                            {
                                dr2.Read();
                                _msg = Convert.ToString(dr2["ResultMsg"]);
                            }
                        }
                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean Settlement_ListingRptByDailyInstruction(string _userID, InvestmentRpt _investmentRpt)
        {
            #region Daily Security Transaction Instruction
            if (_investmentRpt.ReportName.Equals("Daily Security Transaction Instruction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            int _no = 1;
                            int _rowcellbuy, _rowcellsell;
                            string _rowcellbefore = "";
                            decimal _GrossAmountBuy, _GrossAmountSell, _BrokerageFeeBuy, _BrokerageFeeSell, _VATBuy, _VATSell, _LevyBuy, _LevySell, _SalexTaxBuy, _SalexTaxSell, _TotBeforeTaxBuy, _TotBeforeTaxSell, _TaxBrokerageBuy, _TaxBrokerageSell, _TotPaymentBuy, _TotPaymentSell;
                            _GrossAmountBuy = 0;
                            _GrossAmountSell = 0;
                            _BrokerageFeeBuy = 0;
                            _BrokerageFeeSell = 0;
                            _VATBuy = 0;
                            _VATSell = 0;
                            _LevyBuy = 0;
                            _LevySell = 0;
                            _SalexTaxBuy = 0;
                            _SalexTaxSell = 0;
                            _TotBeforeTaxBuy = 0;
                            _TotBeforeTaxSell = 0;
                            _TaxBrokerageBuy = 0;
                            _TaxBrokerageSell = 0;
                            _TotPaymentBuy = 0;
                            _TotPaymentSell = 0;

                            if (_investmentRpt.FundFrom != "0")
                            {
                                _paramFund = " And A.FundPK in ( " + _investmentRpt.FundFrom + " ) ";

                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText = @"
                               select isnull(D.Name,'') FundName,isnull(G.ID,'') CustodianID,isnull(F.ContactPerson,'') ContactPerson,isnull(F.Fax1,'') Fax,isnull(left(A.TrxTypeID,1),'') BS,
                                isnull(B.ID,'') SecurityCode,isnull(A.DoneVolume,0) Quantity,isnull(A.DonePrice,0) PriceShares,
                                isnull(A.DoneAmount,0) GrossAmount,isnull(A.CommissionAmount,0) BrokerageFee,isnull(A.VATAmount,0) VAT,isnull(A.LevyAmount,0) Levy,
                                isnull(A.IncomeTaxSellAmount,0) SalesTax,isnull(A.DoneAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount,0) TotalBeforeTax,
                                isnull(0.02*CommissionAmount,0) TaxBrokerageFee,isnull(A.DoneAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount - (0.02*CommissionAmount),0) TotalPayment,
                                isnull(C.ID,'') Broker,A.ValueDate TradeDate,A.SettlementDate from Investment A
                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                                left join Counterpart C on A.CounterpartPK = C.CounterpartPK and C.Status = 2
                                left join Fund D on A.FundPK = D.FundPK and D.Status = 2
                                left join FundCashRef E on A.FundPK = E.FundPK and E.Status = 2
                                left join BankBranch F on E.BankBranchPK = F.BankBranchPK and F.Status = 2
                                left join Bank G on F.BankPK = G.BankPK and G.Status = 2
                                where A.ValueDate = @dateto and A.InstrumentTypePK in (1) and A.StatusSettlement in (1,2)"
                            + _paramFund;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _investmentRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailySecurityTransactionInstruction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailySecurityTransactionInstruction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Security Transaction Instruction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailySecurityTransactionInstruction> rList = new List<DailySecurityTransactionInstruction>();
                                        while (dr0.Read())
                                        {

                                            DailySecurityTransactionInstruction rSingle = new DailySecurityTransactionInstruction();

                                            //rSingle.No = Convert.ToDecimal(dr0["No"]);
                                            rSingle.BS = Convert.ToString(dr0["BS"]);
                                            rSingle.SecurityCode = Convert.ToString(dr0["SecurityCode"]);
                                            rSingle.CustodianID = Convert.ToString(dr0["CustodianID"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.Fax = Convert.ToString(dr0["Fax"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.Quantity = Convert.ToDecimal(dr0["Quantity"]);
                                            rSingle.PriceShares = Convert.ToDecimal(dr0["PriceShares"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.BrokerageFee = Convert.ToDecimal(dr0["BrokerageFee"]);
                                            rSingle.VAT = Convert.ToDecimal(dr0["VAT"]);
                                            rSingle.Levy = Convert.ToDecimal(dr0["Levy"]);
                                            rSingle.SalesTax = Convert.ToDecimal(dr0["SalesTax"]);
                                            rSingle.TotalBeforeTax = Convert.ToDecimal(dr0["TotalBeforeTax"]);
                                            rSingle.TaxBrokerageFee = Convert.ToDecimal(dr0["TaxBrokerageFee"]);
                                            rSingle.TotalPayment = Convert.ToDecimal(dr0["TotalPayment"]);
                                            rSingle.Broker = Convert.ToString(dr0["Broker"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                orderby r.BS, r.SettlementDate ascending
                                                group r by new { r.SettlementDate, r.FundName, r.CustodianID, r.ContactPerson, r.Fax, r.TradeDate } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            _no = 1;
                                            _rowcellbefore = "";
                                            _GrossAmountBuy = 0;
                                            _GrossAmountSell = 0;
                                            _BrokerageFeeBuy = 0;
                                            _BrokerageFeeSell = 0;
                                            _VATBuy = 0;
                                            _VATSell = 0;
                                            _LevyBuy = 0;
                                            _LevySell = 0;
                                            _SalexTaxBuy = 0;
                                            _SalexTaxSell = 0;
                                            _TotBeforeTaxBuy = 0;
                                            _TotBeforeTaxSell = 0;
                                            _TaxBrokerageBuy = 0;
                                            _TaxBrokerageSell = 0;
                                            _TotPaymentBuy = 0;
                                            _TotPaymentSell = 0;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "DAILY SECURITY TRANSACTION INSTRUCTION";
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund:";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Custodian:";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.CustodianID;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Contact Person:";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.ContactPerson;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "Trade Date:";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.TradeDate;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fax No:";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Fax;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "Settlement Date:";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.SettlementDate;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel = incRowExcel + 2; ;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "B/S";
                                            worksheet.Cells[incRowExcel, 3].Value = "Security Code ";
                                            worksheet.Cells[incRowExcel, 4].Value = "Quantity";
                                            worksheet.Cells[incRowExcel, 5].Value = "Price Shares (IDR)";
                                            worksheet.Cells[incRowExcel, 6].Value = "Gross Amount (IDR)";
                                            worksheet.Cells[incRowExcel, 7].Value = "Brokerage Fee (IDR)";
                                            worksheet.Cells[incRowExcel, 8].Value = "VAT (IDR)";
                                            worksheet.Cells[incRowExcel, 9].Value = "Levy (IDR)";
                                            worksheet.Cells[incRowExcel, 10].Value = "Sales Tax (IDR)";
                                            worksheet.Cells[incRowExcel, 11].Value = "TotalBeforeTax (IDR)";
                                            worksheet.Cells[incRowExcel, 12].Value = "Tax Brokerage Fee (IDR)";
                                            worksheet.Cells[incRowExcel, 13].Value = "TotalPayment";
                                            worksheet.Cells[incRowExcel, 14].Value = "Broker";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["J" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;








                                            incRowExcel++;

                                            int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if ((_rowcellbefore == "B" && rsDetail.BS == "S"))
                                                {
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 5].Value = "SubTotal Buy";
                                                    worksheet.Cells[incRowExcel, 6].Value = _GrossAmountBuy;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7].Value = _BrokerageFeeBuy;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 8].Value = _VATBuy;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 9].Value = _LevyBuy;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 10].Value = _SalexTaxBuy;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 11].Value = _TotBeforeTaxBuy;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 12].Value = _TaxBrokerageBuy;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 13].Value = _TotPaymentBuy;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                    incRowExcel++;
                                                    _no = 1;
                                                }

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.BS;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SecurityCode;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Quantity;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PriceShares;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BrokerageFee;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.VAT;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Levy;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.SalesTax;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TotalBeforeTax;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.TaxBrokerageFee;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalPayment;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Broker;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                if (rsDetail.BS == "B")
                                                {
                                                    _GrossAmountBuy = _GrossAmountBuy + rsDetail.GrossAmount;
                                                    _BrokerageFeeBuy = _BrokerageFeeBuy + rsDetail.BrokerageFee;
                                                    _VATBuy = _VATSell + rsDetail.VAT;
                                                    _LevyBuy = _LevyBuy + rsDetail.Levy;
                                                    _SalexTaxBuy = _SalexTaxBuy + rsDetail.SalesTax;
                                                    _TotBeforeTaxBuy = _TotBeforeTaxBuy + rsDetail.TotalBeforeTax;
                                                    _TaxBrokerageBuy = _TaxBrokerageBuy + rsDetail.TaxBrokerageFee;
                                                    _TotPaymentBuy = _TotPaymentBuy + rsDetail.TotalPayment;
                                                }
                                                else if (rsDetail.BS == "S")
                                                {
                                                    _GrossAmountSell = _GrossAmountSell + rsDetail.GrossAmount;
                                                    _BrokerageFeeSell = _BrokerageFeeSell + rsDetail.BrokerageFee;
                                                    _VATSell = _VATSell + rsDetail.VAT;
                                                    _LevySell = _LevySell + rsDetail.Levy;
                                                    _SalexTaxSell = _SalexTaxSell + rsDetail.SalesTax;
                                                    _TotBeforeTaxSell = _TotBeforeTaxSell + rsDetail.TotalBeforeTax;
                                                    _TaxBrokerageSell = _TaxBrokerageSell + rsDetail.TaxBrokerageFee;
                                                    _TotPaymentSell = _TotPaymentSell + rsDetail.TotalPayment;
                                                }

                                                incRowExcel++;






                                                _rowcellbefore = rsDetail.BS;
                                                _no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            if (_rowcellbefore == "S")
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 5].Value = "Subtotal Sell";
                                                worksheet.Cells[incRowExcel, 6].Value = _GrossAmountSell;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Value = _BrokerageFeeSell;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8].Value = _VATSell;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = _LevySell;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = _SalexTaxSell;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Value = _TotBeforeTaxSell;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Value = _TaxBrokerageSell;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Value = _TotPaymentSell;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 5].Value = "Net Buy/Sell";
                                            worksheet.Cells[incRowExcel, 6].Value = _GrossAmountBuy - _GrossAmountSell;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 7].Value = _BrokerageFeeBuy - _BrokerageFeeSell;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Value = _VATBuy - _VATSell;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Value = _LevyBuy - _LevySell;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Value = _SalexTaxBuy - _SalexTaxSell;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Value = _TotBeforeTaxBuy - _TotBeforeTaxSell;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 12].Value = _TaxBrokerageBuy - _TaxBrokerageSell;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 13].Value = _TotPaymentBuy - _TotPaymentSell;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";




                                            incRowExcel++;
                                            incRowExcel++;

                                        }




                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 12;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).Width = 21;
                                        worksheet.Column(14).Width = 21;





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Daily Security Transaction Instruction";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            #region Daily Security Transaction Bond
            if (_investmentRpt.ReportName.Equals("Daily Security Transaction Bond"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
                            select isnull(D.Name,'') FundName,isnull(B.ID,'') InstrumentID,isnull(C.Name,'') CounterpartName,isnull(E.BankAccountNo,'') CashAccount,isnull(A.TrxTypeID,'') BS,
                            isnull(A.LastCouponDate,'') LastCouponDate,isnull(A.NextCouponDate,'') NextCouponDate,isnull(A.DoneVolume,0) FaceValue,isnull(MV.DescOne,'') SettlementType,isnull(A.IncomeTaxSellAmount,0) HoldingPeriodTax,
                            isnull(A.DonePrice,0) PricePercent,isnull(A.DoneAmount,0) PriceIDR,isnull(A.InterestPercent,0) AccruedInterestPercent,isnull(A.DoneAccruedInterest,0) AccruedInterestIDR,
                            isnull(A.IncomeTaxGainAmount,0) TaxCapitalGain,isnull(A.IncomeTaxinterestAmount,0) TaxAccruedInt,isnull(datediff(d,A.LastCouponDate,A.NextCouponDate),0) AccruedInterestDays,
                            isnull(A.IncomeTaxGainAmount + A.IncomeTaxinterestAmount ,0) TaxGainInt,isnull(A.DoneAmount + A.DoneAccruedInterest - A.IncomeTaxGainAmount - A.IncomeTaxinterestAmount + IncomeTaxGainAmount,0) TotalPayment,
                            A.ValueDate TradeDate,A.SettlementDate,isnull(A.MaturityDate,'') MaturityDate from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                            left join Counterpart C on A.CounterpartPK = C.CounterpartPK and C.Status = 2
                            left join Fund D on A.FundPK = D.FundPK and D.Status = 2
                            left join FundCashRef E on A.FundPK = E.FundPK and E.Status = 2
                            left join MasterValue MV on A.SettlementMode = MV.Code and MV.Status = 2 and MV.ID = 'SettlementMode'
                            where A.ValueDate = @dateto and A.StatusSettlement in (1,2) and A.InstrumentTypePK in (2,3,8,9,15)";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _investmentRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailySecurityTransactionBond" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailySecurityTransactionBond" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Security Transaction Bond");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailySecurityTransactionBond> rList = new List<DailySecurityTransactionBond>();
                                        while (dr0.Read())
                                        {

                                            DailySecurityTransactionBond rSingle = new DailySecurityTransactionBond();

                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.CashAccount = Convert.ToString(dr0["CashAccount"]);
                                            rSingle.BS = Convert.ToString(dr0["BS"]);
                                            rSingle.TradeDate = Convert.ToDateTime(dr0["TradeDate"]);
                                            rSingle.LastCouponDate = Convert.ToDateTime(dr0["LastCouponDate"]);
                                            rSingle.NextCouponDate = Convert.ToDateTime(dr0["NextCouponDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.SettlementType = Convert.ToString(dr0["SettlementType"]);
                                            rSingle.FaceValue = Convert.ToDecimal(dr0["FaceValue"]);
                                            rSingle.PricePercent = Convert.ToDecimal(dr0["PricePercent"]);
                                            rSingle.PriceIDR = Convert.ToDecimal(dr0["PriceIDR"]);
                                            rSingle.AccruedInterestDays = Convert.ToDecimal(dr0["AccruedInterestDays"]);
                                            rSingle.AccruedInterestPercent = Convert.ToDecimal(dr0["AccruedInterestPercent"]);
                                            rSingle.AccruedInterestIDR = Convert.ToDecimal(dr0["AccruedInterestIDR"]);
                                            rSingle.TaxCapitalGain = Convert.ToDecimal(dr0["TaxCapitalGain"]);
                                            rSingle.TaxAccruedInt = Convert.ToDecimal(dr0["TaxAccruedInt"]);
                                            rSingle.TaxGainInt = Convert.ToDecimal(dr0["TaxGainInt"]);
                                            rSingle.HoldingPeriodTax = Convert.ToDecimal(dr0["HoldingPeriodTax"]);
                                            rSingle.TotalPayment = Convert.ToDecimal(dr0["TotalPayment"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { r.FundName, r.TradeDate, r.SettlementDate, r.SettlementType, r.BS, r.CounterpartName, r.InstrumentID, r.CashAccount, r.MaturityDate } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Daily Security Transaction Bond";
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund:";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 7].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.TradeDate;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Buy/Sell:";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BS;
                                            worksheet.Cells[incRowExcel, 7].Value = "Settlement Date";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.SettlementDate;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "BondCode:";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;
                                            worksheet.Cells[incRowExcel, 7].Value = "Settlement Type";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.SettlementType;
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Broker:";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CounterpartName;
                                            worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.MaturityDate;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Cash Acc:";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CashAccount;


                                            incRowExcel++;
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "LastCouponDate";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Next Coupon Date";
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Face Value";
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Price";
                                            worksheet.Cells["D" + RowB + ":E" + RowB].Merge = true;
                                            worksheet.Cells["D" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 4].Value = "%";
                                            worksheet.Cells[RowG, 4, RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 5].Value = "IDR";
                                            worksheet.Cells[RowG, 5, RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Accrued Interest";
                                            worksheet.Cells["F" + RowB + ":H" + RowB].Merge = true;
                                            worksheet.Cells["F" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 6].Value = "Days";
                                            worksheet.Cells[RowG, 6, RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 7].Value = "Interest Percent";
                                            worksheet.Cells[RowG, 7, RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 8].Value = "IDR";
                                            worksheet.Cells[RowG, 8, RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Tax Capital Gain";
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Tax Accrued Int";
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Tax Gain & Int";
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Holding Period Tax";
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Total Payment";
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells["A" + RowB + ":M" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;


                                            incRowExcel++;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.LastCouponDate;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NextCouponDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FaceValue;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.PricePercent;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PriceIDR;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AccruedInterestDays;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AccruedInterestPercent;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AccruedInterestIDR;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TaxCapitalGain;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.TaxAccruedInt;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.TaxGainInt;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.HoldingPeriodTax;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalPayment;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;





                                                incRowExcel++;
                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;
                                            incRowExcel++;
                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 21;
                                        worksheet.Column(2).Width = 21;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 21;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 24;
                                        worksheet.Column(13).Width = 26;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Daily Security Transaction Bond";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_investmentRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }


        public int Investment_ApproveOMSBondBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInvestmentPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And InvestmentPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramInvestmentPK = " And InvestmentPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                                  
declare @investmentPK int
declare @historyPK int
declare @DealingPK int
declare @Notes nvarchar(500)
declare @OrderPrice numeric(22,8)
declare @Volume numeric(22,2)
declare @Amount numeric(22,0)
declare @AccruedInterest numeric(22,0)
Declare @TaxPercentageBond numeric(8,4)
Declare @TaxPercentageCapitalGain numeric(8,4)                        
Declare @FundPK int
declare @IncomeTaxGainAmount numeric(30,8)
declare @AccruedInterestDays int
declare @AccruedInterestAmount numeric(30,8)
declare @DaysOfHoldingInterest int
declare @ZDaysOfHoldingInterest int
declare @RDaysOfHoldingInterest int

declare @DaysOfLastCoupon int
declare @IncomeTaxInterestAmount numeric(30,8)
declare @ZIncomeTaxInterestAmount numeric(30,8)
declare @RIncomeTaxInterestAmount numeric(30,8)
declare @TotalTaxIncomeAmount numeric(30,8)
declare @TaxAmount numeric(30,8)
declare @LastCouponDate date
declare @SettlementDate date
Declare @TaxInterestPercent numeric(22,4)
Declare @ZTaxInterestPercent numeric(22,4)

Declare @CutOffDate date

declare @CutOffEndYear datetime
set @CutOffEndYear = '12/31/2020'
set @ZTaxInterestPercent = 5


declare @AcqDate1 datetime
declare @AcqDate2 datetime
declare @AcqDate3 datetime
declare @AcqDate4 datetime
declare @AcqDate5 datetime
declare @AcqDate6 datetime
declare @AcqDate7 datetime
declare @AcqDate8 datetime
declare @AcqDate9 datetime
declare @AcqDate10 datetime
declare @AcqDate11 datetime
declare @AcqDate12 datetime
declare @AcqDate13 datetime
declare @AcqDate14 datetime
declare @AcqDate15 datetime

if @ClientCode = '03'
    set @CutOffDate = '2019-10-18'
else if @ClientCode = '20'
    set @CutOffDate = '2020-06-19'
else if @ClientCode = '21'
    set @CutOffDate = '2020-08-05'
else if @ClientCode = '22'
    set @CutOffDate = '2020-08-28'

Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = '' and Status = 2   
    Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate)   
Select @Time,'InvestmentInstruction_RejectOMSBondBySelected','Investment',InvestmentPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Investment where ValueDate between @DateFrom and @DateTo and statusInvestment = 1 and SelectedInvestment  = 1  and  InstrumentTypePK = @InstrumentTypePK and TrxType = @TrxType

    DECLARE A CURSOR FOR 
	    Select InvestmentPK From investment 
	    where statusInvestment = 1 and ValueDate between @datefrom and @datefrom 
		" + _paramInvestmentPK + @" 
		and  InstrumentTypePK in (2,3,8,9,13,15) and TrxType = @TrxType 

Open A
Fetch Next From A
Into @InvestmentPK

While @@FETCH_STATUS = 0
BEGIN              
	declare @instrumentpk int
	declare @Price numeric(22,4)
	declare @DoneVolume numeric(22,4)
	declare @Counter int
	declare @maxFifoDate date

	if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	create table #tableFifoSelect
	(
		FifoBondPositionPK int,
		InvestmentPK int,
		AcqDate date,
		AcqVolume numeric(22,4),
		AcqPrice numeric(22,4)
	)
	CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	create table #tableInvest
	(
		FifoBondPositionPK int,
		InvesmentBuyPK int,
		InvesmentSellPK int,
		AcqDate date,
		AcqVolume numeric(22,4),
		AcqPrice numeric(22,4),
		RemainingVolume numeric(22,4)
	)
	CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	select @instrumentpk = InstrumentPK, @FundPK = FundPK, @volume = DoneVolume, @DoneVolume = DoneVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 1 and TrxType = 2

    select @maxFifoDate = isnull(max(CutOffDate),@CutOffDate) from FiFoBondPosition where status in (1,2) and FundPK = @fundpk and InstrumentPK = @instrumentpk

	if exists (select * from FiFoBondPosition where status in (1,2) and FundPK = @fundpk and InstrumentPK = @instrumentpk )
	begin

		insert into #tableFifoSelect(FifoBondPositionPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice)
		select A.FifoBondPositionPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice from (
		select FifoBondPositionPK,0 InvestmentPK,AcqDate,RemainingVolume DoneVolume,AcqPrice from FifoBondPosition 
				where FundPK = @fundpk and InstrumentPk = @instrumentpk and (RemainingVolume is null or RemainingVolume != 0) and status in (1,2)
				union all
				select 0,InvestmentBuyPK,AcqDate,RemainingVolume,AcqPrice from FifoBondPositionTemp
				where FundPK = @fundpk and InstrumentPK = @instrumentpk and (RemainingVolume is null or RemainingVolume != 0)
		)A 
		order by A.AcqDate,A.InvestmentPK
	end
	else
	begin
		insert into #tableFifoSelect(FifoBondPositionPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice)
		select A.A,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice from (
			select 0 A,InvestmentBuyPK InvestmentPK,AcqDate,RemainingVolume DoneVolume,AcqPrice from FifoBondPositionTemp
			where FundPK = @fundpk and InstrumentPK = @instrumentpk and (RemainingVolume is null or RemainingVolume != 0)
		)A 
		order by A.AcqDate,A.InvestmentPK
	end
								

	--select * from #tableFifoSelect
	--order by AcqDate

	set @Counter = 0

	declare @FifobondPositionPK int
	declare @AcqDate date
	declare @AcqVolume numeric(22,4)
	declare @AcqPrice numeric(22,4)
	declare @Query nvarchar(500)
	declare @InvestmentBuyPK int 

	DECLARE AB CURSOR FOR   
		select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate from #tableFifoSelect order by AcqDate
	OPEN AB  
	FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentBuyPK,@AcqVolume,@AcqPrice,@AcqDate
  
	WHILE @@FETCH_STATUS = 0  
	BEGIN  
		if @DoneVolume  - @AcqVolume > 0
		begin
			insert into #tableInvest(FifoBondPositionPK,InvesmentBuyPK,InvesmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
			select @FifobondPositionPK,@InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,0
		
			if @Counter = 0
				set @Query = 'update Investment set AcqDate = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume = ' + cast(@AcqVolume as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
			else
				set @Query = 'update Investment set AcqDate' + Cast(@Counter as nvarchar) + ' = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice' + Cast(@Counter as nvarchar) + ' = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume' + Cast(@Counter as nvarchar) + ' = ' + cast(@AcqVolume as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
			exec(@Query)

			if @FifobondPositionPK != 0
			update FiFoBondPosition set RemainingVolume = 0, investmentpk = @investmentpk where FiFoBondPositionPK = @FifobondPositionPK and status in (1,2)

			if @InvestmentBuyPK !=0
			begin
				if exists(select * from FiFoBondPositionTemp where InvestmentBuyPK = @InvestmentBuyPK and RemainingVolume != 0)
					update FifoBondPositionTemp set RemainingVolume = 0, InvestmentSellPK = @investmentpk where InvestmentBuyPK = @InvestmentBuyPK 
				else
					insert into FifoBondPositionTemp(InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume,FundPK,InstrumentPK)
					select @InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,0,@FundPK,@instrumentpk
			end

			set @DoneVolume = @DoneVolume - @AcqVolume
			set @Counter = @Counter + 1
		end
		else
		begin
			insert into #tableInvest(FifoBondPositionPK,InvesmentBuyPK,InvesmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
			select @FifobondPositionPK,@InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,@AcqVolume - @DoneVolume
		
			if @Counter = 0
				set @Query = 'update Investment set AcqDate = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume = ' + cast((@DoneVolume) as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
			else
				set @Query = 'update Investment set AcqDate' + Cast(@Counter as nvarchar) + ' = ''' + Cast(@AcqDate as nvarchar) +''', AcqPrice' + Cast(@Counter as nvarchar) + ' = ' + cast(@AcqPrice as nvarchar) + ', AcqVolume' + Cast(@Counter as nvarchar) + ' = ' + cast((@DoneVolume) as nvarchar) + ' where StatusInvestment = 1 and InvestmentPK = ' + cast(@InvestmentPK as nvarchar)
			exec(@Query)

			if @FifobondPositionPK != 0
			update FiFoBondPosition set RemainingVolume = @AcqVolume - @DoneVolume, investmentpk = @investmentpk where FiFoBondPositionPK = @FifobondPositionPK and status in (1,2)

			if @InvestmentBuyPK !=0
			begin
				if exists(select * from FiFoBondPositionTemp where InvestmentBuyPK = @InvestmentBuyPK and RemainingVolume != 0)
					update FifoBondPositionTemp set RemainingVolume = @AcqVolume - @DoneVolume, InvestmentSellPK = @investmentpk where InvestmentBuyPK = @InvestmentBuyPK
				else
					insert into FifoBondPositionTemp(InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume,FundPK,InstrumentPK)
					select @InvestmentBuyPK,@investmentpk,@AcqDate,@AcqVolume,@AcqPrice,@AcqVolume - @DoneVolume,@FundPK,@instrumentpk
			end


			break
		end
		
	FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentBuyPK,@AcqVolume,@AcqPrice,@AcqDate
	END  
  
	CLOSE AB  
	DEALLOCATE AB 

Fetch next From A Into @InvestmentPK
END
Close A
Deallocate A

                        
DECLARE A CURSOR FOR 
	    Select InvestmentPK,DealingPK,HistoryPK,InvestmentNotes,OrderPrice,Volume,Amount,AccruedInterest,FundPK,LastCouponDate,SettlementDate,10 From investment 
	    where statusInvestment = 1 and ValueDate between @datefrom and @datefrom " + _paramInvestmentPK + @" 
		and  InstrumentTypePK in (2,3,8,9,13,15) and TrxType = @TrxType 

Open A
Fetch Next From A
Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest,@FundPK,@LastCouponDate,@SettlementDate,@TaxInterestPercent

While @@FETCH_STATUS = 0
BEGIN
        if @TrxType = 2
            set @AccruedInterest = 0
        -- pecah acq 1
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice)/100 * AcqVolume, 
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
			@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
            
			
			if (@CutOffEndYear between case when @AcqDate <= @LastCouponDate then @LastCouponDate else @AcqDate end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)


				select @DaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)

				select @ZDaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)

				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
				
				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
            END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)

				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
				
				select @ZIncomeTaxInterestAmount = 0
			END
			
			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                                        
            if @TrxType = 2
            begin
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
            end
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 1)
		    begin
			    if (@CutOffEndYear between case when @AcqDate <= @LastCouponDate then @LastCouponDate else @AcqDate end and @SettlementDate)
			    BEGIN
                    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			        select @investmentPK,1,@TrxType,reference,AcqVolume,AcqDate,AcqPrice,AcqVolume * AcqPrice/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                END
                ELSE
                BEGIN
                    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
                    select @investmentPK,1,@TrxType,reference,AcqVolume,AcqDate,AcqPrice,AcqVolume * AcqPrice/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate is not null and AcqVolume != 0 and AcqPrice != 0)
                END

			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume,A.AcqDate = B.AcqDate,A.AcqPrice = B.AcqPrice,A.AcqAmount = B.AcqVolume * B.AcqPrice/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate is not null and B.AcqVolume != 0 and B.AcqPrice != 0)
		    end
	    end

	    -- pecah acq 2
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0))
	    begin

			select @IncomeTaxGainAmount = (DonePrice - AcqPrice1)/100 * AcqVolume1,@AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
			@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
            
			
			select @AcqDate1 = AcqDate1 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)

			if (@CutOffEndYear between case when @AcqDate1 <= @LastCouponDate then @LastCouponDate else @AcqDate1 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate1,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate1,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate1,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate1,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
		
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
		
				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
		
			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate1 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate1,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate1,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume1/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume1 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  
			from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 2)
		    begin
				if (@CutOffEndYear between case when @AcqDate1 <= @LastCouponDate then @LastCouponDate else @AcqDate1 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,2,@TrxType,reference,AcqVolume1,AcqDate1,AcqPrice1,AcqVolume1 * AcqPrice1/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,2,@TrxType,reference,AcqVolume1,AcqDate1,AcqPrice1,AcqVolume1 * AcqPrice1/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate1 is not null and AcqVolume1 != 0 and AcqPrice1 != 0)
				END
			end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume1,A.AcqDate = B.AcqDate1,A.AcqPrice = B.AcqPrice1,A.AcqAmount = B.AcqVolume1 * B.AcqPrice1/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate1 is not null and B.AcqVolume1 != 0 and B.AcqPrice1 != 0)
		    end
	    end

	    -- acq 3
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice2)/100 * AcqVolume2,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
            

			select @AcqDate2 = AcqDate2 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

			if (@CutOffEndYear between case when @AcqDate2 <= @LastCouponDate then @LastCouponDate else @AcqDate2 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate2,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate2,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate2,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate2,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate2 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate2,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate2,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate2 <= @LastCouponDate then @LastCouponDate else @AcqDate2 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume2,AcqDate2,AcqPrice2,AcqVolume2 * AcqPrice2/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume2,AcqDate2,AcqPrice2,AcqVolume2 * AcqPrice2/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate2 is not null and AcqVolume2 != 0 and AcqPrice2 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume2,A.AcqDate = B.AcqDate2,A.AcqPrice = B.AcqPrice2,A.AcqAmount = B.AcqVolume2 * B.AcqPrice2/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate2 is not null and B.AcqVolume2 != 0 and B.AcqPrice2 != 0)
		    end
	    end
	
	  
	  ----------------------------------------------------------------


	  	-- acq 4
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice3)/100 * AcqVolume3,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
            

			select @AcqDate3 = AcqDate3 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

			if (@CutOffEndYear between case when @AcqDate3 <= @LastCouponDate then @LastCouponDate else @AcqDate3 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate3,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate3,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate3,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate3,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate3 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate3,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate3,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume3/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume3 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end
			from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate3 <= @LastCouponDate then @LastCouponDate else @AcqDate3 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume3,AcqDate3,AcqPrice3,AcqVolume3 * AcqPrice3/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume3,AcqDate3,AcqPrice3,AcqVolume3 * AcqPrice3/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate3 is not null and AcqVolume3 != 0 and AcqPrice3 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume3,A.AcqDate = B.AcqDate3,A.AcqPrice = B.AcqPrice3,A.AcqAmount = B.AcqVolume3 * B.AcqPrice3/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate3 is not null and B.AcqVolume3 != 0 and B.AcqPrice3 != 0)
		    end
	    end
	

		-- acq 5
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice4)/100 * AcqVolume4,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
            

			select @AcqDate4 = AcqDate4 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

			if (@CutOffEndYear between case when @AcqDate4 <= @LastCouponDate then @LastCouponDate else @AcqDate4 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate4,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate4,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate4,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate4,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate4 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate4,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate4,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume4/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume4 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate4 <= @LastCouponDate then @LastCouponDate else @AcqDate4 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume4,AcqDate4,AcqPrice4,AcqVolume4 * AcqPrice4/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume4,AcqDate4,AcqPrice4,AcqVolume4 * AcqPrice4/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate4 is not null and AcqVolume4 != 0 and AcqPrice4 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume4,A.AcqDate = B.AcqDate4,A.AcqPrice = B.AcqPrice4,A.AcqAmount = B.AcqVolume4 * B.AcqPrice4/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate4 is not null and B.AcqVolume4 != 0 and B.AcqPrice4 != 0)
		    end
	    end
	


		-- acq 6
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice5)/100 * AcqVolume5,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
            

			select @AcqDate5 = AcqDate5 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

			if (@CutOffEndYear between case when @AcqDate5 <= @LastCouponDate then @LastCouponDate else @AcqDate5 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate5,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate5,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate5,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate5,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate5 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate5,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate5,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume5/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume5 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate5 <= @LastCouponDate then @LastCouponDate else @AcqDate5 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume5,AcqDate5,AcqPrice5,AcqVolume5 * AcqPrice5/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume5,AcqDate5,AcqPrice5,AcqVolume5 * AcqPrice5/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate5 is not null and AcqVolume5 != 0 and AcqPrice5 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume5,A.AcqDate = B.AcqDate5,A.AcqPrice = B.AcqPrice5,A.AcqAmount = B.AcqVolume5 * B.AcqPrice5/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate5 is not null and B.AcqVolume5 != 0 and B.AcqPrice5 != 0)
		    end
	    end
	


		-- acq 7
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice6)/100 * AcqVolume6,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
            

			select @AcqDate6 = AcqDate6 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

			if (@CutOffEndYear between case when @AcqDate6 <= @LastCouponDate then @LastCouponDate else @AcqDate6 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate6,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate6,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate6,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate6,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate6 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate6,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate6,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume6/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume6 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate6 <= @LastCouponDate then @LastCouponDate else @AcqDate6 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume6,AcqDate6,AcqPrice6,AcqVolume6 * AcqPrice6/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume6,AcqDate6,AcqPrice6,AcqVolume6 * AcqPrice6/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate6 is not null and AcqVolume6 != 0 and AcqPrice6 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume6,A.AcqDate = B.AcqDate6,A.AcqPrice = B.AcqPrice6,A.AcqAmount = B.AcqVolume6 * B.AcqPrice6/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate6 is not null and B.AcqVolume6 != 0 and B.AcqPrice6 != 0)
		    end
	    end
	


		-- acq 8
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice7)/100 * AcqVolume7,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
            

			select @AcqDate7 = AcqDate7 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

			if (@CutOffEndYear between case when @AcqDate7 <= @LastCouponDate then @LastCouponDate else @AcqDate7 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate7,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate7,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate7,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate7,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate7 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate7,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate7,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume7/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume7 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate7 <= @LastCouponDate then @LastCouponDate else @AcqDate7 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume7,AcqDate7,AcqPrice7,AcqVolume7 * AcqPrice7/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume7,AcqDate7,AcqPrice7,AcqVolume7 * AcqPrice7/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate7 is not null and AcqVolume7 != 0 and AcqPrice7 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume7,A.AcqDate = B.AcqDate7,A.AcqPrice = B.AcqPrice7,A.AcqAmount = B.AcqVolume7 * B.AcqPrice7/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate7 is not null and B.AcqVolume7 != 0 and B.AcqPrice7 != 0)
		    end
	    end
	


		-- acq 9
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice8)/100 * AcqVolume8,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
            

			select @AcqDate8 = AcqDate8 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

			if (@CutOffEndYear between case when @AcqDate8 <= @LastCouponDate then @LastCouponDate else @AcqDate8 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate8,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate8,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate8,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate8,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate8 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate8,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate8,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume8/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume8 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate8 <= @LastCouponDate then @LastCouponDate else @AcqDate8 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume8,AcqDate8,AcqPrice8,AcqVolume8 * AcqPrice8/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume8,AcqDate8,AcqPrice8,AcqVolume8 * AcqPrice8/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate8 is not null and AcqVolume8 != 0 and AcqPrice8 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume8,A.AcqDate = B.AcqDate8,A.AcqPrice = B.AcqPrice8,A.AcqAmount = B.AcqVolume8 * B.AcqPrice8/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate8 is not null and B.AcqVolume8 != 0 and B.AcqPrice8 != 0)
		    end
	    end
	

		-- acq 10
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice9)/100 * AcqVolume9,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
            

			select @AcqDate9 = AcqDate9 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

			if (@CutOffEndYear between case when @AcqDate9 <= @LastCouponDate then @LastCouponDate else @AcqDate9 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate9,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate9,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate9,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate9,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate9 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate9,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate9,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume9/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume9 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate9 <= @LastCouponDate then @LastCouponDate else @AcqDate9 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume9,AcqDate9,AcqPrice9,AcqVolume9 * AcqPrice9/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume9,AcqDate9,AcqPrice9,AcqVolume9 * AcqPrice9/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate9 is not null and AcqVolume9 != 0 and AcqPrice9 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume9,A.AcqDate = B.AcqDate9,A.AcqPrice = B.AcqPrice9,A.AcqAmount = B.AcqVolume9 * B.AcqPrice9/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate9 is not null and B.AcqVolume9 != 0 and B.AcqPrice9 != 0)
		    end
	    end
	


		-- acq 11
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice10)/100 * AcqVolume2,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
            

			select @AcqDate10 = AcqDate10 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)

			if (@CutOffEndYear between case when @AcqDate10 <= @LastCouponDate then @LastCouponDate else @AcqDate10 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate10 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate10,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate10,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate10 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate10,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate10,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate10 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate10 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate10,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate10,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume2/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume2 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate10 <= @LastCouponDate then @LastCouponDate else @AcqDate10 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume2,AcqDate10,AcqPrice10,AcqVolume2 * AcqPrice10/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume2,AcqDate10,AcqPrice10,AcqVolume2 * AcqPrice10/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate10 is not null and AcqVolume2 != 0 and AcqPrice10 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume2,A.AcqDate = B.AcqDate10,A.AcqPrice = B.AcqPrice10,A.AcqAmount = B.AcqVolume2 * B.AcqPrice10/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate10 is not null and B.AcqVolume2 != 0 and B.AcqPrice10 != 0)
		    end
	    end
	
	 
	 	-- acq 12
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice11)/100 * AcqVolume11,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
            

			select @AcqDate11 = AcqDate11 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)

			if (@CutOffEndYear between case when @AcqDate11 <= @LastCouponDate then @LastCouponDate else @AcqDate11 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate11 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate11,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate11,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate11 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate11,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate11,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate11 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume11/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume11 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume11/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume11 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume11/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume11 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate11 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate11,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate11,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume11/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume11 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate11 <= @LastCouponDate then @LastCouponDate else @AcqDate11 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume11,AcqDate11,AcqPrice11,AcqVolume11 * AcqPrice11/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume11,AcqDate11,AcqPrice11,AcqVolume11 * AcqPrice11/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate11 is not null and AcqVolume11 != 0 and AcqPrice11 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume11,A.AcqDate = B.AcqDate11,A.AcqPrice = B.AcqPrice11,A.AcqAmount = B.AcqVolume11 * B.AcqPrice11/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate11 is not null and B.AcqVolume11 != 0 and B.AcqPrice11 != 0)
		    end
	    end
	


		-- acq 13
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice12)/100 * AcqVolume12,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
            

			select @AcqDate12 = AcqDate12 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)

			if (@CutOffEndYear between case when @AcqDate12 <= @LastCouponDate then @LastCouponDate else @AcqDate12 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate12 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate12,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate12,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate12 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate12,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate12,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate12 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume12/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume12 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume12/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume12 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume12/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume12 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate12 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate12,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate12,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume12/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume12 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate12 <= @LastCouponDate then @LastCouponDate else @AcqDate12 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume12,AcqDate12,AcqPrice12,AcqVolume12 * AcqPrice12/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume12,AcqDate12,AcqPrice12,AcqVolume12 * AcqPrice12/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate12 is not null and AcqVolume12 != 0 and AcqPrice12 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume12,A.AcqDate = B.AcqDate12,A.AcqPrice = B.AcqPrice12,A.AcqAmount = B.AcqVolume12 * B.AcqPrice12/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate12 is not null and B.AcqVolume12 != 0 and B.AcqPrice12 != 0)
		    end
	    end
	

		-- acq 14
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice13)/100 * AcqVolume13,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
            

			select @AcqDate13 = AcqDate13 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)

			if (@CutOffEndYear between case when @AcqDate13 <= @LastCouponDate then @LastCouponDate else @AcqDate13 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate13 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate13,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate13,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate13 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate13,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate13,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate13 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume13/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume13 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume13/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume13 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume13/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume13 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate13 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate13,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate13,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume13/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume13 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate13 <= @LastCouponDate then @LastCouponDate else @AcqDate13 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume13,AcqDate13,AcqPrice13,AcqVolume13 * AcqPrice13/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume13,AcqDate13,AcqPrice13,AcqVolume13 * AcqPrice13/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate13 is not null and AcqVolume13 != 0 and AcqPrice13 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume13,A.AcqDate = B.AcqDate13,A.AcqPrice = B.AcqPrice13,A.AcqAmount = B.AcqVolume13 * B.AcqPrice13/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate13 is not null and B.AcqVolume13 != 0 and B.AcqPrice13 != 0)
		    end
	    end
	

		-- acq 15
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice14)/100 * AcqVolume14,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
            

			select @AcqDate14 = AcqDate14 from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)

			if (@CutOffEndYear between case when @AcqDate14 <= @LastCouponDate then @LastCouponDate else @AcqDate14 end and @SettlementDate)
			BEGIN
				select @RDaysOfHoldingInterest = case when AcqDate14 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate14,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate14,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
            
				select @DaysOfHoldingInterest = case when AcqDate14 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate14,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(AcqDate14,@CutOffEndYear) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,@CutOffEndYear) else dbo.FgetDateDiffCorporateBond(LastCouponDate,@CutOffEndYear) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
            
				select @ZDaysOfHoldingInterest = case when AcqDate14 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,@CutOffEndYear,SettlementDate) else dbo.FgetDateDiffCorporateBond(@CutOffEndYear,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
            

				select @RIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume14/ 1000000 * round(( InterestPercent * 1000000 * @RDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume14 * InterestPercent )/@DaysOfLastCoupon/100 * @RDaysOfHoldingInterest end 
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)


				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume14/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume14 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)

				select @ZIncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume14/ 1000000 * round(( InterestPercent * 1000000 * @ZDaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume14 * InterestPercent )/@DaysOfLastCoupon/100 * @ZDaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)

			END
			ELSE
			BEGIN
				select @DaysOfHoldingInterest = case when AcqDate14 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate14,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate14,SettlementDate) end else
				case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
            
				select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume14/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume14 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end
				from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)

			END

			select @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment 
			where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
				set @TotalTaxIncomeAmount = (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + (@IncomeTaxInterestAmount + isnull(@ZIncomeTaxInterestAmount,0))

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @ZTaxInterestPercent / 100) + (@ZIncomeTaxInterestAmount * @TaxInterestPercent / 100)


			 if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 3)
		    begin
				if (@CutOffEndYear between case when @AcqDate14 <= @LastCouponDate then @LastCouponDate else @AcqDate14 end and @SettlementDate)
			    BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume14,AcqDate14,AcqPrice14,AcqVolume14 * AcqPrice14/100,@IncomeTaxGainAmount ,@RDaysOfHoldingInterest,@RIncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
				END
				ELSE
				BEGIN
					insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
					select @investmentPK,3,@TrxType,reference,AcqVolume14,AcqDate14,AcqPrice14,AcqVolume14 * AcqPrice14/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate14 is not null and AcqVolume14 != 0 and AcqPrice14 != 0)
				END
			    
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume14,A.AcqDate = B.AcqDate14,A.AcqPrice = B.AcqPrice14,A.AcqAmount = B.AcqVolume14 * B.AcqPrice14/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate14 is not null and B.AcqVolume14 != 0 and B.AcqPrice14 != 0)
		    end
	    end
	

	------------------------------------------------------------------------------------------------
		-- acq 16
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice15)/100 * AcqVolume15, @DaysOfHoldingInterest = case when AcqDate15 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate15,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate15,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume15/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume15 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 16)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,16,@TrxType,reference,AcqVolume15,AcqDate15,AcqPrice15,AcqVolume15 * AcqPrice15/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate15 is not null and AcqVolume15 != 0 and AcqPrice15 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume15,A.AcqDate = B.AcqDate15,A.AcqPrice = B.AcqPrice15,A.AcqAmount = B.AcqVolume15 * B.AcqPrice15/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate15 is not null and B.AcqVolume15 != 0 and B.AcqPrice15 != 0)
		    end
	    end

		-- acq 17
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice16)/100 * AcqVolume16, @DaysOfHoldingInterest = case when AcqDate16 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate16,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate16,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume16/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume16 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 17)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,17,@TrxType,reference,AcqVolume16,AcqDate16,AcqPrice16,AcqVolume16 * AcqPrice16/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate16 is not null and AcqVolume16 != 0 and AcqPrice16 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume16,A.AcqDate = B.AcqDate16,A.AcqPrice = B.AcqPrice16,A.AcqAmount = B.AcqVolume16 * B.AcqPrice16/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate16 is not null and B.AcqVolume16 != 0 and B.AcqPrice16 != 0)
		    end
	    end

		-- acq 18
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice17)/100 * AcqVolume17, @DaysOfHoldingInterest = case when AcqDate17 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate17,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate17,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume17/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume17 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 18)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,18,@TrxType,reference,AcqVolume17,AcqDate17,AcqPrice17,AcqVolume17 * AcqPrice17/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate17 is not null and AcqVolume17 != 0 and AcqPrice17 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume17,A.AcqDate = B.AcqDate17,A.AcqPrice = B.AcqPrice17,A.AcqAmount = B.AcqVolume17 * B.AcqPrice17/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate17 is not null and B.AcqVolume17 != 0 and B.AcqPrice17 != 0)
		    end
	    end

		-- acq 19
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice18)/100 * AcqVolume18, @DaysOfHoldingInterest = case when AcqDate18 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate18,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate18,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume18/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume18 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 19)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,19,@TrxType,reference,AcqVolume18,AcqDate18,AcqPrice18,AcqVolume18 * AcqPrice18/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate18 is not null and AcqVolume18 != 0 and AcqPrice18 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume18,A.AcqDate = B.AcqDate18,A.AcqPrice = B.AcqPrice18,A.AcqAmount = B.AcqVolume18 * B.AcqPrice18/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate18 is not null and B.AcqVolume18 != 0 and B.AcqPrice18 != 0)
		    end
	    end

		-- acq 20
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice19)/100 * AcqVolume19, @DaysOfHoldingInterest = case when AcqDate19 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate19,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate19,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 360 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume19/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume19 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 20)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,20,@TrxType,reference,AcqVolume19,AcqDate19,AcqPrice19,AcqVolume19 * AcqPrice19/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate19 is not null and AcqVolume19 != 0 and AcqPrice19 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume19,A.AcqDate = B.AcqDate19,A.AcqPrice = B.AcqPrice19,A.AcqAmount = B.AcqVolume19 * B.AcqPrice19/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate19 is not null and B.AcqVolume19 != 0 and B.AcqPrice19 != 0)
		    end
	    end

		--acq 21
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice20)/100 * AcqVolume20, @DaysOfHoldingInterest = case when AcqDate20 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate20,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate20,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3200 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume20/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume20 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 21)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,21,@TrxType,reference,AcqVolume20,AcqDate20,AcqPrice20,AcqVolume20 * AcqPrice20/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate20 is not null and AcqVolume20 != 0 and AcqPrice20 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume20,A.AcqDate = B.AcqDate20,A.AcqPrice = B.AcqPrice20,A.AcqAmount = B.AcqVolume20 * B.AcqPrice20/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate20 is not null and B.AcqVolume20 != 0 and B.AcqPrice20 != 0)
		    end
	    end

		--acq 22
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice21)/100 * AcqVolume21, @DaysOfHoldingInterest = case when AcqDate21 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate21,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate21,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3210 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume21/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume21 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 22)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,22,@TrxType,reference,AcqVolume21,AcqDate21,AcqPrice21,AcqVolume21 * AcqPrice21/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate21 is not null and AcqVolume21 != 0 and AcqPrice21 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume21,A.AcqDate = B.AcqDate21,A.AcqPrice = B.AcqPrice21,A.AcqAmount = B.AcqVolume21 * B.AcqPrice21/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate21 is not null and B.AcqVolume21 != 0 and B.AcqPrice21 != 0)
		    end
	    end

		--acq 23
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice22)/100 * AcqVolume22, @DaysOfHoldingInterest = case when AcqDate22 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate22,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate22,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3220 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume22/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume22 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 23)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,23,@TrxType,reference,AcqVolume22,AcqDate22,AcqPrice22,AcqVolume22 * AcqPrice22/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate22 is not null and AcqVolume22 != 0 and AcqPrice22 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume22,A.AcqDate = B.AcqDate22,A.AcqPrice = B.AcqPrice22,A.AcqAmount = B.AcqVolume22 * B.AcqPrice22/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate22 is not null and B.AcqVolume22 != 0 and B.AcqPrice22 != 0)
		    end
	    end

		--acq 24
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice23)/100 * AcqVolume23, @DaysOfHoldingInterest = case when AcqDate23 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate23,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate23,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3230 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume23/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume23 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 24)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,24,@TrxType,reference,AcqVolume23,AcqDate23,AcqPrice23,AcqVolume23 * AcqPrice23/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate23 is not null and AcqVolume23 != 0 and AcqPrice23 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume23,A.AcqDate = B.AcqDate23,A.AcqPrice = B.AcqPrice23,A.AcqAmount = B.AcqVolume23 * B.AcqPrice23/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate23 is not null and B.AcqVolume23 != 0 and B.AcqPrice23 != 0)
		    end
	    end

		--acq 25
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice24)/100 * AcqVolume24, @DaysOfHoldingInterest = case when AcqDate24 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate24,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate24,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3240 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume24/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume24 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 25)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,25,@TrxType,reference,AcqVolume24,AcqDate24,AcqPrice24,AcqVolume24 * AcqPrice24/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate24 is not null and AcqVolume24 != 0 and AcqPrice24 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume24,A.AcqDate = B.AcqDate24,A.AcqPrice = B.AcqPrice24,A.AcqAmount = B.AcqVolume24 * B.AcqPrice24/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate24 is not null and B.AcqVolume24 != 0 and B.AcqPrice24 != 0)
		    end
	    end

		--acq 26
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice25)/100 * AcqVolume25, @DaysOfHoldingInterest = case when AcqDate25 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate25,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate25,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3250 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume25/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume25 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 26)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,26,@TrxType,reference,AcqVolume25,AcqDate25,AcqPrice25,AcqVolume25 * AcqPrice25/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate25 is not null and AcqVolume25 != 0 and AcqPrice25 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume25,A.AcqDate = B.AcqDate25,A.AcqPrice = B.AcqPrice25,A.AcqAmount = B.AcqVolume25 * B.AcqPrice25/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate25 is not null and B.AcqVolume25 != 0 and B.AcqPrice25 != 0)
		    end
	    end

		--acq 27
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice26)/100 * AcqVolume26, @DaysOfHoldingInterest = case when AcqDate26 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate26,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate26,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3260 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume26/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume26 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 27)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,27,@TrxType,reference,AcqVolume26,AcqDate26,AcqPrice26,AcqVolume26 * AcqPrice26/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate26 is not null and AcqVolume26 != 0 and AcqPrice26 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume26,A.AcqDate = B.AcqDate26,A.AcqPrice = B.AcqPrice26,A.AcqAmount = B.AcqVolume26 * B.AcqPrice26/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate26 is not null and B.AcqVolume26 != 0 and B.AcqPrice26 != 0)
		    end
	    end

		--acq 28
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice27)/100 * AcqVolume27, @DaysOfHoldingInterest = case when AcqDate27 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate27,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate27,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3270 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume27/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume27 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 28)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,28,@TrxType,reference,AcqVolume27,AcqDate27,AcqPrice27,AcqVolume27 * AcqPrice27/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate27 is not null and AcqVolume27 != 0 and AcqPrice27 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume27,A.AcqDate = B.AcqDate27,A.AcqPrice = B.AcqPrice27,A.AcqAmount = B.AcqVolume27 * B.AcqPrice27/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate27 is not null and B.AcqVolume27 != 0 and B.AcqPrice27 != 0)
		    end
	    end

		--acq 29
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice28)/100 * AcqVolume28, @DaysOfHoldingInterest = case when AcqDate28 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate28,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate28,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3280 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume28/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume28 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 29)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,29,@TrxType,reference,AcqVolume28,AcqDate28,AcqPrice28,AcqVolume28 * AcqPrice28/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate28 is not null and AcqVolume28 != 0 and AcqPrice28 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume28,A.AcqDate = B.AcqDate28,A.AcqPrice = B.AcqPrice28,A.AcqAmount = B.AcqVolume28 * B.AcqPrice28/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate28 is not null and B.AcqVolume28 != 0 and B.AcqPrice28 != 0)
		    end
	    end

		--acq 30
	    if exists (select * from Investment where InvestmentPK = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0))
	    begin
			select @IncomeTaxGainAmount = (DonePrice - AcqPrice29)/100 * AcqVolume29, @DaysOfHoldingInterest = case when AcqDate29 >= LastCouponDate then case when InstrumentTypePK in ( 2, 13 ) then datediff(day,AcqDate29,SettlementDate) else dbo.FgetDateDiffCorporateBond(AcqDate29,SettlementDate) end else
			case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end end,
            @AccruedInterestDays = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,SettlementDate) else dbo.FgetDateDiffCorporateBond(LastCouponDate,SettlementDate) end,
				@DaysOfLastCoupon = case when InstrumentTypePK in ( 2, 13 ) then datediff(day,LastCouponDate,NextCouponDate) * 2 else 3290 end 
            from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0)
            select @IncomeTaxInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume29/ 1000000 * round(( InterestPercent * 1000000 * @DaysOfHoldingInterest)/100/@DaysOfLastCoupon,0) else (AcqVolume29 * InterestPercent )/@DaysOfLastCoupon/100 * @DaysOfHoldingInterest end, 
            @AccruedInterestAmount = case when InstrumentTypePK in ( 2, 13 ) then AcqVolume/ 1000000 * round(( InterestPercent * 1000000 * @AccruedInterestDays)/100/@DaysOfLastCoupon,0) else (AcqVolume * InterestPercent )/@DaysOfLastCoupon/100 * @AccruedInterestDays end  from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0)

            if @TrxType = 2
                set @AccruedInterest = @AccruedInterest + @AccruedInterestAmount
			if @IncomeTaxGainAmount > @IncomeTaxInterestAmount
				set @TotalTaxIncomeAmount = @IncomeTaxInterestAmount
			else
				set @TotalTaxIncomeAmount = @IncomeTaxGainAmount + @IncomeTaxInterestAmount

			set @TaxAmount = (@TaxInterestPercent * @IncomeTaxGainAmount / 100) + (@IncomeTaxInterestAmount * @TaxInterestPercent / 100)
            if @TaxAmount < 0
                set @TaxAmount = 0

		    if not exists (select * from InvestmentTaxDataAcq where InvestmentPK = @investmentPK and AcqNo = 30)
		    begin
			    insert into InvestmentTaxDataAcq(InvestmentPK,AcqNo,TrxType,Reference,DoneAmount,AcqDate,AcqPrice,AcqAmount,IncomeTaxGainAmount,DaysOfHoldingInterest,IncomeTaxInterestAmount,TotalTaxIncomeAmount,TaxExpensePercent,TaxAmount)
			    select @investmentPK,30,@TrxType,reference,AcqVolume29,AcqDate29,AcqPrice29,AcqVolume29 * AcqPrice29/100,@IncomeTaxGainAmount ,@DaysOfHoldingInterest,@IncomeTaxInterestAmount,@TotalTaxIncomeAmount,@TaxInterestPercent,@TaxAmount from Investment where Investmentpk = @investmentPK and HistoryPK = @historyPK and (AcqDate29 is not null and AcqVolume29 != 0 and AcqPrice29 != 0)
		    end
		    else
		    begin
			    update A set A.Reference = B.Reference,A.DoneAmount = B.AcqVolume29,A.AcqDate = B.AcqDate29,A.AcqPrice = B.AcqPrice29,A.AcqAmount = B.AcqVolume29 * B.AcqPrice29/100, A.IncomeTaxGainAmount = @IncomeTaxGainAmount,A.DaysOfHoldingInterest = @DaysOfHoldingInterest,A.IncomeTaxInterestAmount = @IncomeTaxInterestAmount, A.TotalTaxIncomeAmount = @TotalTaxIncomeAmount, A.TaxExpensePercent = @TaxInterestPercent, A.TaxAmount = @TaxAmount from InvestmentTaxDataAcq A 
			    left join Investment B on A.InvestmentPK = B.InvestmentPK and B.HistoryPK = @historyPK and (B.AcqDate29 is not null and B.AcqVolume29 != 0 and B.AcqPrice29 != 0)
		    end
	    end

    if @TrxType = 1
    begin
	    Select @TaxPercentageBond = isnull(TaxPercentageBond,0),@TaxPercentageCapitalGain =  isnull(TaxPercentageCapitalGain,0) 
	    from FundAccountingSetup where status = 2 and FundPK = @FundPK
    end
    else
    begin
        Select @TaxPercentageBond = isnull(TaxPercentageBond,0),@TaxPercentageCapitalGain =  isnull(TaxPercentageCapitalGainSell,0)
	    from FundAccountingSetup where status = 2 and FundPK = @FundPK
    end

	Select @DealingPK = max(DealingPK) + 1 From investment
	if isnull(@DealingPK,0) = 0 
	BEGIN  Select @DealingPK = isnull(max(DealingPK),0) + 1 From investment 
	END  
	update Investment set DealingPK = @DealingPK, statusInvestment = 2, statusDealing = 1,InvestmentNotes=@Notes,DonePrice=@OrderPrice,DoneVolume=@Volume,AccruedInterest=@AccruedInterest,DoneAccruedInterest=@AccruedInterest,BoardType = 1 ,ApprovedUsersID = @ApprovedUsersID,ApprovedTime = @ApprovedTime ,EntryDealingID = @ApprovedUsersID,EntryDealingTime = @ApprovedTime ,LastUpdate=@LastUpdate
	,IncomeTaxInterestPercent = @TaxPercentageBond , IncomeTaxGainPercent = @TaxPercentageCapitalGain, TaxExpensePercent = @TaxPercentageBond
	where InvestmentPK = @InvestmentPK
                      
Fetch next From A Into @investmentPK,@DealingPK,@historyPK,@Notes,@OrderPrice,@Volume,@Amount,@AccruedInterest,@FundPK,@LastCouponDate,@SettlementDate,@TaxInterestPercent
END
Close A
Deallocate A 

Update Investment set SelectedInvestment  = 0



";



                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@UsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@ApprovedUsersID", _investment.ApprovedUsersID);
                        cmd.Parameters.AddWithValue("@ApprovedTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@Time", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_RejectDealingBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramDealingPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And DealingPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And DealingPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (2,3,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = "InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"
                        declare @InvestmentPK int
                        declare @DealingPK int
                        declare @HistoryPK int
                        declare @AcqPriceInv numeric(22,4)
                        declare @AcqVolumeInv numeric(22,4)
                        declare @AcqDateInv date
						declare @instrumentpk int
	                    declare @FundPK1 int
	                    declare @Price numeric(22,4)
	                    declare @volume numeric(22,4)
	                    declare @DoneVolume numeric(22,4)
	                    declare @RemainingVolume numeric(22,4)
	                    declare @maxFifoDate date
						declare @FifobondPositionPK int
	                    declare @Query nvarchar(500)
	                    declare @InvestmentSellPK int
	                    declare @InvestmentBuyPK int
	                    declare @AcqPrice numeric(22,4)
	                    declare @AcqVolume numeric(22,4)
	                    declare @AcqDate date

                        declare @tableInvestment table (
                            InvestmentPK int,
                            DealingPK int,
                            HistoryPK int,
                            InstrumentPK int,
                            FundPK int,
                            DoneVolume numeric(32,4),
                            AcqDate date,
                            AcqPrice numeric(19,8),
                            AcqVolume numeric(32,4)
                        )
 
                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate1 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate2 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate3 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate4 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate5 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate6 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate7 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate8 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate9 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate10,AcqPrice10,AcqVolume10 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate10 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate11,AcqPrice11,AcqVolume11 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate11 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate12,AcqPrice12,AcqVolume12 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate12 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate13,AcqPrice13,AcqVolume13 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate13 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate14,AcqPrice14,AcqVolume14 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate14 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate15,AcqPrice15,AcqVolume15 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate15 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate16,AcqPrice16,AcqVolume16 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate16 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate17,AcqPrice17,AcqVolume17 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate17 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate18,AcqPrice18,AcqVolume18 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate18 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate19,AcqPrice19,AcqVolume19 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate19 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate20,AcqPrice20,AcqVolume20 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate20 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate21,AcqPrice21,AcqVolume21 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate21 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate22,AcqPrice22,AcqVolume22 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate22 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate23,AcqPrice23,AcqVolume23 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate23 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate24,AcqPrice24,AcqVolume24 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate24 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate25,AcqPrice25,AcqVolume25 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate25 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate26,AcqPrice26,AcqVolume26 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate26 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate27,AcqPrice27,AcqVolume27 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate27 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate28,AcqPrice28,AcqVolume28 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate28 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        union all
                        select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate29,AcqPrice29,AcqVolume29 from Investment 
	                    where " + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1, 2) and AcqDate29 is not null "
                        + _paramFund + _paramCounterpart +
                        @"

                        DECLARE A CURSOR FOR 
	                        
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume from @tableInvestment

                            Open A
                        Fetch Next From A
                        Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                        While @@FETCH_STATUS = 0
                            BEGIN              
	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A

                        Update Investment set StatusDealing  = 3,statusSettlement = 0,OrderStatus = 'R', VoidDealingID = @VoidDealingID,VoidDealingTime = @VoidDealingTime,LastUpdate=@LastUpdate where "
                        + _paramInstrumentType + _paramTrxType + _paramDealingPK +
                        @" and ValueDate between @DateFrom and @DateTo and statusDealing in (1,2) "
                        + _paramFund + _paramCounterpart +
                        "--Update Investment set SelectedDealing  = 0";


                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@VoidDealingID", _investment.VoidDealingID);
                        cmd.Parameters.AddWithValue("@VoidDealingTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_RejectOMSBondBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramInvestmentPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramInvestmentPK = " And InvestmentPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramInvestmentPK = "  And InvestmentPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                            declare @InvestmentPK int
                            declare @DealingPK int
                            declare @HistoryPK int
                            declare @AcqPriceInv numeric(22,4)
                            declare @AcqVolumeInv numeric(22,4)
                            declare @AcqDateInv date
							declare @instrumentpk int
	                        declare @FundPK1 int
	                        declare @Price numeric(22,4)
	                        declare @volume numeric(22,4)
	                        declare @DoneVolume numeric(22,4)
	                        declare @RemainingVolume numeric(22,4)
	                        declare @maxFifoDate date
							declare @FifobondPositionPK int
	                        declare @Query nvarchar(500)
	                        declare @InvestmentSellPK int
	                        declare @InvestmentBuyPK int
	                        declare @AcqPrice numeric(22,4)
	                        declare @AcqVolume numeric(22,4)
	                        declare @AcqDate date

                            declare @tableInvestment table (
                                InvestmentPK int,
                                DealingPK int,
                                HistoryPK int,
                                InstrumentPK int,
                                FundPK int,
                                DoneVolume numeric(32,4),
                                AcqDate date,
                                AcqPrice numeric(19,8),
                                AcqVolume numeric(32,4)
                            )
 
                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate1 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate2 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate3 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate4 is not null "
                            + _paramFund +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate5 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate6 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate7 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate8 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate9 is not null "
                            + _paramFund +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate10,AcqPrice10,AcqVolume10 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate10 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate11,AcqPrice11,AcqVolume11 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate11 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate12,AcqPrice12,AcqVolume12 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate12 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate13,AcqPrice13,AcqVolume13 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate13 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate14,AcqPrice14,AcqVolume14 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate14 is not null "
                            + _paramFund +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate15,AcqPrice15,AcqVolume15 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate15 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate16,AcqPrice16,AcqVolume16 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate16 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate17,AcqPrice17,AcqVolume17 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate17 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate18,AcqPrice18,AcqVolume18 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate18 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate19,AcqPrice19,AcqVolume19 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate19 is not null "
                            + _paramFund +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate20,AcqPrice20,AcqVolume20 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate20 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate21,AcqPrice21,AcqVolume21 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate21 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate22,AcqPrice22,AcqVolume22 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate22 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate23,AcqPrice23,AcqVolume23 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate23 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate24,AcqPrice24,AcqVolume24 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate24 is not null "
                            + _paramFund +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate25,AcqPrice25,AcqVolume25 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate25 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate26,AcqPrice26,AcqVolume26 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate26 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate27,AcqPrice27,AcqVolume27 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2)  and AcqDate27 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate28,AcqPrice28,AcqVolume28 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate28 is not null "
                            + _paramFund +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate29,AcqPrice29,AcqVolume29 from Investment 
	                        where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" 
							and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) and AcqDate29 is not null "
                            + _paramFund +
                            @"

                            DECLARE A CURSOR FOR 

	                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume from @tableInvestment
							
                                Open A
                            Fetch Next From A
                            Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                            While @@FETCH_STATUS = 0
                            BEGIN              
	                            

	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A

                            Update Investment set StatusInvestment  = 3,statusDealing = 0,statusSettlement = 0,OrderStatus = 'R', VoidUsersID = @VoidUsersID,VoidTime = @VoidTime
                            where InstrumentTypePK  in (2,3,9,13,15) and TrxType = @TrxType " + _paramInvestmentPK + @" and ValueDate between @DateFrom and @DateTo and statusInvestment in  (1,2) 
                            " + _paramFund +
                            " Update Investment set SelectedInvestment  = 0";

                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@VoidUsersID", _investment.VoidUsersID);
                        cmd.Parameters.AddWithValue("@VoidTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public int Investment_RejectSettlementBySelected(Investment _investment)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _paramCounterpart = "";
                        string _paramInstrumentType = "";
                        string _paramTrxType = "";
                        string _paramSettlementPK = "";

                        if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                        {
                            _paramSettlementPK = " And SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramSettlementPK = " And SettlementPK in (0) ";
                        }
                        if (_investment.FundID != "0")
                        {
                            _paramFund = "And FundPK = @FundPK ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            _paramCounterpart = "And CounterpartPK = @CounterpartPK ";
                        }
                        else
                        {
                            _paramCounterpart = "";
                        }
                        if (_investment.InstrumentTypePK == 2)
                        {
                            _paramInstrumentType = " InstrumentTypePK in (2,3,9,13,15)  ";
                        }
                        else if (_investment.InstrumentTypePK == 1)
                        {
                            _paramInstrumentType = "InstrumentTypePK in (1,4,16)  ";
                        }
                        else
                        {
                            _paramInstrumentType = " InstrumentTypePK = @InstrumentTypePK";
                        }
                        if (_investment.InstrumentTypePK == 5 && _investment.TrxType == 1)
                        {
                            _paramTrxType = " and TrxType in (1,3) ";
                        }
                        else
                        {
                            _paramTrxType = " and TrxType = @TrxType ";
                        }

                        cmd.CommandText = @"
                            declare @InvestmentPK int
                            declare @DealingPK int
                            declare @HistoryPK int
                            declare @AcqPriceInv numeric(22,4)
                            declare @AcqVolumeInv numeric(22,4)
                            declare @AcqDateInv date
                            declare @instrumentpk int
	                        declare @FundPK1 int
	                        declare @Price numeric(22,4)
	                        declare @volume numeric(22,4)
	                        declare @DoneVolume numeric(22,4)
	                        declare @RemainingVolume numeric(22,4)
	                        declare @maxFifoDate date
                            declare @FifobondPositionPK int
	                        declare @Query nvarchar(500)
	                        declare @InvestmentSellPK int
	                        declare @InvestmentBuyPK int
	                        declare @AcqPrice numeric(22,4)
	                        declare @AcqVolume numeric(22,4)
	                        declare @AcqDate date

                            declare @tableInvestment table (
                                InvestmentPK int,
                                DealingPK int,
                                HistoryPK int,
                                InstrumentPK int,
                                FundPK int,
                                DoneVolume numeric(32,4),
                                AcqDate date,
                                AcqPrice numeric(19,8),
                                AcqVolume numeric(32,4)
                            )
 
                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate,AcqPrice,AcqVolume from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate1,AcqPrice1,AcqVolume1 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate1 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate2,AcqPrice2,AcqVolume2 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate2 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate3,AcqPrice3,AcqVolume3 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate3 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate4,AcqPrice4,AcqVolume4 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate4 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate5,AcqPrice5,AcqVolume5 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate5 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate6,AcqPrice6,AcqVolume6 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate6 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate7,AcqPrice7,AcqVolume7 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate7 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate8,AcqPrice8,AcqVolume8 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate8 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate9,AcqPrice9,AcqVolume9 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate9 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate10,AcqPrice10,AcqVolume10 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate10 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate11,AcqPrice11,AcqVolume11 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate11 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate12,AcqPrice12,AcqVolume12 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate12 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate13,AcqPrice13,AcqVolume13 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate13 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate14,AcqPrice14,AcqVolume14 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate14 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate15,AcqPrice15,AcqVolume15 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate15 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate16,AcqPrice16,AcqVolume16 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate16 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate17,AcqPrice17,AcqVolume17 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate17 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate18,AcqPrice18,AcqVolume18 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate18 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate19,AcqPrice19,AcqVolume19 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate19 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate20,AcqPrice20,AcqVolume20 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate20 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate21,AcqPrice21,AcqVolume21 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate21 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate22,AcqPrice22,AcqVolume22 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate22 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate23,AcqPrice23,AcqVolume23 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate23 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate24,AcqPrice24,AcqVolume24 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate24 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            insert into @tableInvestment(InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume)
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate25,AcqPrice25,AcqVolume25 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate25 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate26,AcqPrice26,AcqVolume26 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate26 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate27,AcqPrice27,AcqVolume27 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate27 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate28,AcqPrice28,AcqVolume28 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate28 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            union all
                            select InvestmentPK,DealingPK,HistoryPK,InstrumentPk,FundPk,DoneVolume,AcqDate29,AcqPrice29,AcqVolume29 from Investment 
	                        where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK +
                            @" and ValueDate between @DateFrom and @DateTo and statusSettlement in (1, 2) and AcqDate29 is not null "
                            + _paramFund + _paramCounterpart +
                            @"

                            DECLARE A CURSOR FOR 
	                            
                                select InvestmentPK,DealingPK,HistoryPK,InstrumentPK,FundPK,DoneVolume,AcqDate,AcqPrice,AcqVolume from @tableInvestment

                            Open A
                            Fetch Next From A
                            Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv

                            While @@FETCH_STATUS = 0
                            BEGIN              
	                            

	                            if object_id('tempdb..#tableFifoSelect', 'u') is not null drop table #tableFifoSelect 
	                            create table #tableFifoSelect
	                            (
		                            FifoBondPositionPK int,
									InvestmentBuyPK int,
		                            InvestmentPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            RemainingVolume numeric(22,4),
		                            AcqPrice numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableFifoSelectn ON #tableFifoSelect (FifoBondPositionPK,AcqDate);


	                            if object_id('tempdb..#tableInvest', 'u') is not null drop table #tableInvest 
	                            create table #tableInvest
	                            (
		                            FifoBondPositionPK int,
		                            InvesmentBuyPK int,
		                            InvesmentSellPK int,
		                            AcqDate date,
		                            AcqVolume numeric(22,4),
		                            AcqPrice numeric(22,4),
		                            RemainingVolume numeric(22,4)
	                            )
	                            CREATE CLUSTERED INDEX indx_tableInvest ON #tableInvest (FifoBondPositionPK,InvesmentBuyPK);

	                            insert into #tableFifoSelect(FifoBondPositionPK,InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume)
	                            select A.FifoBondPositionPK,InvestmentBuyPK,A.InvestmentPK, A.AcqDate, A.DoneVolume,A.AcqPrice,RemainingVolume from (
			                            select FifoBondPositionPK,0 InvestmentBuyPK,InvestmentPK,AcqDate,AcqVolume DoneVolume,AcqPrice,RemainingVolume from FifoBondPosition 
			                            where FundPK = @FundPK1 and InstrumentPk = @instrumentpk and status in (1,2) and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv
			                            union all
			                            select 0,InvestmentBuyPK,InvestmentSellPK,AcqDate,AcqVolume,AcqPrice,RemainingVolume from FifoBondPositionTemp
			                            where FundPK = @FundPK1 and InstrumentPK = @instrumentpk and AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv --and InvestmentSellPK <> 0
	                            )A 
	                            order by A.AcqDate					

	                            --select * from #tableFifoSelect
	                            --order by AcqDate
	                            -- @AcqDateInv,@AcqPriceInv,@AcqVolumeInv
	                            --order by AcqDate
	                            --select @AcqDateInv = AcqDate, @AcqPriceInv = AcqPrice, @AcqVolumeInv = AcqVolume from investment where InvestmentPK = @investmentpk and StatusInvestment = 2 and TrxType = 2
	

	                            
								
	                            DECLARE AB CURSOR FOR   
		                            select FifoBondPositionPK,InvestmentPK,AcqVolume,AcqPrice,AcqDate,RemainingVolume,InvestmentBuyPK from #tableFifoSelect where AcqPrice = @AcqPriceInv and AcqDate = @AcqDateInv order by AcqDate desc
	                            OPEN AB  
	                            FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
  
	                            WHILE @@FETCH_STATUS = 0  
	                            BEGIN  
		                            if @FifobondPositionPK = 0
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv ,@AcqVolume, @RemainingVolume,'101',@InvestmentBuyPK
			                            else
				                            update FifoBondPositionTemp set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentSellPK = 0 where InvestmentBuyPK = @InvestmentBuyPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
											--select @AcqVolume,'102', @RemainingVolume
									end
		                            else
		                            begin
			                            if (@AcqDate = @AcqDateInv and @AcqPrice = @AcqPriceInv and @DoneVolume = @AcqVolumeInv)
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDateInv and AcqPrice = @AcqPriceInv and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolumeInv + @RemainingVolume,'105'
			                            else
				                            update FifoBondPosition set RemainingVolume = @AcqVolumeInv + @RemainingVolume,InvestmentPK = 0 where InvestmentPK = @InvestmentPK and AcqDate = @AcqDate and AcqPrice = @AcqPrice and FundPK = @FundPK1 and InstrumentPK = @instrumentpk
				                            --select @AcqVolume,'109', @RemainingVolume, @DoneVolume, @AcqDate,@AcqPrice, @AcqVolumeInv
		                            end
		
		
		
	                                FETCH NEXT FROM AB INTO @FifoBondPositionPK,@InvestmentSellPK,@AcqVolume,@AcqPrice,@AcqDate,@RemainingVolume,@InvestmentBuyPK
	                            end
	                            CLOSE AB  
	                            DEALLOCATE AB 

                            Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@instrumentpk,@FundPK1,@DoneVolume,@AcqDateInv,@AcqPriceInv,@AcqVolumeInv
                            END
                            Close A
                            Deallocate A
                            

                            Update Investment set statusSettlement  = 3,OrderStatus = 'R', VoidSettlementID = @VoidSettlementID,VoidSettlementTime = @VoidSettlementTime
                            where " + _paramInstrumentType + _paramTrxType + _paramSettlementPK + " and ValueDate between @DateFrom and @DateTo and statusSettlement in (1,2) " + _paramFund + _paramCounterpart +
                            " --Update Investment set selectedSettlement  = 0";



                        if (_investment.FundID != "0")
                        {
                            cmd.Parameters.AddWithValue("@FundPK", _investment.FundID);
                        }
                        if (_investment.CounterpartID != "0")
                        {
                            cmd.Parameters.AddWithValue("@CounterpartPK", _investment.CounterpartID);
                        }
                        cmd.Parameters.AddWithValue("@DateFrom", _investment.DateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _investment.DateTo);
                        if (_investment.InstrumentTypePK != 2)
                        {
                            cmd.Parameters.AddWithValue("@InstrumentTypePK", _investment.InstrumentTypePK);
                        }
                        cmd.Parameters.AddWithValue("@TrxType", _investment.TrxType);
                        cmd.Parameters.AddWithValue("@VoidSettlementID", _investment.VoidSettlementID);
                        cmd.Parameters.AddWithValue("@VoidSettlementTime", _dateTimeNow);
                        cmd.Parameters.AddWithValue("@LastUpdate", _dateTimeNow);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    return Convert.ToInt32(dr["PK"]);
                                }
                            }
                            return 0;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public string GenerateFFS(string _userID, FundAccountingRpt _FundAccountingRpt)
        {
            try
            {

                #region Report_FFS
                int _templateType;
                _templateType = CheckTemplateTypeFFS(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.FundPK);

                string filePath = Tools.ReportsPath + "FundFactSheet_Report_FFS" + "_" + _userID + ".xlsx";
                string pdfPath = Tools.ReportsPath + "FundFactSheet_Report_FFS" + "_" + _userID + ".pdf";
                string _type;
                if (_templateType == 1)
                {
                    _type = "OpenEnd";
                }
                else if (_templateType == 2)
                {
                    _type = "WithoutBenchmark";
                }
                else
                {
                    _type = "Under1Year";
                }

                File.Copy(Tools.ReportsTemplatePath + "03\\FFS\\" + "Report_FFS_" + _type + ".xlsx", filePath, true);

                FileInfo existingFile = new FileInfo(filePath);
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {

                    ExcelWorksheet worksheet = package.Workbook.Worksheets["INPUT"];
                    using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                    {
                        DbCon01.Open();
                        using (SqlCommand cmd01 = DbCon01.CreateCommand())
                        {



                            cmd01.CommandText =
                            @"select * from CloseNav where  FundPK  = @FundPK and status  = 2 and Date = (
                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date
                                AND fundPK = @FundPK)
                                ";

                            cmd01.CommandTimeout = 0;
                            cmd01.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                            cmd01.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                            using (SqlDataReader dr01 = cmd01.ExecuteReader())
                            {
                                if (dr01.HasRows)
                                {
                                    #region NAB
                                    // NAV
                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon1.Open();
                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                        {
                                            cmd1.CommandText =

                                            @"  select A.DateFromZWorkingDays Date,AUM,Nav,isnull(A.ReturnLastMonth,0) ReturnLastMonth,isnull(A.Return3Month,0) Return3Month,
                                                isnull(A.Return6Month,0) Return6Month,isnull(A.ReturnLast1Year,0) ReturnLast1Year,isnull(A.ReturnYTD,0) ReturnYTD,
                                                isnull(A.ReturnInception,0)ReturnInception from ReturnNav A
                                                where A.FundPK = @FundPK and A.Date between '09/01/19' and @Date  and A.fundPK = @FundPK order by A.DateFromZWorkingDays  ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                            cmd1.ExecuteNonQuery();


                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets["NAB"];

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr1.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                    rSingle1.AUM = dr1["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["AUM"]);
                                                    rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                    rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                    rSingle1.Return3Month = dr1["Return3Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Month"]);
                                                    rSingle1.Return6Month = dr1["Return6Month"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return6Month"]);
                                                    rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                    rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);
                                                    rSingle1.ReturnInception = dr1["ReturnInception"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInception"]);


                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;


                                                int incRowExcel = 537;

                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {

                                                        worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.Date;
                                                        worksheet1.Cells[incRowExcel, 4].Value = rsDetail1.Nav;
                                                        worksheet1.Cells[incRowExcel, 13].Value = rsDetail1.AUM;
                                                        worksheet1.Cells[incRowExcel, 8].Value = rsDetail1.ReturnLastMonth;
                                                        worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.Return3Month;
                                                        worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.Return6Month;
                                                        worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.ReturnLast1Year;
                                                        worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnInception;
                                                        worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.ReturnYTD;

                                                        //worksheet1.Cells[incRowExcel, 15].Value = rsDetail1.RateIndex;
                                                        //worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                        //worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                        //worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnLast1YearIndex;
                                                        //worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                        //worksheet1.Cells[incRowExcel, 24].Value = rsDetail1.ReturnYTDIndex;

                                                        //worksheet1.Cells[incRowExcel, 26].Value = rsDetail1.Date;
                                                        //worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInception;
                                                        //worksheet1.Cells[incRowExcel, 29].Value = rsDetail1.ReturnInceptionIndex;


                                                        incRowExcel++;



                                                    }


                                                }



                                            }
                                        }
                                    }
                                    #endregion

                                    #region Infovesta
                                    //------------------------------------//

                                    // Kinerja dan Tolak Ukur
                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon1.Open();
                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                        {
                                            cmd1.CommandText =

                                            @"  select D.ID FundID,E.ID IndexID,B.DateFromZWorkingDays Date,B.Rate RateIndex,isnull(B.ReturnLastMonth,0) ReturnLastMonthIndex,isnull(B.Return3Month,0) Return3MonthIndex,
                                                isnull(B.Return6Month,0) Return6MonthIndex,isnull(B.ReturnLast1Year,0) ReturnLast1YearIndex,isnull(B.ReturnYTD,0) ReturnYTDIndex,isnull((B.Rate/C.InceptionIndex) - 1 ,0) ReturnInceptionIndex  from ReturnIndex B
                                                left join FFSSetup C on B.FundPK = C.FundPK and C.status = 2
                                                left join Fund D on B.FundPK = D.FundPK and D.status in (1,2)
                                                left join [Index] E on B.IndexPK = E.IndexPK and E.status in (1,2)
                                                where B.FundPK = @FundPK and B.Date between '09/01/19' and @Date and B.fundPK = @FundPK order by B.DateFromZWorkingDays  ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                            cmd1.ExecuteNonQuery();


                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Infovesta"];

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr1.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.Date = Convert.ToDateTime(dr1["Date"]);

                                                    rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                    rSingle1.ReturnLastMonthIndex = dr1["ReturnLastMonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonthIndex"]);
                                                    rSingle1.Return3Monthindex = dr1["Return3Monthindex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return3Monthindex"]);
                                                    rSingle1.Return6Monthindex = dr1["Return6MonthIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Return6MonthIndex"]);
                                                    rSingle1.ReturnLast1YearIndex = dr1["ReturnLast1YearIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1YearIndex"]);
                                                    rSingle1.ReturnYTDIndex = dr1["ReturnYTDIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTDIndex"]);
                                                    rSingle1.ReturnInceptionIndex = dr1["ReturnInceptionIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnInceptionIndex"]);
                                                    rSingle1.FundID = dr1["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["FundID"]);
                                                    rSingle1.IndexID = dr1["IndexID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["IndexID"]);

                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;


                                                int incRowExcel = 2;

                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {

                                                        worksheet1.Cells[incRowExcel, 16].Value = rsDetail1.Date;


                                                        worksheet1.Cells[incRowExcel, 17].Value = rsDetail1.RateIndex;
                                                        worksheet1.Cells[incRowExcel, 18].Value = rsDetail1.ReturnLastMonthIndex;
                                                        worksheet1.Cells[incRowExcel, 19].Value = rsDetail1.Return3Monthindex;
                                                        worksheet1.Cells[incRowExcel, 20].Value = rsDetail1.Return6Monthindex;
                                                        worksheet1.Cells[incRowExcel, 22].Value = rsDetail1.ReturnLast1YearIndex;
                                                        worksheet1.Cells[incRowExcel, 23].Value = rsDetail1.ReturnInceptionIndex;
                                                        worksheet1.Cells[incRowExcel, 21].Value = rsDetail1.ReturnYTDIndex;

                                                        worksheet1.Cells[1, 13].Value = rsDetail1.FundID;
                                                        worksheet1.Cells[1, 14].Value = rsDetail1.IndexID;


                                                        incRowExcel++;



                                                    }


                                                }



                                            }
                                        }
                                    }


                                    // InceptionIndex dan ReturnInceptionNAV
                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon1.Open();
                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                        {
                                            cmd1.CommandText =

                                            @" DECLARE @StartDate datetime
Declare @EndDate DATETIME
    

set @StartDate =  case when dbo.CheckTodayIsHoliday(dateadd(month, -12, @date)) = 1 then dbo.FWorkingDay(dateadd(month, -12, @date) ,-1) else dateadd(month, -12, @date) end
set @EndDate = @Date



Declare @BegDate datetime
Declare @NavCompare numeric(18,8)
Declare @IndexCompare numeric(18,8)
Declare @IndexPK int


select @IndexPK = IndexPK from FundIndex where status in (1,2) and FundPK = @FundPK

Declare @FFSFund TABLE 
(
	Date DATETIME,
	FundPK INT
)

DECLARE @FFSFundPK int
DECLARE @FFSDate datetime


INSERT INTO @FFSFund (Date,FundPK)
SELECT DISTINCT A.Date,FundPK FROM dbo.ZDT_WorkingDays A,dbo.Fund WHERE status = 2
AND A.date BETWEEN @StartDate AND @Date and FundPK = @FundPK


DECLARE @CloseNAV TABLE
(
	Date DATETIME,
	FundPK INT,
	AUM numeric(32,2),
	Nav numeric(22,8)
)

DECLARE @FFFundPK int
DECLARE @FFDate datetime
DECLARE @FFAUM numeric(32,2)
DECLARE @FFNav numeric(22,8)

INSERT INTO @CloseNAV
( Date, FundPK, AUM, Nav )
		
SELECT  A.Date,A.FundPK,B.AUM,B.Nav   from @FFSFund A
left join [CloseNAV] B  on A.FundPK = B.FundPK and B.status = 2       
 where B.DATE = (select max(date) From CloseNAV where date <= A.Date and FundPK = @FundPK and status = 2 and Nav > 0)  
 and A.FundPK= @FundPK   and status = 2  

  select @BegDate = Date, @NavCompare = Nav from @CloseNAV 
 where date = case when dbo.CheckTodayIsHoliday(dateadd(month, -12, @date)) = 1 then dbo.FWorkingDay(dateadd(month, -12, @date) ,-1) else dateadd(month, -12, @date)  end 
 order by date asc

 select @IndexCompare = CloseInd from BenchmarkIndex 
 where IndexPK = @IndexPK and date = case when dbo.CheckTodayIsHoliday(dateadd(month, -12, @date)) = 1 then dbo.FWorkingDay(dateadd(month, -12, @date) ,-1) else dateadd(month, -12, @date)  end 
 order by date asc

 select A.Date, (Nav/@NavCompare)-1 Nav, RateIndex from CloseNAV A
 LEFT JOIN             
(                   
 select B.Date,(CloseInd/@IndexCompare)-1 RateIndex from BenchmarkIndex B
 where B.Date between @BegDate and @Date and B.status = 2 and B.IndexPK = @IndexPK   
) C On A.Date = C.Date  

 where A.Date between @BegDate and @Date and A.status = 2 and A.FundPK = @FundPK 
 order by date  ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                            cmd1.ExecuteNonQuery();


                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Infovesta"];

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr1.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                    rSingle1.InceptionIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                    rSingle1.ReturnInceptionNAV = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;


                                                int incRowExcel = 2;

                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {

                                                        worksheet1.Cells[incRowExcel, 25].Value = rsDetail1.Date;
                                                        worksheet1.Cells[incRowExcel, 27].Value = rsDetail1.ReturnInceptionNAV;
                                                        worksheet1.Cells[incRowExcel, 28].Value = rsDetail1.InceptionIndex;


                                                        incRowExcel++;



                                                    }


                                                }



                                            }
                                        }
                                    }
                                    #endregion

                                    #region Kinerja Per Bln
                                    //-----------------------------------//
                                    // Kinerja Per bulan
                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon1.Open();
                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                        {
                                            cmd1.CommandText =

                                            @"  declare @datefrom date
                                                set @datefrom = DATEADD(mm, DATEDIFF(mm, 0, dateadd(year,-1,@Date)) , 0)
                                                select DateFromZWorkingDays Date,Nav,isnull(ReturnYTD,0) ReturnYTD,isnull(ReturnLastMonth,0) ReturnLastMonth,isnull(ReturnLast1Year,0) ReturnLast1Year from ReturnNav 
                                                where DateFromZWorkingDays between @datefrom and @Date and DateFromZWorkingDays = case when dbo.CheckTodayIsHoliday(EOMONTH(DateFromZWorkingDays)) = 0 then dbo.FWorkingDay((EOMONTH(DateFromZWorkingDays)),0) else dbo.FWorkingDay((EOMONTH(DateFromZWorkingDays)),-1) end
                                                and FundPK = @FundPK
                                                order by DateFromZWorkingDays asc  ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                            cmd1.ExecuteNonQuery();


                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets["Kinerja Per Bln"];

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr1.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                    rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                    rSingle1.ReturnLastMonth = dr1["ReturnLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLastMonth"]);
                                                    rSingle1.ReturnLast1Year = dr1["ReturnLast1Year"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnLast1Year"]);
                                                    rSingle1.ReturnYTD = dr1["ReturnYTD"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["ReturnYTD"]);

                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;


                                                int incRowExcel = 4;

                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {

                                                        worksheet1.Cells[incRowExcel, 1].Value = rsDetail1.Date;
                                                        worksheet1.Cells[incRowExcel, 2].Value = rsDetail1.Nav;
                                                        worksheet1.Cells[incRowExcel, 3].Value = rsDetail1.ReturnYTD;
                                                        worksheet1.Cells[incRowExcel, 5].Value = rsDetail1.ReturnLastMonth;
                                                        worksheet1.Cells[incRowExcel, 6].Value = rsDetail1.ReturnLast1Year;


                                                        incRowExcel++;



                                                    }


                                                }



                                            }
                                        }
                                    }
                                    #endregion

                                    #region FFSSetup Tulisan
                                    // FFSSetup Tulisan
                                    using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon2.Open();
                                        using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                        {
                                            cmd2.CommandText =

                                            @"  
                                           
                                                Declare @PeriodPK int
                                                Declare @BegBalance numeric(22,4)
                                                Declare @Movement numeric(22,4)
                                                Declare @StartOfyear datetime
                                                Declare @CSRBalance numeric(22,4)
                                                Declare @LastDate datetime

                                                select @PeriodPK = PeriodPK from Period where status = 2 and @Date between DateFrom and DateTo
                                                select @StartOfyear = DATEADD(yy, DATEDIFF(yy, 0, @Date), 0)

                                                select @BegBalance = sum(isnull(Amount,0)) from AgentCSRBegBalance where FundPK = @FundPK and PeriodPK = @PeriodPK 

                                                Declare @TableMovement table
                                                (
                                                 Date datetime,FundPK int,Amount numeric(18,4)
                                                )


                                                DECLARE A CURSOR FOR 
	                                                select distinct EOMONTH(Date) from ZDT_WorkingDays 
	                                                where Date between DATEADD(yy, DATEDIFF(yy, 0, @Date), 0) and @Date 
                                                Open A
                                                Fetch Next From A
                                                Into @LastDate       
                                                While @@FETCH_STATUS = 0
                                                BEGIN  

	                                                Insert into @TableMovement(Date,FundPK,Amount)
	                                                select Date,FundPK,isnull(NetDanaProgram,0) from AgentCSRDataForCommissionRpt where FundPK = @FundPK and Date = @LastDate

	
                                                Fetch next From A Into @LastDate              
                                                END
                                                Close A
                                                Deallocate A

                                                    select @Movement = sum(isnull(Amount,0)) from @TableMovement

                                                    select @CSRBalance =  @BegBalance +  @Movement



                                                    select Date,A.FundPK,B.ID FundID,isnull(D.ID,'') IndexID,isnull(Col1,'') Col1,isnull(Col2,'') Col2,isnull(col3,'') col3,isnull(col4,'') col4,isnull(col5,'') col5,
                                                    isnull(col6,'') col6,isnull(col7,'') col7,isnull(col8,'') col8,isnull(col9,'') col9,isnull(col10,'') col10,isnull(col11,'') col11,
                                                    isnull(col12,'') col12,isnull(col13,'') col13,isnull(col14,'') col14,isnull(col15,'') col15,isnull(col16,'') col16,isnull(@CSRBalance,'') col17,
                                                    isnull(col18,'') col18,isnull(col19,'') col19,isnull(col20,'') col20,isnull(col21,'') col21,isnull(col22,'') col22,isnull(col23,'') col23,
                                                    isnull(col24,'') col24,isnull(col25,'') col25,isnull(col26,'') col26,isnull(col27,'') col27,Image  from FFSSetup A
                                                    left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                    left join FundIndex C on A.FundPK = C.FundPK and C.status in (1,2)
                                                    left join [Index] D on C.IndexPK = D.IndexPK and D.status in (1,2)
                                                    where A.FundPK = @FundPK and Date = @Date and A.status = 2";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                            cmd2.ExecuteNonQuery();


                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets["FFS Setup"];
                                                ExcelWorksheet worksheet2 = package.Workbook.Worksheets["FINAL"];

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr2.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.Date = Convert.ToDateTime(dr2["Date"]);
                                                    rSingle1.FundPK = dr2["FundPK"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["FundPK"]);
                                                    rSingle1.Col1 = dr2["Col1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col1"]);
                                                    rSingle1.Col2 = dr2["Col2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col2"]);
                                                    rSingle1.Col3 = dr2["Col3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col3"]);
                                                    rSingle1.Col4 = dr2["Col4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col4"]);
                                                    rSingle1.Col5 = dr2["Col5"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col5"]);
                                                    rSingle1.Col6 = dr2["Col6"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col6"]);
                                                    rSingle1.Col7 = dr2["Col7"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col7"]);
                                                    rSingle1.Col8 = dr2["Col8"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col8"]);
                                                    rSingle1.Col9 = dr2["Col9"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col9"]);
                                                    rSingle1.Col10 = dr2["Col10"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col10"]);
                                                    rSingle1.Col11 = dr2["Col11"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col11"]);
                                                    rSingle1.Col12 = dr2["Col12"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col12"]);
                                                    rSingle1.Col13 = dr2["Col13"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col13"]);
                                                    rSingle1.Col14 = dr2["Col14"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col14"]);
                                                    rSingle1.Col15 = dr2["Col15"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col15"]);
                                                    rSingle1.Col16 = dr2["Col16"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col16"]);
                                                    rSingle1.Col17 = dr2["Col17"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col17"]);
                                                    rSingle1.Col18 = dr2["Col18"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col18"]);
                                                    rSingle1.Col19 = dr2["Col19"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col19"]);
                                                    rSingle1.Col20 = dr2["Col20"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col20"]);
                                                    rSingle1.Col21 = dr2["Col21"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col21"]);
                                                    rSingle1.Col22 = dr2["Col22"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col22"]);
                                                    rSingle1.Col23 = dr2["Col23"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col23"]);
                                                    rSingle1.Col24 = dr2["Col24"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["Col24"]);
                                                    rSingle1.Col25 = dr2["Col25"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col25"]);
                                                    rSingle1.Col26 = dr2["Col26"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col26"]);
                                                    rSingle1.Col27 = dr2["Col27"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Col27"]);
                                                    rSingle1.Image = dr2["Image"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["Image"]);
                                                    rSingle1.FundID = dr2["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["FundID"]);
                                                    rSingle1.IndexID = dr2["IndexID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["IndexID"]);

                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;


                                                int incRowExcel = 2;

                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {

                                                        worksheet1.Cells[2, 1].Value = rsDetail1.Col1;
                                                        worksheet1.Cells[4, 1].Value = rsDetail1.Col2;
                                                        worksheet1.Cells[6, 1].Value = rsDetail1.Col3;
                                                        worksheet1.Cells[8, 1].Value = rsDetail1.Col4;
                                                        worksheet1.Cells[10, 1].Value = rsDetail1.Col5;
                                                        worksheet1.Cells[12, 1].Value = rsDetail1.Col6;
                                                        worksheet1.Cells[14, 1].Value = rsDetail1.Col7;
                                                        worksheet1.Cells[16, 1].Value = rsDetail1.Col8;
                                                        worksheet1.Cells[18, 1].Value = rsDetail1.Col9;
                                                        worksheet1.Cells[20, 1].Value = rsDetail1.Col10;
                                                        worksheet1.Cells[22, 1].Value = rsDetail1.Col11;
                                                        worksheet1.Cells[24, 1].Value = rsDetail1.Col12;
                                                        worksheet1.Cells[26, 1].Value = rsDetail1.Col13;
                                                        worksheet1.Cells[28, 1].Value = rsDetail1.Col14;
                                                        worksheet1.Cells[30, 1].Value = rsDetail1.Col15;
                                                        worksheet1.Cells[32, 1].Value = rsDetail1.Col16;
                                                        worksheet1.Cells[34, 1].Value = rsDetail1.Col17;
                                                        worksheet1.Cells[36, 1].Value = rsDetail1.Col18;
                                                        worksheet1.Cells[38, 1].Value = rsDetail1.Col19;
                                                        worksheet1.Cells[40, 1].Value = rsDetail1.Col20;
                                                        worksheet1.Cells[42, 1].Value = rsDetail1.Col21;
                                                        worksheet1.Cells[46, 1].Value = rsDetail1.Col22;
                                                        worksheet1.Cells[48, 1].Value = rsDetail1.Col23;
                                                        worksheet1.Cells[50, 1].Value = rsDetail1.Col24;


                                                        worksheet2.Cells[59, 1].Value = rsDetail1.Col25;
                                                        worksheet2.Cells[60, 1].Value = rsDetail1.Col26;
                                                        worksheet2.Cells[61, 1].Value = rsDetail1.Col27;

                                                        worksheet2.Cells[17, 9].Value = rsDetail1.FundID;
                                                        //worksheet2.Cells[18, 9].Value = "*";
                                                        worksheet2.Cells[18, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        //worksheet2.Cells[19, 9].Value = "* " + rsDetail1.IndexID;
                                                        worksheet2.Cells[19, 9].Value = rsDetail1.IndexID;

                                                        worksheet2.Cells[51, 12].Value = rsDetail1.IndexID;




                                                        if (rsDetail1.Image == 1)
                                                        {

                                                            Image img = Image.FromFile(Tools.ReportImageFFS1);
                                                            ExcelPicture pic = worksheet2.Drawings.AddPicture("", img);
                                                            pic.SetPosition(53, 0, 0, 0);
                                                        }
                                                        else if (rsDetail1.Image == 2)
                                                        {

                                                            Image img = Image.FromFile(Tools.ReportImageFFS2);
                                                            ExcelPicture pic = worksheet2.Drawings.AddPicture("", img);
                                                            pic.SetPosition(53, 0, 0, 0);
                                                        }
                                                        else if (rsDetail1.Image == 3)
                                                        {

                                                            Image img = Image.FromFile(Tools.ReportImageFFS3);
                                                            ExcelPicture pic = worksheet2.Drawings.AddPicture("", img);
                                                            pic.SetPosition(53, 0, 0, 0);
                                                        }
                                                        else if (rsDetail1.Image == 4)
                                                        {

                                                            Image img = Image.FromFile(Tools.ReportImageFFS4);
                                                            ExcelPicture pic = worksheet2.Drawings.AddPicture("", img);
                                                            pic.SetPosition(53, 0, 0, 0);
                                                        }
                                                        else
                                                        {

                                                            Image img = Image.FromFile(Tools.ReportImageFFS5);
                                                            ExcelPicture pic = worksheet2.Drawings.AddPicture("", img);
                                                            pic.SetPosition(53, 0, 0, 0);
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion


                                    #region INPUT
                                    // Sekilas Pembahasan Manajer Investasi
                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon1.Open();
                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                        {
                                            cmd1.CommandText =

                                            @"  declare @Z table
(
Date datetime,
Rate numeric(18,8),
RateIndex numeric(18,8),
RateBINDO numeric(18,8)
)

insert into @Z

select distinct CR.Date,CR.Rate,F.RateIndex,G.RateBINDO from CurrencyRate CR
LEFT JOIN             
(                   
select  C.Date,C.CloseInd RateIndex from ReturnIndex B
left join BenchmarkIndex C on B.Date = C.Date  and C.status = 2 and B.IndexPK = C.IndexPK
where B.fundPK = @FundPK and B.Date = case when dbo.CheckTodayIsHoliday(DATEADD(month, DATEDIFF(month, 0, @Date), 0)) = 1 then dbo.fworkingday(DATEADD(month, DATEDIFF(month, 0, @Date), 0),1)  else DATEADD(month, DATEDIFF(month, 0, @Date), 0) end

) F On CR.Date = F.Date         
             
LEFT JOIN             
(                  
select  Date, CloseInd RateBINDO   from BenchmarkIndex
where IndexPK = 17 and Date = case when dbo.CheckTodayIsHoliday(DATEADD(month, DATEDIFF(month, 0, @Date), 0)) = 1 then dbo.fworkingday(DATEADD(month, DATEDIFF(month, 0, @Date), 0),1)  else DATEADD(month, DATEDIFF(month, 0, @Date), 0) end
and status in (1,2)
  
) G On CR.Date = G.Date        
where CR.Date = case when dbo.CheckTodayIsHoliday(DATEADD(month, DATEDIFF(month, 0, @Date), 0)) = 1 then dbo.fworkingday(DATEADD(month, DATEDIFF(month, 0, @Date), 0),1)  else DATEADD(month, DATEDIFF(month, 0, @Date), 0) end


UNION ALL



select  distinct CR.Date,CR.Rate,F.RateIndex,G.RateBINDO from CurrencyRate CR

LEFT JOIN             
(                   
select  C.Date,C.CloseInd RateIndex from ReturnIndex B
left join BenchmarkIndex C on B.Date = C.Date  and C.status = 2 and B.IndexPK = C.IndexPK
where B.fundPK = @fundPK and B.Date = @date     

) F On CR.Date = F.Date            
             
LEFT JOIN             
(                  
select  Date, CloseInd RateBINDO   from BenchmarkIndex
where IndexPK = 17 and Date =  @date  and status in (1,2)
  
) G On CR.Date = G.Date        
where CR.Date = @date and CR.status = 2   


select * from @Z
  ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);
                                            cmd1.ExecuteNonQuery();


                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                                ExcelWorksheet worksheet1 = package.Workbook.Worksheets["INPUT"];

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr1.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.Date = Convert.ToDateTime(dr1["Date"]);
                                                    rSingle1.Rate = dr1["Rate"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Rate"]);
                                                    rSingle1.RateIndex = dr1["RateIndex"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateIndex"]);
                                                    rSingle1.RateBINDO = dr1["RateBINDO"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["RateBINDO"]);

                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;


                                                int incRowExcel = 4;

                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {

                                                        worksheet1.Cells[incRowExcel, 9].Value = rsDetail1.Date;
                                                        worksheet1.Cells[incRowExcel, 10].Value = rsDetail1.Rate;
                                                        if (_templateType == 1)
                                                        {
                                                            worksheet1.Cells[incRowExcel, 11].Value = rsDetail1.RateIndex;
                                                        }
                                                        worksheet1.Cells[incRowExcel, 12].Value = rsDetail1.RateBINDO;

                                                        incRowExcel++;



                                                    }


                                                }



                                            }
                                        }
                                    }

                                    #endregion


                                    // NAV,AUM,UNIT
                                    using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon1.Open();
                                        using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                        {
                                            cmd1.CommandText =

                                            @" select A.AUM AUM,A.Nav Nav,sum(UnitAmount) Unit,C.MinSubs,C.EffectiveDate TanggalPeluncuran,
                                                G.DescOne JenisReksadana,F.ID MataUang,E.Name BankCustodian, C.SubscriptionFeePercent BiayaPembelian, 
                                                C.RedemptionFeePercent BiayaPenjualankembali, C.Name FundName from CloseNav A
                                                left join Fund C on A.FundPK = C.fundpk and C.status in (1,2)
                                                left join BankBranch D on C.BankBranchPK = D.BankBranchPK and D.status in (1,2)
                                                left join Bank E on D.BankPK = E.BankPK and E.status in (1,2)
                                                left join Currency F on C.CurrencyPK = F.CurrencyPK and F.status in (1,2)
                                                left join MasterValue G on C.Type = G.Code and G.ID = 'FundType' and G.status in (1,2)
                                                left join FundClientPosition B on A.FundPK = B.FundPK and B.Date  = (
                                                SELECT MAX(Date) FROM dbo.FundClientPosition WHERE Date < @Date 
                                                AND fundPK = @FundPK)
                                                where  A.FundPK  = @FundPK and A.status = 2 and A.Date  = (
                                                SELECT MAX(Date) FROM dbo.CloseNav WHERE Date <= @Date 
                                                AND fundPK = @FundPK)
                                                Group By A.AUM,A.NAV,C.MinSubs,C.EffectiveDate,G.DescOne,F.ID,E.Name,C.SubscriptionFeePercent,C.RedemptionFeePercent,C.Name ";

                                            cmd1.CommandTimeout = 0;
                                            cmd1.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd1.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                            cmd1.ExecuteNonQuery();


                                            using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList1 = new List<FFSSetup_03>();
                                                while (dr1.Read())
                                                {
                                                    FFSSetup_03 rSingle1 = new FFSSetup_03();
                                                    rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);
                                                    rSingle1.Nav = dr1["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Nav"]);
                                                    rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                    rSingle1.MinSubs = Convert.ToDecimal(dr1["MinSubs"]);
                                                    rSingle1.TanggalPeluncuran = Convert.ToDateTime(dr1["TanggalPeluncuran"]);
                                                    rSingle1.JenisReksadana = Convert.ToString(dr1["JenisReksadana"]);
                                                    rSingle1.MataUang = Convert.ToString(dr1["MataUang"]);
                                                    rSingle1.BankCustodian = Convert.ToString(dr1["BankCustodian"]);
                                                    rSingle1.BiayaPembelian = Convert.ToDecimal(dr1["BiayaPembelian"]);
                                                    rSingle1.BiayaPenjualankembali = Convert.ToDecimal(dr1["BiayaPenjualankembali"]);
                                                    rSingle1.FundName = Convert.ToString(dr1["FundName"]);

                                                    rList1.Add(rSingle1);

                                                }


                                                var QueryByFundID1 =
                                                    from r1 in rList1
                                                    group r1 by new { } into rGroup1
                                                    select rGroup1;



                                                foreach (var rsHeader1 in QueryByFundID1)
                                                {

                                                    foreach (var rsDetail1 in rsHeader1)
                                                    {
                                                        worksheet.Cells[2, 5].Value = _FundAccountingRpt.ValueDateFrom;
                                                        worksheet.Cells[2, 2].Value = rsDetail1.Nav;
                                                        worksheet.Cells[9, 5].Value = rsDetail1.AUM;
                                                        worksheet.Cells[10, 5].Value = rsDetail1.Unit;

                                                        worksheet.Cells[11, 5].Value = rsDetail1.MinSubs;
                                                        worksheet.Cells[12, 5].Value = rsDetail1.TanggalPeluncuran;
                                                        worksheet.Cells[13, 5].Value = rsDetail1.JenisReksadana;
                                                        worksheet.Cells[14, 5].Value = rsDetail1.MataUang;
                                                        worksheet.Cells[15, 5].Value = rsDetail1.BankCustodian;
                                                        worksheet.Cells[16, 5].Value = rsDetail1.BiayaPembelian;
                                                        worksheet.Cells[17, 5].Value = rsDetail1.BiayaPenjualankembali;
                                                        worksheet.Cells[18, 5].Value = rsDetail1.FundName;


                                                    }


                                                }



                                            }
                                        }
                                    }


                                    // Allocation of Investment
                                    using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon2.Open();
                                        using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                        {
                                            cmd2.CommandText =

                                            @"
                                                                 declare @MV Table
                                                                (
                                                                Date datetime,
                                                                FundPK int,
                                                                MarketValue numeric(22,2)
                                                                )
	
                                                                declare @A Table
                                                                (
                                                                InstrumentType nvarchar(50),
                                                                ExposurePercent numeric(22,8)
                                                                )


                                                                INSERT INTO @MV
                                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                                (
                                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                                ) AND status = 2 AND FundPK = @FundPK
                                                                group by Date,FundPK


                                                                insert into @A
                                                                select case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType ,
                                                                isnull(round(cast(sum(A.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from FundPosition A
                                                                left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
                                                                left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status in (1,2)  
                                                                and A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
                                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                                left join MasterValue D on C.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                                left join @MV E on A.FundPK = E.FundPK and A.Date = E.Date
                                                                where D.DescOne is not null and B.InstrumentTypePK <> 5
                                                                group by D.DescOne 

                                                                if exists(select * from @A)
                                                                BEGIN
	                                                                select * from @A
	                                                                union all
	                                                                select 'Money Market',1 - sum(ExposurePercent) from @A 
                                                                END
                                                                ELSE
                                                                BEGIN
	                                                                select 'Money Market' InstrumentType,1 ExposurePercent
                                                                END ";

                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd2.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                            cmd2.ExecuteNonQuery();


                                            using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList2 = new List<FFSSetup_03>();
                                                while (dr2.Read())
                                                {
                                                    FFSSetup_03 rSingle2 = new FFSSetup_03();
                                                    rSingle2.InstrumentType = Convert.ToString(dr2["InstrumentType"]);
                                                    rSingle2.ExposurePercent = Convert.ToDecimal(dr2["ExposurePercent"]);
                                                    rList2.Add(rSingle2);

                                                }


                                                var QueryByFundID2 =
                                                    from r2 in rList2
                                                    group r2 by new { } into rGroup2
                                                    select rGroup2;



                                                foreach (var rsHeader2 in QueryByFundID2)
                                                {
                                                    int incRowExcel = 13;
                                                    foreach (var rsDetail2 in rsHeader2)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail2.InstrumentType;
                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail2.ExposurePercent;
                                                        incRowExcel++;
                                                    }


                                                }



                                            }
                                        }
                                    }



                                    // Allocation of Sector
                                    using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon3.Open();
                                        using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                        {
                                            cmd3.CommandText =

                                            @"
                                                             declare @MV Table
                                                (
                                                Date datetime,
                                                FundPK int,
                                                MarketValue numeric(22,2)
                                                )


                                                declare @Sector Table
                                                (
                                                SectorName nvarchar(200),
                                                InstrumentType nvarchar(50),
                                                ExposurePercent numeric(22,4)
                                                )

                                                declare @SectorName Table
                                                (
                                                SectorName nvarchar(200),
                                                ExposurePercent numeric(22,4)
                                                )
	

                                                INSERT INTO @MV
                                                SELECT Date,FundPK,sum(AUM) CloseNAV FROM dbo.CloseNAV WHERE Date = 
                                                (
                                                select max(date) from CloseNAV  where date <= @Date and FundPK = @FundPK and status  = 2
                                                ) AND status = 2 AND FundPK = @FundPK
                                                group by Date,FundPK


                                                insert into @Sector
                                                select isnull(lower(G.Name),'No Sector Equity') SectorName,case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)  
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)  
                                                where D.DescOne is not null and A.GroupType in (1)
                                                group by G.Name,D.DescOne


                                                union all
                                                select 'Fixed Income',case when D.DescOne = 'BOND/FIXED INCOME' then 'Fixed Income' 
                                                else case when D.DescOne = 'EQUITY/SAHAM' then 'Equity' else 'Money Market' end end InstrumentType,
                                                isnull(round(cast(sum(C.MarketValue/E.MarketValue) as numeric(22,8)),4),0) ExposurePercent  from InstrumentType A
                                                left join Instrument B on A.InstrumentTypePK = B.InstrumentTypePK and B.status in (1,2)
                                                left join FundPosition C on B.InstrumentPK = C.InstrumentPK and C.status in (1,2)  
                                                and C.FundPK  = @FundPK and A.status  = 2 and C.Date = 
                                                (select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2)
                                                left join MasterValue D on A.GroupType = D.Code and D.status in (1,2) and D.ID = 'InstrumentGroupType'
                                                left join @MV E on C.FundPK = E.FundPK and C.Date = E.Date
                                                left join SubSector F on B.SectorPK = F.SubSectorPK and F.status in (1,2)
                                                left join Sector G on F.SectorPK = G.SectorPK and F.status in (1,2)    
                                                where D.DescOne is not null and A.GroupType in (2)
                                                group by D.DescOne



                                                 if exists(select * from @Sector)
                                                BEGIN
	                                                insert into @SectorName
	                                                select SectorName,ExposurePercent from @Sector
	                                                union all
	                                                select 'Money Market',1 - sum(ExposurePercent) from @Sector 
                                                END
                                                ELSE
                                                BEGIN
	                                                insert into @SectorName
	                                                select 'Money Market',1 ExposurePercent
                                                END



                                                select substring(Upper(SectorName),1,1) + substring(SectorName, 2, LEN(SectorName)) SectorName
                                                , ExposurePercent from @SectorName where ExposurePercent > 0 order by ExposurePercent desc ";

                                            cmd3.CommandTimeout = 0;
                                            cmd3.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd3.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                            cmd3.ExecuteNonQuery();


                                            using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList3 = new List<FFSSetup_03>();
                                                while (dr3.Read())
                                                {
                                                    FFSSetup_03 rSingle3 = new FFSSetup_03();
                                                    rSingle3.SectorName = Convert.ToString(dr3["SectorName"]);
                                                    rSingle3.ExposurePercent = Convert.ToDecimal(dr3["ExposurePercent"]);
                                                    rList3.Add(rSingle3);

                                                }


                                                var QueryByFundID3 =
                                                    from r3 in rList3
                                                    group r3 by new { } into rGroup3
                                                    select rGroup3;



                                                foreach (var rsHeader3 in QueryByFundID3)
                                                {
                                                    int incRowExcel = 36;
                                                    foreach (var rsDetail3 in rsHeader3)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail3.SectorName;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail3.ExposurePercent;
                                                        incRowExcel++;
                                                    }


                                                }



                                            }
                                        }
                                    }


                                    // Top 5 Holding
                                    using (SqlConnection DbCon4 = new SqlConnection(Tools.conString))
                                    {
                                        DbCon4.Open();
                                        using (SqlCommand cmd4 = DbCon4.CreateCommand())
                                        {
                                            cmd4.CommandText =

                                            @"
                                                 
declare @A table
(
InstrumentID nvarchar(100), MV numeric(22,2),InstrumentTypePK int
)					

insert into @A	

select top 5 InstrumentID,MV,InstrumentTypePK from (																								
select  A.InstrumentPK,B.Name InstrumentID, sum(MarketValue) MV,B.InstrumentTypePK from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2) and B.InstrumentTypePK <> 5
group by A.InstrumentPK,B.Name,B.InstrumentTypePK
union all
select  A.BankPK,C.ID, sum(MarketValue) MV,B.InstrumentTypePK from FundPosition A
left join Instrument B on A.InstrumentPK =  B.InstrumentPK and B.status in (1,2)
left join Bank C on B.BankPK =  C.BankPK and C.status in (1,2)
where A.FundPK  = @FundPK and A.status  = 2 and A.Date = 
(select max(date) from FundPosition  where date <= @Date and FundPK = @FundPK and status  = 2) and B.InstrumentTypePK = 5
group by A.BankPK,C.ID,B.InstrumentTypePK
) C
order by MV Desc



select case when InstrumentTypePK = 5 then 'TD ' + InstrumentID else InstrumentID end InstrumentID from @A
order by InstrumentID asc ";

                                            cmd4.CommandTimeout = 0;
                                            cmd4.Parameters.AddWithValue("@Date", _FundAccountingRpt.ValueDateFrom);
                                            cmd4.Parameters.AddWithValue("@FundPK", _FundAccountingRpt.FundPK);

                                            cmd4.ExecuteNonQuery();


                                            using (SqlDataReader dr4 = cmd4.ExecuteReader())
                                            {

                                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES

                                                //ATUR DATA GROUPINGNYA DULU
                                                List<FFSSetup_03> rList4 = new List<FFSSetup_03>();
                                                while (dr4.Read())
                                                {
                                                    FFSSetup_03 rSingle4 = new FFSSetup_03();
                                                    rSingle4.InstrumentID = Convert.ToString(dr4["InstrumentID"]);
                                                    rList4.Add(rSingle4);

                                                }


                                                var QueryByFundID4 =
                                                    from r4 in rList4
                                                    group r4 by new { } into rGroup4
                                                    select rGroup4;



                                                foreach (var rsHeader4 in QueryByFundID4)
                                                {
                                                    int incRowExcel = 26;
                                                    foreach (var rsDetail4 in rsHeader4)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail4.InstrumentID;
                                                        incRowExcel++;
                                                    }


                                                }



                                            }
                                        }
                                    }




                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    //worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];


                                }


                            }

                        }
                    }


                    package.Save();
                    return filePath;
                }

                #endregion


            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public int CheckTemplateTypeFFS(DateTime _date, int _fundPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                       
                        
                        declare @DateLast1Year datetime
                        declare @IssueDate datetime
                        declare @TemplateType int

                        set @DateLast1Year =  dateadd(month, -12, @date)


                        select @IssueDate = IssueDate,@TemplateType = TemplateType from FFSSetup A
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                        where A.status = 2 and A.FundPK = @FundPK and Date = 
                        (
                        select max(date) from FFSSetup where status = 2 and FundPK = @FundPK
                        )


                        IF (@IssueDate > @DateLast1Year)
                        BEGIN
	                        select 3 Result
                        END
                        ELSE
                        BEGIN
	                        select @TemplateType Result
                        END
                        ";

                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                return Convert.ToInt32(dr["Result"]);
                            }
                            return Convert.ToInt32(dr["Result"]);
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public OMSBondForNetAmount Get_NetAmountSellBond(DateTime _dateFrom, DateTime _dateTo)
        {
            try
            {
                DateTime _dateTimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    OMSBondForNetAmount M_OMSBond = new OMSBondForNetAmount();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
 
                    Declare @DealingPK int
                    Declare @InvestmentPK int
                    Declare @HistoryPK int
                    Declare @ValueDate datetime
                    Declare @InstrumentPK int
                    Declare @InstrumentTypePK int
                    Declare @SettledDate datetime
                    Declare @NextCouponDate datetime
                    Declare @LastCouponDate datetime
                    Declare @TrxType int
                    Declare @Price numeric(18,4)
                    Declare @Volume numeric(18,4)
                    Declare @AcqPrice numeric(18,4)
                    Declare @AcqDate datetime
                    Declare @AcqVolume numeric(18,4)
                    Declare @TaxCapitaGainPercent numeric(18,4)
                    Declare @IncomeTaxInterestPercent numeric(18,4)
                    Declare @BitIsRounding bit

                    Declare @AcqPrice1 numeric(18,4)
                    Declare @AcqDate1 datetime
                    Declare @AcqVolume1 numeric(18,4)
                    Declare @AcqPrice2 numeric(18,4)
                    Declare @AcqDate2 datetime
                    Declare @AcqVolume2 numeric(18,4)
                    Declare @AcqPrice3 numeric(18,4)
                    Declare @AcqDate3 datetime
                    Declare @AcqVolume3 numeric(18,4)
                    Declare @AcqPrice4 numeric(18,4)
                    Declare @AcqDate4 datetime
                    Declare @AcqVolume4 numeric(18,4)
                    Declare @AcqPrice5 numeric(18,4)
                    Declare @AcqDate5 datetime
                    Declare @AcqVolume5 numeric(18,4)
                    Declare @AcqPrice6 numeric(18,4)
                    Declare @AcqDate6 datetime
                    Declare @AcqVolume6 numeric(18,4)
                    Declare @AcqPrice7 numeric(18,4)
                    Declare @AcqDate7 datetime
                    Declare @AcqVolume7 numeric(18,4)
                    Declare @AcqPrice8 numeric(18,4)
                    Declare @AcqDate8 datetime
                    Declare @AcqVolume8 numeric(18,4)
                    Declare @AcqPrice9 numeric(18,4)
                    Declare @AcqDate9 datetime
                    Declare @AcqVolume9 numeric(18,4)


                    Declare @TaxExpensePercent numeric(8,4)

                    Declare @Days int
                    Declare @DivDays int
                    Declare @InterestDays int

                    Declare @CurrencyID nvarchar(20)
                    Declare @CouponRate numeric(8,4)
                    Declare @InterestType int
                    Declare @InterestDaysType int
                    Declare @InterestPaymentType int



                    Declare @AccuredInterestAmount numeric(22,4)
                    Declare @GrossAmount numeric(22,4)
                    Declare @NetAmount numeric(22,4)
                    Declare @ValuePerUnit int

                    Declare		@DaysAcq_2		int,
                    @DaysAcq1_2					int,
                    @DaysAcq2_2					int,
                    @DaysAcq3_2					int,
                    @DaysAcq4_2					int,
                    @DaysAcq5_2					int,
                    @DaysAcq6_2					int,
                    @DaysAcq7_2					int,
                    @DaysAcq8_2					int,
                    @DaysAcq9_2					int,
                    @CapGainAcq					decimal(22,4),
                    @CapGainAcq1				decimal(22,4),
                    @CapGainAcq2				decimal(22,4),
                    @CapGainAcq3				decimal(22,4),
                    @CapGainAcq4				decimal(22,4),
                    @CapGainAcq5				decimal(22,4),
                    @CapGainAcq6				decimal(22,4),
                    @CapGainAcq7				decimal(22,4),
                    @CapGainAcq8				decimal(22,4),
                    @CapGainAcq9				decimal(22,4),
                    @TaxCapGainAcq				decimal(22,4),
                    @TaxCapGainAcq1				decimal(22,4),
                    @TaxCapGainAcq2				decimal(22,4),
                    @TaxCapGainAcq3				decimal(22,4),
                    @TaxCapGainAcq4				decimal(22,4),
                    @TaxCapGainAcq5				decimal(22,4),
                    @TaxCapGainAcq6				decimal(22,4),
                    @TaxCapGainAcq7				decimal(22,4),
                    @TaxCapGainAcq8				decimal(22,4),
                    @TaxCapGainAcq9				decimal(22,4),
                    @AIAcq					decimal(22,4),
                    @AIAcq1					decimal(22,4),
                    @AIAcq2					decimal(22,4),
                    @AIAcq3					decimal(22,4),
                    @AIAcq4					decimal(22,4),
                    @AIAcq5					decimal(22,4),
                    @AIAcq6					decimal(22,4),
                    @AIAcq7					decimal(22,4),
                    @AIAcq8					decimal(22,4),
                    @AIAcq9					decimal(22,4),
                    @TaxAIAcq				decimal(22,4),
                    @TaxAIAcq1				decimal(22,4),
                    @TaxAIAcq2				decimal(22,4),
                    @TaxAIAcq3				decimal(22,4),
                    @TaxAIAcq4				decimal(22,4),
                    @TaxAIAcq5				decimal(22,4),
                    @TaxAIAcq6				decimal(22,4),
                    @TaxAIAcq7				decimal(22,4),
                    @TaxAIAcq8				decimal(22,4),
                    @TaxAIAcq9				decimal(22,4),
                    @TotalCapGain			decimal(22,4),
                    @TotalAI				decimal(22,4),
                    @TotalTaxCapGain		decimal(22,4),
                    @TotalTaxAI				decimal(22,4)




                    DECLARE A CURSOR FOR 

                    Select A.InvestmentPK,A.DealingPK,A.HistoryPK,A.ValueDate,A.InstrumentPK,A.InstrumentTypePK,
                    A.SettlementDate,A.NextCouponDate,A.LastCouponDate,
                    A.TrxType,A.OrderPrice,A.Volume,A.AcqPrice,A.AcqDate,
                    A.AcqVolume,A.IncomeTaxGainPercent,A.IncomeTaxInterestPercent,
                    A.BitIsRounding,
                    A.TaxExpensePercent,
                    C.ID,A.InterestPercent,B.InterestType, 
                    B.InterestDaysType,12/D.Priority,
                    A.AcqPrice1,A.AcqDate1,A.AcqVolume1,A.AcqPrice2,A.AcqDate2,A.AcqVolume2,A.AcqPrice3,A.AcqDate3,A.AcqVolume3,
                    A.AcqPrice4,A.AcqDate4,A.AcqVolume4,A.AcqPrice5,A.AcqDate5,A.AcqVolume5,A.AcqPrice6,A.AcqDate6,A.AcqVolume6,
                    A.AcqPrice7,A.AcqDate7,A.AcqVolume7,A.AcqPrice8,A.AcqDate8,A.AcqVolume8,A.AcqPrice9,A.AcqDate9,A.AcqVolume9
                    From Investment A
                    left join instrument B on A.InstrumentPK = B.instrumentPK and B.status = 2
                    left join Currency C on B.CurrencyPK = C.CurrencyPK and C.status = 2
                    left join MasterValue D on B.InterestPaymentType = D.Code and D.Status = 2 and D.ID = 'InterestPaymentType'
                    where StatusDealing = 1 and ValueDate between @DateFrom and @DateTo and TrxType = 2 and A.InstrumentTypePK in (2,3,9,13,15) 
                    and SelectedDealing = 1 

                    Open A
                    Fetch Next From A
                    Into @InvestmentPK,@DealingPK,@HistoryPK,@ValueDate,@InstrumentPK,@InstrumentTypePK,
                    @SettledDate,@NextCouponDate,@LastCouponDate,
                    @TrxType, @Price,@Volume,@AcqPrice,@AcqDate,
                    @AcqVolume,@TaxCapitaGainPercent,@IncomeTaxInterestPercent,
                    @BitIsRounding,@TaxExpensePercent,
                    @CurrencyID,@CouponRate,@InterestType, 
                    @InterestDaysType,@InterestPaymentType,
                    @AcqPrice1,@AcqDate1,@AcqVolume1,@AcqPrice2,@AcqDate2,@AcqVolume2,@AcqPrice3,@AcqDate3,@AcqVolume3,
                    @AcqPrice4,@AcqDate4,@AcqVolume4,@AcqPrice5,@AcqDate5,@AcqVolume5,@AcqPrice6,@AcqDate6,@AcqVolume6,
                    @AcqPrice7,@AcqDate7,@AcqVolume7,@AcqPrice8,@AcqDate8,@AcqVolume8,@AcqPrice9,@AcqDate9,@AcqVolume9

                    While @@FETCH_STATUS = 0
                    BEGIN  

                    set @TotalCapGain	 = 0	
                    set @TotalAI		 = 0
                    set @TotalTaxCapGain = 0	
                    set @TotalTaxAI		 = 0	

                    if @CurrencyID = 'IDR'
                    begin	
                    if @InterestType = 3 --ZERO COUPONT
                    BEGIN
                    set @AccuredInterestAmount = 0
                    set @GrossAmount = @Volume * @price/100

                    if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
                    begin
                    set @ValuePerUnit = 1000000
                    set @DivDays = 0

                    set @Days = 0

                    set @InterestDays	= case when @InterestDaysType in (3) 
                    then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari

                    set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100)  else 0 end

                    set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end

                    set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) 
                    when @TrxType = 1 then((@Price - @AcqPrice2) * @AcqVolume2 / 100) else 0 end

                    set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) 
                    when @TrxType = 1 then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100) else 0 end

                    set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) else 0 end

                    set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) else 0 end

                    set @CapGainAcq6 = case when @TrxType = 2 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100) else 0 end

                    set @CapGainAcq7 = case when @TrxType = 2 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100) else 0 end

                    set @CapGainAcq8 = case when @TrxType = 2 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100) else 0 end

                    set @CapGainAcq9 = case when @TrxType = 2 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100) else 0 end

                    set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq6	= @CapGainAcq6 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq7	= @CapGainAcq7 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq8	= @CapGainAcq8 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq9	= @CapGainAcq9 * @TaxCapitaGainPercent / 100

                    end
	
                    if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
                    begin
		
                    set @ValuePerUnit = 1
                    set @DivDays = 0
			
                    set @Days = 0
		
                    set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,@SettledDate)) end -- pembagi hari

                    set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * @AcqVolume / 100) when @TrxType = 1 then  ((@Price - @AcqPrice) * @AcqVolume / 100)  else 0 end
                    set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) when @TrxType = 1 then  ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end
                    set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) when @TrxType = 1 then  ((@Price - @AcqPrice2) * @AcqVolume2 / 100)  else 0 end
                    set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) when @TrxType = 1 then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100)  else 0 end
                    set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) when @TrxType = 1 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100)  else 0 end
                    set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) when @TrxType = 1 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100)  else 0 end
                    set @CapGainAcq6 = case when @TrxType = 2 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100) when @TrxType = 1 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100)  else 0 end
                    set @CapGainAcq7 = case when @TrxType = 2 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100) when @TrxType = 1 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100)  else 0 end
                    set @CapGainAcq8 = case when @TrxType = 2 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100) when @TrxType = 1 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100)  else 0 end
                    set @CapGainAcq9 = case when @TrxType = 2 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100) when @TrxType = 1 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100)  else 0 end



                    set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq6	= @CapGainAcq6 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq7	= @CapGainAcq7 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq8	= @CapGainAcq8 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq9	= @CapGainAcq9 * @TaxCapitaGainPercent / 100
		
                    end
	
                    END
                    ELSE
                    BEGIN
                    if @InterestDaysType in (2,3,4) -- [Govt Bond] <-> ACT/ACT , ACT/360 (3), ACT/365
                    begin

                    set @ValuePerUnit = 1000000
                    set @DivDays = case when @InterestDaysType in (3) 
                    then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @NextCouponDate)) 
	                    else abs(datediff(day, @NextCouponDate, @LastCouponDate)) end -- pembagi hari

                    set @Days = case when @InterestDaysType in (3) 
                    then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) 
	                    else abs(datediff(day, @SettledDate, @LastCouponDate)) end -- pembagi hari

                    set @InterestDays	= case when @InterestDaysType in (3) 
                    then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end -- pembagi hari

                    set @DaysAcq_2 = case when @InterestDaysType in (3) then case when @AcqDate <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate, @SettledDate)) end else case when @AcqDate <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate)) end end -- total hari [acq date > prev coupon date]

                    set @DaysAcq1_2	= case when @InterestDaysType in (3) then case when @AcqDate1 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate1, @SettledDate)) end else case when @AcqDate1 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate1)) end end -- total hari [acq date 1 > prev coupon date]

                    set @DaysAcq2_2	= case when @InterestDaysType in (3) then case when @AcqDate2 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate2, @SettledDate)) end else case when @AcqDate2 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate2)) end end -- total hari [acq date 2 > prev coupon date]

                    set @DaysAcq3_2	= case when @InterestDaysType in (3) then case when @AcqDate3 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate3, @SettledDate)) end else case when @AcqDate3 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate3)) end end -- total hari [acq date 3 > prev coupon date]

                    set @DaysAcq4_2	= case when @InterestDaysType in (3) then case when @AcqDate4 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate4, @SettledDate)) end else case when @AcqDate4 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate4)) end end -- total hari [acq date 4 > prev coupon date]

                    set @DaysAcq5_2	= case when @InterestDaysType in (3) then case when @AcqDate5 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate5, @SettledDate)) end else case when @AcqDate5 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate5)) end end -- total hari [acq date 5 > prev coupon date]

                    set @DaysAcq6_2	= case when @InterestDaysType in (3) then case when @AcqDate6 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate6, @SettledDate)) end else case when @AcqDate6 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate6)) end end -- total hari [acq date 6 > prev coupon date]
	
                    set @DaysAcq7_2	= case when @InterestDaysType in (3) then case when @AcqDate7 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate7, @SettledDate)) end else case when @AcqDate7 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate7)) end end -- total hari [acq date 7 > prev coupon date]

                    set @DaysAcq8_2	= case when @InterestDaysType in (3) then case when @AcqDate8 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate8, @SettledDate)) end else case when @AcqDate8 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate8)) end end -- total hari [acq date 8 > prev coupon date]
	
                    set @DaysAcq9_2	= case when @InterestDaysType in (3) then case when @AcqDate9 <= @LastCouponDate then abs([dbo].[FGetDateDIffGovermentBond_ACT360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffGovermentBond_ACT360](@AcqDate9, @SettledDate)) end else case when @AcqDate9 <= @LastCouponDate then abs(datediff(day, @SettledDate, @LastCouponDate)) else abs(datediff(day, @SettledDate, @AcqDate9)) end end -- total hari [acq date 9 > prev coupon date]
						
		

                    set @DaysAcq_2		= case when (isnull(@AcqDate, '') = '' or year(@AcqDate) = 1900) then 0 else @DaysAcq_2 end
                    set @DaysAcq1_2		= case when (isnull(@AcqDate1, '') = '' or year(@AcqDate1) = 1900) then 0 else @DaysAcq1_2 end
                    set @DaysAcq2_2		= case when (isnull(@AcqDate2, '') = '' or year(@AcqDate2) = 1900) then 0 else @DaysAcq2_2 end
                    set @DaysAcq3_2		= case when (isnull(@AcqDate3, '') = '' or year(@AcqDate3) = 1900) then 0 else @DaysAcq3_2 end
                    set @DaysAcq4_2		= case when (isnull(@AcqDate4, '') = '' or year(@AcqDate4) = 1900) then 0 else @DaysAcq4_2 end
                    set @DaysAcq5_2		= case when (isnull(@AcqDate5, '') = '' or year(@AcqDate5) = 1900) then 0 else @DaysAcq5_2 end
                    set @DaysAcq6_2		= case when (isnull(@AcqDate6, '') = '' or year(@AcqDate6) = 1900) then 0 else @DaysAcq6_2 end
                    set @DaysAcq7_2		= case when (isnull(@AcqDate7, '') = '' or year(@AcqDate7) = 1900) then 0 else @DaysAcq7_2 end
                    set @DaysAcq8_2		= case when (isnull(@AcqDate8, '') = '' or year(@AcqDate8) = 1900) then 0 else @DaysAcq8_2 end
                    set @DaysAcq9_2		= case when (isnull(@AcqDate9, '') = '' or year(@AcqDate9) = 1900) then 0 else @DaysAcq9_2 end

                    set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice) * case when isnull(@AcqVolume, 0) <> 0 then @AcqVolume else @Volume end / 100)  else 0 end

                    set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end

                    set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) 
                    when @TrxType = 1 then((@Price - @AcqPrice2) * @AcqVolume2 / 100) else 0 end

                    set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) 
                    when @TrxType = 1 then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100) else 0 end

                    set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) else 0 end

                    set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) else 0 end

                    set @CapGainAcq6 = case when @TrxType = 2 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100) else 0 end

                    set @CapGainAcq7 = case when @TrxType = 2 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100) else 0 end

                    set @CapGainAcq8 = case when @TrxType = 2 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100) else 0 end

                    set @CapGainAcq9 = case when @TrxType = 2 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100) 
                    when @TrxType = 1 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100) else 0 end

                    set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq6	= @CapGainAcq6 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq7	= @CapGainAcq7 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq8	= @CapGainAcq8 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq9	= @CapGainAcq9 * @TaxCapitaGainPercent / 100

                    set @AIAcq = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq1 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq2 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq3 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq4 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq5 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq6 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume6 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq6_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume6 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq6_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq7 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume7 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq7_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume7 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq7_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq8 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume8 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq8_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume8 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq8_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @AIAcq9 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume9 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq9_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end 
                    when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume9 / @ValuePerUnit * round(@CouponRate / 100 * @DaysAcq9_2 / @DivDays / @InterestPaymentType * @ValuePerUnit, 0)) end else 0 end

                    set @TaxAIAcq	= @AIAcq * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq1	= @AIAcq1 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq2	= @AIAcq2 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq3	= @AIAcq3 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq4	= @AIAcq4 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq5	= @AIAcq5 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq6	= @AIAcq6 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq7	= @AIAcq7 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq8	= @AIAcq8 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq9	= @AIAcq9 * @IncomeTaxInterestPercent / 100

                    end
		
                    if @InterestDaysType in (1,5,6,7,8,9) -- [Corp Bond] <-> 30/360 (US/NASD), 30/360 (EUROPEAN), 30/360, 30/360 NON-EOM, ISMA-30/360, ISMA-30/360 NONEOM
                    begin
		
                    set @ValuePerUnit = 1
                    set @DivDays = case when @InterestDaysType in (6) 
                    then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @NextCouponDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) end -- pembagi hari
			
                    set @Days = case when @InterestDaysType in (6) 
                    then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) end -- pembagi hari
		
                    set @InterestDays = case when @InterestDaysType in (6) then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate,@SettledDate)) end -- pembagi hari


                    set @DaysAcq_2 = case when @InterestDaysType in (6) then case when @AcqDate <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate, @SettledDate)) end else case when @AcqDate <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate, @SettledDate)) end end -- total hari [acq date > prev coupon date]
                    set @DaysAcq1_2 = case when @InterestDaysType in (6) then case when @AcqDate1 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate1, @SettledDate)) end else case when @AcqDate1 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate1, @SettledDate)) end end -- total hari [acq date 1 > prev coupon date]
                    set @DaysAcq2_2 = case when @InterestDaysType in (6) then case when @AcqDate2 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate2, @SettledDate)) end else case when @AcqDate2 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate2, @SettledDate)) end end -- total hari [acq date 2 > prev coupon date]
                    set @DaysAcq3_2 = case when @InterestDaysType in (6) then case when @AcqDate3 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate3, @SettledDate)) end else case when @AcqDate3 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate3, @SettledDate)) end end -- total hari [acq date 3 > prev coupon date]
                    set @DaysAcq4_2 = case when @InterestDaysType in (6) then case when @AcqDate4 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate4, @SettledDate)) end else case when @AcqDate4 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate4, @SettledDate)) end end -- total hari [acq date 4 > prev coupon date]
                    set @DaysAcq5_2 = case when @InterestDaysType in (6) then case when @AcqDate5 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate5, @SettledDate)) end else case when @AcqDate5 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate5, @SettledDate)) end end -- total hari [acq date 5 > prev coupon date]
                    set @DaysAcq6_2 = case when @InterestDaysType in (6) then case when @AcqDate6 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate6, @SettledDate)) end else case when @AcqDate6 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate6, @SettledDate)) end end -- total hari [acq date 6 > prev coupon date]
                    set @DaysAcq7_2 = case when @InterestDaysType in (6) then case when @AcqDate7 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate7, @SettledDate)) end else case when @AcqDate7 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate7, @SettledDate)) end end -- total hari [acq date 7 > prev coupon date]
                    set @DaysAcq8_2 = case when @InterestDaysType in (6) then case when @AcqDate8 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate8, @SettledDate)) end else case when @AcqDate8 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate8, @SettledDate)) end end -- total hari [acq date 8 > prev coupon date]
                    set @DaysAcq9_2 = case when @InterestDaysType in (6) then case when @AcqDate9 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond_ISMA30360](@AcqDate9, @SettledDate)) end else case when @AcqDate9 <= @LastCouponDate then abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) else abs([dbo].[FGetDateDIffCorporateBond](@AcqDate9, @SettledDate)) end end -- total hari [acq date 9 > prev coupon date]


                    set @DaysAcq_2		= case when (isnull(@AcqDate, '') = '' or year(@AcqDate) = 1900) then 0 else @DaysAcq_2 end
                    set @DaysAcq1_2		= case when (isnull(@AcqDate1, '') = '' or year(@AcqDate1) = 1900) then 0 else @DaysAcq1_2 end
                    set @DaysAcq2_2		= case when (isnull(@AcqDate2, '') = '' or year(@AcqDate2) = 1900) then 0 else @DaysAcq2_2 end
                    set @DaysAcq3_2		= case when (isnull(@AcqDate3, '') = '' or year(@AcqDate3) = 1900) then 0 else @DaysAcq3_2 end
                    set @DaysAcq4_2		= case when (isnull(@AcqDate4, '') = '' or year(@AcqDate4) = 1900) then 0 else @DaysAcq4_2 end
                    set @DaysAcq5_2		= case when (isnull(@AcqDate5, '') = '' or year(@AcqDate5) = 1900) then 0 else @DaysAcq5_2 end
                    set @DaysAcq6_2		= case when (isnull(@AcqDate6, '') = '' or year(@AcqDate6) = 1900) then 0 else @DaysAcq6_2 end
                    set @DaysAcq7_2		= case when (isnull(@AcqDate7, '') = '' or year(@AcqDate7) = 1900) then 0 else @DaysAcq7_2 end
                    set @DaysAcq8_2		= case when (isnull(@AcqDate8, '') = '' or year(@AcqDate8) = 1900) then 0 else @DaysAcq8_2 end
                    set @DaysAcq9_2		= case when (isnull(@AcqDate9, '') = '' or year(@AcqDate9) = 1900) then 0 else @DaysAcq9_2 end



                    set @CapGainAcq	= case when @TrxType = 2 then ((@Price - @AcqPrice) * @AcqVolume / 100) when @TrxType = 1 then  ((@Price - @AcqPrice) * @AcqVolume / 100)  else 0 end
                    set @CapGainAcq1 = case when @TrxType = 2 then ((@Price - @AcqPrice1) * @AcqVolume1 / 100) when @TrxType = 1 then  ((@Price - @AcqPrice1) * @AcqVolume1 / 100)  else 0 end
                    set @CapGainAcq2 = case when @TrxType = 2 then ((@Price - @AcqPrice2) * @AcqVolume2 / 100) when @TrxType = 1 then  ((@Price - @AcqPrice2) * @AcqVolume2 / 100)  else 0 end
                    set @CapGainAcq3 = case when @TrxType = 2 then ((@Price - @AcqPrice3) * @AcqVolume3 / 100) when @TrxType = 1 then  ((@Price - @AcqPrice3) * @AcqVolume3 / 100)  else 0 end
                    set @CapGainAcq4 = case when @TrxType = 2 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100) when @TrxType = 1 then ((@Price - @AcqPrice4) * @AcqVolume4 / 100)  else 0 end
                    set @CapGainAcq5 = case when @TrxType = 2 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100) when @TrxType = 1 then ((@Price - @AcqPrice5) * @AcqVolume5 / 100)  else 0 end
                    set @CapGainAcq6 = case when @TrxType = 2 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100) when @TrxType = 1 then ((@Price - @AcqPrice6) * @AcqVolume6 / 100)  else 0 end
                    set @CapGainAcq7 = case when @TrxType = 2 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100) when @TrxType = 1 then ((@Price - @AcqPrice7) * @AcqVolume7 / 100)  else 0 end
                    set @CapGainAcq8 = case when @TrxType = 2 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100) when @TrxType = 1 then ((@Price - @AcqPrice8) * @AcqVolume8 / 100)  else 0 end
                    set @CapGainAcq9 = case when @TrxType = 2 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100) when @TrxType = 1 then ((@Price - @AcqPrice9) * @AcqVolume9 / 100)  else 0 end



                    set @TaxCapGainAcq	= @CapGainAcq * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq1	= @CapGainAcq1 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq2	= @CapGainAcq2 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq3	= @CapGainAcq3 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq4	= @CapGainAcq4 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq5	= @CapGainAcq5 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq6	= @CapGainAcq6 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq7	= @CapGainAcq7 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq8	= @CapGainAcq8 * @TaxCapitaGainPercent / 100
                    set @TaxCapGainAcq9	= @CapGainAcq9 * @TaxCapitaGainPercent / 100

                    set @AIAcq = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume * @CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1
                    then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume * @CouponRate / 100 * @DaysAcq_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq1 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 * @CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume1 * @CouponRate / 100 * @DaysAcq1_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq2 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 * @CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume2 * @CouponRate / 100 * @DaysAcq2_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq3 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 * @CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume3 * @CouponRate / 100 * @DaysAcq3_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq4 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 * @CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume4 * @CouponRate / 100 * @DaysAcq4_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq5 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 * @CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume5 * @CouponRate / 100 * @DaysAcq5_2 / @DivDays / @InterestPaymentType) end else 0 end

                    set @AIAcq6 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume6 * @CouponRate / 100 * @DaysAcq6_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume6 * @CouponRate / 100 * @DaysAcq6_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq7 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume7 * @CouponRate / 100 * @DaysAcq7_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume7 * @CouponRate / 100 * @DaysAcq7_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq8 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume8 * @CouponRate / 100 * @DaysAcq8_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume8 * @CouponRate / 100 * @DaysAcq8_2 / @DivDays / @InterestPaymentType) end else 0 end
                    set @AIAcq9 = case when @TrxType = 2 then case when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume9 * @CouponRate / 100 * @DaysAcq9_2 / @DivDays / @InterestPaymentType) end when @TrxType = 1 then case  when isnull(@InterestDays, 0) = 0 then 0 else (@AcqVolume9 * @CouponRate / 100 * @DaysAcq9_2 / @DivDays / @InterestPaymentType) end else 0 end


                    set @TaxAIAcq	= @AIAcq * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq1	= @AIAcq1 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq2	= @AIAcq2 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq3	= @AIAcq3 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq4	= @AIAcq4 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq5	= @AIAcq5 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq6	= @AIAcq6 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq7	= @AIAcq7 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq8	= @AIAcq8 * @IncomeTaxInterestPercent / 100
                    set @TaxAIAcq9	= @AIAcq9 * @IncomeTaxInterestPercent / 100

		
			
		
                    end
                    end
                    end

                    if @CurrencyID = 'USD' -- USD
                    begin
                    if @InterestType = 3 -- ZERO COUPONT
                    BEGIN
                    set @AccuredInterestAmount = 0
                    set @GrossAmount = @Volume * @price/100
		
                    END
                    ELSE
                    BEGIN
                    if @InstrumentTypePK in (2) -- [Govt Bond]
                    BEGIN	
	                    set @ValuePerUnit = 1
	                    set @DivDays = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @NextCouponDate))
	                    set @Days = abs([dbo].[FGetDateDIffGovermentBond](@LastCouponDate, @SettledDate))
	                    set @InterestDays	= abs([dbo].[FGetDateDIffGovermentBond](@AcqDate, @SettledDate)) -- total hari Interest

			
                    END
                    Else if @InstrumentTypePK in (3) -- Corp Bond
                    BEGIN
	                    set @ValuePerUnit = 1
	                    set @DivDays = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @NextCouponDate)) -- pembagi hari
	                    set @Days = abs([dbo].[FGetDateDIffCorporateBond](@LastCouponDate, @SettledDate)) -- total hari

			
                    END

                    END

                    end

                    Declare @TotalTax Numeric(22,4)

                    --if @InterestType <> 3 --ZERO COUPON
                    --BEGIN
	                    if @InstrumentTypePK in (3,8,9,15)
	                    BEGIN
		                    set @AccuredInterestAmount = @Volume * (@CouponRate / 100) * @Days / @DivDays / @InterestPaymentType
		                    set @GrossAmount = (@Volume * @price/100) + @AccuredInterestAmount
	                    END
	                    ELSE IF @InstrumentTypePK in (2,13)
	                    BEGIN
		                    --IF @BitIsRounding = 1
		                    --BEGIN
			                    set @AccuredInterestAmount = @Volume / @ValuePerUnit * (round(@CouponRate / 100 
			                    * @Days / @DivDays / @InterestPaymentType * @ValuePerUnit, 0))
			                    set @GrossAmount = round((@Volume * @price/100),0) + @AccuredInterestAmount
		                    --END
		                    --ELSE
		                    --BEGIN
		                    --	set @AccuredInterestAmount = @Volume / @ValuePerUnit * (@CouponRate / 100 
		                    --	* @Days / @DivDays / @InterestPaymentType * @ValuePerUnit)
		                    --	set @GrossAmount = (@Volume * @price/100) + @AccuredInterestAmount
		                    --END
	                    END
                    --END

                    set @TotalTaxCapGain = case when isnull(@TaxCapGainAcq,0) > 0 then  isnull(@TaxCapGainAcq,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq1,0) > 0 then isnull(@TaxCapGainAcq1,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq2,0) > 0 then isnull(@TaxCapGainAcq2,0) else 0 end
                    + case when isnull(@TaxCapGainAcq3,0) > 0 then isnull(@TaxCapGainAcq3,0) else 0 end
                    + case when isnull(@TaxCapGainAcq4,0) > 0 then isnull(@TaxCapGainAcq4,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq5,0) > 0 then isnull(@TaxCapGainAcq5,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq6,0) > 0 then isnull(@TaxCapGainAcq6,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq7,0) > 0 then isnull(@TaxCapGainAcq7,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq8,0) > 0 then isnull(@TaxCapGainAcq8,0) else 0 end 
                    + case when isnull(@TaxCapGainAcq9,0) > 0 then isnull(@TaxCapGainAcq9,0) else 0 end 

                    set @TotalTaxAI = case when isnull(@TaxAIAcq,0) > 0 then isnull(@TaxAIAcq,0) else 0 end 
                    + case when isnull(@TaxAIAcq1,0) > 0 then isnull(@TaxAIAcq1,0) else 0 end 
                    + case when isnull(@TaxAIAcq2,0) > 0 then isnull(@TaxAIAcq2,0) else 0 end 
                    + case when isnull(@TaxAIAcq3,0) > 0 then isnull(@TaxAIAcq3,0) else 0 end 
                    + case when isnull(@TaxAIAcq4,0) > 0 then isnull(@TaxAIAcq4,0) else 0 end  
                    + case when isnull(@TaxAIAcq5,0) > 0 then isnull(@TaxAIAcq5,0) else 0 end 
                    + case when isnull(@TaxAIAcq6,0) > 0 then isnull(@TaxAIAcq6,0) else 0 end 
                    + case when isnull(@TaxAIAcq7,0) > 0 then isnull(@TaxAIAcq7,0) else 0 end 
                    + case when isnull(@TaxAIAcq8,0) > 0 then isnull(@TaxAIAcq8,0) else 0 end 
                    + case when isnull(@TaxAIAcq9,0) > 0 then isnull(@TaxAIAcq9,0) else 0 end 

                    set @TotalCapGain = isnull(@CapGainAcq,0) + isnull(@CapGainAcq1,0) + isnull(@CapGainAcq2,0) + isnull(@CapGainAcq3,0) + isnull(@CapGainAcq4,0) + isnull(@CapGainAcq5,0) + isnull(@CapGainAcq6,0) + isnull(@CapGainAcq7,0) + isnull(@CapGainAcq8,0) + isnull(@CapGainAcq9,0)
                    set @TotalAI = isnull(@AIAcq,0) + isnull(@AIAcq1,0) + isnull(@AIAcq2,0) + isnull(@AIAcq3,0) + isnull(@AIAcq4,0) + isnull(@AIAcq5,0) + isnull(@AIAcq6,0) + isnull(@AIAcq7,0) + isnull(@AIAcq8,0) + isnull(@AIAcq9,0)


                    if @ClientCode = '03'
					begin
						select @TotalCapGain = sum(isnull(IncomeTaxGainAmount,0)),@TotalAI =  sum(isnull(IncomeTaxInterestAmount,0)) from InvestmentTaxDataAcq where investmentpk = @InvestmentPK
						set @TotalTaxCapGain = @TotalCapGain * @TaxCapitaGainPercent/100
						set @TotalTaxAI = @TotalAI * @TaxExpensePercent/100
						if (@TotalCapGain + @TotalAI) < 0
                        begin
							set @TotalTax = 0
							set @TotalTaxCapGain = 0
							set @TotalTaxAI = 0
                        end
						else
							set @TotalTax = (@TotalTaxCapGain + @TotalTaxAI)
						
						set @NetAmount = isnull(@GrossAmount,0) - isnull(@TotalTax,0)
					end
					else
					begin
						set @TotalTax = (@TotalTaxCapGain + @TotalTaxAI)
						set @NetAmount = isnull(@GrossAmount,0) - isnull(@TotalTax,0)
					end


                    --Select @TotalTaxCapGain taxCapGain,@TotalCapGain CapGain,@TotalAI Ai,@TotalTaxAI taxAi,@TotalTax TotalTax,@NetAmount Net,@GrossAmount gross, @AccuredInterestAmount Holding

                          
                    Update Investment set IncomeTaxInterestAmount = @TotalTaxAI, IncomeTaxGainAmount = @TotalTaxCapGain, TotalAmount = @NetAmount,DoneAccruedInterest = @AccuredInterestAmount
                    where DealingPK = @DealingPK and HistoryPK = @HistoryPK



                    Fetch next From A Into @InvestmentPK,@DealingPK,@HistoryPK,@ValueDate,@InstrumentPK,@InstrumentTypePK,
                    @SettledDate,@NextCouponDate,@LastCouponDate,
                    @TrxType, @Price,@Volume,@AcqPrice,@AcqDate,
                    @AcqVolume,@TaxCapitaGainPercent,@IncomeTaxInterestPercent,
                    @BitIsRounding,@TaxExpensePercent,
                    @CurrencyID,@CouponRate,@InterestType, 
                    @InterestDaysType,@InterestPaymentType,
                    @AcqPrice1,@AcqDate1,@AcqVolume1,@AcqPrice2,@AcqDate2,@AcqVolume2,@AcqPrice3,@AcqDate3,@AcqVolume3,
                    @AcqPrice4,@AcqDate4,@AcqVolume4,@AcqPrice5,@AcqDate5,@AcqVolume5,@AcqPrice6,@AcqDate6,@AcqVolume6,
                    @AcqPrice7,@AcqDate7,@AcqVolume7,@AcqPrice8,@AcqDate8,@AcqVolume8,@AcqPrice9,@AcqDate9,@AcqVolume9
                    END
                    Close A
                    Deallocate A

                    Select isnull(@AccuredInterestAmount,0) InterestAmount, isnull(@TotalTaxAI,0) IncomeTaxInterestAmount,isnull(@TotalTaxCapGain,0) IncomeTaxGainAmount,
                    isnull(@GrossAmount,0) GrossAmount, isnull(@NetAmount,0) NetAmount   ";

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@ClientCode", Tools.ClientCode);
                        cmd.CommandTimeout = 0;
                        cmd.ExecuteNonQuery();


                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {

                                    M_OMSBond.InterestAmount = Convert.ToDecimal(dr["InterestAmount"]);
                                    M_OMSBond.IncomeTaxInterestAmount = Convert.ToDecimal(dr["IncomeTaxInterestAmount"]);
                                    M_OMSBond.IncomeTaxGainAmount = Convert.ToDecimal(dr["IncomeTaxGainAmount"]);
                                    M_OMSBond.GrossAmount = Convert.ToDecimal(dr["GrossAmount"]);
                                    M_OMSBond.NetAmount = Convert.ToDecimal(dr["NetAmount"]);



                                    return M_OMSBond;
                                }

                            }
                            return null;
                        }

                    }

                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean Dealing_ListingRpt(string _userID, InvestmentListing _listing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _bitIsMature = "";
                        int _counter = 0;
                        int _area = 0;
                        int _area1 = 0;
                        string _paramDealingPK = "";
                        string _paramDealing = "";

                        if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And IV.DealingPK in (" + _listing.stringInvestmentFrom + ") ";
                            _paramDealing = " A.DealingPK in (" + _listing.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And IV.DealingPK in (0) ";
                            _paramDealing = " A.DealingPK in (0) ";
                        }

                        if (_listing.ParamFundID != "All")
                        {
                            _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_listing.BitIsMature == true)
                        {
                            _bitIsMature = @" 
                            union all
                            Select A.Reference,RefNo,A.ValueDate,InstrumentID,InstrumentName,MV1.DescOne InterestDaysType,MV2.DescOne InterestPaymentType,  
                            FundID,InstrumentType,A.InvestmentPK,A.Volume,A.OrderPrice,A.InterestPercent,A.TrxTypeID,A.DonePrice,   
                            A.Amount,A.Notes,A.RangePrice ,A.MaturityDate ,A.DoneVolume,A.DoneAmount,'',A.AcqDate,A.DealingPK,A.InvestmentPK,CounterpartID,isnull(C.ID,'') BankBranchID,case when B.BitBreakable = 1 then 'Y' else 'N' end Breakable,'' BoardTypeDesc  
                            from InvestmentMature A 
                            left join Investment B on A.Reference = B.Reference and B.StatusInvestment = 2 and B.StatusDealing <> 3 
                            left join BankBranch C on B.BankBranchPK = C.BankBranchPK and C.status in (1,2) 
                            left join MasterValue MV1 on B.InterestDaysType = MV1.Code and MV1.status in (1,2) and MV1.ID = 'InterestDaysType'
                            left join MasterValue MV2 on B.InterestPaymentType = MV2.Code and MV2.status in (1,2) and MV2.ID = 'InterestPaymentType'
                            where" + _paramDealing;
                        }
                        else
                        {
                            _bitIsMature = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @TrailsPK int
                        Declare @MaxDateEndDayFP datetime

                        select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                        where ValueDate = 
                        (
                        select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                        )
                        and status = 2

                        Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.valueDate,I.ID InstrumentID, I.Name InstrumentName,  MV1.DescOne InterestDaysType,MV2.DescOne InterestPaymentType ,   
                        F.ID FundID,IT.Name InstrumentType,IV.InvestmentPK,IV.Volume,IV.OrderPrice,case when IV.TrxType = 2 and IV.InstrumentTypePK = 5 then IV.BreakInterestPercent else IV.InterestPercent end InterestPercent,IV.TrxTypeID,isnull(IV.DonePrice,0) DonePrice,    
                        isnull(IV.Amount,0) Amount,IV.Notes, IV.RangePrice,case when IV.TrxType = 2 and IV.InstrumentTypePK = 5 then IV.ValueDate else IV.MaturityDate end MaturityDate,isnull(IV.DoneVolume,0) DoneVolume
                        ,isnull(IV.DoneAmount,0) DoneAmount,IV.Notes,IV.AcqDate,IV.DealingPK,IV.InvestmentPK,isnull(C.ID,'') CounterpartID ,isnull(D.ID,'') BankBranchID,case when IV.BitBreakable = 1 then 'Y' else 'N' end Breakable,isnull(MV3.DescTwo,'') BoardTypeDesc
                        from Investment IV       
                        left join Fund F on IV.FundPK = F.FundPK and F.status = 2      
                        left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2      
                        left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                        left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2  
                        left join BankBranch D on IV.BankBranchPK = D.BankBranchPK and D.status in (1,2)   
                        left join MasterValue MV1 on IV.InterestDaysType = MV1.Code and MV1.status in (1,2) and MV1.ID = 'InterestDaysType'
                        left join MasterValue MV2 on IV.InterestPaymentType = MV2.Code and MV2.status in (1,2) and MV2.ID = 'InterestPaymentType'       
                        left join MasterValue MV3 on IV.BoardType = MV3.Code and MV3.status in (1,2) and MV3.ID = 'BoardType'                          
                        Where  IV.ValueDate = @ParamListDate and IV.StatusInvestment = 2 and IV.StatusDealing <> 3 " + _paramDealingPK + _paramFund + _bitIsMature +
                        @"
                        order by FundID
                        ";


                        cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                        if (_listing.ParamFundID != "All")
                        {
                            cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                        }

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "DealingListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "DealingListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Dealing Listing");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                        rSingle.InstrumentType = Convert.ToString(dr0["InstrumentType"]);
                                        rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.InvestmentPK = Convert.ToInt32(dr0["InvestmentPK"]);
                                        rSingle.DealingPK = Convert.ToInt32(dr0["DealingPK"]);
                                        if (rSingle.InstrumentType != "Deposito Money Market")
                                        {
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.OrderPrice = Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);

                                        }
                                        else
                                        {
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            if (rSingle.TrxTypeID != "PLACEMENT")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            }
                                            rSingle.BankBranchID = Convert.ToString(dr0["BankBranchID"]);
                                            rSingle.Breakable = Convert.ToString(dr0["Breakable"]);
                                        }
                                        rSingle.InterestDaysType = Convert.ToString(dr0["InterestDaysType"]);
                                        rSingle.InterestPaymentType = Convert.ToString(dr0["InterestPaymentType"]);
                                        rSingle.DoneAmount = Convert.ToDecimal(dr0["DoneAmount"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);
                                        rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);
                                        rSingle.BoardTypeDesc = Convert.ToString(dr0["BoardTypeDesc"]);
                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.FundID, r.InstrumentType
                                         group r by new { r.FundID, r.InstrumentType, r.TrxTypeID } into rGroup
                                         select rGroup;



                                    int incRowExcel = 1;
                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 1].Value = "TRADE DATE :";
                                    worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_listing.ParamListDate);
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                    foreach (var rsHeader in GroupByFundID)
                                    {

                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "FUND :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundID;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "INS. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentType;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "TRX. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TrxTypeID;
                                        incRowExcel = incRowExcel + 1;
                                        if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                        {
                                            _counter = 0;
                                            _area = 11;
                                            _area1 = 25;
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Volume / Shares";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Done Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Counterpart";
                                            worksheet.Cells[incRowExcel, 9].Value = "Board Type";
                                        }
                                        else if (rsHeader.Key.InstrumentType == "Corporate Bond" || rsHeader.Key.InstrumentType == "Government Bond" || rsHeader.Key.InstrumentType == "Sukuk" || rsHeader.Key.InstrumentType == "SBSN" || rsHeader.Key.InstrumentType == "Medium Term Notes")
                                        {
                                            _counter = 2;
                                            _area = 11;
                                            _area1 = 25;
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Done Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Coupon %";
                                            worksheet.Cells[incRowExcel, 7].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Counterpart";
                                        }
                                        else
                                        {
                                            _counter = 1;
                                            _area = 14;
                                            _area1 = 40;
                                            if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                                worksheet.Cells[incRowExcel, 2].Value = "Bank ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "Bank Branch ID";
                                                worksheet.Cells[incRowExcel, 4].Value = "Nominal";
                                                worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "Acq Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 8].Value = "Tenor";
                                                worksheet.Cells[incRowExcel, 9].Value = "Interest Days Type";
                                                worksheet.Cells[incRowExcel, 10].Value = "Interest Payment Type";
                                                worksheet.Cells[incRowExcel, 11].Value = "Done Amount";
                                                worksheet.Cells[incRowExcel, 12].Value = "Int.Percent";
                                                worksheet.Cells[incRowExcel, 13].Value = "Breakable";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                                worksheet.Cells[incRowExcel, 2].Value = "Bank ID";
                                                worksheet.Cells[incRowExcel, 3].Value = "Bank Branch ID";
                                                worksheet.Cells[incRowExcel, 4].Value = "Nominal";
                                                worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "Value Date";
                                                worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
                                                worksheet.Cells[incRowExcel, 8].Value = "Tenor";
                                                worksheet.Cells[incRowExcel, 9].Value = "Interest Days Type";
                                                worksheet.Cells[incRowExcel, 10].Value = "Interest Payment Type";
                                                worksheet.Cells[incRowExcel, 11].Value = "Done Amount";
                                                worksheet.Cells[incRowExcel, 12].Value = "Int.Percent";
                                                worksheet.Cells[incRowExcel, 13].Value = "Breakable";
                                            }

                                        }
                                        string _range;
                                        //THICK BOX HEADER
                                        if (_counter == 1)
                                        {
                                            _range = "A" + incRowExcel + ":M" + incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }
                                        else if (_counter == 2)
                                        {
                                            _range = "A" + incRowExcel + ":H" + incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }
                                        else
                                        {
                                            _range = "A" + incRowExcel + ":I" + incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }





                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 15;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        }
                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 13;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            }
                                            //area detail
                                            if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                            {
                                                _counter = 0;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BoardTypeDesc;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else if (rsHeader.Key.InstrumentType == "Corporate Bond" || rsHeader.Key.InstrumentType == "Government Bond" || rsHeader.Key.InstrumentType == "Sukuk" || rsHeader.Key.InstrumentType == "SBSN" || rsHeader.Key.InstrumentType == "Medium Term Notes")
                                            {
                                                _counter = 2;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }


                                            else
                                            {
                                                _counter = 1;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchID;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                                if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.AcqDateDeposito;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Formula = "G" + incRowExcel + "-F" + incRowExcel;
                                                    worksheet.Cells[incRowExcel, 8].Calculate();
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InterestDaysType;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.InterestPaymentType;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.DoneAmount;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Breakable;
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.MaturityDate;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MM/yyyy";
                                                    worksheet.Cells[incRowExcel, 8].Formula = "G" + incRowExcel + "-F" + incRowExcel;
                                                    worksheet.Cells[incRowExcel, 8].Calculate();
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InterestDaysType;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.InterestPaymentType;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.DoneAmount;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.InterestPercent;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.Breakable;
                                                    worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                }


                                            }





                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;





                                        }

                                        _range = "A" + incRowExcel + ":K" + incRowExcel;
                                        using (ExcelRange s = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            s.Style.Font.Size = 13;
                                            s.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                        }

                                        //THICK BOX DETAIL
                                        _endRowDetail = incRowExcel - 1;
                                        worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        if (_counter == 0)
                                        {
                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        }
                                        else if (_counter == 1)
                                        {
                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["M" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        }


                                        worksheet.Cells[incRowExcel, 2].Value = "Total :";


                                        if (_counter == 1)
                                        {
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        }



                                    }

                                    incRowExcel = incRowExcel + 2;
                                    worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                    worksheet.Cells[incRowExcel, 2].Value = _listing.Message;
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                    worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                    worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                    worksheet.Cells["B" + incRowExcel + ":I" + (incRowExcel + 7)].Merge = true;
                                    int _rowNotes = incRowExcel + 10;
                                    worksheet.Cells["B" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["B" + _rowNotes + ":I" + _rowNotes].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["B" + incRowExcel + ":B" + _rowNotes].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells["I" + incRowExcel + ":I" + _rowNotes].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                    incRowExcel = incRowExcel + 13;


                                    int _RowA = incRowExcel;
                                    int _RowB = incRowExcel + 7;
                                    worksheet.Cells["A" + _RowB + ":K" + _RowB].Style.Font.Bold = true;
                                    worksheet.Cells["A" + _RowB + ":K" + _RowB].Style.Font.Size = 13;

                                    if (_listing.Signature1 != 0)
                                    {
                                        worksheet.Cells[_RowA, 1].Value = _host.Get_PositionSignature(_listing.Signature1);
                                        worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 1].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                        worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                    }
                                    else
                                    {
                                        worksheet.Cells[_RowA, 1].Value = "";
                                        worksheet.Cells[_RowA, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 1].Value = "";
                                        worksheet.Cells[_RowB, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                    }


                                    if (_listing.Signature2 != 0)
                                    {
                                        worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                        worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                        worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                    }
                                    else
                                    {
                                        worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature2);
                                        worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 3].Value = "";
                                        worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                    }

                                    if (_listing.Signature3 != 0)
                                    {
                                        worksheet.Cells[_RowA, 5].Value = _host.Get_PositionSignature(_listing.Signature3);
                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 5].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                    }
                                    else
                                    {
                                        worksheet.Cells[_RowA, 5].Value = "";
                                        worksheet.Cells[_RowA, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 5].Value = "";
                                        worksheet.Cells[_RowB, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                    }

                                    if (_listing.Signature4 != 0)
                                    {
                                        worksheet.Cells[_RowA, 8].Value = _host.Get_PositionSignature(_listing.Signature4);
                                        worksheet.Cells[_RowA, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 8].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                        worksheet.Cells[_RowB, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                    }
                                    else
                                    {
                                        worksheet.Cells[_RowA, 7].Value = "";
                                        worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[_RowB, 7].Value = "";
                                        worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                    }


                                    incRowExcel = incRowExcel + 8;
                                    worksheet.Row(incRowExcel).PageBreak = true;

                                    string _rangeA = "A1:K" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 13;
                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, _area];
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).Width = 30;
                                    worksheet.Column(3).Width = _area1;
                                    worksheet.Column(4).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.Column(8).AutoFit();
                                    worksheet.Column(9).AutoFit();
                                    worksheet.Column(10).Width = 30;
                                    worksheet.Column(11).Width = 25;
                                    worksheet.Column(12).Width = 20;
                                    worksheet.Column(13).Width = 15;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&34 DEALING TICKET";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }


        public decimal Get_CloseNavByFundPK_03(int _fundPK, DateTime _date)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();

                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @"  
                        
                        declare @BegNav numeric(19,8)
                        declare @Nav numeric(19,8)

                        select @BegNav =  isnull(Nav,0)  from CloseNAV 
                        where  FundPK = @FundPK and Date = '11/29/17'

                        select @Nav = isnull(Nav,0) from CloseNAV 
                        where  FundPK = @FundPK and Date = 
                        (
                        select max(Date) from CloseNAV where Date <= @Date and status in (1,2) and FundPK =  @FundPK --3143.13530000
                        )

                        IF NOT EXISTS(
                        select * from CloseNAV 
                        where  FundPK = @FundPK and Date = 
                        (
                        select max(Date) from CloseNAV where Date <= @Date and status in (1,2) and FundPK =  @FundPK --3143.13530000
                        ))
                        BEGIN
                        select @BegNav Nav
                        END
                        ELSE
                        BEGIN
                        select @Nav Nav
                        END ";
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@Date", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {

                                    return dr["Nav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr["Nav"]);
                                }
                            }
                            return 0;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public void Generate_CSRFee(EndDayTrails _endDayTrails)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        string _paramFund = "";

                        if (!_host.findString(_endDayTrails.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_endDayTrails.FundFrom))
                        {
                            _paramFund = " And A.FundPK in ( " + _endDayTrails.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        cmd.CommandText = @"
                        --declare @datefrom datetime
                        --declare @dateto datetime
                        --declare @FundPk int

                        --set @datefrom = '09/30/2020'
                        --set @dateto = '09/30/2020'
                        --set @FundPk = 2

                        --DROP TABLE #MFeeCSR 

                        Delete A from AgentCSRDataForCommissionRpt A
                        left join Fund B on A.FundPK = B.FundPK and B.status in (1,2) 
                        where date between @Datefrom and @DateTo 
                        --and A.FundPK = @FundPK
                        " + _paramFund + @" 


                        CREATE TABLE #MFeeCSR 
                        (
	                        Date datetime,
	                        AgentPK int,
	                        FundPK int,
	                        MFeeAmount numeric(18,6),
	                        DanaProgramPercent numeric(18,6),
	                        PPH23percent numeric(18,6),
	                        FeeType int,
	                        FixedAccruedAmount numeric(18,6)
                        )

                        CREATE CLUSTERED INDEX indx_MFeeCSR  ON #MFeeCSR (Date,AgentPK,FundPK,MFeeAmount);

                        Declare @tableDistinctAgentCSRFund table
                        (
	                        AgentPK int,
	                        FundPK int
                        )

                        insert into @tableDistinctAgentCSRFund
                        Select distinct A.AgentPK,A.FundPK From AgentCSRFund A where A.status = 2
                        --and FundPK = @FundPK 
                        " + _paramFund + @" 

                        Declare @tableAgentCSRMaxDate table
                        (
	                        Date datetime,
	                        AgentPK int,
	                        FundPK int,
	                        FundJournalAccountPK int,
	                        DanaProgramPercent numeric(18,6),
	                        PPH23percent numeric(18,6),
	                        FeeType int,
	                        FixedAccruedAmount numeric(18,6)
                        )

                        Declare @CAgentPK int
                        Declare @CFundPK int
                        Declare @CDate datetime

                        Declare @DAgentPK int
                        Declare @DFundPK int
                        Declare @DDate datetime
                        Declare @DFundJournalAccountPK int
                        Declare @DDanaProgramPercent  numeric(18,6)
                        Declare @DPPH23percent numeric(18,6)

                        Declare @AgentCSRDataForCommissionRptPK int

                        Declare A Cursor For
	                        Select Date,AgentPK,FundPK From ZDT_WorkingDays A, @tableDistinctAgentCSRFund B
	                        where A.date between @Datefrom and @DateTo

                        Open A
                        Fetch Next From A
                        Into @CDate,@CAgentPK,@CFundPK

                        While @@FETCH_STATUS = 0  
                        Begin

	                        insert into @tableAgentCSRMaxDate
	                        select @CDate,AgentPK,FundPK,FundJournalAccountPK,DanaProgramPercent,PPH23Percent,FeeType,FixedAccruedAmount From AgentCSRFund where Date = (
		                        Select max(date) From AgentCSRFund where Date <= @CDate and AgentPK = @CAgentPK and FundPK= @CFundPK
		                        and status = 2
	                        ) and status = 2 and AgentPK = @CAgentPK and FundPK= @CFundPK

	                        Fetch Next From A 
	                        Into @CDate,@CAgentPK,@CFundPK
                        End	
                        Close A
                        Deallocate A

                        Insert into #MFeeCSR(Date,FundPK,AgentPK,MFeeAmount,DanaProgramPercent,PPH23percent,FeeType,FixedAccruedAmount)
                        select Date,FundPK,AgentPK,abs(dbo.FGetEndBalanceForCSR(Date,FundPK,FundJournalAccountPK)),DanaProgramPercent,PPH23percent,FeeType,FixedAccruedAmount from @tableAgentCSRMaxDate

                        Insert into AgentCSRDataForCommissionRpt(Date,AgentPK,FundPK,MFee,DanaProgramPercent,DanaProgram,PPH23Percent,PPH23,NetDanaProgram,IsHoliday,FeeType,NAV,AUM,Unit,MFeePercent,MFeeDays,FixedAccruedAmount)
                        select Date,AgentPK,FundPK,MFeeAmount/1.1,DanaProgramPercent,MFeeAmount/1.1 * DanaProgramPercent/100,
                        PPH23percent,case when FeeType in (3) then FixedAccruedAmount * PPH23percent/100  else MFeeAmount/1.1 * DanaProgramPercent/100 * PPH23percent/100 end,
                        case when FeeType in (3) then FixedAccruedAmount - (FixedAccruedAmount * PPH23percent/100)  else (MFeeAmount/1.1 * DanaProgramPercent/100) - (MFeeAmount/1.1 * DanaProgramPercent/100 * PPH23percent/100) end,
                        0,FeeType,0,0,0,0,0,FixedAccruedAmount  from #MFeeCSR

                        ";

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@DateFrom", _endDayTrails.ValueDateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _endDayTrails.ValueDateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _endDayTrails.EntryUsersID);
                        cmd.Parameters.AddWithValue("@EntryTime", _datetimeNow);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public decimal _getStartBalanceForCSRReport(DateTime _dateFrom, int _fundPK, int _agentPK)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {


                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"   Declare @PeriodPK int
                        select @PeriodPK = PeriodPK from Period where status = 2 and @datefrom between DateFrom and DateTo
                        select Amount from AgentCSRBegBalance where PeriodPK = @PeriodPK and AgentPK = @AgentPK and FundPK = @FundPK";

                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        cmd.Parameters.AddWithValue("@AgentPK", _agentPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return 0;
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Amount"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string GenerateSID(string _userID, SIDRpt _sidRpt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                string FilePath = Tools.SIDPath + "SID" + "_" + _sidRpt.FundClientPK + ".xlsx";
                string pdfPath = Tools.SIDPath + "SID" + "_" + _sidRpt.FundClientPK + ".pdf";
                FileInfo existingFile = new FileInfo(FilePath);
                if (existingFile.Exists)
                {
                    existingFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                    existingFile = new FileInfo(FilePath);
                }
                using (ExcelPackage package = new ExcelPackage(existingFile))
                {
                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SIDReport");
                    worksheet.Cells.Style.Font.Name = "Arial";
                    worksheet.Cells.Style.Font.Size = 10;
                    using (SqlConnection DbCon01 = new SqlConnection(Tools.conString))
                    {
                        DbCon01.Open();
                        using (SqlCommand cmd01 = DbCon01.CreateCommand())
                        {
                            cmd01.CommandText = @"
                                declare @LetterNo nvarchar(200)
							
							--declare @FundClientPK int
							--set @FundClientPK = 202

							--declare @Month nvarchar(50)
							--set @Month = 'VII'
							
							if exists (select * from SIDLetterNo where FundClientPK = @FundClientPK)
								begin
									select @LetterNo = LetterNo From SIDLetterNo
									set @LetterNo = isnull(@LetterNo,'') 
								end
									
								else 
								begin
									select @LetterNo = LetterNo from SIDLetterNo 
									set @LetterNo = (select CONVERT(varchar(10), FundClientPK) + '/' + case when InvestorType =1 then 'IND' else 'INS'end + '/'  + 'FA' + '/'  + 'IIM' + '/'  +@Month+ '/' + CONVERT(varchar(10), YEAR(getdate())) LetterNo
									from fundclient where status in (1,2)and FundClientPK = @FundClientPK)

									insert into SIDLetterNo(FundClientPK,LetterNo)
									select @FundClientPK,@LetterNo
								end

							select isnull(InvestorType,'') InvestorType,isnull(Name,'') Name,isnull(NamaDepanIns1,'') +' '+isnull(NamaTengahIns1,'')+' '+isnull(NamaBelakangIns1,'') ClientName,isnull(SID,'') SID , case when InvestorType = 1 then isnull(AlamatInd1,'') else case when InvestorType = 2 then isnull(AlamatPerusahaan,'') end end Alamat,
                            isnull(@LetterNo,'') LetterNo

                            from fundclient where status in (1,2)and FundClientPK = @FundClientPK

							
                            ";
                            cmd01.Parameters.AddWithValue("@FundClientPK", _sidRpt.FundClientPK);
                            cmd01.Parameters.AddWithValue("@Month", _sidRpt.Month);

                            using (SqlDataReader dr01 = cmd01.ExecuteReader())
                            {
                                if (dr01.HasRows)
                                {
                                    List<SIDRpt> rList = new List<SIDRpt>();
                                    while (dr01.Read())
                                    {
                                        SIDRpt rSingle = new SIDRpt();
                                        rSingle.InvestorType = Convert.ToString(dr01["InvestorType"]);
                                        rSingle.Name = Convert.ToString(dr01["Name"]);
                                        rSingle.ClientName = Convert.ToString(dr01["ClientName"]);
                                        rSingle.SID = Convert.ToString(dr01["SID"]);
                                        rSingle.Alamat = Convert.ToString(dr01["Alamat"]);
                                        rSingle.LetterNo = Convert.ToString(dr01["LetterNo"]);
                                        rList.Add(rSingle);
                                    }
                                    var QueryByClientID =
                                     from r in rList
                                     group r by new { } into rGroup
                                     select rGroup;
                                    int _IncRow = 1;
                                    int incRowExcel = 3;

                                    foreach (var rsHeader in QueryByClientID)
                                    {

                                        foreach (var rsDetail in rsHeader)
                                        {
                                            using (System.Drawing.Image image = System.Drawing.Image.FromFile(Tools.SIDImage1))
                                            {
                                                var excelImage = worksheet.Drawings.AddPicture("My Logo", image);

                                                //add the image to row 20, column E


                                                excelImage.SetSize(65);
                                                excelImage.SetPosition(0, 0, 0, 0);
                                            }
                                            worksheet.Cells[incRowExcel, 7].Value = "Jakarta," + Convert.ToDateTime(_datetimeNow).ToString("dd MMMM yyyy");
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "No: " + rsDetail.LetterNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perihal: Single Investor Identification (SID) Investor Reksa Dana";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth,";
                                            incRowExcel++;
                                            if (rsDetail.InvestorType == "1")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Alamat;
                                                incRowExcel = incRowExcel + 2;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Alamat;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Up: " + rsDetail.ClientName;
                                                incRowExcel = incRowExcel + 2;
                                            }

                                            worksheet.Cells[incRowExcel, 1].Value = "Dengan Hormat,";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Berdasarkan Peraturan Otoritas Jasa Kuangan Nomor 28/POJK.04/2016 tentang Sistem";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Pegelolaan Investasi Terpadi, diseutkan bahwa Manajer Investasi yang melakukan penjualan";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Produk Investasi wajib:";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "a. Memastikan kepemilikan nomor identitas tunggal (SID) pemodal dari setuap investor Produk";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "    Investasi.";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "b. Menyampaikan nomor identitas tunggal pemodal kepada investor.";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Sehubungan dengan hal tersebut, berikut kami sampaikan SID Bapak/Ibu yang diterbitkan oleh PT";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kusodian Sentral Efek Indonesia (KSEI) selaku Lembaga Penyimpanan dan Penyelesaian";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Sebagai Investor Reksa Dana Insight";
                                            incRowExcel = incRowExcel + 2;

                                            if (rsDetail.InvestorType == "1")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Nama Investor";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Value = "Nomor SID Investor";
                                                worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                incRowExcel = incRowExcel + 2;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Investor";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nomor SID Investor";
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells["C" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                incRowExcel = incRowExcel + 2;
                                            }
                                            if (rsDetail.InvestorType == "1")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Jika kiranya Bapak/Ibu juga memiliki investasi di Perusahaan Efek lainnya dan telah menerima";
                                                incRowExcel++;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "Jika kiranya Institusi Bapak/Ibu juga memiliki investasi di Perusahaan Efek lainnya dan telah menerima";
                                                incRowExcel++;
                                            }
                                            worksheet.Cells[incRowExcel, 1].Value = "Pemberitahuan SID dari perusahaan lain tersebut, mohon kiranya dapat menginformasikan";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "perbedaan data SID dalam jangka waktu 10 (sepuluh) hari kalender sejak tanggal surat ini dengan";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "mengisi pernyataan di bawah ini dan menyampaikan ke kami kembali up. bagian operation melalui";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "faksimile (021) 29333 077 atau email ke: operation@insights.id .";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Apabila dalam jangka waktu 10 (sepuluh) hari kalender sejak tanggal surat ini kami tidak menerima";
                                            incRowExcel++;
                                            if (rsDetail.InvestorType == "1")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "pemberitahuan dari Bapak/Ibu, maka SID yang kami sampaikan ini di anggap benar.";
                                                incRowExcel = incRowExcel + 2;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = "pemberitahuan dari Institusi Bapak/Ibu, maka SID yang kami sampaikan ini di anggap benar.";
                                                incRowExcel = incRowExcel + 2;
                                            }


                                            worksheet.Cells[incRowExcel, 1].Value = "Atas perhatian dan kerja sama Bapak/Ibu, kami ucapkan terima kasih.";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Hormat kami,";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "PT. Insight Investments Management";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "surat ini diterbitkan oleh PT Insight Investments Management dan tidak memerlukan tanda tangan pejabat berwenang";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Pernyataan Investor Mengenai Perbedaan SID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "SID yang disampaikan melalui surat ini berbeda dengan yang dikirimkan oleh Perusahaan Efek";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "lainnya dan Nomor SID yang tercatat yang saya miliki yaitu:";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Tanggal";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3].Value = "Tanda Tangan Investor";
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;
                                            using (System.Drawing.Image image1 = System.Drawing.Image.FromFile(Tools.SIDImage2))
                                            {
                                                var excelImage1 = worksheet.Drawings.AddPicture("My Logo1", image1);

                                                //add the image to row 20, column E
                                                excelImage1.SetPosition(incRowExcel - 2, 0, 6, 0);
                                                excelImage1.SetSize(75);
                                            }
                                            int RowB = incRowExcel + 2;
                                            worksheet.Cells["A" + incRowExcel + ":B" + RowB].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":E" + RowB].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, RowB, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowB, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowB, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Value = "PT.Insight Investments Management, Office 8 Building, 16th Floor Suite H, SCBD Lot 28,";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Jl. Jend. Sudirman Kav.52-53,Jakarta 12190,Indonesia";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "T: +(62-21) 29 333 078, F: +(62-21) 29 333 077";

                                        }
                                        incRowExcel = 52;
                                        worksheet.Row(incRowExcel).PageBreak = true;
                                    }


                                    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.




                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                    worksheet.PrinterSettings.PaperSize = ePaperSize.A4;
                                    worksheet.Column(1).Width = 18;
                                    worksheet.Column(2).Width = 12;
                                    worksheet.Column(8).Width = 11;
                                    worksheet.Row(1).Height = 13.80;
                                    worksheet.Row(2).Height = 13.80;
                                    worksheet.Row(3).Height = 13.80;
                                    worksheet.Row(4).Height = 13.80;
                                    worksheet.Row(5).Height = 13.80;
                                    worksheet.Row(6).Height = 13.80;
                                    worksheet.Row(7).Height = 13.80;
                                    worksheet.Row(8).Height = 13.80;
                                    worksheet.Row(9).Height = 13.80;
                                    worksheet.Row(10).Height = 13.80;

                                    worksheet.Row(11).Height = 13.80;
                                    worksheet.Row(12).Height = 13.80;
                                    worksheet.Row(13).Height = 13.80;
                                    worksheet.Row(14).Height = 13.80;
                                    worksheet.Row(15).Height = 13.80;
                                    worksheet.Row(16).Height = 13.80;
                                    worksheet.Row(17).Height = 13.80;
                                    worksheet.Row(18).Height = 13.80;
                                    worksheet.Row(19).Height = 13.80;
                                    worksheet.Row(20).Height = 13.80;

                                    worksheet.Row(21).Height = 13.80;
                                    worksheet.Row(22).Height = 13.80;
                                    worksheet.Row(23).Height = 13.80;
                                    worksheet.Row(24).Height = 13.80;
                                    worksheet.Row(25).Height = 13.80;
                                    worksheet.Row(26).Height = 13.80;
                                    worksheet.Row(27).Height = 13.80;
                                    worksheet.Row(28).Height = 13.80;
                                    worksheet.Row(29).Height = 13.80;
                                    worksheet.Row(30).Height = 13.80;

                                    worksheet.Row(31).Height = 13.80;
                                    worksheet.Row(32).Height = 13.80;
                                    worksheet.Row(33).Height = 13.80;
                                    worksheet.Row(34).Height = 13.80;
                                    worksheet.Row(35).Height = 13.80;
                                    worksheet.Row(36).Height = 13.80;
                                    worksheet.Row(37).Height = 13.80;
                                    worksheet.Row(38).Height = 13.80;
                                    worksheet.Row(39).Height = 13.80;
                                    worksheet.Row(40).Height = 13.80;

                                    worksheet.Row(41).Height = 13.80;
                                    worksheet.Row(42).Height = 13.80;
                                    worksheet.Row(43).Height = 13.80;
                                    worksheet.Row(44).Height = 13.80;
                                    worksheet.Row(45).Height = 13.80;
                                    worksheet.Row(46).Height = 13.80;
                                    worksheet.Row(47).Height = 13.80;
                                    worksheet.Row(48).Height = 13.80;
                                    worksheet.Row(49).Height = 13.80;
                                    worksheet.Row(50).Height = 13.80;

                                    worksheet.Row(51).Height = 13.80;
                                    worksheet.Row(52).Height = 13.80;
                                }
                            }
                        }
                    }

                    package.Save();
                    Tools.ExportFromExcelToPDF(FilePath, pdfPath);
                    return FilePath;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }



    }

}