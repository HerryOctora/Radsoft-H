using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;using RFSRepository;


namespace RFSRepositoryOne
{
    public class CustomClient09Reps
    {
        Host _host = new Host();

        private Journal setJournal(SqlDataReader dr)
        {
            Journal M_Journal = new Journal();
            M_Journal.JournalPK = Convert.ToInt32(dr["JournalPK"]);
            M_Journal.HistoryPK = Convert.ToInt32(dr["HistoryPK"]);
            M_Journal.Selected = Convert.ToBoolean(dr["Selected"]);
            M_Journal.Status = Convert.ToInt32(dr["Status"]);
            M_Journal.StatusDesc = Convert.ToString(dr["StatusDesc"]);
            M_Journal.Notes = Convert.ToString(dr["Notes"]);
            M_Journal.PeriodPK = Convert.ToInt32(dr["PeriodPK"]);
            M_Journal.PeriodID = Convert.ToString(dr["PeriodID"]);
            M_Journal.ValueDate = dr["ValueDate"].ToString();
            M_Journal.TrxNo = Convert.ToInt32(dr["TrxNo"]);
            M_Journal.TrxName = Convert.ToString(dr["TrxName"]);
            M_Journal.RefNo = Convert.ToInt32(dr["RefNo"]);
            M_Journal.Reference = Convert.ToString(dr["Reference"]);
            M_Journal.Type = Convert.ToString(dr["Type"]);
            M_Journal.TypeDesc = Convert.ToString(dr["TypeDesc"]);
            M_Journal.Description = Convert.ToString(dr["Description"]);
            M_Journal.Posted = Convert.ToBoolean(dr["Posted"]);
            M_Journal.PostedBy = Convert.ToString(dr["PostedBy"]);
            M_Journal.PostedTime = Convert.ToString(dr["PostedTime"]);
            M_Journal.Reversed = Convert.ToBoolean(dr["Reversed"]);
            M_Journal.ReverseNo = Convert.ToInt32(dr["ReverseNo"]);
            M_Journal.ReversedBy = Convert.ToString(dr["ReversedBy"]);
            M_Journal.ReversedTime = Convert.ToString(dr["ReversedTime"]);
            M_Journal.EntryUsersID = dr["EntryUsersID"].ToString();
            M_Journal.UpdateUsersID = dr["UpdateUsersID"].ToString();
            M_Journal.ApprovedUsersID = dr["ApprovedUsersID"].ToString();
            M_Journal.VoidUsersID = dr["VoidUsersID"].ToString();
            M_Journal.EntryTime = dr["EntryTime"].ToString();
            M_Journal.UpdateTime = dr["UpdateTime"].ToString();
            M_Journal.ApprovedTime = dr["ApprovedTime"].ToString();
            M_Journal.VoidTime = dr["VoidTime"].ToString();
            M_Journal.DBUserID = dr["DBUserID"].ToString();
            M_Journal.DBTerminalID = dr["DBTerminalID"].ToString();
            M_Journal.LastUpdate = dr["LastUpdate"].ToString();
            M_Journal.LastUpdateDB = dr["LastUpdateDB"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["LastUpdateDB"]);
            return M_Journal;
        }

        private Cashier setCashier(SqlDataReader dr)
        {
            Cashier M_Cashier = new Cashier();
            M_Cashier.CashierPK = Convert.ToInt32(dr["CashierPK"]);
            M_Cashier.CashierID = Convert.ToInt64(dr["CashierID"]);
            M_Cashier.HistoryPK = Convert.ToInt32(dr["HistoryPK"]);
            M_Cashier.Selected = dr["Selected"].Equals(DBNull.Value) == true ? false : Convert.ToBoolean(dr["Selected"]);
            M_Cashier.Status = Convert.ToInt32(dr["Status"]);
            M_Cashier.StatusDesc = Convert.ToString(dr["StatusDesc"]);
            M_Cashier.Notes = Convert.ToString(dr["Notes"]);
            M_Cashier.PeriodPK = Convert.ToInt32(dr["PeriodPK"]);
            M_Cashier.PeriodID = Convert.ToString(dr["PeriodID"]);
            M_Cashier.ValueDate = dr["ValueDate"].ToString();
            M_Cashier.Type = Convert.ToString(dr["Type"]);
            M_Cashier.RefNo = Convert.ToInt32(dr["RefNo"]);
            M_Cashier.Reference = dr["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["Reference"]);
            M_Cashier.DebitCredit = Convert.ToString(dr["DebitCredit"]);
            M_Cashier.Description = Convert.ToString(dr["Description"]);
            M_Cashier.DebitCurrencyPK = Convert.ToInt32(dr["DebitCurrencyPK"]);
            M_Cashier.DebitCurrencyID = Convert.ToString(dr["DebitCurrencyID"]);
            M_Cashier.CreditCurrencyPK = Convert.ToInt32(dr["CreditCurrencyPK"]);
            M_Cashier.CreditCurrencyID = Convert.ToString(dr["CreditCurrencyID"]);
            M_Cashier.DebitCashRefPK = Convert.ToInt32(dr["DebitCashRefPK"]);
            M_Cashier.DebitCashRefID = Convert.ToString(dr["DebitCashRefID"]);
            M_Cashier.DebitCashRefName = Convert.ToString(dr["DebitCashRefName"]);
            M_Cashier.CreditCashRefPK = Convert.ToInt32(dr["CreditCashRefPK"]);
            M_Cashier.CreditCashRefID = Convert.ToString(dr["CreditCashRefID"]);
            M_Cashier.CreditCashRefName = Convert.ToString(dr["CreditCashRefName"]);
            M_Cashier.DebitAccountPK = Convert.ToInt32(dr["DebitAccountPK"]);
            M_Cashier.DebitAccountID = Convert.ToString(dr["DebitAccountID"]);
            M_Cashier.DebitAccountName = Convert.ToString(dr["DebitAccountName"]);
            M_Cashier.CreditAccountPK = Convert.ToInt32(dr["CreditAccountPK"]);
            M_Cashier.CreditAccountID = Convert.ToString(dr["CreditAccountID"]);
            M_Cashier.CreditAccountName = Convert.ToString(dr["CreditAccountName"]);
            M_Cashier.Debit = Convert.ToDecimal(dr["Debit"]);
            M_Cashier.Credit = Convert.ToDecimal(dr["Credit"]);
            M_Cashier.DebitCurrencyRate = Convert.ToDecimal(dr["DebitCurrencyRate"]);
            M_Cashier.CreditCurrencyRate = Convert.ToDecimal(dr["CreditCurrencyRate"]);
            M_Cashier.BaseDebit = Convert.ToDecimal(dr["BaseDebit"]);
            M_Cashier.BaseCredit = Convert.ToDecimal(dr["BaseCredit"]);
            M_Cashier.PercentAmount = Convert.ToDecimal(dr["PercentAmount"]);
            M_Cashier.FinalAmount = Convert.ToDecimal(dr["FinalAmount"]);
            M_Cashier.OfficePK = Convert.ToInt32(dr["OfficePK"]);
            M_Cashier.OfficeID = Convert.ToString(dr["OfficeID"]);
            M_Cashier.DepartmentPK = Convert.ToInt32(dr["DepartmentPK"]);
            M_Cashier.DepartmentID = Convert.ToString(dr["DepartmentID"]);
            M_Cashier.AgentPK = Convert.ToInt32(dr["AgentPK"]);
            M_Cashier.AgentID = Convert.ToString(dr["AgentID"]);
            M_Cashier.CounterpartPK = Convert.ToInt32(dr["CounterpartPK"]);
            M_Cashier.CounterpartID = Convert.ToString(dr["CounterpartID"]);
            M_Cashier.ConsigneePK = Convert.ToInt32(dr["ConsigneePK"]);
            M_Cashier.ConsigneeID = Convert.ToString(dr["ConsigneeID"]);
            M_Cashier.InstrumentPK = Convert.ToInt32(dr["InstrumentPK"]);
            M_Cashier.InstrumentID = Convert.ToString(dr["InstrumentID"]);
            M_Cashier.InstrumentName = Convert.ToString(dr["InstrumentName"]);
            M_Cashier.JournalNo = Convert.ToInt32(dr["JournalNo"]);
            M_Cashier.DocRef = Convert.ToString(dr["DocRef"]);
            M_Cashier.Posted = Convert.ToBoolean(dr["Posted"]);
            M_Cashier.PostedBy = Convert.ToString(dr["PostedBy"]);
            M_Cashier.PostedTime = Convert.ToString(dr["PostedTime"]);
            M_Cashier.Revised = Convert.ToBoolean(dr["Revised"]);
            M_Cashier.RevisedBy = Convert.ToString(dr["RevisedBy"]);
            M_Cashier.RevisedTime = Convert.ToString(dr["RevisedTime"]);
            M_Cashier.EntryUsersID = dr["EntryUsersID"].ToString();
            M_Cashier.UpdateUsersID = dr["UpdateUsersID"].ToString();
            M_Cashier.ApprovedUsersID = dr["ApprovedUsersID"].ToString();
            M_Cashier.VoidUsersID = dr["VoidUsersID"].ToString();
            M_Cashier.EntryTime = dr["EntryTime"].ToString();
            M_Cashier.UpdateTime = dr["UpdateTime"].ToString();
            M_Cashier.ApprovedTime = dr["ApprovedTime"].ToString();
            M_Cashier.VoidTime = dr["VoidTime"].ToString();
            M_Cashier.DBUserID = dr["DBUserID"].ToString();
            M_Cashier.DBTerminalID = dr["DBTerminalID"].ToString();
            M_Cashier.LastUpdate = dr["LastUpdate"].ToString();
            M_Cashier.LastUpdateDB = dr["LastUpdateDB"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr["LastUpdateDB"]);
            return M_Cashier;
        }


        public class ReportNAVAUM
        {

            public string Name { get; set; }
            public string Date { get; set; }
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }
        }

        public class LAPORANBUKUKASATAUBANKHARIAN
        {
            public decimal StartBalance { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string RefType { get; set; }
            public string OtherAccountID { get; set; }

        }
        public class BANKVOUCHEREMCO
        {
            public decimal StartBalance { get; set; }
            public DateTime ValueDate { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string AccountID { get; set; }
            public string AccountName { get; set; }
            public string DetailDescription { get; set; }
            public string DebitCredit { get; set; }
            public decimal BaseDebit { get; set; }
            public decimal BaseCredit { get; set; }
            public string RefType { get; set; }
            public string OtherAccountID { get; set; }
            public string NoCek { get; set; }


        }
        public class TransactionsByCounterpart
        {
            public DateTime ValueDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string CounterpartName { get; set; }
            public string CounterpartID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string TrxTypeID { get; set; }
            public decimal DoneAmount { get; set; }
            public decimal TotalAmount { get; set; }
            public decimal CommissionAmount { get; set; }
            public DateTime SettlementDate { get; set; }




        }
        public class CounterpartTransactionsByFund
        {
            public DateTime ValueDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string CounterpartName { get; set; }
            public string CounterpartID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string TrxTypeID { get; set; }
            public decimal DoneAmount { get; set; }
            public decimal TotalAmount { get; set; }
            public decimal CommissionAmount { get; set; }


        }
        public class TransactionListingProfit
        {
            public DateTime ValueDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string CounterpartID { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string TrxTypeID { get; set; }
            public decimal DoneAmount { get; set; }
            public decimal TotalAmount { get; set; }
            public decimal Volume { get; set; }
            public decimal Profitloss { get; set; }
            public decimal Doneprice { get; set; }
            public decimal AVGPrice { get; set; }


        }
        public class ReportDailyNAVdanAUM
        {

            public string Fund { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }


        }
        public class LaporanDtDMtDYtdYoY
        {
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public DateTime ValueDateFrom { get; set; }
            public DateTime ValueDateTo { get; set; }
            public decimal Navday { get; set; }
            public decimal AUMDay { get; set; }
            public DateTime DateLastDay { get; set; }
            public decimal NavLastDay { get; set; }
            public decimal AUMLastDay { get; set; }
            public DateTime DateLastMonth { get; set; }
            public decimal NavLastMonth { get; set; }
            public decimal AUMLastMonth { get; set; }
            public DateTime DateLastYear { get; set; }
            public decimal NavLastYear { get; set; }
            public decimal AUMLastYear { get; set; }
            public DateTime DateLastYearToYear { get; set; }
            public decimal NavLastYearToYear { get; set; }
            public decimal AUMLastYearToYear { get; set; }

        }
        public class LaporanDtDMtDYtdYoYJumlahNasabah
        {
            public string Nama { get; set; }
            public int JmlhIndi { get; set; }
            public int JmlhInst { get; set; }
            public decimal Total { get; set; }

        }
        public class LaporanDtDMtDYtdYoYDataTrx
        {
            public string Tipe { get; set; }
            public string Nama { get; set; }
            public int JmlhNsbSubs { get; set; }
            public decimal TotalSubs { get; set; }
            public int JmlhNsbRedm { get; set; }
            public decimal TotalRedm { get; set; }

        }
        public class LaporanNAVProjection
        {

            public string FundName { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public decimal NAV { get; set; }
            public decimal AUM { get; set; }
            public decimal Compare { get; set; }


        }
        public class CounterpartPercentage
        {
            public string FundID { get; set; }
            public string Bulan { get; set; }
            public int Prio { get; set; }
            public int Period { get; set; }
            public string Counterpart { get; set; }
            public decimal DoneAmount { get; set; }

        }
        public class PerhitunganMIFee
        {
            public string FundID { get; set; }
            public string Days { get; set; }
            public string Date { get; set; }
            public decimal SaldoBalanceShares { get; set; }
            public decimal Numberofdays { get; set; }
            public decimal BasicDay { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal AdjFee { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal DPP { get; set; }
            public decimal PPN { get; set; }
            public decimal PPh23 { get; set; }
            public decimal OJK { get; set; }
            public decimal Net { get; set; }
            public decimal Cumulative { get; set; }

        }
        public class TotalTransactionReportFund
        {
            public string Type { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public int FundClientPK { get; set; }
            public string ClientID { get; set; }
            public string ClientName { get; set; }
            public decimal Nav { get; set; }
            public DateTime SettlementDate { get; set; }
            public DateTime TransactionDate { get; set; }
            public decimal CashBalance { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal FeeAmount { get; set; }
            public string AgentName { get; set; }
            public decimal NAV { get; set; }
            public decimal CashAmount { get; set; }

        }
     public class TotalTransactionReportClient
        {
            public string Type { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public int FundClientPK { get; set; }
            public string ClientID { get; set; }
            public string ClientName { get; set; }
            public decimal Nav { get; set; }
            public DateTime SettlementDate { get; set; }
            public DateTime TransactionDate { get; set; }
            public decimal CashBalance { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal FeeAmount { get; set; }
            public string AgentName { get; set; }
            public decimal NAV { get; set; }
            public decimal CashAmount { get; set; }
            public int PK { get; set; }
            public decimal InterestRate { get; set; }
            public string Tenor { get; set; }
            public string PaymentTerm { get; set; }
            public DateTime ValueDate { get; set; }
            public DateTime PaymentDate { get; set; }
            public DateTime RedemptDate { get; set; }
            public decimal RedemptAmount { get; set; }

        }
        public class RekapUnitPenyertaanEMCO
        {

            public string Fund { get; set; }
            public int FundPK { get; set; }
            public int FundClientPK { get; set; }
            public decimal Unit { get; set; }
            public string SID { get; set; }
            public string IFUACode { get; set; }
            public string InvestorName { get; set; }
            public decimal UnitAmount { get; set; }

        }
        public class RiskProfileTahunan
        {

            public string Month { get; set; }
            public string ID { get; set; }
            public string Name { get; set; }
            public int Legality { get; set; }
            public string InvestorsRiskProfileName { get; set; }
            public DateTime RenewingDate { get; set; }
            public string UpdateUsersID { get; set; }
            public string ApprovedUsersID { get; set; }
            public string Notes { get; set; }
            public string Date { get; set; }

        }
        public class MonthlyReport100Mil
        {

            public DateTime Date { get; set; }
            public string FundName { get; set; }
            public string ClientName { get; set; }
            public string SID { get; set; }
            public decimal UnitBalance { get; set; }
            public decimal Nav { get; set; }
            public decimal CashBalance { get; set; }

        }
        public class ReportLaporanSubsdanRedemTotal100Juta
        {

            public string ValueDate { get; set; }
            public string FundName { get; set; }
            public string Name { get; set; }
            public int FundPK { get; set; }
            public string FundID { get; set; }
            public decimal TotalSubs { get; set; }
            public decimal TotalRedempt { get; set; }
            public string BulanTahun { get; set; }
        }
        public class PerhitunganFeeReport
        {
            public string Name { get; set; }
            public string FundName { get; set; }
            public string BasicDay { get; set; }
            public string Date { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal Fee { get; set; }
            public decimal NAV { get; set; }
            public string Days { get; set; }
            public string FeeAmount { get; set; }
            public string NumberDays { get; set; }

        }
        public class PerhitunganAgentFeeReport
        {
            public string Name { get; set; }
            public string FundName { get; set; }
            public string BasicDay { get; set; }
            public string Date { get; set; }
            public decimal UnitAmount { get; set; }
            public decimal Fee { get; set; }
            public decimal NAV { get; set; }
            public string Days { get; set; }
            public string FeeAmount { get; set; }
            public string NumberDays { get; set; }
            public decimal AmountRedemp { get; set; }
            public decimal AmountSubs { get; set; }
            public decimal UnitBalance { get; set; }

        }

        public class InvestmentListingRpt
        {
            public string ParamListDate { get; set; }
            public string ParamFundIDFrom { get; set; }
            public string ParamFundIDTo { get; set; }
            public string ParamCounterpartIDFrom { get; set; }
            public string FundFromByAll { get; set; }
            public string CounterpartFromByAll { get; set; }
            public string ParamReferenceFrom { get; set; }
            public string ParamReferenceTo { get; set; }
            public string ParamReferenceText { get; set; }
            public string ParamInstType { get; set; }
            public DateTime InstructionDate { get; set; }
            public DateTime ValueDate { get; set; }
            public string FundID { get; set; }
            public string FundName { get; set; }
            public string Reference { get; set; }
            public int RefNo { get; set; }
            public string InstrumentType { get; set; }
            public string TrxTypeID { get; set; }
            public int InvestmentPK { get; set; }
            public int DealingPK { get; set; }
            public int SettlementPK { get; set; }
            public string BankName { get; set; }
            public string InstrumentID { get; set; }
            public string InstrumentName { get; set; }
            public string CounterpartID { get; set; }
            public string CounterpartName { get; set; }
            public string BankCustodianName { get; set; }
            public string ContactPerson { get; set; }
            public string BankCustodianContactPerson { get; set; }
            public string FaxNo { get; set; }
            public string Phone { get; set; }
            public string Phone1 { get; set; }
            public string Email1 { get; set; }
            public string BankCustodianFaxNo { get; set; }
            public string BankCustodianPhone { get; set; }
            public string BankAccountName { get; set; }
            public string BankAccountNo { get; set; }
            public string ClearingCode { get; set; }
            public string RTGSCode { get; set; }
            public int Tenor { get; set; }
            public int TenorDays { get; set; }
            public decimal AcqPrice { get; set; }
            public decimal Lot { get; set; }
            public decimal Volume { get; set; }
            public decimal OrderPrice { get; set; }
            public string RangePrice { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal Amount { get; set; }
            public decimal DoneLot { get; set; }
            public decimal DoneVolume { get; set; }
            public decimal DonePrice { get; set; }
            public decimal DoneAmount { get; set; }
            public DateTime LastCouponDate { get; set; }
            public DateTime NextCouponDate { get; set; }
            public DateTime MaturityDate { get; set; }
            public DateTime SettlementDate { get; set; }
            public DateTime AcqDateDeposito { get; set; }
            public DateTime AcqDate { get; set; }
            public decimal AccruedInterest { get; set; }
            public decimal CommissionAmount { get; set; }
            public decimal LevyAmount { get; set; }
            public decimal KPEIAmount { get; set; }
            public decimal VATAmount { get; set; }
            public decimal WHTAmount { get; set; }
            public decimal OTCAmount { get; set; }
            public decimal IncomeTaxSellAmount { get; set; }
            public decimal IncomeTaxInterestAmount { get; set; }
            public decimal IncomeTaxGainAmount { get; set; }
            public decimal DoneAccruedInterest { get; set; }
            public decimal TotalAmount { get; set; }
            public int SettlementMode { get; set; }
            public string SettlementModeDesc { get; set; }
            public string SettlementModeDescTwo { get; set; }
            public decimal AcqPrice1 { get; set; }
            public decimal AcqVolume1 { get; set; }
            public DateTime AcqDate1 { get; set; }
            public decimal AcqPrice2 { get; set; }
            public decimal AcqVolume2 { get; set; }
            public DateTime AcqDate2 { get; set; }
            public decimal AcqPrice3 { get; set; }
            public decimal AcqVolume3 { get; set; }
            public DateTime AcqDate3 { get; set; }
            public decimal AcqPrice4 { get; set; }
            public decimal AcqVolume4 { get; set; }
            public DateTime AcqDate4 { get; set; }
            public decimal AcqPrice5 { get; set; }
            public decimal AcqVolume5 { get; set; }
            public DateTime AcqDate5 { get; set; }
            public string Notes { get; set; }
            public string CheckedBy { get; set; }
            public string ApprovedBy { get; set; }
            public bool PageBreak { get; set; }
            public string Message { get; set; }
            public string DownloadMode { get; set; }
            public string BoardTypeDesc { get; set; }
            public string BoardTypeDescTwo { get; set; }
            public string SettlementModeDescOne { get; set; }
            public string CityDesc { get; set; }
            public string BankBranchAccountNo { get; set; }
            public string BankBranchAccountName { get; set; }
            public string InvestmentNotes { get; set; }
            public string BankBranchID { get; set; }
            public string ContactBankBranch { get; set; }
            public string FaxBankBranch { get; set; }
            public string PhoneBankBranch { get; set; }
            public string EmailBankBranch { get; set; }
            public string EntryDealingID { get; set; }
            public string PTPCode { get; set; }
            public string ParamFundID { get; set; }
            public bool BitIsMature { get; set; }
        }

        public class KPD
        {
            public string KodeNasabah { get; set; }
            public string NamaNasabah { get; set; }
            public string NomorKontrak { get; set; }
            public string TanggalKontrak { get; set; }
            public string TanggalJatuhTempo { get; set; }
            public string NomorAdendum { get; set; }
            public string TanggalAdendum { get; set; }
            public string NilaiInvestasiAwalIDR { get; set; }
            public string NilaiInvestasiAwalNonIDR { get; set; }
            public string NilaiInvestasiAkhir { get; set; }
            public string NilaiInvestasiAkhirNonIDR { get; set; }
            public string JenisEfek { get; set; }
            public int KodeKategoriEfek { get; set; }
            public string JumlahEfek { get; set; }
            public string NilaiPembelian { get; set; }
            public string NilaiNominal { get; set; }
            public string HPW { get; set; }
            public string Deposito { get; set; }
            public string TotalInvestasi { get; set; }
            public string KodeBK { get; set; }
            public string Keterangan { get; set; }
            public string SID { get; set; }


        }


        public class PVRSector
        {

            public DateTime Date { get; set; }
            public int FundPK { get; set; }
            public string InstrumentID { get; set; }
            public string Sektoral { get; set; }
            public string InstrumentName { get; set; }
            public decimal Balance { get; set; }
            public decimal AvgPrice { get; set; }
            public decimal CostValue { get; set; }
            public decimal ClosePrice { get; set; }
            public decimal MarketValue { get; set; }
            public decimal Unrealized { get; set; }
            public decimal Nav { get; set; }
            public decimal AUM { get; set; }
            public decimal PercentOfNav { get; set; }

        }


          public Boolean GenerateReportFinance(string _userID, FinanceRpt _financeRpt)
        {  

            #region LAPORAN BUKU KAS ATAU BANK HARIAN
       if (_financeRpt.ReportName.Equals("LAPORAN BUKU KAS ATAU BANK HARIAN"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramBankFromDebitCashRef = "";
                            string _paramBankFromCreditCashRef = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromDebitCashRef = "And C.DebitCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromDebitCashRef = "";
                            }

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromCreditCashRef = "And C.CreditCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromCreditCashRef = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";

                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";

                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";

                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";

                            }

                            cmd.CommandText =
                                @"
                                DECLARE @Description nvarchar(Max)    
                                Declare @CurRef nvarchar(max)    
                                Declare @CurDescription nvarchar(max)    
                                set @Description = ''

                                Select A.CashierPK,A.ValueDate,A.Reference,cast(SUBSTRING(A.reference, 4, charindex('/',A.reference,5) - 4) as integer) RefNo,A.AccountID,A.OtherAccountID,A.AccountName, 
                                --B.tmDescription Description,  
                                Description,    
                                Case When sum(A.BaseDebit) > sum(A.BaseCredit) then 'C' else 'D' end DebitCredit,    
                                case when sum(A.BaseDebit) < sum(A.BaseCredit) then sum(A.BaseCredit) - sum(A.BaseDebit) else 0 end BaseDebit,    
                                case when sum(A.BaseDebit) > sum(A.BaseCredit) then sum(A.BaseDebit) - sum(A.BaseCredit) else 0 end BaseCredit,    
                                [dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK) StartBalance,RefType    
                                From (    
                                Select        
                                C.CashierPK,reference , valuedate,A.ID AccountID,Z.ID OtherAccountID, A.Name AccountName, C.Description,         
                                Case When DebitCredit = 'D' then BaseDebit else 0 End BaseDebit,    
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                                cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) RefNo,    
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance,'IN' RefType      
                                from Cashier C           
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2           
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2         
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2           
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2          
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2      
                                left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2   
                                left join Account Z on C.CreditAccountPK =Z.Accountpk and Z.status = 2     
                                Where C.DebitAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status = 2) and C.ValueDate between @DateFrom and @DateTo           
                                AND C.creditAccountPK <> C.DebitAccountPK    
                                " + _status + _paramBankFromDebitCashRef + @"
                                UNION ALL           
                                Select          
                                C.CashierPK,reference , valuedate,A.ID AccountID,Z.ID OtherAccountID, A.Name AccountName, c.Description,           
                                Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,    
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                                cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) RefNo,    
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK)   StartBalance ,'OUT' RefType                
                                from Cashier C           
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2          
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2        
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2           
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2  
                                left join Account Z on C.DebitAccountPK =Z.Accountpk and Z.status = 2   
                                Where C.CreditAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status = 2) and C.ValueDate between @DateFrom and @DateTo      
                                AND C.creditAccountPK <> C.DebitAccountPK    
                                " + _status + _paramBankFromCreditCashRef + @"
                                ) A 
                                --left join #TempFinalDescription B on A.Reference = B.Reference    
                                left join Account C on A.AccountID = C.ID    
                                Group By A.CashierPK,A.ValueDate,A.AccountID,A.OtherAccountID,A.AccountName,A.Reference,    
                                --B.tmDescription,
                                Description,
                                [dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK),cast(SUBSTRING(A.reference, 4, charindex('/',A.reference,5) - 4) as integer),A.RefType    
                                Order By ValueDate,RefNo Asc
                                 ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@BankFrom", _financeRpt.BankFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LAPORANBUKUKASATAUBANKHARIAN" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LAPORAN BUKU KAS ATAU BANK HARIAN");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LAPORANBUKUKASATAUBANKHARIAN> rList = new List<LAPORANBUKUKASATAUBANKHARIAN>();
                                        while (dr0.Read())
                                        {
                                            LAPORANBUKUKASATAUBANKHARIAN rSingle = new LAPORANBUKUKASATAUBANKHARIAN();
                                            //rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.RefType = Convert.ToString(dr0["RefType"]);
                                            rSingle.OtherAccountID = Convert.ToString(dr0["OtherAccountID"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.Reference, r.AccountID, r.AccountName, r.StartBalance, r.RefType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "EMCO ASSET MANAGEMENT";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "LAPORAN BUKU KAS / BANK HARIAN";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Perkiraan : ";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            //worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AccountID + "-" + rsHeader.Key.AccountName;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Periode :";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "TGL";
                                            worksheet.Cells[incRowExcel, 3].Value = "No.Bukti";
                                            worksheet.Cells[incRowExcel, 4].Value = "Uraian";
                                            worksheet.Cells[incRowExcel, 6].Value = "No.Rek";
                                            worksheet.Cells[incRowExcel, 7].Value = "Jumlah";
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Saldo Awal Per 01/31/2017 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Value = "BEG BALANCE :";
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                            }
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.StartBalance;
                                            decimal _c = rsHeader.Key.StartBalance;
                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;

                                            if (rsHeader.Key.RefType == "IN")
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Pemasukan";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = "Pengeluaran";
                                            }


                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }

                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd/MMM/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.ValueDate).ToShortDateString();
                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate.Substring(0,10);
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Reference;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DetailDescription;
                                                worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.OtherAccountID;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.BaseDebit;

                                                if (rsDetail.RefType == "IN")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseCredit * -1;
                                                }
                                                if (_financeRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                }
                                                else if (_financeRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                }
                                                else if (_financeRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                                }
                                                else if (_financeRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";

                                                }
                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 6].Formula = "=F" + _rowEndBalance + "+D" + incRowExcel + "-E" + incRowExcel;

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            string _a = "";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 6].Value = "Sub Total : ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";

                                            }
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _rowEndBalance + ")";
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 6].Value = "Saldo Akhir Per 01/31/2017 : ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";

                                            }
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _rowEndBalance + ")" + "+" + _c;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 2].Value = "Dibuat";
                                            worksheet.Cells[incRowExcel, 3].Value = "Diperiksa";
                                            worksheet.Cells[incRowExcel, 4].Value = "Diperiksa";
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;


                                            incRowExcel = incRowExcel + 5;

                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(5).Width = 50;
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 LAPORAN BUKU KAS";
                                        if (_financeRpt.ValueDateTo >= _compareDate)
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT EMCO ASSET MANAGEMENT";
                                        }
                                        else
                                        {
                                            worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        }

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region BANK VOUCHER EMCO
            else if (_financeRpt.ReportName.Equals("BANK VOUCHER EMCO"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _status = "";
                            string _paramBankFromDebitCashRef = "";
                            string _paramBankFromCreditCashRef = "";
                            DateTime _compareDate = Convert.ToDateTime("10/28/2015");

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromDebitCashRef = "And C.DebitCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromDebitCashRef = "";
                            }

                            if (!_host.findString(_financeRpt.BankFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_financeRpt.BankFrom))
                            {
                                _paramBankFromCreditCashRef = "And C.CreditCashRefPK  in ( " + _financeRpt.BankFrom + " ) ";
                            }
                            else
                            {
                                _paramBankFromCreditCashRef = "";
                            }

                            if (_financeRpt.Status == 1)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 2)
                            {
                                _status = " and C.Status = 2 and C.Posted = 1 and C.Revised = 1 ";

                            }
                            else if (_financeRpt.Status == 3)
                            {
                                _status = " and C.Status = 2 and C.Posted = 0 and C.Revised = 0 ";

                            }
                            else if (_financeRpt.Status == 4)
                            {
                                _status = " and C.Status = 1  ";

                            }
                            else if (_financeRpt.Status == 5)
                            {
                                _status = " and (C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";

                            }
                            else if (_financeRpt.Status == 6)
                            {
                                _status = " and (C.Status = 1 Or C.Status = 2 or C.Posted = 1) and C.Revised = 0 and C.status not in (3,4) ";

                            }

                            cmd.CommandText =
                                @"
                                DECLARE @Description nvarchar(Max)    
                                Declare @CurRef nvarchar(max)    
                                Declare @CurDescription nvarchar(max)    
                                set @Description = ''

                                Select A.CashierPK,A.ValueDate,A.Reference,cast(SUBSTRING(A.reference, 4, charindex('/',A.reference,5) - 4) as integer) RefNo,A.AccountID,A.OtherAccountID,A.AccountName,A.NoCek, 
                                --B.tmDescription Description,  
                                Description,    
                                Case When sum(A.BaseDebit) > sum(A.BaseCredit) then 'C' else 'D' end DebitCredit,    
                                case when sum(A.BaseDebit) < sum(A.BaseCredit) then sum(A.BaseCredit) - sum(A.BaseDebit) else 0 end BaseDebit,    
                                case when sum(A.BaseDebit) > sum(A.BaseCredit) then sum(A.BaseDebit) - sum(A.BaseCredit) else 0 end BaseCredit,    
                                [dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK) StartBalance,RefType    
                                From (    
                                Select        
                                C.CashierPK,reference , valuedate,A.ID AccountID,Z.ID OtherAccountID, A.Name AccountName,C.NoCek, C.Description,         
                                Case When DebitCredit = 'D' then BaseDebit else 0 End BaseDebit,    
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                                cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) RefNo,    
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK) StartBalance,'IN' RefType      
                                from Cashier C           
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2           
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2         
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2           
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2          
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2      
                                left join Account A on C.Debitaccountpk =A.Accountpk and A.status = 2   
                                left join Account Z on C.CreditAccountPK =Z.Accountpk and Z.status = 2     
                                Where C.DebitAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status = 2) and C.ValueDate between @DateFrom and @DateTo           
                                AND C.creditAccountPK <> C.DebitAccountPK    
                                " + _status + _paramBankFromDebitCashRef + @"
                                UNION ALL           
                                Select          
                                C.CashierPK,reference , valuedate,A.ID AccountID,Z.ID OtherAccountID, A.Name AccountName,NoCek, c.Description,           
                                Case When DebitCredit = 'D' then  BaseDebit else 0 End BaseDebit,    
                                Case When DebitCredit = 'C' Then BaseCredit Else 0 end BaseCredit,    
                                cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) RefNo,    
                                [dbo].[FGetStartAccountBalance](@DateFrom,A.AccountPK)   StartBalance ,'OUT' RefType                
                                from Cashier C           
                                left join Office E on C.OfficePK = E.OfficePK and E.status = 2          
                                left join Department F on C.DepartmentPK = F.DepartmentPK and F.status = 2        
                                left join Agent G on C.AgentPK = G.AgentPK and G.status = 2           
                                left join Consignee H on C.ConsigneePK = H.ConsigneePK and H.status = 2         
                                left join Instrument I on C.InstrumentPK = I.InstrumentPK and I.status = 2       
                                left join Account A on C.Creditaccountpk =A.Accountpk and A.status = 2  
                                left join Account Z on C.DebitAccountPK =Z.Accountpk and Z.status = 2   
                                Where C.CreditAccountPK IN  (SELECT AccountPK FROM dbo.CashRef WHERE status = 2) and C.ValueDate between @DateFrom and @DateTo      
                                AND C.creditAccountPK <> C.DebitAccountPK    
                                " + _status + _paramBankFromCreditCashRef + @"
                                ) A 
                                --left join #TempFinalDescription B on A.Reference = B.Reference    
                                left join Account C on A.AccountID = C.ID    
                                Group By A.CashierPK,A.ValueDate,A.AccountID,A.OtherAccountID,A.AccountName,A.Reference,NoCek,    
                                --B.tmDescription,
                                Description,
                                [dbo].[FGetStartAccountBalance](@DateFrom,C.AccountPK),cast(SUBSTRING(A.reference, 4, charindex('/',A.reference,5) - 4) as integer),A.RefType    
                                Order By ValueDate,RefNo Asc
                                 ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _financeRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _financeRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@BankFrom", _financeRpt.BankFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "BANKVOUCHEREMCO" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FinanceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("BANK VOUCHER EMCO");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<BANKVOUCHEREMCO> rList = new List<BANKVOUCHEREMCO>();
                                        while (dr0.Read())
                                        {
                                            BANKVOUCHEREMCO rSingle = new BANKVOUCHEREMCO();
                                            //rSingle.AccountType = Convert.ToInt32(dr0["AccountType"]);
                                            rSingle.StartBalance = Convert.ToDecimal(dr0["StartBalance"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.RefNo = Convert.ToInt32(dr0["RefNo"]);
                                            rSingle.DetailDescription = Convert.ToString(dr0["Description"]);
                                            rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
                                            rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
                                            rSingle.DebitCredit = Convert.ToString(dr0["DebitCredit"]);
                                            rSingle.BaseDebit = Convert.ToDecimal(dr0["BaseDebit"]);
                                            rSingle.BaseCredit = Convert.ToDecimal(dr0["BaseCredit"]);
                                            rSingle.RefType = Convert.ToString(dr0["RefType"]);
                                            rSingle.OtherAccountID = Convert.ToString(dr0["OtherAccountID"]);
                                            rSingle.NoCek = Convert.ToString(dr0["NoCek"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.AccountID, r.ValueDate, r.RefNo ascending
                                            group r by new { r.Reference, r.NoCek, r.OtherAccountID, r.AccountID, r.AccountName, r.StartBalance, r.RefType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        int _rowEndBalance = 0;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "BANK VOUCHER";
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "PT.EMCO ASSE MANAGEMENT";
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Paid To ";
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Accounting & Finance";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = "DATE :";
                                            worksheet.Cells[incRowExcel, 7].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;
                                            int _posAmount = incRowExcel;//
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Amount (IDR)";
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.Cek";
                                            worksheet.Cells[incRowExcel, 2].Value = ":";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.NoCek;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.OtherAccountID;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;

                                            _rowEndBalance = incRowExcel;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            //incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Discription  : ";

                                            incRowExcel++;

                                            string _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();

                                            }

                                            _range = "A" + incRowExcel + ":G" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.DetailDescription;
                                                worksheet.Cells["B" + incRowExcel + ":F" + incRowExcel].Merge = true;


                                                if (rsDetail.RefType == "IN")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseDebit;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.BaseCredit;
                                                }
                                                if (_financeRpt.DecimalPlaces == 0)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                }
                                                else if (_financeRpt.DecimalPlaces == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                }
                                                else if (_financeRpt.DecimalPlaces == 4)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";

                                                }
                                                else if (_financeRpt.DecimalPlaces == 6)
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";

                                                }

                                                _rowEndBalance = incRowExcel;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":G" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            //string _a = "";
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "BANK";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "NO CQ/BG";
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "DATE OF CHEQUE";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.AccountName;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = _financeRpt.ValueDateFrom;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            if (_financeRpt.DecimalPlaces == 0)
                                            {
                                                worksheet.Cells[_posAmount, 3].Style.Numberformat.Format = "#,##0";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 2)
                                            {
                                                worksheet.Cells[_posAmount, 3].Style.Numberformat.Format = "#,##0.00";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 4)
                                            {
                                                worksheet.Cells[_posAmount, 3].Style.Numberformat.Format = "#,##0.0000";

                                            }
                                            else if (_financeRpt.DecimalPlaces == 6)
                                            {
                                                worksheet.Cells[_posAmount, 3].Style.Numberformat.Format = "#,##0.000000";

                                            }
                                            else
                                            {
                                                worksheet.Cells[_posAmount, 3].Style.Numberformat.Format = "#,##0.00000000";

                                            }
              
                                            worksheet.Cells[_posAmount, 3].Formula = "SUM(G" + _startRowDetail + ":G" + _rowEndBalance + ")";
                                            worksheet.Cells[_posAmount, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[_posAmount, 3].Style.Font.Bold = true;
                                            worksheet.Cells[_posAmount, 3].Calculate();

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = "Received By";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Approved By";
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Prepared By";
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Value = "Petrus Y.Bapa/Sonny.P/Sastra";
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Triana";
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 5;

                                            worksheet.Row(incRowExcel).PageBreak = _financeRpt.PageBreak;

                                        }
                                        string _rangeDetail = "A:G";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                        }



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(2).Width = 5;
                                        //worksheet.Column(3).AutoFit();
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 LAPORAN BUKU KAS";
                                        //if (_financeRpt.ValueDateTo >= _compareDate)
                                        //{
                                        //    worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&12 PT EMCO ASSET MANAGEMENT";
                                        //}
                                        //else
                                        //{
                                        //    worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //}

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }

                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            else
            {
                return false;
            }

        }

        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {

            #region Transactions By Counterpart
            if (_FundAccountingRpt.ReportName.Equals("Transactions By Counterpart"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFundFrom = "";
                            string _paramCounterpart = "";
                           
                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = "And A.CounterpartPK  in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }

                            cmd.CommandText = @"select TrxTypeID,D.ID InstrumentID,B.ID FundID,B.Name FundName,ValueDate,sum(DoneAmount) DoneAmount,case when TrxTypeID = 'BUY' then sum (TotalAmount - DoneAmount) else (sum (TotalAmount - DoneAmount) * -1) End CommissionAmount,sum(TotalAmount) TotalAmount,C.ID CounterpartID,C.Name CounterpartName from Investment A
                                                left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                                                left join counterpart C on A.CounterpartPK = C.CounterpartPK and C.status =2
                                                left join Instrument D on A.instrumentPK = D.instrumentPK and D.status = 2
                                                where ValueDate between @valuedateFrom and @valueDateTo and statussettlement  = 2 and D.InstrumentTypePK not in (5)" + _paramFundFrom + _paramCounterpart +
                                                @"group by TrxTypeID,D.ID,DoneAmount,B.ID,B.Name,ValueDate,TotalAmount,C.ID,C.Name ";

                            //cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _FundAccountingRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@CounterpartFrom", _FundAccountingRpt.CounterpartFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransactionsByCounterpart" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransactionsByCounterpart" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transactions By Counterpart");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransactionsByCounterpart> rList = new List<TransactionsByCounterpart>();
                                        while (dr0.Read())
                                        {
                                            TransactionsByCounterpart rSingle = new TransactionsByCounterpart();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);

                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.TrxTypeID, r.FundName, r.ValueDate, r.CounterpartName, r.TotalAmount ascending
                                            group r by new { r.FundName, r.CounterpartName, } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "MM/dd/yyyy";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = " - ";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "MM/dd/yyyy";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 1;

                                            int RowZ = incRowExcel;
                                            
                                            incRowExcel++;
                                           
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Broker :";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CounterpartName;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            //int RowG = incRowExcel + 1;                                           
                                            worksheet.Cells[incRowExcel, 1].Value = "B/S";
                                            worksheet.Cells[incRowExcel, 2].Value = "INSTRUMENT";
                                            worksheet.Cells[incRowExcel, 3].Value = "FUND NAME";
                                            worksheet.Cells[incRowExcel, 4].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 5].Value = "GROSS AMOUNT";
                                            worksheet.Cells[incRowExcel, 6].Value = "TOTAL FEE";
                                            worksheet.Cells[incRowExcel, 7].Value = "TOTAL AMOUNT";
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

             

                                            incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                

                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                //area detail
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "B";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "S";

                                                }
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;                                         
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;                                               
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;                                               
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";

                                                    
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                    
                                                }
                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                               
                                                _endRowDetail = incRowExcel;

                                                //_no++;
                                                incRowExcel++;


                                            }

                                            //THICK BOX DETAIL
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Value = "Sub Total  :";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(E" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                        }
                                        incRowExcel = incRowExcel + 2;

                                        decimal _donAmount = _host.getDoneAmountByFundAndCounterpart(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo, _FundAccountingRpt.FundFrom, _FundAccountingRpt.CounterpartFrom);
                                        decimal _commAmount = _host.getCommissionAmountByFundAndCounterpart(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo, _FundAccountingRpt.FundFrom, _FundAccountingRpt.CounterpartFrom);


                                        worksheet.Cells[incRowExcel, 4].Value = "Total  :";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 5].Value = _donAmount;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 6].Value = _commAmount;
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 7].Value = _donAmount + _commAmount;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();

                                        worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        string _rangeDetail = "A:H";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 40;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 140;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 65;
                                        worksheet.Column(6).Width = 55;
                                        worksheet.Column(7).Width = 5;
                                        worksheet.Column(8).Width = 65;


                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        //worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&45 Transactions By Counterpart";

                                        //worksheet.PrinterSettings.TopMargin = (decimal).3 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).3 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).3 / 2.54M; // narrow border

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Counterpart Transactions By Fund
            else if (_FundAccountingRpt.ReportName.Equals("Counterpart Transactions By Fund"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramCounterpart = "";
                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = " And A.CounterpartPK  in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }

                            cmd.CommandText =
                            @"select A.CounterpartName,A.CounterpartID,A.FundID,A.FundName,A.InstrumentID,A.TrxTypeID,ValueDate,SettlementDate, sum(doneamount) DoneAmount,sum(A.CommissionAmount) CommissionAmount,sum(TotalAmount) TotalAmount  from 
                            (
                            select A.TrxTypeID,B.ID FundID,B.Name FundName,ValueDate,SettlementDate,sum(DoneAmount) DoneAmount,case when TrxTypeID = 'BUY' then sum (TotalAmount - DoneAmount) else (sum (TotalAmount - DoneAmount) * -1) End CommissionAmount,TotalAmount,C.ID CounterpartID,C.Name CounterpartName,D.ID InstrumentID,D.Name InstrumentName from Investment A
                            left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                            left join counterpart C on A.CounterpartPK = C.CounterpartPK and C.status =2
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2
                            where ValueDate between @ValueDateFrom and @ValueDateTo and statussettlement  = 2" + _paramFundFrom + _paramCounterpart +
                            @"group by C.Name,C.ID,B.ID,B.Name,D.ID,ValueDate,SettlementDate,TotalAmount,TrxTypeID,D.ID,D.Name
                            ) A
                            group by A.CounterpartName,A.CounterpartID,A.FundID,A.FundName,A.InstrumentID,ValueDate,SettlementDate,A.TrxTypeID";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CounterpartTransactionsByFund" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CounterpartTransactionsByFund" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Counterpart Transactions By Fund");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransactionsByCounterpart> rList = new List<TransactionsByCounterpart>();
                                        while (dr0.Read())
                                        {
                                            TransactionsByCounterpart rSingle = new TransactionsByCounterpart();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            //rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            //rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            //rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            //rSingle.TrxTypeName = Convert.ToString(dr0["TrxTypeName"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            //rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            //rSingle.CostValue = Convert.ToDecimal(dr0["CostValue"]);
                                            //rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                            //rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                            //rSingle.Unrealised = Convert.ToDecimal(dr0["Unrealised"]);
                                            //rSingle.PercentOfNav = Convert.ToDecimal(dr0["PercentOfNav"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.ValueDate, r.TrxTypeID, r.CounterpartName, r.InstrumentID, r.TotalAmount ascending
                                            group r by new { r.FundName, r.CounterpartName, } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "MM/dd/yyyy";
                                        worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 7].Value = " - ";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "MM/dd/yyyy";
                                        worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fund :";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.FundFrom;
                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        //worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 8].Value = _FundAccountingRpt.ValueDateFrom;
                                        //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "MM/dd/yyyy";
                                        //worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 9].Value = " - ";
                                        //worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 10].Value = _FundAccountingRpt.ValueDateTo;
                                        //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "MM/dd/yyyy";
                                        //worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;



                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            //incRowExcel = incRowExcel + 1;

                                            int RowZ = incRowExcel;
                                            //incRowExcel = incRowExcel + 6;
                                            ////incRowExcel = incRowExcel + 1;                                           
                                            //worksheet.Cells[incRowExcel, 3].Value = "TRANSACTIONS BY COUNTERPART";
                                            //worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            //worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            //worksheet.Cells["C" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //incRowExcel++;
                                            //incRowExcel = incRowExcel + 1;
                                            //worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Value = "Date From  :";
                                            //worksheet.Cells[incRowExcel, 6].Value = ":";

                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Value = "S/D";
                                            //worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            //worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 7].Value = _FundAccountingRpt.ValueDateTo;
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "MM/dd/yyyy";
                                            //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Broker :";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.CounterpartName;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            //int RowG = incRowExcel + 1;                                           
                                            //worksheet.Cells[incRowExcel, 1].Value = "INST. ID";
                                            //worksheet.Cells[incRowExcel, 2].Value = "INST. NAME";
                                            worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT";
                                            worksheet.Cells[incRowExcel, 2].Value = "BUY / SELL";
                                            worksheet.Cells[incRowExcel, 3].Value = "DATE OF TRANS";
                                            worksheet.Cells[incRowExcel, 4].Value = "DATE OF SETTLE";
                                            worksheet.Cells[incRowExcel, 5].Value = "DATE OF PAY";
                                            worksheet.Cells[incRowExcel, 6].Value = "TOTAL PRICE";
                                            worksheet.Cells[incRowExcel, 7].Value = "FEE";
                                            worksheet.Cells[incRowExcel, 8].Value = "TOTAL NET";
                                            //worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 9].Value = "UNREALISED";
                                            //worksheet.Cells[incRowExcel, 10].Value = "(%) of NAV";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            //string _range = "A" + incRowExcel + ":H" + incRowExcel;

                                            //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            //{
                                            //    //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            //    r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            //    r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            //    r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //    r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            //    r.Style.Font.Size = 35;
                                            //    r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //    r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            //    r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            //}

                                            incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //decimal _totalSettleForBuy = 0;
                                                //decimal _totalSettleForSell = 0;
                                                //_totalSettleForBuy = rsDetail.DoneAmount + rsDetail.CommissionAmount ;
                                                //_totalSettleForSell = rsDetail.DoneAmount - rsDetail.CommissionAmount;
                                                //_range = "A" + incRowExcel + ":M" + incRowExcel;
                                                //using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                //{
                                                //    r.Style.Font.Size = 32;
                                                //    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                //}


                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.InstrumentID;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "BUY";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = "SELL";

                                                }
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.TotalAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                                //worksheet.Cells[incRowExcel, 14].Value = (_totalSettleForBuy - rsDetail.WHTAmount);

                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.MarketValue;
                                                //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells[incRowExcel, 9].Value = rsDetail.Unrealised;
                                                //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0";
                                                //worksheet.Cells[incRowExcel, 10].Value = rsDetail.PercentOfNav;
                                                //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0";
                                                _endRowDetail = incRowExcel;

                                                //_no++;
                                                incRowExcel++;


                                            }

                                            //THICK BOX DETAIL
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            worksheet.Cells[incRowExcel, 5].Value = "Sub Total  :";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(F" + _startRowDetail + ":G" + _endRowDetail + ")";

                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();

                                        }
                                        incRowExcel = incRowExcel + 2;

                                        decimal _donAmount = _host.getDoneAmountByFundAndCounterpart(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo, _FundAccountingRpt.FundFrom, _FundAccountingRpt.CounterpartFrom);
                                        decimal _commAmount = _host.getCommissionAmountByFundAndCounterpart(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo, _FundAccountingRpt.FundFrom, _FundAccountingRpt.CounterpartFrom);


                                        worksheet.Cells[incRowExcel, 5].Value = "Total  :";
                                        worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 6].Value = _donAmount;
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 7].Value = _commAmount;
                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 8].Value = _donAmount + _commAmount;
                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 8].Calculate();

                                        //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 7].Value = _host.GetDoneAmountByFund(_FundAccountingRpt.val);
                                        //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 8].Value = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                        //worksheet.Cells[incRowExcel, 9].Value = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        //worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                        worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        string _rangeDetail = "A:H";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 35;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 55;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 55;
                                        worksheet.Column(4).Width = 55;
                                        worksheet.Column(5).Width = 55;
                                        worksheet.Column(6).Width = 55;
                                        worksheet.Column(7).Width = 55;
                                        worksheet.Column(8).Width = 55;

                                        //worksheet.Column(8).Width = 10;
                                        //worksheet.Column(9).Width = 2;
                                        //worksheet.Column(10).Width = 10;
                                        //worksheet.Column(11).Width = 10;
                                        //worksheet.Column(12).Width = 5;
                                        //worksheet.Column(13).Width = 10;
                                        //worksheet.Column(14).Width = 10;
                                        //worksheet.Column(15).Width = 10;
                                        //worksheet.Column(16).Width = 30;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        //worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&45 Counterpart Transactions By Fund";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        worksheet.PrinterSettings.TopMargin = (decimal).3 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).3 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).3 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage1);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Transaction Listing Profit
            else if (_FundAccountingRpt.ReportName.Equals("Transaction Listing Profit"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";
                            string _paramCounterpart = "";
                            string _paramInstrument = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = " And A.CounterpartPK  in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }

                            if (!_host.findString(_FundAccountingRpt.InstrumentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.InstrumentFrom))
                            {
                                _paramInstrument = " And A.InstrumentPK  in ( " + _FundAccountingRpt.InstrumentFrom + " ) ";
                            }
                            else
                            {
                                _paramInstrument = "";
                            }



                            cmd.CommandText = @"select A.Doneprice, A.TrxTypeID,A.ValueDate,A.InstrumentID,A.InstrumentName,A.AVGPrice,A.DoneVolume Volume,A.CounterpartID,A.FundID,A.FundName,A.DoneAmount,A.TotalAmount,case when TrxTypeID = 'BUY' then 0 else sum(A.TotalAmount - A.DoneAmount) end ProfitLoss  from
                            (select A.Doneprice, TrxTypeID, ValueDate, B.ID instrumentID, B.Name InstrumentName,DoneVolume,dbo.[FGetLastAvgFromInvestment_OMSEquity](ValueDate,A.InstrumentPK,A.FundPK) AvgPrice,  C.ID CounterpartID,D.ID FundID,D.Name FundName,case when TrxTypeID = 'BUY' then DoneAmount else sum(dbo.[FGetLastAvgFromInvestment_OMSEquity](ValueDate,A.InstrumentPK,A.FundPK)  * A.DoneVolume) end DoneAmount,case when TrxTypeID = 'SELL' then DoneAmount else 0 end TotalAmount from Investment A
                            left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2
                            left join Counterpart C on A.CounterpartPK = C.CounterpartPK and C.Status = 2 
                            left join Fund D on A.FundPK = D.FundPK and D.Status = 2 
                            left join FundPosition E on B.InstrumentPK = E.InstrumentPK and E.status = 2 and D.FundPK  =  E.FundPK and Date = @valuedateTo            
                            where ValueDate between @valuedateFrom and @valuedateTo and StatusSettlement = 2 " + _paramCounterpart + _paramFundFrom + _paramInstrument + @"
                            group by A.Doneprice,TrxTypeID,ValueDate, B.ID,B.Name,DoneVolume,A.FundPK,A.InstrumentPK,DoneAmount,C.ID,D.ID,D.Name,TotalAmount,B.InstrumentPK,D.FundPK) A
                            Group By A.Doneprice,A.TrxTypeID,A.ValueDate,A.InstrumentID,A.InstrumentName,A.AVGPrice,A.DoneVolume,A.CounterpartID,A.FundID,A.FundName,A.DoneAmount,A.TotalAmount";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);

                          

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransactionListingProfit" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransactionListingProfit" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transaction Listing Profit");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransactionListingProfit> rList = new List<TransactionListingProfit>();
                                        while (dr0.Read())
                                        {
                                            TransactionListingProfit rSingle = new TransactionListingProfit();
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            //rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                            //rSingle.InstrumentTypeName = Convert.ToString(dr0["InstrumentTypeName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            //rSingle.FundFrom = Convert.ToString(dr0["FundFrom"]);
                                            //rSingle.CounterpartName = Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            //rSingle.TrxTypeName = Convert.ToString(dr0["TrxTypeName"]);
                                            rSingle.DoneAmount = Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.Volume = Convert.ToDecimal(dr0["Volume"]);
                                            rSingle.Profitloss = Convert.ToDecimal(dr0["Profitloss"]);
                                            rSingle.Doneprice = Convert.ToDecimal(dr0["Doneprice"]);
                                            rSingle.AVGPrice = Convert.ToDecimal(dr0["AVGPrice"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                            from r in rList
                                            orderby r.InstrumentID, r.TrxTypeID, r.ValueDate, r.Volume, r.DoneAmount, r.TotalAmount, r.Profitloss, r.CounterpartID, r.Doneprice ascending
                                            group r by new { r.TrxTypeID, r.FundName, r.ValueDate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel = 3;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
                                        worksheet.Cells[incRowExcel, 1].Value = _FundAccountingRpt.FundFrom;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "MM/dd/yyyy";
                                        worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "MM/dd/yyyy";
                                        worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "PT.EMCO ASSET MANAGEMENT";
                                        worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["J" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        foreach (var rsHeader in GroupByReference)
                                        {



                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "TRX";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "CODE";
                                            worksheet.Cells[incRowExcel, 4].Value = "INSTRUMENT";
                                            worksheet.Cells[incRowExcel, 5].Value = "AVG PRICE";
                                            worksheet.Cells[incRowExcel, 6].Value = "PRICE";
                                            worksheet.Cells[incRowExcel, 7].Value = "UNIT";
                                            worksheet.Cells[incRowExcel, 8].Value = "TOTAL COST";
                                            worksheet.Cells[incRowExcel, 9].Value = "PROCEEDS";
                                            worksheet.Cells[incRowExcel, 10].Value = "PROFIT/LOSS";
                                            worksheet.Cells[incRowExcel, 12].Value = "COUNTERPART";
                                            //worksheet.Cells[incRowExcel, 10].Value = "(%) of NAV";
                                            string _range = "A" + incRowExcel + ":L" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 30;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            //int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //var _fundID = "";

                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                //worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                //area detail

                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "BUY";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "SELL";

                                                }
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AVGPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Doneprice;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Volume;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TotalAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Profitloss;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                _endRowDetail = incRowExcel;

                                                //_no++;
                                                incRowExcel++;


                                            }

                                            int RowF = incRowExcel - 1;
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["D" + RowB + ":D" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["E" + RowB + ":E" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["F" + RowB + ":F" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["G" + RowB + ":G" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["H" + RowB + ":H" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["I" + RowB + ":I" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["J" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["K" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["K" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["L" + RowB + ":J" + RowF].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["L" + RowB + ":J" + RowF].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 6].Value = "Total  :";
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            incRowExcel = incRowExcel + 2;



                                        }

                                        worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        string _rangeDetail = "A:L";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 30;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 80;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 40;
                                        worksheet.Column(8).Width = 50;
                                        worksheet.Column(9).Width = 50;
                                        worksheet.Column(10).Width = 50;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 40;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&28 TRANSACTION LISTING PROFIT";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Daily NAV dan AUM
            else if (_FundAccountingRpt.ReportName.Equals("Report Daily NAV dan AUM"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                            @"select B.Name FundName,Date,A.Nav,AUM,
                             CASE a.FundPK 
                                WHEN 1 THEN
                                    1
                                WHEN 2 THEN
                                    2
                                WHEN 4 THEN
                                    3
                                WHEN 3 THEN
                                    4
                                WHEN 21 THEN
                                    5
                                WHEN 8 THEN
                                    6
                                WHEN 14 THEN
                                    7
                                WHEN 11 THEN
                                    8
                                WHEN 12 THEN
                                    9
                                WHEN 13 THEN
                                    10
                                WHEN 16 THEN
                                    11
                                WHEN 5 THEN
                                    12
                                WHEN 15 THEN
                                    13
                                WHEN 17 THEN
                                    14
                                WHEN 18 THEN
                                    15
                                WHEN 22 THEN
                                    16
                                WHEN 23 THEN
                                    17
                                WHEN 24 THEN
                                    18
		                            ELSE 
		                            99
                                END Row
                             from CloseNAV A
                            left join Fund B on A.FundPK = B.FundPK and B.Status = 2
                            where A.Date = @DateTo and A.status = 2"  + _paramFundFrom +
							@" Order By Row";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);
                           

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportDailyNAVdanAUM" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportDailyNAVdanAUM" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportDailyNAVdanAUM";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ReportDailyNAVdanAUM");

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();                                                                 
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportDailyNAVdanAUM> rList = new List<ReportDailyNAVdanAUM>();
                                        while (dr0.Read())
                                        {
                                            ReportDailyNAVdanAUM rSingle = new ReportDailyNAVdanAUM();
                                            rSingle.NAV = dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AUM = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Fund = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "Bersama ini kami sampaikan data NAB dan dana kelolaan. ";


                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "JENIS REKSA DANA";
                                            worksheet.Cells[incRowExcel, 3].Value = "NILAI AKTIVA BERSIH";
                                            worksheet.Cells[incRowExcel, 4].Value = "DANA KELOLAAN";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;


                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 3].Value = "TOTAL DANA KELOLAAN :";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + first.ToString() + ":D" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 4];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 REPORT DAILY NAV DAN AUM ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Laporan DtD MtD Ytd YoY
            else if (_FundAccountingRpt.ReportName.Equals("Laporan DtD MtD Ytd YoY"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            cmd.CommandText =

                            @"
                             declare @FundPK int,
                            @Date	date
	

	                        if([dbo].[CheckTodayIsHoliday] (@ValueDateTo) = 1)
	                        BEGIN
		                         set @Date = [dbo].[fworkingday](@ValueDateTo,-1)
	                        END
	                        ELSE
	                        BEGIN
		                        set @Date = @ValueDateTo
	                        END
   

                            if object_id('tempdb..#TempCloseNav', 'u') is not null drop table #TempCloseNav

                            create table #TempCloseNav
                            (
                            FundPK				int,
                            ValueDate			date,
                            NavDay				numeric (19,4),
                            AUMDay				numeric (19,4),
                            DateLastDay			date,
                            NavLastDay			numeric (19,4),
                            AUMLastDay			numeric (19,4),
                            DateLastMonth		date,
                            NavLastMonth		numeric (19,4),
                            AUMLastMonth		numeric (19,4),
                            DateLastYear		date,
                            NavLastYear			numeric (19,4),
                            AUMLastYear			numeric (19,4),
                            DateLastYearToYear	date,
                            NavLastYearToYear	numeric (19,4),
                            AUMLastYearToYear	numeric (19,4),
                            OrderRow	int
                            )

                            declare a cursor for 
                            select FundPK
                            from Fund 
                            where [Status]  = 2
                            order by FundPK
                            open a
                            fetch next from a
                            into @FundPK
	
                            while @@fetch_status = 0
                            begin
                            insert into #TempCloseNav (
                            FundPK, ValueDate, NavDay, AUMDay, DateLastDay, NavLastDay, AUMLastDay,
                            DateLastMonth, NavLastMonth, AUMLastMonth, DateLastYear, NavLastYear, AUMLastYear,
                            DateLastYearToyear, NavLastYearToYear, AUMLastYearToYear,OrderRow
                            )
                            select a.FundPK, [Date], isnull(a.Nav, 1) as NavDay, isnull(a.AUM, 1) as AUMDay,
                            dbo.Fworkingday(@Date, -1) as DateLastDay, isnull(b.Nav, 1) as NavLastDay, isnull(b.AUM, 1) as AUMLastDay,
                            case when [dbo].[CheckTodayIsHoliday] (dateadd(month, datediff(month, -1, @Date) - 1, -1)) = 1
                            then dbo.Fworkingday((dateadd(month, datediff(month, -1, @Date) -1, -1)), -1)
                            else (dateadd(month, datediff(month, -1, @Date)-1, -1))
                            end as DateLastmonth, isnull(c.Nav, 1) as NavLastmonth, isnull(c.AUM,1) as AUMLastmonth,
                            case when [dbo].[CheckTodayIsHoliday] (dateadd(year, datediff(year, -1, @Date) - 1, -1)) = 1
                            then dbo.Fworkingday((dateadd(year, datediff(year, -1, @Date) - 1, -1)), -1)
                            else (dateadd(year, datediff(year, -1, @Date) - 1, -1))
                            end as DateLastyear, isnull(d.Nav, 1) as NavLastyear, isnull(d.AUM, 1) as AUMLastyear,
                            case when [dbo].[CheckTodayIsHoliday] (dateadd(year, -1, @Date)) = 1
                            then dbo.Fworkingday(dateadd(year, -1, @Date), -1) else (dateadd(year, -1, @Date)) end as DateLastYearToyear,
                            isnull(e.Nav, 1) as NavLastyearToyear, isnull(e.AUM, 1) as AUMLastyearToyear,
                            Case when A.FundPK = 1 then 1 
                            When A.FundPK = 2 then 2
                            When A.FundPK = 3 then 3
                            When A.FundPK = 4 then 4
                            When A.FundPK = 6 then 5
                            When A.FundPK = 7 then 6
                            When A.FundPK = 8 then 7
                            When A.FundPK = 14 then 8
                            When A.FundPK = 11 then 9
                            When A.FundPK = 12 then 10
                            When A.FundPK = 13 then 11
                            When A.FundPK = 16 then 12
                            When A.FundPK = 10 then 13
                            When A.FundPK = 9 then 14
                            When A.FundPK = 5 then 15
                            When A.FundPK = 15 then 16
                            When A.FundPK = 17 then 18
                            When A.FundPK = 18 then 18

                            end 
                            from CloseNAV a
                            left join --> NavLastDay
                            (  
                            select Nav, AUM, FundPK
                            from CloseNAV     
                            where [Date] = dbo.Fworkingday(@Date, -1) and FundPK = @FundPK and [Status] = 2  
                            ) b on a.FundPK = b.FundPK  
                            left join --> NavLastmonth
                            (  
                            select Nav, AUM, FundPK
                            from CloseNAV     
                            where [Date] =
                            case when [dbo].[CheckTodayIsHoliday] (dateadd(month, datediff(month, -1, @Date) - 1, -1)) = 1
                            then dbo.Fworkingday((dateadd(month, datediff(month, -1, @Date) - 1, -1)), -1)
                            else (dateadd(month, datediff(month, -1, @Date) - 1, -1))
                            end and FundPK = @FundPK and [Status] = 2  
                            ) c on a.FundPK = c.FundPK  
                            left join --> NavLastyear
                            (  
                            select Nav, AUM, FundPK
                            from CloseNAV     
                            where [Date] =
                            case when [dbo].[CheckTodayIsHoliday] (dateadd(year, datediff(year, -1, @Date) - 1, -1)) = 1
                            then dbo.Fworkingday((dateadd(year, datediff(year, -1, @Date) - 1, -1)), -1)
                            else (dateadd(year, datediff(year, -1, @Date) - 1, -1))
                            end and FundPK = @FundPK and [Status] = 2  
                            ) d on a.FundPK = d.FundPK  
                            left join --> NavLastyearToyear
                            (  
                            select Nav, AUM, FundPK
                            from CloseNAV     
                            where [Date] =
                            case when [dbo].[CheckTodayIsHoliday] (dateadd(year, -1, @Date)) = 1
                            then dbo.Fworkingday(dateadd(year, -1, @Date), -1)
                            else (dateadd(year, -1, @Date))
                            end and FundPK = @FundPK and [Status] = 2  
                            ) e on a.FundPK = e.FundPK  
                            where [Date] = @Date and a.FundPK = @FundPK and a.[Status] = 2

                            fetch next from a                   
                            into @FundPK             
                            end                  
                            close a                  
                            deallocate a

                            select b.Name as FundName, a.ValueDate, a.NavDay, a.AUMDay, a.DateLastDay, a.NavLastDay, a.AUMLastDay,
                            a.DateLastmonth, a.NavLastmonth, a.AUMLastmonth, a.DateLastyear, a.NavLastyear, a.AUMLastyear,
                            a.DateLastyearToyear, a.NavLastyearToyear, a.AUMLastyearToyear
                            from #TempCloseNav a
                            left join Fund b on a.FundPK = b.FundPK and b.[Status] = 2
                              " + _paramFundFrom + @"                           
                            order by a.OrderRow asc";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                           
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanDtDMtDYtdYoY" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanDtDMtDYtdYoY" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "LaporanDtDMtDYtdYoY";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LaporanDtDMtDYtdYoY");

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "PT.EMCO ASSET MANAGEMENT";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 18;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();                                                                 
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 8].Value = "Untuk Kelengkapan Data Perhitungan";
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Merge = true;
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells[incRowExcel, 8, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanDtDMtDYtdYoY> rList = new List<LaporanDtDMtDYtdYoY>();
                                        while (dr0.Read())
                                        {
                                            LaporanDtDMtDYtdYoY rSingle = new LaporanDtDMtDYtdYoY();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.Navday = dr0["Navday"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Navday"]);
                                            rSingle.AUMDay = dr0["AUMDay"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMDay"]);
                                            rSingle.DateLastDay = Convert.ToDateTime(dr0["DateLastDay"]);
                                            rSingle.NavLastDay = dr0["NavLastDay"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NavLastDay"]);
                                            rSingle.AUMLastDay = dr0["AUMLastDay"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMLastDay"]);
                                            rSingle.DateLastMonth = Convert.ToDateTime(dr0["DateLastMonth"]);
                                            rSingle.NavLastMonth = dr0["NavLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NavLastMonth"]);
                                            rSingle.AUMLastMonth = dr0["AUMLastMonth"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMLastMonth"]);
                                            rSingle.DateLastYear = Convert.ToDateTime(dr0["DateLastYear"]);
                                            rSingle.NavLastYear = dr0["NavLastYear"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NavLastYear"]);
                                            rSingle.AUMLastYear = dr0["AUMLastYear"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMLastYear"]);
                                            rSingle.DateLastYearToYear = Convert.ToDateTime(dr0["DateLastYearToYear"]);
                                            rSingle.NavLastYearToYear = dr0["NavLastYearToYear"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NavLastYearToYear"]);
                                            rSingle.AUMLastYearToYear = dr0["AUMLastYearToYear"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUMLastYearToYear"]);
                                            rList.Add(rSingle);
                                        }

                                        // Re-Start Conn
                                        DbCon.Close();
                                        DbCon.Open();

                                        // Jumlah Nasabah //
                                        List<LaporanDtDMtDYtdYoYJumlahNasabah> rListJumlahNasabah = new List<LaporanDtDMtDYtdYoYJumlahNasabah>();
                                        using (SqlCommand cmd2 = DbCon.CreateCommand())
                                        {
                                            cmd2.CommandText =
                                                @"if object_id('tempdb..#tempData1', 'u') is not null drop table #tempData1
                                                select distinct FundPK, Name as [Nama], cast(0 as int) as [JmlhIndi], cast(0 as int) as [JmlhInst], cast(0 as numeric(28,6)) as [Total],
                                                Case when A.FundPK = 1 then 1 
                                                When A.FundPK = 2 then 2
                                                When A.FundPK = 3 then 3
                                                When A.FundPK = 4 then 4
                                                When A.FundPK = 6 then 5
                                                When A.FundPK = 7 then 6
                                                When A.FundPK = 8 then 7
                                                When A.FundPK = 14 then 8
                                                When A.FundPK = 11 then 9
                                                When A.FundPK = 12 then 10
                                                When A.FundPK = 13 then 11
                                                When A.FundPK = 16 then 12
                                                When A.FundPK = 10 then 13
                                                When A.FundPK = 9 then 14
                                                When A.FundPK = 5 then 15
                                                When A.FundPK = 15 then 16
                                                When A.FundPK = 17 then 18
                                                When A.FundPK = 18 then 18 end OrderRow
                                                into #tempData1
                                                from Fund A
                                                where [Status] = 2
                                                order by Name 
                                        
                                                update a
                                                    set a.JmlhIndi = isnull(b.[Jumlah Nasabah Individual], 0)
                                                from #tempData1 a
                                                    left join (
                                                        select c.FundPK, count(b.FundClientPK) as [Jumlah Nasabah Individual]
                                                        from FundClientPosition a
                                                                left join FundClient b on a.FundClientPK = b.FundClientPK and b.Status in (1, 2)
                                                                left join Fund c on a.FundPK = c.FundPK and c.[Status] = 2
                                                        where a.[Date] = @ValueDateTo and b.InvestorType = 1 and a.UnitAmount >= 1 -- individual
                                                        group by c.FundPK
                                                    ) b on a.FundPK = b.FundPK 
                                        
                                                update a
                                                    set a.JmlhInst = isnull(b.[Jumlah Nasabah Individual], 0)
                                                from #tempData1 a
                                                    left join (
                                                        select c.FundPK, count(b.FundClientPK) as [Jumlah Nasabah Individual]
                                                        from FundClientPosition a
                                                                left join FundClient b on a.FundClientPK = b.FundClientPK and b.[Status] in (1, 2)
                                                                left join Fund c on a.FundPK = c.FundPK and c.[Status] = 2
                                                        where a.[Date] = @ValueDateTo and b.InvestorType = 2 -- institusi
                                                        group by c.FundPK
                                                    ) b on a.FundPK = b.FundPK
                                        
                                                update #tempData1 set Total = JmlhIndi + JmlhInst 
                                        
                                                --select 'Jumlah Nasabah Total PT. Emco Asset management' as [Title 1]
                                        
                                                --select Nama as [Nama Reksa Dana], JmlhIndi as [Nasabah Perorangan], JmlhInst as [Nasabah Institusi], Total as [Total Nasabah]
                                                select Nama, JmlhIndi, JmlhInst, Total
                                                from #tempData1
                                                order by OrderRow Asc
                                                ";
                                            cmd2.CommandTimeout = 0;
                                            cmd2.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                                           
                                            using (SqlDataReader dr1 = cmd2.ExecuteReader())
                                            {
                                                if (dr1.HasRows)
                                                {
                                                    while (dr1.Read())
                                                    {
                                                        LaporanDtDMtDYtdYoYJumlahNasabah rSingle = new LaporanDtDMtDYtdYoYJumlahNasabah();
                                                        rSingle.Nama = dr1["Nama"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr1["Nama"]);
                                                        rSingle.JmlhIndi = dr1["JmlhIndi"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["JmlhIndi"]);
                                                        rSingle.JmlhInst = dr1["JmlhInst"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr1["JmlhInst"]);
                                                        rSingle.Total = dr1["Total"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr1["Total"]);
                                                        rListJumlahNasabah.Add(rSingle);
                                                    }
                                                }
                                            }
                                        }

                                        var JmlhNasabah =
                                        from r in rListJumlahNasabah
                                        group r by new { r.Nama, r.JmlhIndi, r.JmlhInst, r.Total } into rGroupJmlhNasabah
                                        select rGroupJmlhNasabah;

                                        // Re-Start Conn
                                        DbCon.Close();
                                        DbCon.Open();

                                        // DataTrx //
                                        List<LaporanDtDMtDYtdYoYDataTrx> rListDataTrx = new List<LaporanDtDMtDYtdYoYDataTrx>();
                                        using (SqlCommand cmd3 = DbCon.CreateCommand())
                                        {
                                            cmd3.CommandText =
                                                @"
                                                declare @FundPK int,
		                                                @Date	date

	                                                set @Date = @ValueDateTo

                                                -- 2. Lap. Harian

                                                if object_id('tempdb..#tempData2', 'u') is not null drop table #tempData2
                                                select distinct FundPK, Name as [Nama],
	                                                cast(0 as int) as [JmlhNasabahSubs], cast(0 as numeric(28,6)) as [TotalSubs],
	                                                cast(0 as int) as [JmlhNasabahRedm], cast(0 as numeric(28,6)) as [TotalRedm],
	                                                Case when A.FundPK = 1 then 1 
                                                When A.FundPK = 2 then 2
                                                When A.FundPK = 3 then 3
                                                When A.FundPK = 4 then 4
                                                When A.FundPK = 6 then 5
                                                When A.FundPK = 7 then 6
                                                When A.FundPK = 8 then 7
                                                When A.FundPK = 14 then 8
                                                When A.FundPK = 11 then 9
                                                When A.FundPK = 12 then 10
                                                When A.FundPK = 13 then 11
                                                When A.FundPK = 16 then 12
                                                When A.FundPK = 10 then 13
                                                When A.FundPK = 9 then 14
                                                When A.FundPK = 5 then 15
                                                When A.FundPK = 15 then 16
                                                When A.FundPK = 17 then 18
                                                When A.FundPK = 18 then 18 end OrderRow

                                                into #tempData2
                                                from Fund A
                                                where [Status] = 2
                                                order by Name

                                                update a set
	                                                a.JmlhNasabahSubs = isnull(b.JlmhNasabah, 0),
	                                                a.TotalSubs = isnull(b.TotalSubscription, 0)
                                                from #tempData2 a
                                                    left join (

	                                                Select A.FundPK,Count(A.FundPK) JlmhNasabah,sum(A.TotalSubscription) TotalSubscription From (
		                                                Select  FundPK,FundClientPK,sum(isnull(TotalCashAmount,0)) TotalSubscription 
		                                                From ClientSubscription 
		                                                where ValueDate = @Date and [Status] = 2 and posted = 1 and revised = 0
		                                                group by FundPK,FundClientPK
		                                                ) A
		                                                group by A.FundPK
			
                                                    ) b on a.FundPK = b.FundPK

                                                update a set
	                                                a.JmlhNasabahRedm = isnull(b.JlmhNasabah, 0),
	                                                a.TotalRedm = isnull(b.TotalRedemption, 0)
                                                from #tempData2 a
                                                    left join (
                                                       Select A.FundPK,Count(A.FundPK) JlmhNasabah,sum(A.TotalRedemption) TotalRedemption From (
		                                                Select  FundPK,FundClientPK,sum(isnull(TotalCashAmount,0)) TotalRedemption
		                                                From ClientRedemption 
		                                                where ValueDate = @Date and [Status] = 2 and posted = 1 and revised = 0
		                                                group by FundPK,FundClientPK
		                                                ) A
		                                                group by A.FundPK
                                                    ) b on a.FundPK = b.FundPK

                                                --select 'Data Transaksi Nasabah Harian Reksa Dana Emco Asset management' as [Title 2]

                                                --select Nama as [Nama Reksa Dana], JmlhNasabahSubs as [Jumlah Nasabah Subscription], TotalSubs as [Total Subscription],
                                                --	JmlhNasabahRedm as [Jumlah Nasabah Redemption / Konversi], TotalRedm as [Total Redemption]
                                                --from #tempData2

                                                -- 3. Lap. Mingguan
                                                declare @StartDateMingguan	date,
		                                                @EndDateMingguan	date

                                                if object_id('tempdb..#tempData3', 'u') is not null drop table #tempData3
                                                select distinct FundPK, Name as [Nama],
	                                                cast(0 as int) as [JmlhNasabahSubs], cast(0 as numeric(28,6)) as [TotalSubs],
	                                                cast(0 as int) as [JmlhNasabahRedm], cast(0 as numeric(28,6)) as [TotalRedm],
		                                                Case when A.FundPK = 1 then 1 
                                                When A.FundPK = 2 then 2
                                                When A.FundPK = 3 then 3
                                                When A.FundPK = 4 then 4
                                                When A.FundPK = 6 then 5
                                                When A.FundPK = 7 then 6
                                                When A.FundPK = 8 then 7
                                                When A.FundPK = 14 then 8
                                                When A.FundPK = 11 then 9
                                                When A.FundPK = 12 then 10
                                                When A.FundPK = 13 then 11
                                                When A.FundPK = 16 then 12
                                                When A.FundPK = 10 then 13
                                                When A.FundPK = 9 then 14
                                                When A.FundPK = 5 then 15
                                                When A.FundPK = 15 then 16
                                                When A.FundPK = 17 then 18
                                                When A.FundPK = 18 then 18 end OrderRow
                                                into #tempData3
                                                from Fund A
                                                where [Status] = 2
                                                order by Name

                                                set @StartDateMingguan	= dateadd(day,-6,@Date)
                                                set @EndDateMingguan	= @Date

                                                --select @StartDateMingguan as StartDateMingguan, @EndDateMingguan as EndDateMingguan

                                                update a set
	                                                a.JmlhNasabahSubs = isnull(b.JlmhNasabah, 0),
	                                                a.TotalSubs = isnull(b.TotalSubscription, 0)
                                                from #tempData3 a
                                                    left join (
	                                                Select A.FundPK,Count(A.FundPK) JlmhNasabah,sum(A.TotalSubscription) TotalSubscription From (
		                                                Select  FundPK,FundClientPK,sum(isnull(TotalCashAmount,0)) TotalSubscription 
		                                                From ClientSubscription 
		                                                where ValueDate between @StartDateMingguan and @EndDateMingguan and [Status] = 2 and posted = 1 and revised = 0
		                                                group by FundPK,FundClientPK
		                                                ) A
		                                                group by A.FundPK
                                                    ) b on a.FundPK = b.FundPK

                                                update a set
	                                                a.JmlhNasabahRedm = isnull(b.JlmhNasabah, 0),
	                                                a.TotalRedm = isnull(b.TotalRedemption, 0)
                                                from #tempData3 a
                                                    left join (
	                                                  Select A.FundPK,Count(A.FundPK) JlmhNasabah,sum(A.TotalRedemption) TotalRedemption From (
		                                                Select  FundPK,FundClientPK,sum(isnull(TotalCashAmount,0)) TotalRedemption
		                                                From ClientRedemption 
		                                                where ValueDate between @StartDateMingguan and @EndDateMingguan and [Status] = 2 and posted = 1 and revised = 0
		                                                group by FundPK,FundClientPK
		                                                ) A
		                                                group by A.FundPK
                                                    ) b on a.FundPK = b.FundPK

                                                --select 'Data Transaksi Nasabah Mingguan Reksa Dana Emco Asset management' as [Title 3]

                                                --select Nama as [Nama Reksa Dana], JmlhNasabahSubs as [Jumlah Nasabah Subscription], TotalSubs as [Total Subscription], JmlhNasabahRedm as [Jumlah Nasabah Redemption / Konversi], TotalRedm as [Total Redemption]
                                                --from #tempData3

                                                -- 4. Lap. Bulanan
                                                declare @StartDateBulanan	date,
		                                                @EndDateBulanan		date

                                                if object_id('tempdb..#tempData4', 'u') is not null drop table #tempData4
                                                select distinct FundPK, Name as [Nama],
	                                                cast(0 as int) as [JmlhNasabahSubs], cast(0 as numeric(28,6)) as [TotalSubs],
	                                                cast(0 as int) as [JmlhNasabahRedm], cast(0 as numeric(28,6)) as [TotalRedm],
	                                                Case when A.FundPK = 1 then 1 
                                                When A.FundPK = 2 then 2
                                                When A.FundPK = 3 then 3
                                                When A.FundPK = 4 then 4
                                                When A.FundPK = 6 then 5
                                                When A.FundPK = 7 then 6
                                                When A.FundPK = 8 then 7
                                                When A.FundPK = 14 then 8
                                                When A.FundPK = 11 then 9
                                                When A.FundPK = 12 then 10
                                                When A.FundPK = 13 then 11
                                                When A.FundPK = 16 then 12
                                                When A.FundPK = 10 then 13
                                                When A.FundPK = 9 then 14
                                                When A.FundPK = 5 then 15
                                                When A.FundPK = 15 then 16
                                                When A.FundPK = 17 then 18
                                                When A.FundPK = 18 then 18 end OrderRow

                                                into #tempData4
                                                from Fund A
                                                where [Status] = 2
                                                order by Name

                                                set @StartDateBulanan	= dateadd(month,-1, @Date)
                                                set @EndDateBulanan		= @Date

                                                --select @StartDateBulanan as StartDateBulanan, @EndDateBulanan as EndDateBulanan

                                                update a set
	                                                a.JmlhNasabahSubs = isnull(b.JlmhNasabah, 0),
	                                                a.TotalSubs = isnull(b.TotalSubscription, 0)
                                                from #tempData4 a
                                                    left join (

	                                                Select A.FundPK,Count(A.FundPK) JlmhNasabah,sum(A.TotalSubscription) TotalSubscription From (
		                                                Select  FundPK,FundClientPK,sum(isnull(TotalCashAmount,0)) TotalSubscription 
		                                                From ClientSubscription 
		                                                where ValueDate between @StartDateBulanan and @EndDateBulanan and [Status] = 2 and posted = 1 and revised = 0
		                                                group by FundPK,FundClientPK
		                                                ) A
                                                        group by A.FundPK
                                                    ) b on a.FundPK = b.FundPK

                                                update a set
	                                                a.JmlhNasabahRedm = isnull(b.JlmhNasabah, 0),
	                                                a.TotalRedm = isnull(b.TotalRedemption, 0)
                                                from #tempData4 a
                                                    left join (
	                                                 Select A.FundPK,Count(A.FundPK) JlmhNasabah,sum(A.TotalRedemption) TotalRedemption From (
		                                                Select  FundPK,FundClientPK,sum(isnull(TotalCashAmount,0)) TotalRedemption
		                                                From ClientRedemption 
		                                                where ValueDate between @StartDateBulanan and @EndDateBulanan and [Status] = 2 and posted = 1 and revised = 0
		                                                group by FundPK,FundClientPK
		                                                ) A
		                                                group by A.FundPK
                                                    ) b on a.FundPK = b.FundPK

                                                --select 'Data Transaksi Nasabah Bulanan Reksa Dana Emco Asset management' as [Title 4]

                                                --select Nama as [Nama Reksa Dana], JmlhNasabahSubs as [Jumlah Nasabah Subscription], TotalSubs as [Total Subscription], JmlhNasabahRedm as [Jumlah Nasabah Redemption / Konversi], TotalRedm as [Total Redemption]
                                                --from #tempData4

                                                select
	                                                --case
	                                                --	when [Tipe Laporan] = 1 then 'Harian'
	                                                --	when [Tipe Laporan] = 2 then 'Mingguan'
	                                                --	when [Tipe Laporan] = 3 then 'Bulanan'
	                                                --else '' end as [Tipe Laporan],
	                                                --[Nama Reksa Dana], [Jumlah Nasabah Subscription], [Total Subscription], [Jumlah Nasabah Redemption / Konversi], [Total Redemption]
	                                                case
		                                                when [Tipe Laporan] = 1 then 'Harian'
		                                                when [Tipe Laporan] = 2 then 'Mingguan'
		                                                when [Tipe Laporan] = 3 then 'Bulanan'
	                                                else '' end as [Tipe],
	                                                [Nama Reksa Dana] as Nama, [Jumlah Nasabah Subscription] as JmlhNsbSubs, [Total Subscription] as TotalSubs, [Jumlah Nasabah Redemption / Konversi] as JmlhNsbRedm, [Total Redemption] as TotalRedm,
	                                                OrderRow
                                                from (
	                                                select 1 as [Tipe Laporan], Nama as [Nama Reksa Dana], JmlhNasabahSubs as [Jumlah Nasabah Subscription], TotalSubs as [Total Subscription], JmlhNasabahRedm as [Jumlah Nasabah Redemption / Konversi], TotalRedm as [Total Redemption], OrderRow
	                                                from #tempData2
	                                                union all
	                                                select 2 as [Tipe Laporan], Nama as [Nama Reksa Dana], JmlhNasabahSubs as [Jumlah Nasabah Subscription], TotalSubs as [Total Subscription], JmlhNasabahRedm as [Jumlah Nasabah Redemption / Konversi], TotalRedm as [Total Redemption], OrderRow
	                                                from #tempData3
	                                                union all
	                                                select 3 as [Tipe Laporan], Nama as [Nama Reksa Dana], JmlhNasabahSubs as [Jumlah Nasabah Subscription], TotalSubs as [Total Subscription], JmlhNasabahRedm as [Jumlah Nasabah Redemption / Konversi], TotalRedm as [Total Redemption], OrderRow
	                                                from #tempData4
                                                ) dtLap
                                                order by cast([Tipe Laporan] as int),OrderRow asc";
                                            cmd3.CommandTimeout = 0;
                                            cmd3.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
      

                                            using (SqlDataReader dr2 = cmd3.ExecuteReader())
                                            {
                                                if (dr2.HasRows)
                                                {
                                                    while (dr2.Read())
                                                    {
                                                        LaporanDtDMtDYtdYoYDataTrx rSingle = new LaporanDtDMtDYtdYoYDataTrx();
                                                        rSingle.Tipe = dr2["Tipe"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Tipe"]);
                                                        rSingle.Nama = dr2["Nama"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr2["Nama"]);
                                                        rSingle.JmlhNsbSubs = dr2["JmlhNsbSubs"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["JmlhNsbSubs"]);
                                                        rSingle.TotalSubs = dr2["TotalSubs"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["TotalSubs"]);
                                                        rSingle.JmlhNsbRedm = dr2["JmlhNsbRedm"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr2["JmlhNsbRedm"]);
                                                        rSingle.TotalRedm = dr2["TotalRedm"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr2["TotalRedm"]);
                                                        rListDataTrx.Add(rSingle);
                                                    }
                                                }
                                            }
                                        }

                                        var DataTrx =
                                        from r in rListDataTrx
                                        group r by new { r.Tipe, r.Nama, r.JmlhNsbSubs, r.TotalSubs, r.JmlhNsbRedm, r.TotalRedm } into rGroupDataTrx
                                        select rGroupDataTrx;

                                        //

                                        var QueryByFundID =
                                        from r in rList
                                        group r by new { r.DateLastDay, r.DateLastMonth, r.DateLastYear, r.DateLastYearToYear } into rGroup
                                        select rGroup;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            //worksheet.Cells[incRowExcel, 1].Value = "Bersama ini kami sampaikan data NAB dan dana kelolaan. ";
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "KINERJA KELOLAAN EMCO";
                                            worksheet.Cells[incRowExcel, 2].Value = "NAB/Unit";
                                            worksheet.Cells[incRowExcel, 3].Value = "D/D";
                                            worksheet.Cells[incRowExcel, 4].Value = "MTD";
                                            worksheet.Cells[incRowExcel, 5].Value = "YTD";
                                            worksheet.Cells[incRowExcel, 6].Value = "YOY";
                                            worksheet.Cells[incRowExcel, 8].Value = "FUND";
                                            worksheet.Cells[incRowExcel, 9].Value = "D/D";
                                            worksheet.Cells[incRowExcel, 10].Value = "MTD";
                                            worksheet.Cells[incRowExcel, 11].Value = "YTD";
                                            worksheet.Cells[incRowExcel, 12].Value = "YOY";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "FUND";
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString();
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 3].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 4].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 5].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 6].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.DateLastDay;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.DateLastMonth;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.DateLastYear;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.DateLastYearToYear;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "MM/dd/yyyy";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;
                                            int last = incRowExcel;
                                            //int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Navday;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Formula = "SUM ((" + rsDetail.Navday.ToString() + "-" + rsDetail.NavLastDay.ToString() + ")" + "/" + rsDetail.NavLastDay.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 3].Calculate();
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM ((" + rsDetail.Navday.ToString() + "-" + rsDetail.NavLastMonth.ToString() + ")" + "/" + rsDetail.NavLastMonth.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM ((" + rsDetail.Navday.ToString() + "-" + rsDetail.NavLastYear.ToString() + ")" + "/" + rsDetail.NavLastYear.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM ((" + rsDetail.Navday.ToString() + "-" + rsDetail.NavLastYearToYear.ToString() + ")" + "/" + rsDetail.NavLastYearToYear.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NavLastDay;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NavLastMonth;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NavLastYear;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.NavLastYearToYear;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;

                                                incRowExcel++;
                                                //no++;
                                            }
                                            //int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "KINERJA REKSA DANA EMCO";
                                            worksheet.Cells[incRowExcel, 2].Value = "NAB (IDR)";
                                            worksheet.Cells[incRowExcel, 3].Value = "D/D";
                                            worksheet.Cells[incRowExcel, 4].Value = "MTD";
                                            worksheet.Cells[incRowExcel, 5].Value = "YTD";
                                            worksheet.Cells[incRowExcel, 6].Value = "YOY";
                                            worksheet.Cells[incRowExcel, 8].Value = "FUND";
                                            worksheet.Cells[incRowExcel, 9].Value = "D/D";
                                            worksheet.Cells[incRowExcel, 10].Value = "MTD";
                                            worksheet.Cells[incRowExcel, 11].Value = "YTD";
                                            worksheet.Cells[incRowExcel, 12].Value = "YOY";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "FUND";
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString();
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 3].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 4].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 5].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 6].Value = "(%)";
                                            worksheet.Cells[incRowExcel, 9].Value = rsHeader.Key.DateLastDay;
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 10].Value = rsHeader.Key.DateLastMonth;
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.DateLastYear;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "MM/dd/yyyy";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.DateLastYearToYear;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "MM/dd/yyyy";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel = incRowExcel + 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = incRowExcel;
                                            //int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AUMDay;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Formula = "SUM ((" + rsDetail.AUMDay.ToString() + "-" + rsDetail.AUMLastDay.ToString() + ")" + "/" + rsDetail.AUMLastDay.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 3].Calculate();
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM ((" + rsDetail.AUMDay.ToString() + "-" + rsDetail.AUMLastMonth.ToString() + ")" + "/" + rsDetail.AUMLastMonth.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 4].Calculate();
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM ((" + rsDetail.AUMDay.ToString() + "-" + rsDetail.AUMLastYear.ToString() + ")" + "/" + rsDetail.AUMLastYear.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM ((" + rsDetail.AUMDay.ToString() + "-" + rsDetail.AUMLastYearToYear.ToString() + ")" + "/" + rsDetail.AUMLastYearToYear.ToString() + ")" + "* 100";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.AUMLastDay;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.AUMLastMonth;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.AUMLastYear;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.AUMLastYearToYear;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                // mulai dari sini perhitungannya

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;

                                                incRowExcel++;
                                                //no++;
                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1].Value = "TOTAL DANA KELOLAAN :";

                                            //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + incRowExcel + _startRowDetail.ToString() + ":B" + _endRowDetail.ToString() + incRowExcel + ")";
                                            //worksheet.Cells[incRowExcel, 2].Calculate();

                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail.ToString() + ":C" + _endRowDetail.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 3].Calculate();

                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail.ToString() + ":D" + _endRowDetail.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();

                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail.ToString() + ":E" + _endRowDetail.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();

                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail.ToString() + ":F" + _endRowDetail.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 6].Calculate();

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";

                                            //worksheet.Cells[incRowExcel, colTotal].Formula = "SUM(B" + incRowExcel + ":" + _host.IntToLetters(colTotal - 1) + incRowExcel + ")";
                                            incRowExcel++;
                                            incRowExcel = incRowExcel + 2;
                                        }

                                        // Jumlah Nasabah Total PT. Emco Asset Management //

                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Value = "Jumlah Nasabah Total PT. Emco Asset Management";
                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Fill.BackgroundColor.SetColor(Color.Silver);

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = "Nama Reksa Dana";
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Value = "Nasabah Perorangan";
                                        worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = "Nasabah Institusi";
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Value = "Total Nasabah";
                                        worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;
                                        incRowExcel++;

                                        foreach (var rsDataJmlhNasabah in JmlhNasabah)
                                        {
                                            worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = rsDataJmlhNasabah.Key.Nama;
                                            worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                            //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Value = rsDataJmlhNasabah.Key.JmlhIndi;
                                            //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                            worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = rsDataJmlhNasabah.Key.JmlhInst;
                                            //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Merge = true;
                                            worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Value = rsDataJmlhNasabah.Key.Total;
                                            //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;
                                            incRowExcel++;
                                        }
                                        incRowExcel++;
                                        incRowExcel++;

                                        // Data Transaksi Nasabah Harian Reksa Dana Emco Asset Management //

                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Value = "Data Transaksi Nasabah Harian Reksa Dana Emco Asset Management";
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Fill.BackgroundColor.SetColor(Color.Silver);

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = "Nama Reksa Dana";
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + incRowExcel].Value = "Jumlah Nasabah";
                                        worksheet.Cells["C" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + (incRowExcel + 1)].Value = "Subscription";
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = "Total Subscription";
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + incRowExcel].Merge = true;
                                        worksheet.Cells["E" + incRowExcel].Value = "Jumlah Nasabah";
                                        worksheet.Cells["E" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Value = "Redemption/Konversi";
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Value = "Total Redemption";
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;
                                        incRowExcel++;

                                        foreach (var rsDataTrx in DataTrx)
                                        {
                                            if (rsDataTrx.Key.Tipe == "Harian")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = rsDataTrx.Key.Nama;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Value = rsDataTrx.Key.JmlhNsbSubs;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = rsDataTrx.Key.TotalSubs;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Numberformat.Format = "#,#0";
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Value = rsDataTrx.Key.JmlhNsbRedm;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Value = rsDataTrx.Key.TotalRedm;//
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Numberformat.Format = "#,#0";
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                incRowExcel++;
                                                incRowExcel++;
                                            }
                                        }
                                        incRowExcel++;
                                        incRowExcel++;

                                        // Data Transaksi Nasabah Mingguan Reksa Dana Emco Asset Management //

                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Value = "Data Transaksi Nasabah Mingguan Reksa Dana Emco Asset Management";
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Fill.BackgroundColor.SetColor(Color.Silver);

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = "Nama Reksa Dana";
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + incRowExcel].Value = "Jumlah Nasabah";
                                        worksheet.Cells["C" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + (incRowExcel + 1)].Value = "Subscription";
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = "Total Subscription";
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + incRowExcel].Merge = true;
                                        worksheet.Cells["E" + incRowExcel].Value = "Jumlah Nasabah";
                                        worksheet.Cells["E" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Value = "Redemption/Konversi";
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Value = "Total Redemption";
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;
                                        incRowExcel++;

                                        foreach (var rsDataTrx in DataTrx)
                                        {
                                            if (rsDataTrx.Key.Tipe == "Mingguan")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = rsDataTrx.Key.Nama;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Value = rsDataTrx.Key.JmlhNsbSubs;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = rsDataTrx.Key.TotalSubs;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Numberformat.Format = "#,#0";
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Value = rsDataTrx.Key.JmlhNsbRedm;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Value = rsDataTrx.Key.TotalRedm;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Numberformat.Format = "#,#0";
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                incRowExcel++;
                                                incRowExcel++;
                                            }
                                        }
                                        incRowExcel++;
                                        incRowExcel++;

                                        // Data Transaksi Nasabah Bulanan Reksa Dana Emco Asset Management //

                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Value = "Data Transaksi Nasabah Bulanan Reksa Dana Emco Asset Management";
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Fill.BackgroundColor.SetColor(Color.Silver);

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = "Nama Reksa Dana";
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + incRowExcel].Value = "Jumlah Nasabah";
                                        worksheet.Cells["C" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["C" + (incRowExcel + 1)].Value = "Subscription";
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = "Total Subscription";
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + incRowExcel].Merge = true;
                                        worksheet.Cells["E" + incRowExcel].Value = "Jumlah Nasabah";
                                        worksheet.Cells["E" + incRowExcel].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["E" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Value = "Redemption/Konversi";
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Value = "Total Redemption";
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Font.Bold = true;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;
                                        incRowExcel++;

                                        foreach (var rsDataTrx in DataTrx)
                                        {
                                            if (rsDataTrx.Key.Tipe == "Bulanan")
                                            {
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Value = rsDataTrx.Key.Nama;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Merge = true;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells["A" + incRowExcel + ":B" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Value = rsDataTrx.Key.JmlhNsbSubs;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["C" + incRowExcel + ":C" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Value = rsDataTrx.Key.TotalSubs;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.Numberformat.Format = "#,#0";
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["D" + incRowExcel + ":D" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Value = rsDataTrx.Key.JmlhNsbRedm;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["E" + incRowExcel + ":E" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Merge = true;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Value = rsDataTrx.Key.TotalRedm;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.Numberformat.Format = "#,#0";
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["F" + incRowExcel + ":F" + (incRowExcel + 1)].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                incRowExcel++;
                                                incRowExcel++;
                                            }
                                        }
                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 35;
                                        worksheet.Column(9).Width = 25;
                                        worksheet.Column(10).Width = 25;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 25;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&18 PT EMCO ASSET MANAGEMENT \n " + "&12 LAPORAN DtD MtD Ytd YoY";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();

                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Laporan NAV Projection
            else if (_FundAccountingRpt.ReportName.Equals("Laporan NAV Projection"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText =

                             @"
                            declare @FundPK  int
                        declare @StandartFundAdmin  int

                        CREATE TABLE #TotalAUM
                        (FundPK int,AUM numeric (22,2))
                        CREATE TABLE #TotalUnit
                        (FundPK int,Unit numeric (22,4))
                        create table #Shares
                        (FundPK int,amount numeric(22,4))
                        create table #Cash
                        (FundPK int,amount numeric(22,4))
                        create table #Expense
                        (FundPK int,amount numeric(22,4))
                        create table #AR
                        (FundPK int,amount numeric(22,4))
                        create table #Net
                        (FundPK int,amount numeric(22,4))

                        DECLARE A CURSOR FOR 
                        Select FundPK,StandartFundAdmin from Fund A left join BankCustodian B on A.BankBranchPK  = B.BankCustodianPK and B.status  = 2
                        where A.status  = 2 

                        Open A
                        Fetch Next From A
                        Into @FundPK,@StandartFundAdmin
                        Declare @FundJournalAccountPK int
                        While @@FETCH_STATUS = 0
                        BEGIN



                        IF (@StandartFundAdmin = 1)
                        BEGIN
                        Insert Into #TotalAUM (FundPK,AUM)
                        Select @FundPK,sum(basedebit-basecredit) from FundJournalDetail A
                        left join FundjournalAccount B on A.FundJournalAccountPK = B.FundJournalAccountPK and B.Status= 2
                        left join FundJournal C on A.FundJournalPK = C.FundJournalPK and C.Status= 2 and C.Posted = 1 and C.Reversed = 0
                        where FundPK = @FundPK and A.Status  = 2 and DetailDescription <> 'ADJUST' and Valuedate <= @ValueDate
                        and B.Type in (1,2) and B.ID not like '202%'

                        --Market Value Hari ini - Market Value Kemarin
                        Insert Into #TotalAUM (FundPK,AUM)
                        select A.FundPK,sum(A.Amount) from (
                        select @FundPK FundPK,sum(MarketValue) Amount from FundPosition where date = @ValueDate and fundpk  = @FundPK and Status  = 2
                        union all
                        select @FundPK FundPK,sum(MarketValue) * -1 Amount from FundPosition where date = dbo.FWorkingDay(@ValueDate,-1) and fundpk  = @FundPK and Status  = 2
                        ) A group by A.FundPK

                        END
                        ELSE
                        BEGIN
                        --AUM Kemarin
                        Insert Into #TotalAUM (FundPK,AUM)
                        select FundPK,AUM from CloseNav where Date = dbo.FWorkingDay(@ValueDate,-1) and fundpk  = @FundPK and Status  = 2
                        --Market Value Hari ini - Market Value Kemarin
                        Insert Into #TotalAUM (FundPK,AUM)
                        select A.FundPK,sum(A.Amount) from (
                        select @FundPK FundPK,sum(MarketValue) Amount from FundPosition where date = @ValueDate and fundpk  = @FundPK and Status  = 2
                        union all
                        select @FundPK FundPK,sum(MarketValue) * -1 Amount from FundPosition where date = dbo.FWorkingDay(@ValueDate,-1) and fundpk  = @FundPK and Status  = 2
                        ) A group by A.FundPK

                        --Settle Hari ini
                        Insert Into #TotalAUM (FundPK,AUM)
                        select @FundPK FundPK,(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ) *-1) *-1 Amount from investment 
                        where  fundpk  = @FundPK and SettlementDate = @valuedate and statusSettlement  = 2

                        --Net Settlement
                        Insert Into #TotalAUM (FundPK,AUM)
                        select A.FundPK,sum(A.Amount) from (
                        select @FundPK FundPK,sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ) *-1 Amount from investment 
                        where  fundpk  = @FundPK and SettlementDate between @valuedate and dbo.FWorkingDay(@ValueDate,2) and statusSettlement  = 2
                        union all
                        select @FundPK FundPK,sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ) Amount from investment 
                        where  fundpk  = @FundPK and SettlementDate between dbo.FWorkingDay(@ValueDate,1) and dbo.FWorkingDay(@ValueDate,3) and statusSettlement  = 2
                        ) A group by A.FundPK

                        --SUBS REDEMP                            
                        Insert Into #TotalAUM (FundPK,AUM)  
                        select FundPK,sum(TotalCashAmount) from ClientSubscription where ValueDate = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @FundPK and status  = 2 and Posted  = 1
                        Group By FundPK

                        Insert Into #TotalAUM (FundPK,AUM)  
                        select FundPK,sum(TotalCashAmount) from ClientSubscription where ValueDate = @ValueDate and FundPK = @FundPK and status  = 1 and BitImmediateTransaction = 1
                        Group By FundPK

                        Insert Into #TotalAUM (FundPK,AUM)  
                        select FundPK,sum(TotalCashAmount * -1) from ClientRedemption where ValueDate = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @FundPK and status  = 2 and Posted  = 1
                        Group By FundPK

                        END


                        if Not Exists
                        (select FundJournalAccountPK from fundjournaldetail A left join fundjournal B
                        on A.FundJournalPK = B.FundJournalPK and B.Status= 2  and B.Posted = 1  and B.Reversed = 0
                        where  ValueDate = @valuedate and TrxName = 'DAILY FEE' and fundpk = @FundPK) 
                        BEGIN 
                        Declare @BAum     numeric(22,8)  
                        Declare @BFundPK int  
                        Declare @BManagementFeePercent numeric(18,6)                  
                        Declare @BCustodiFeePercent  numeric(18,6)                  
                        Declare @BAuditFeePercent  numeric(18,6)                  
                        Declare @BManagementFeeDays  int                  
                        Declare @BCustodiFeeDays  int                  
                        Declare @BAuditFeeDays   int     
                        Declare @BManagementFeeAmount numeric(18,6)                  
                        Declare @BCustodiFeeAmount  numeric(18,6)                  
                        Declare @BAuditFeeAmount  numeric(18,6)  
                        Declare @feeDays  int                           

                        Select @feeDays =  DateDiff(day,ValueDate,@ValueDate) From EndDayTrails              

                        Where EndDayTrailsPK =              

                        (              

                        Select Max(EndDayTrailsPK) From EndDayTrails Where ValueDate < @ValueDate and status = 2              

                        )              

                        set @feeDays = isnull(@feeDays,1)


                        Declare B Cursor For                  

                        Select FundPK,ManagementFeePercent,CustodiFeePercent,AuditFeeAmount,ManagementFeeDays, CustodiFeeDays,AuditFeeDays                  

                        From FundFee Where FundPK  = @FundPK and Date =                  

                        (                  
                        Select max(date) From FundFee where status = 2 and date < @ValueDate                  

                        )                  

                        Open B                  

                        Fetch Next From B                  

                        Into @BFundPK,@BManagementFeePercent,@BCustodiFeePercent,@BAuditFeeAmount,@BManagementFeeDays,@BCustodiFeeDays,@BAuditFeeDays                  

                        While @@FETCH_STATUS = 0                  

                        Begin  
                        Select @BAum =  AUM From CloseNAV where Date = dbo.FWorkingDay(@ValueDate, - 1) and Status =  2 and FundPK = @BFundPK 
                        insert into #Expense (FundPK,Amount)
                        Select  @BFundPK,isnull(((@BAum * (@BManagementFeePercent/100))/ @BManagementFeeDays),0) * @FeeDays * -1   
                        insert into #Expense (FundPK,Amount)                 
                        Select  @BFundPK,isnull(((@BAum * (@BCustodiFeePercent/100))/ @BCustodiFeeDays),0)  * @FeeDays * -1  
                        insert into #Expense (FundPK,Amount)                
                        Select  @BFundPK,isnull((@BAuditFeeAmount),0)  * @FeeDays * -1   

                        Fetch next From B                   

                        Into @BFundPK,@BManagementFeePercent,@BCustodiFeePercent,@BAuditFeeAmount,@BManagementFeeDays,@BCustodiFeeDays,@BAuditFeeDays             

                        end                  

                        Close B                  

                        Deallocate B 

                        -- GENERATE INTEREST
                        Declare @CInstrumentPK    int         

                        Declare @CInstrumentID    nvarchar(100)                  

                        Declare @CFundPK     int                  

                        Declare @CTrxAmount     numeric(22,6)                  

                        Declare @CMarketValue    numeric(22,6)                  

                        Declare @CInstrumentTypePK   int                  

                        Declare @CCurrencyPK    int                               

                        Declare @CFinalAmount    numeric(22,6)                  

                        Declare @CLastCouponDate   datetime                  

                        Declare @CInterestAmount   numeric(18,6)                  

                        Declare @CBalance     numeric(18,0)                  

                        Declare @CTaxExpenseAmount   numeric(18,6)                  

                        Declare @CTaxExpensePercent   numeric(18,8)                  

                        Declare @CAcqDate   datetime                  

                        Declare @InterestIncometAcc   int                  

                        Declare @CMaturityDate  datetime  

                        Declare @CSell   int 




                        Declare C Cursor For                   

                        Select A.InstrumentPK,A.FundPK,A.TrxAmount,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   

                        ,B.TaxExpensePercent, A.AcqDate, A.MaturityDate,0 Sell                  

                        From FundPosition A                 

                        Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  

                        where TrailsPK = (              

                        Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = @ValueDate

                        ) 

                        UNION ALL
                        Select A.InstrumentPK,A.FundPK,A.TrxAmount,A.MarketValue,B.InstrumentTypePK, B.CurrencyPK,A.InstrumentID,dbo.FgetLastCouponDate(@ValueDate,A.InstrumentPK),A.Balance                   

                        ,B.TaxExpensePercent, A.AcqDate, A.MaturityDate,1 Sell                 

                        From FundPosition A                 

                        Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.Status = 2                  

                        where TrailsPK = (              

                        Select EndDayTrailsFundPortfolioPK from EndDayTrailsFundPortfolio where status = 2 and ValueDate = dbo.fworkingday(@ValueDate,-1)

                        ) and A.InstrumentPK not in (select InstrumentPK from FundPosition where status  = 2 and date = @Valuedate)           

                        Open C                  

                        Fetch Next From C                  

                        Into @CInstrumentPK,@CFundPK,@CTrxAmount,@CMarketValue,@CInstrumentTypePK,@CCurrencyPK,@CInstrumentID,@CLastCouponDate,@CBalance,@CTaxExpensePercent,@CAcqDate,@CMaturityDate,@CSell                  



                        While @@FETCH_STATUS = 0                  

                        Begin                  

                        -- GENERATE INTEREST ACCRUED                  

                        if @CAcqDate < @ValueDate              

                        Begin              
                        if @CInstrumentTypePK in (2,3)                  
                        BEGIN                  
                        Select @CInterestAmount = dbo.[FGetBondInterestAccrued] (@ValueDate,@CInstrumentPK,@CBalance)                  
                        set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
                        set @CFinalAmount = @CInterestAmount - @CTaxExpenseAmount                  
                        if @CInterestAmount > 0                  
                        BEGIN                  
                        insert into #TotalAUM (FundPK,AUM)
                        select @CFundPK,@CFinalAmount
                        END                  
                        END                  
                        end              
                        if @CInstrumentTypePK in (5)                  
                        BEGIN                  
                        Select @CInterestAmount = dbo.[FGetDepositoInterestAccrued] (@ValueDate,@CInstrumentPK,@CBalance)                  
                        set @CTaxExpenseAmount = (@CTaxExpensePercent / 100) * @CInterestAmount                  
                        set @CFinalAmount = @CInterestAmount - @CTaxExpenseAmount                  
                        if @CInterestAmount > 0                  
                        BEGIN                  
                        insert into #TotalAUM (FundPK,AUM)
                        select @CFundPK,@CFinalAmount
                        END                  
                        END                   

                        Fetch Next From C                  

                        Into @CInstrumentPK,@CFundPK,@CTrxAmount,@CMarketValue,@CInstrumentTypePK,@CCurrencyPK,@CInstrumentID,@CLastCouponDate,@CBalance,@CTaxExpensePercent,@CAcqDate,@CMaturityDate,@CSell                  

                        end                  

                        Close C                  

                        Deallocate C 
 




                        END 

               
                        insert into #TotalUnit (FundPK,Unit)
                        select @FundPK,case when isnull([dbo].[FGetTotalUnitByFundPK](dbo.FWorkingDay(@ValueDate,-1),@FundPK),0) = 0 then 1 else isnull([dbo].[FGetTotalUnitByFundPK](dbo.FWorkingDay(@ValueDate,-1),@FundPK),0) end

                        Fetch next From A Into @FundPK,@StandartFundAdmin
                        END
                        Close A
                        Deallocate A 

                        --drop table #Shares
                        --drop table #Cash
                        --drop table #Expense
                        --drop table #AR
                        --drop table #Net
                        --drop table #TotalAUM
                        --drop table #TotalUnit
                        --drop table #NAV

                        Insert Into #TotalAUM (FundPK,AUM)
                        select FundPK,sum(amount) from #Expense  Group By FundPK
                    

                        CREATE TABLE #NAV
                        (ValueDate Datetime, FundPK int, Amount numeric(22,2))
                        INSERT INTO #NAV (ValueDate,FundPK,Amount)
                        select @ValueDate,FundPK,sum(AUM) from #TotalAUM Group By FundPK 

                        --select FundPK,sum(amount) from #Shares Group By FundPK
                        --select FundPK,sum(amount) from #Cash  Group By FundPK
                        --select FundPK,sum(amount) from #Expense  Group By FundPK
                        --select FundPK,sum(amount) from #AR  Group By FundPK
                        --select FundPK,sum(amount) from #Net  Group By FundPK

                        select A.ValueDate,A.FundName,isnull(A.Nav,0) Nav,isnull(A.AUM,0) AUM,isnull(sum(((A.Nav/A.LastNAV) - 1)*100),0) Compare from (
                        select ValueDate,C.Name FundName,isnull(Sum(Amount/Unit),0) Nav, isnull(Amount,0) AUM,isnull(D.NAV,1) LastNAV from #NAV A 
                        left join #TotalUnit B on A.FundPK = B.FundPK
                        left join Fund C on A.FundPK = C.FundPK and C.Status = 2
                        left join CloseNav D on A.FundPK = D.FundPK and D.Status = 2 and D.Date  = dbo.FWorkingDay(@ValueDate,-1)
                        Group By ValueDate,C.Name,Amount,D.Nav) A
                        Group By A.ValueDate,A.FundName,A.Nav,A.AUM  ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanNAVProjection" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanNAVProjection" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "LaporanNAVProjection";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LaporanNAVProjection");

                                        int incRowExcel = 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT.EMCO ASSET MANAGEMENT";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "LAPORAN NAV PREDICTION";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();                                                                 
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanNAVProjection> rList = new List<LaporanNAVProjection>();
                                        while (dr0.Read())
                                        {
                                            LaporanNAVProjection rSingle = new LaporanNAVProjection();
                                            rSingle.Compare = dr0["Compare"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Compare"]);
                                            rSingle.NAV = dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AUM = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "Bersama ini kami sampaikan Laporan NAV Prediction. ";


                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "JENIS REKSA DANA";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 4].Value = "PERCENTAGE";



                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Compare;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;


                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 3].Value = "TOTAL DANA KELOLAAN :";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + first.ToString() + ":D" + last.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 4];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&14 PT EMCO ASSET MANAGEMENT \n " + "&12 LAPORAN NAV PREDICTION "; 

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Counterpart Percentage Monthly
            else if (_FundAccountingRpt.ReportName.Equals("Counterpart Percentage Monthly"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFundFrom = "";
                            string _paramCounterpart = "";
                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }

                            if (!_host.findString(_FundAccountingRpt.CounterpartFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.CounterpartFrom))
                            {
                                _paramCounterpart = " And A.CounterpartPK  in ( " + _FundAccountingRpt.CounterpartFrom + " ) ";
                            }
                            else
                            {
                                _paramCounterpart = "";
                            }
                            cmd.CommandText = @"
                            Create table #BrokerPercentageRptMoM
                            (
	   
                            Bulan nvarchar(100),
                            Prio int,
                            Period nvarchar(4),
                            Counterpart nvarchar(100),
                            DoneAmount numeric(22,4)
                            )


                            insert into #BrokerPercentageRptMoM
                            Select DateName(month , DateAdd( month , month(ValueDate) , -1 )) Bulan,Month(ValueDate) Prio,
                            Year(ValueDate) Period,B.ID Counterpart,Sum(TotalAmount) DoneAmount from Investment A
                            left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.status = 2
                            left join Fund C on A.FundPK = C.FundPK and C.Status = 2
                            where StatusSettlement = 2 and InstrumentTypePK = 1 and Valuedate between @ValueDateFrom and @ValueDateTo" + _paramFundFrom + _paramCounterpart + @"
                            Group By 
                            DateName(month , DateAdd( month , month(ValueDate) , -1 )),Month(ValueDate),
                            Year(ValueDate),B.ID
                            Order By Prio Asc

                            declare @QuerySelect nvarchar(max)
                            declare @QueryParam nvarchar(max)
                            declare @QueryFinal nvarchar(max)
                            set @QueryParam = ''
                            set @QuerySelect = ''

                            Select @QueryParam = @QueryParam + '['+ A.Counterpart +'],' from 
                            (
                            select distinct Counterpart from #BrokerPercentageRptMoM 
                            ) A 

                            Select @QuerySelect = @QuerySelect + 'isnull(['+ A.Counterpart +'],0) ['+ A.Counterpart +'],' from 
                            (
                            select distinct Counterpart from #BrokerPercentageRptMoM 
                            ) A 

                            select @QuerySelect = left(@QuerySelect,len(@QuerySelect)-1) 

                            select @QueryParam =  left(@QueryParam,len(@QueryParam)-1) 


                            set @QueryFinal = '
                            Select Bulan,Period, ' + @QuerySelect + ' From #BrokerPercentageRptMoM 
                            pivot (sum(DoneAmount) for Counterpart in( '+ @QueryParam + '  )) Result  order by Prio asc'

                            exec(@QueryFinal)";
                            cmd.CommandTimeout = 0;
                           
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CounterpartPercentageMonthly" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Counterpart Percentage Monthly");



                                        int incRowExcel = 2;
                                        int _startRowDetail = incRowExcel;
                                        int _rowCtrp = 0;
                                        int _endRowDetail = 0;
                                        int _endColDetail = 0;
                                        decimal _totalAMount = _host.getDoneAmountByFundAndCounterpart(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo, _FundAccountingRpt.FundFrom, _FundAccountingRpt.CounterpartFrom);
                                        while (dr0.Read())
                                        {
                                            int incColExcel = 1;
                                            for (int inc1 = 0; inc1 < dr0.FieldCount; inc1++)
                                            {

                                                worksheet.Cells[1, incColExcel].Value = dr0.GetName(inc1);
                                                worksheet.Cells[1, incColExcel].Style.Font.Bold = true;
                                                worksheet.Cells[1, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[1, incColExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Font.Size = Tools.DefaultReportFontSize();

                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                if (incColExcel == 2)
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = Convert.ToDecimal(dr0.GetValue(inc1));
                                                    worksheet.Column(incColExcel).Width = 15;
                                                }
                                                else if (incColExcel >= 3)
                                                {
                                                    _rowCtrp = incColExcel;
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1);
                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Column(incColExcel).Width = 20;
                                                    worksheet.Cells[15, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14)";
                                                    worksheet.Cells[15, _rowCtrp].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[15, incColExcel].Style.Font.Bold = true;
                                                    worksheet.Cells[15, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[15, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[15, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[15, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells[16, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14) * 100 /" + _totalAMount;
                                                    worksheet.Cells[16, _rowCtrp].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[16, _rowCtrp].Style.Font.Bold = true;
                                                    worksheet.Cells[17, _rowCtrp].Value = _host.GetAlphabet(_rowCtrp) + ".30%";
                                                    worksheet.Cells[17, _rowCtrp].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[18, _rowCtrp].Formula = "30 - SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14) * 100 /" + _totalAMount;
                                                    worksheet.Cells[18, _rowCtrp].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[18, _rowCtrp].Style.Font.Bold = true;
                                                    worksheet.Cells[19, _rowCtrp].Value = _host.GetAlphabet(_rowCtrp) + ".COMPLY";


                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr0.GetValue(inc1).ToString();
                                                }


                                                incColExcel++;

                                            }
                                            _endColDetail = incColExcel - 1;
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(C" + incRowExcel + ":" + _host.GetAlphabet(_endColDetail) + incRowExcel + ")";
                                            worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                            worksheet.Column(incColExcel).Width = 20;

                                            worksheet.Cells[15, incColExcel].Value = _totalAMount;
                                            worksheet.Cells[15, incColExcel].Style.Numberformat.Format = "#,##0";


                                            incRowExcel++;


                                        }
                                        worksheet.Cells[15, 1].Value = "TOTAL : ";
                                        worksheet.Cells[15, 1].Style.Font.Bold = true;
                                        worksheet.Cells[15, 1].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 1].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 2].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 2].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[15, 2].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[16, 1].Value = "%";
                                        worksheet.Cells[16, 1].Style.Font.Bold = true;
                                        worksheet.Cells[17, 1].Value = "MAX : ";
                                        worksheet.Cells[17, 1].Style.Font.Bold = true;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A1:Z1"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.Cells["K2:Z2"].AutoFitColumns(); // CEK DARI ENTRY ID SAMPE LAST UPDATE
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 COUNTERPART Percentage MONTHLY";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Counterpart Percentage
            else if (_FundAccountingRpt.ReportName.Equals("Counterpart Percentage"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText =
                                        @"Create table #BrokerPercentageRpt
                                        (
                                        FundID nvarchar(100),
                                        Bulan nvarchar(100),
                                        Prio int,
                                        Period nvarchar(4),
                                        Counterpart nvarchar(100),
                                        DoneAmount numeric(22,4),
                                        InstrumentTypePK int
                                        )


                                        insert into #BrokerPercentageRpt
                                        Select C.ID FundID,DateName(month , DateAdd( month , month(ValueDate) , -1 )) Bulan,Month(ValueDate) Prio,
                                        Year(ValueDate) Period,B.ID Counterpart,Sum(TotalAmount) DoneAmount,InstrumentTypePK from Investment A
                                        left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.status = 2
                                        left join Fund C on A.FundPK = C.FundPK and C.Status = 2
                                        where StatusSettlement = 2 and Valuedate between @ValueDateFrom and @ValueDateTo and InstrumentTypePK = 1

                                        Group By 
                                        DateName(month , DateAdd( month , month(ValueDate) , -1 )),Month(ValueDate),
                                        Year(ValueDate),B.ID,C.ID,InstrumentTypePK
                                        Order By C.ID,Prio Asc

                                        declare @QuerySelect nvarchar(max)
                                        declare @QueryParam nvarchar(max)
                                        declare @QueryFinal nvarchar(max)
                                        set @QueryParam = ''
                                        set @QuerySelect = ''

                                        Select @QueryParam = @QueryParam + '['+ A.Counterpart +'],' from 
                                        (
                                        select distinct Counterpart from #BrokerPercentageRpt 
                                        ) A 

                                        Select @QuerySelect = @QuerySelect + 'isnull(['+ A.Counterpart +'],0) ['+ A.Counterpart +'],' from 
                                        (
                                        select distinct Counterpart from #BrokerPercentageRpt 
                                        ) A 

                                        select @QuerySelect = left(@QuerySelect,len(@QuerySelect)-1) 

                                        select @QueryParam =  left(@QueryParam,len(@QueryParam)-1) 


                                        set @QueryFinal = '
                                        Select FundID From #BrokerPercentageRpt 
                                        pivot (sum(DoneAmount) for Counterpart in( '+ @QueryParam + '  )) Result where InstrumentTypePK = 1  order by FundID asc'


                                        exec(@QueryFinal)
                                        ";
                            cmd.CommandTimeout = 0;
                            //cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    List<CounterpartPercentage> rList = new List<CounterpartPercentage>();
                                    while (dr0.Read())
                                    {
                                        CounterpartPercentage rSingle = new CounterpartPercentage();
                                        rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                        rList.Add(rSingle);

                                    }


                                    var GroupByValueDate =
                                           from r in rList
                                           group r by new { r.FundID } into rGroup
                                           select rGroup;



                                    ////ini untuk mengcopy dari templat Excelnya
                                    string filePath = Tools.ReportsPath + "CounterpartPercentage" + "_" + _userID + ".xlsx";
                                    File.Copy(Tools.ReportsPath + "CounterpartPercentage.xlsx", filePath, true);
                                    FileInfo excelFile = new FileInfo(filePath);

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        foreach (var rsHeader in GroupByValueDate)
                                        {

                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText =
                                                    @"Create table #BrokerPercentageRpt
                                                    (
                                                    FundID nvarchar(100),
                                                    Bulan nvarchar(100),
                                                    Prio int,
                                                    Period nvarchar(4),
                                                    Counterpart nvarchar(100),
                                                    DoneAmount numeric(22,4),
                                                    InstrumentTypePK int
                                                    )


                                                    insert into #BrokerPercentageRpt
                                                    Select C.ID FundID,DateName(month , DateAdd( month , month(ValueDate) , -1 )) Bulan,Month(ValueDate) Prio,
                                                    Year(ValueDate) Period,B.ID Counterpart,Sum(TotalAmount) DoneAmount,InstrumentTypePK from Investment A
                                                    left join Counterpart B on A.CounterpartPK = B.CounterpartPK and B.status = 2
                                                    left join Fund C on A.FundPK = C.FundPK and C.Status = 2
                                                    where StatusSettlement = 2 and Valuedate between @ValueDateFrom and @ValueDateTo and InstrumentTypePK = 1

                                                    Group By 
                                                    DateName(month , DateAdd( month , month(ValueDate) , -1 )),Month(ValueDate),
                                                    Year(ValueDate),B.ID,C.ID,InstrumentTypePK
                                                    Order By C.ID,Prio Asc

                                                    declare @QuerySelect nvarchar(max)
                                                    declare @QueryParam nvarchar(max)
                                                    declare @QueryFinal nvarchar(max)
                                                    set @QueryParam = ''
                                                    set @QuerySelect = ''

                                                    Select @QueryParam = @QueryParam + '['+ A.Counterpart +'],' from 
                                                    (
                                                    select distinct Counterpart from #BrokerPercentageRpt 
                                                    ) A 

                                                    Select @QuerySelect = @QuerySelect + 'isnull(['+ A.Counterpart +'],0) ['+ A.Counterpart +'],' from 
                                                    (
                                                    select distinct Counterpart from #BrokerPercentageRpt 
                                                    ) A 

                                                    select @QuerySelect = left(@QuerySelect,len(@QuerySelect)-1) 

                                                    select @QueryParam =  left(@QueryParam,len(@QueryParam)-1) 


                                                    set @QueryFinal = '
                                                    Select Bulan,' + @QuerySelect + ' From #BrokerPercentageRpt 
                                                    pivot (sum(DoneAmount) for Counterpart in( '+ @QueryParam + '  )) Result where InstrumentTypePK = 1 and FundID  = ''' + @FundID + ''' order by FundID,Prio asc'


                                                    exec(@QueryFinal)
                                                    ";
                                                    cmd1.CommandTimeout = 0;
                                                    //cmd.Parameters.AddWithValue("@DateFrom", _accountingRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@FundID", rsHeader.Key.FundID);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (!dr1.HasRows)
                                                        {
                                                            return false;
                                                        }
                                                        else
                                                        {
                                                            //// ini posisi Sheet Templat Excelnya
                                                            ExcelWorksheet worksheet = package.Workbook.Worksheets[rsHeader.Key.FundID];

                                                            int incRowExcel;
                                                            int incColExcel = 1;
                                                            incRowExcel = 2;
                                                            int _startRowDetail = incRowExcel;
                                                            int _rowCtrp = 0;
                                                            int _endRowDetail = 0;
                                                            int _endColDetail = 0;
                                                            //decimal _totalAmount = _host.getDoneAmountByFundAnAllCounterpart(_FundAccountingRpt.ValueDateFrom, _FundAccountingRpt.ValueDateTo, rsHeader.Key.FundID);
                                                            decimal _totalAmount = 0;
                                                            // ini buat header
                                                            for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                            {
                                                                worksheet.Cells[1, incColExcel].Value = dr1.GetName(inc1).ToString();
                                                                incColExcel++;
                                                            }
                                                            while (dr1.Read())
                                                            {
                                                                incColExcel = 1;
                                                                for (int inc1 = 0; inc1 < dr1.FieldCount; inc1++)
                                                                {
                                                                    _rowCtrp = incColExcel;
                                                                    worksheet.Cells[incRowExcel, incColExcel].Value = dr1.GetValue(inc1);
                                                                    worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                                                    if (_rowCtrp != 1)
                                                                    {
                                                                        worksheet.Cells[15, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14)";
                                                                        worksheet.Cells[15, incColExcel].Style.Font.Bold = true;
                                                                        worksheet.Cells[15, _rowCtrp].Style.Numberformat.Format = "#,##0";
                                                                        worksheet.Cells[15, incColExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells[15, incColExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells[15, incColExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells[15, incColExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                                        worksheet.Cells[16, _rowCtrp].Formula = "SUM(" + _host.GetAlphabet(_rowCtrp) + _startRowDetail + ":" + _host.GetAlphabet(_rowCtrp) + "14) * 100 /" + _totalAmount;
                                                                        worksheet.Cells[16, incColExcel].Style.Font.Bold = true;
                                                                        worksheet.Cells[16, _rowCtrp].Style.Numberformat.Format = "#,##0.00";
                                                                    }

                                                                    incColExcel++;
                                                                }
                                                                _endColDetail = incColExcel - 1;
                                                                _endRowDetail = incRowExcel - 1;
                                                                worksheet.Cells[incRowExcel, incColExcel].Formula = "SUM(B" + incRowExcel + ":" + _host.GetAlphabet(_endColDetail) + incRowExcel + ")";
                                                                worksheet.Cells[incRowExcel, incColExcel].Style.Numberformat.Format = "#,##0";
                                                                worksheet.Column(incColExcel).Width = 20;

                                                                worksheet.Cells[15, incColExcel].Value = _totalAmount;
                                                                worksheet.Cells[15, incColExcel].Style.Numberformat.Format = "#,##0";
                                                                incRowExcel++;
                                                            }

                                                            worksheet.Column(1).Width = 15;
                                                            worksheet.Column(2).Width = 15;
                                                            worksheet.Column(3).Width = 15;
                                                            worksheet.Column(4).Width = 15;
                                                            worksheet.Column(5).Width = 15;
                                                            worksheet.Column(6).Width = 15;
                                                            worksheet.Column(7).Width = 15;
                                                            worksheet.Column(8).Width = 15;
                                                            worksheet.Column(9).Width = 15;
                                                            worksheet.Column(10).Width = 15;
                                                            worksheet.Column(11).Width = 15;
                                                            worksheet.Column(12).Width = 15;
                                                            worksheet.Column(13).Width = 15;
                                                            worksheet.Column(14).Width = 15;
                                                            worksheet.Column(15).Width = 15;



                                                        }
                                                    }
                                                }

                                            }

                                        }
                                        package.Save();
                                    }
                                    return true;
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Perhitungan MI Fee
            else if (_FundAccountingRpt.ReportName.Equals("Perhitungan MI Fee"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
                            Declare @StartOfYear datetime
                            set @StartOfYear =  convert(varchar(10),DATEADD(yy, DATEDIFF(yy,0,@ValueDateTo), 0),101) 
                            Create Table #A (Name nvarchar (100),ManagementFeePercent numeric(22,4),ManagementFeeDays numeric(22),Date datetime,ID nvarchar (50),AUM numeric(22,4), GrossAmount numeric(22,4))
                            insert into #A(Name,ManagementFeePercent,ManagementFeeDays,Date,ID,AUM,GrossAmount)
                            select B.Name,C.ManagementFeePercent,C.ManagementFeeDays,A.Date,B.ID,D.AUM,
                            E.ManagementFeeAmount from CloseNAV A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join FundFee C on B.FundPK = C.FundPK and C.status in (1,2)
                            left join CloseNAV D on  dbo.fworkingday(A.Date,-1) = D.Date and D.status = 2 and A.FundPK = D.FundPK
                            left join FundDailyFee E on A.Date = E.Date and B.FundPK = E.FundPK
                            where A.date between @ValueDateFrom and @ValueDateTo and A.Status = 2 " + _paramFundFrom +
                            @" 
                            group by B.Name, C.ManagementFeePercent,C.ManagementFeeDays, A.Date,D.AUM,B.ID,ManagementFeeAmount
                            order by A.date asc

                            create table #B (Name nvarchar (100),ManagementFeePercent numeric(22,4),ManagementFeeDays numeric(22),Date datetime,AUM numeric(22,4),ID nvarchar (50),GrossAmount numeric(22,4),DPP numeric(22,4),PPN numeric(22,4),PPH23 numeric(22,4),OJK numeric(22,4))
                            insert into #B (Name,ManagementFeePercent,ManagementFeeDays,Date,AUM,ID,GrossAmount,DPP,PPN,PPH23,OJK)
                            select Name,ManagementFeePercent,ManagementFeeDays,Date,AUM,ID,GrossAmount,GrossAmount/1.1 DPP,sum(GrossAmount - (GrossAmount/1.1)) PPN,sum(GrossAmount/1.1)* 0.02 PPH23,sum(((AUM * 0.045)/100)/246) OJK
                            from #A
                            group by Name,ManagementFeePercent,ManagementFeeDays,Date,AUM,ID,GrossAmount
                            order by date asc

                            select Name,ManagementFeePercent,ManagementFeeDays,Date,DateName(dw,Date) Days,case when dbo.FWorkingDay(Date,-1) <= @StartOfYear then datediff(day,@StartOfYear - 1,date) else  datediff(day,dbo.FWorkingDay(Date,-1),date) end NumberOfDays,AUM,ID,
                            GrossAmount,DPP,PPN,PPH23,OJK,sum(GrossAmount - PPN - PPH23 - OJK) Nett 
                            from #B
                            group by Name,ManagementFeePercent,ManagementFeeDays,Date,AUM,ID,GrossAmount,DPP,PPN,PPH23,OJK
                            order by date asc";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);
                           

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PerhitunganMIFee" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Perhitungan MI Fee");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PerhitunganMIFee> rList = new List<PerhitunganMIFee>();
                                        while (dr0.Read())
                                        {

                                            PerhitunganMIFee rSingle = new PerhitunganMIFee();
                                            rSingle.FundID = Convert.ToString(dr0["Name"]);
                                            rSingle.Days = Convert.ToString(dr0["Days"]);
                                            rSingle.Date = Convert.ToString(dr0["Date"]);
                                            rSingle.SaldoBalanceShares = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Numberofdays = dr0["ManagementFeeDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFeeDays"]);
                                            rSingle.BasicDay = Convert.ToDecimal(dr0["NumberOfDays"]);
                                            rSingle.FeeAmount = dr0["ManagementFeePercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["ManagementFeePercent"]);
                                            rSingle.AdjFee = Convert.ToDecimal(dr0["NumberOfDays"]);
                                            rSingle.GrossAmount = dr0["GrossAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.DPP = dr0["DPP"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DPP"]);
                                            rSingle.PPN = dr0["PPN"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PPN"]);
                                            rSingle.PPh23 = dr0["PPh23"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["PPh23"]);
                                            rSingle.OJK = dr0["OJK"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["OJK"]);
                                            rSingle.Net = dr0["Nett"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nett"]);
                                            rSingle.Cumulative = dr0["Nett"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Nett"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                orderby r.FundID ascending
                                                group r by new { r.FundID } into rGroup
                                                select rGroup;

                                        int incRowExcel = 2;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundID;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Masa";
                                            worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MMM/yyyy";
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FEE REPORT " + rsHeader.Key.FundID;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 1].Value = _FundAccountingRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Day";
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Saldo Balance (Shares)";
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Number of days";
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Value = "Basic Day";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6].Value = "Management Fee Expense EMCO";
                                            worksheet.Cells["F" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 6].Value = "Fee Amount (%)";
                                            worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Value = "Adj Fee (%)";
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Value = "Amount Gross";
                                            worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "DPP";
                                            worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 10].Value = "PPN";
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "PPh 23";
                                            worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 12].Value = "OJK";
                                            worksheet.Cells["M" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = "Net";
                                            worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 14].Value = "Cumulative";
                                            worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            string _range = "A" + incRowExcel + ":N" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":N" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":N" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":N" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":N" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Double;

                                                worksheet.Cells["A" + RowG + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":N" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":N" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Double;


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Days;
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.Date).ToShortDateString();
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SaldoBalanceShares;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Numberofdays;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BasicDay;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,####0.00";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 7].Value = rsDetail.AdjFee;
                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,####0";
                                                //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.DPP;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.PPN;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.PPh23;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.OJK;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Net;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,####0";
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;
                                                int _row = incRowExcel - 1;
                                                worksheet.Cells[_row, 14].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";


                                            }

                                            worksheet.Cells[incRowExcel, 3].Value = "Total";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";





                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;


                                        }

                                        string _rangeDetail = "A:N";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Perhitungan MI Fee";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report NAV AUM
            else if (_FundAccountingRpt.ReportName.Equals("Report NAV AUM"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And A.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText =

                            @"
                                select B.Name,A.Date,A.Nav,A.AUM from closenav A
                                left join fund B on A.FundPK = B.FundPK and B.status = 2
                                where A.status = 2  and date between @DateFrom and @DateTo " + _paramFundFrom + @" order by B.FundPK,date
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNAVAUM" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNAVAUM" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportNAVAUM";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("ReportNAVAUM");

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToShortDateString() + " s/d " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToShortDateString();
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNAVAUM> rList = new List<ReportNAVAUM>();
                                        while (dr0.Read())
                                        {
                                            ReportNAVAUM rSingle = new ReportNAVAUM();
                                            rSingle.NAV = dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AUM = dr0["AUM"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Name = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
                                            rSingle.Date = dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "FUND NAME";
                                            worksheet.Cells[incRowExcel, 2].Value = "DATE";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 4].Value = "AUM";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //worksheet.Cells[incRowExcel, 1].Value = no;
                                                //worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.Date).ToShortDateString();
                                                //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                incRowExcel++;
                                            }

                                            //int last = incRowExcel - 1;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 3].Value = "TOTAL DANA KELOLAAN :";
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + first.ToString() + ":D" + last.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            //worksheet.Cells[incRowExcel, 3, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            //incRowExcel++;

                                            //incRowExcel = incRowExcel + 2;
                                            incRowExcel++;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 4];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 REKSA DANA PT EMCO ASSET MANAGEMENT \n " + "&12 REPORT DAILY NAV DAN AUM ";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region PVR Sector
            if (_FundAccountingRpt.ReportName.Equals("PVR Sector"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundFrom = "";

                            if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
                            {
                                _paramFundFrom = " And FP.FundPK  in ( " + _FundAccountingRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }


                            cmd.CommandText = @"
                            select FP.FundPK,F.Name FundName,I.ID InstrumentID,isnull(P.Name,'') Sektoral,I.Name InstrumentName,FP.Balance,FP.AvgPrice,FP.CostValue,FP.ClosePrice,FP.MarketValue
,isnull(FP.MarketValue,0)-isnull(FP.CostValue,0) Unrealized,CN.Nav,CN.AUM, isnull(FP.MarketValue,0)/isnull(CN.AUM,0)*100 PercentOfNav from fundposition FP   
left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
left join CloseNav CN on CN.Date = @ValueDate and FP.FundPK = CN.FundPK and CN.status in (1,2)  
left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
left join Sector P on I.SectorPK = P.SectorPK and P.status in (1,2)
where FP.status in (1,2)  and FP.Date = @ValueDate and I.InstrumentTypePK = 1 " + _paramFundFrom + @"
--group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
--FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,FP.AcqDate,I.TaxExpensePercent
order by FP.FundPK,I.ID
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PVRSector" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PVRSector" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ReportNAVAUM";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("PVR Sector");
                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "FUND : ";

                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = _host.Get_FundName(_FundAccountingRpt.FundFrom);

                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "INSTRUMENT TYPE : ";

                                        worksheet.Cells[incRowExcel, 7].Value = "Equity Reguler";


                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "DATE : ";
                                        worksheet.Cells[incRowExcel, 10].Value = ": " + Convert.ToDateTime(_FundAccountingRpt.ValueDateTo).ToString("dd-MMM-yyyy");


                                        incRowExcel = incRowExcel + 1; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "INS. ID";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "SEKTORAL";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "INS. NAME";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "BALANCE";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "AVG PRICE";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "COST VALUE";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "CLOSE PRICE";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "MARKET VALUE";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "UNREALISED";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "(%) of NAV";


                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 10].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                        incRowExcel = incRowExcel + 1;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PVRSector> rList = new List<PVRSector>();
                                        while (dr0.Read())
                                        {

                                            PVRSector rSingle = new PVRSector();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.Sektoral = Convert.ToString(dr0["Sektoral"]);
                                            rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.AvgPrice = Convert.ToDecimal(dr0["AvgPrice"]);
                                            rSingle.CostValue = Convert.ToDecimal(dr0["CostValue"]);
                                            rSingle.ClosePrice = Convert.ToDecimal(dr0["ClosePrice"]);
                                            rSingle.MarketValue = Convert.ToDecimal(dr0["MarketValue"]);
                                            rSingle.Unrealized = Convert.ToDecimal(dr0["Unrealized"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["Nav"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.PercentOfNav = Convert.ToDecimal(dr0["PercentOfNav"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { r.Sektoral, r.Nav, r.AUM } into rGroup
                                                select rGroup;

                                        int _no = 1;
                                        int _startRowHeader = incRowExcel;
                                        int _endRowHeader = 0;

                                        foreach (var rsHeader in GroupByReference)
                                        {




                                            //int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Sektoral;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Balance;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AvgPrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CostValue;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ClosePrice;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketValue;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Unrealized;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentOfNav;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                            }
                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Bold = true;



                                            _endRowHeader = incRowExcel;
                                            incRowExcel++;
                                        }
                                        //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowHeader + ":E" + _endRowHeader + ")";
                                        worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowHeader + ":G" + _endRowHeader + ")";
                                        worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowHeader + ":I" + _endRowHeader + ")";
                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowHeader + ":J" + _endRowHeader + ")";
                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowHeader + ":K" + _endRowHeader + ") / 2";
                                        worksheet.Cells[incRowExcel, 5].Calculate();
                                        worksheet.Cells[incRowExcel, 7].Calculate();
                                        worksheet.Cells[incRowExcel, 9].Calculate();
                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Bold = true;
                                        incRowExcel = incRowExcel + 1;



                                        worksheet.Cells[incRowExcel, 2].Value = "NAB";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDecimal(_host.Get_AUMFundFrom(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo)).ToString("#,##0.00");
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Value = "NAV";
                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDecimal(_host.Get_NAVFundFrom(_FundAccountingRpt.FundFrom, _FundAccountingRpt.ValueDateTo)).ToString("#,##0.0000");
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Bold = true;


                                        incRowExcel = incRowExcel + 2;




                                        worksheet.Row(incRowExcel).PageBreak = _FundAccountingRpt.PageBreak;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 5, 11];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();
                                        worksheet.Column(11).AutoFit();





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 PVR SECTOR";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }
        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Monthly Transaction by Fund and InvestorType
            if (_unitRegistryRpt.ReportName.Equals("Monthly Transaction by Fund and InvestorType"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";
                            string _paramDepartment = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And A.AgentPK in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClinetPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.DepartmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.DepartmentFrom))
                            {
                                _paramDepartment = "And A.DepartmentPK in ( " + _unitRegistryRpt.DepartmentFrom + " ) ";
                            }
                            else
                            {
                                _paramDepartment = "";
                            }


                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            cmd.CommandText =

                             @"
                            
                                Select A.FundID,Sum(Subs) Subs,Sum(Redemption) Redemption,Sum(RetailSubs) RetailSubs,Sum(RetailRedemp) RetailRedemp 
                                ,Sum(InstiSubs) InstiSubs, Sum(InstiRedemp) InstiRedemp
                                From 
                                (
                                Select B.ID FundID,Sum(TotalcashAmount) Subs,0 Redemption,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp from ClientSubscription A
                                left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                                where month(Valuedate) = month(@Date) and year(Valuedate) = year(@Date) 
                                and Posted = 1 and revised = 0
                                Group by B.ID

                                UNION ALL

                                Select B.ID FundID,0 Subs,Sum(TotalcashAmount) Redemption,0 RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp from ClientRedemption A
                                left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                                where month(Valuedate) = month(@Date) and year(Valuedate) = year(@Date) 
                                and Posted = 1 and revised = 0
                                Group by B.ID

                                UNION ALL

                                Select B.ID FundID,0 Subs,0 Redemption,sum(TotalCashAmount) RetailSubs,0 RetailRedemp,0 InstiSubs,0 InstiRedemp from ClientSubscription A
                                left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                                where month(Valuedate) = month(@Date) and year(Valuedate) = year(@Date) 
                                and Posted = 1 and C.InvestorType = 1 and revised = 0
                                Group by B.ID

                                UNION ALL

                                Select B.ID FundID,0 Subs,0 Redemption,0 RetailSubs,sum(TotalCashAmount) RetailRedemp,0 InstiSubs,0 InstiRedemp from ClientRedemption A
                                left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                                where month(Valuedate) = month(@Date) and year(Valuedate) = year(@Date) 
                                and Posted = 1 and C.InvestorType = 1 and revised = 0
                                Group by B.ID

                                UNION ALL

                                Select B.ID FundID,0 Subs,0 Redemption,0 RetailSubs,0 RetailRedemp,sum(TotalCashAmount) InstiSubs,0 InstiRedemp from ClientSubscription A
                                left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                                where month(Valuedate) = month(@Date) and year(Valuedate) = year(@Date) 
                                and Posted = 1 and C.InvestorType = 2 and revised = 0
                                Group by B.ID

                                UNION ALL

                                Select B.ID FundID,0 Subs,0 Redemption,0 RetailSubs,0 RetailRedemp,0 InstiSubs,sum(TotalCashAmount) InstiRedemp from ClientRedemption A
                                left join Fund B on A.FundPK = B.FundPK and B.status = 2
                                left join FundClient C on A.FundClientPK = C.FundClientPK and C.status = 2
                                where month(Valuedate) = month(@Date) and year(Valuedate) = year(@Date) 
                                and Posted = 1 and C.InvestorType = 2 and revised = 0
                                Group by B.ID
                                )A
                                Group by FundID

                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MonthlyTransactionbyFundandInvestorType" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "MonthlyTransactionbyFundandInvestorType" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily Transaction Report for All");

                                        int incRowExcel = 1;

                                        DateTime _date;
                                        _date = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 1].Value = _date.ToString("MMMM yyyy");
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1].Value = "FUND";
                                        worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A2:A3"].Merge = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "NET TRANSACTION";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["B2:C2"].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "RETAIL TRANSACTION";
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["D2:E2"].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "INSTI TRANSACTION";
                                        worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["F2:G2"].Merge = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 3].Value = "REDEMPTION";
                                        worksheet.Cells[incRowExcel, 4].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 5].Value = "REDEMPTION";
                                        worksheet.Cells[incRowExcel, 6].Value = "SUBSCRIPTION";
                                        worksheet.Cells[incRowExcel, 7].Value = "REDEMPTION";
                                        incRowExcel++;
                                        while (dr0.Read())
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = Convert.ToString(dr0["FundID"]);
                                            worksheet.Cells[incRowExcel, 2].Value = Convert.ToDecimal(dr0["Subs"]);
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 3].Value = Convert.ToDecimal(dr0["Redemption"]);
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDecimal(dr0["RetailSubs"]);
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 5].Value = Convert.ToDecimal(dr0["RetailRedemp"]);
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 6].Value = Convert.ToDecimal(dr0["InstiSubs"]);
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDecimal(dr0["InstiRedemp"]);
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##";
                                            incRowExcel++;
                                        }


                                        int _lastRow = incRowExcel;
                                        worksheet.Cells["A2" + ":G" + _lastRow].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A2" + ":G" + _lastRow].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A2" + ":G" + _lastRow].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A2" + ":G" + _lastRow].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        string _rangeA = "A:G" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 16;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(7).Width = 30;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n &30&B Monthly Trx By Investor Type ";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Total Transaction Report Client
            else if (_unitRegistryRpt.ReportName.Equals("Total Transaction Report Client"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";
                            //string _paramDepartment = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And AG.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And FC.FundClientPK  in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";
                                _statusRedemp = "  CR.Status = 2 and CR.Posted = 1 and CR.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";
                                _statusRedemp = "  CR.Status = 2 and CR.Posted = 1 and CR.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";
                                _statusRedemp = "  CR.Status = 2 and CR.Posted = 0 and CR.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  CS.Status = 1  ";
                                _statusRedemp = "  CR.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  CS.Status = 3  ";
                                _statusRedemp = "  CR.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0  ";
                                _statusRedemp = "  (CR.Status = 2 or CR.Posted = 1) and CR.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0  ";
                                _statusRedemp = "  (CR.Status = 1 Or CR.Status = 2 or CR.Posted = 1) and CR.Revised = 0  ";
                            }
                            cmd.CommandText =

                                    @"Select PK,A.NoRow,A.TransactionDate,A.SettlementDate,A.FeeAmount,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.CashAmount,A.TotalCashAmount,A.TotalUnitAmount,A.NAV from ( 
                                    Select ClientSubscriptionPK PK,'1' NoRow,CS.ValueDate TransactionDate,CS.Valuedate SettlementDate,CS.SubscriptionFeeAmount FeeAmount,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName,CS.CashAmount,TotalCashAmount, TotalUnitAmount,CS.NAV 
                                    from ClientSubscription CS 
                                    left join Fund F on Cs.FundPK = F.fundPK and f.Status=2  
                                    left join FundClient FC on CS.FundClientPK = FC.FundClientPK and fc.Status=2  
                                    left join Agent AG on CS.AgentPK = AG.AgentPK and AG.Status=2
                                    where " + _statusSubs + _paramFund + _paramAgent + _paramFundClient +
                                    @"and NAVDate Between @ValueDateFrom and @ValueDateTo 

                                    UNION ALL 

                                    Select ClientRedemptionPK PK,'2' NoRow,CR.ValueDate TransactionDate,CR.Paymentdate SettlementDate,CR.RedemptionFeeAmount FeeAmount,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName,CR.CashAmount, isnull(TotalCashAmount,0), TotalUnitAmount,CR.NAV  
                                    from ClientRedemption CR 
                                    left join Fund F on CR.FundPK = F.fundPK and f.Status=2   
                                    left join FundClient FC on CR.FundClientPK = FC.FundClientPK and fc.Status=2  
                                    left join Agent AG on CR.AgentPK = AG.AgentPK and AG.Status=2 
                                    where " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient +
                                    @"and NAVDate Between @ValueDateFrom and @ValueDateTo 
                                    )A 
                                    Group by PK,A.NoRow,A.TransactionDate,A.SettlementDate,A.FeeAmount,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.CashAmount,A.TotalCashAmount,A.TotalUnitAmount,A.NAV 
                                    order by A.NoRow,A.FundID,A.ClientName, A.NAVDate Asc";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TotalTransactionReportClient" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TotalTransactionReportClient" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Total Transaction Report Client");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TotalTransactionReportClient> rList = new List<TotalTransactionReportClient>();
                                        while (dr0.Read())
                                        {
                                            TotalTransactionReportClient rSingle = new TotalTransactionReportClient();
                                            rSingle.PK = Convert.ToInt32(dr0["PK"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.TransactionDate = Convert.ToDateTime(dr0["TransactionDate"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["Nav"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["TotalUnitAmount"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.ClientName
                                            group r by new { r.Type, r.ClientName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;



                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.Type;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Period";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";

                                            //worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                            //worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "CIF No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 5].Value = "Sales Name";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Transaction Date";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = "Payment Date";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = "Settled Date";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }


                                            worksheet.Cells[incRowExcel, 8].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 9].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }


                                            worksheet.Cells[incRowExcel, 11].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 12].Value = "Cash Amount";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 13].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 13].Value = "Total Cash Amount";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }



                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;



                                                if (_fundID != rsDetail.FundID)
                                                {
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                }

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TransactionDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.CashAmount;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                if (rsDetail.Type == "Subscription")
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _fundID = rsDetail.FundID;
                                            }

                                            worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 7].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();

                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                            if (rsHeader.Key.Type == "Subscription")
                                            {
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            }


                                        }




                                        incRowExcel++;

                                        //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        //-----------------------------------



                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        string _rangeA = "A:M" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 28;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 100;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 35;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 2;
                                        worksheet.Column(10).Width = 45;
                                        worksheet.Column(11).Width = 45;
                                        worksheet.Column(12).Width = 45;
                                        worksheet.Column(13).Width = 45;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report \n &28&B Subscription & Redemption";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Total Transaction Report Fund
            else if (_unitRegistryRpt.ReportName.Equals("Total Transaction Report Fund"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramAgent = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And AG.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And FC.FundClientPK  in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 0 ";
                                _statusRedemp = "  CR.Status = 2 and CR.Posted = 1 and CR.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 1 and CS.Revised = 1 ";
                                _statusRedemp = "  CR.Status = 2 and CR.Posted = 1 and CR.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  CS.Status = 2 and CS.Posted = 0 and CS.Revised = 0 ";
                                _statusRedemp = "  CR.Status = 2 and CR.Posted = 0 and CR.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  CS.Status = 1  ";
                                _statusRedemp = "  CR.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  CS.Status = 3  ";
                                _statusRedemp = "  CR.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (CS.Status = 2 or CS.Posted = 1) and CS.Revised = 0  ";
                                _statusRedemp = "  (CR.Status = 2 or CR.Posted = 1) and CR.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (CS.Status = 1 Or CS.Status = 2 or CS.Posted = 1) and  CS.Revised = 0  ";
                                _statusRedemp = "  (CR.Status = 1 Or CR.Status = 2 or CR.Posted = 1) and CR.Revised = 0  ";
                            }
                            cmd.CommandText =

                                    @"Select A.NoRow,A.TransactionDate,A.SettlementDate,A.FeeAmount,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.CashAmount,A.TotalCashAmount,A.TotalUnitAmount,A.NAV from ( 
                                    Select '1' NoRow,CS.ValueDate TransactionDate,CS.Valuedate SettlementDate,CS.SubscriptionFeeAmount FeeAmount,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName,CS.CashAmount,TotalCashAmount, TotalUnitAmount,CS.NAV 
                                    from ClientSubscription CS 
                                    left join Fund F on Cs.FundPK = F.fundPK and f.Status=2  
                                    left join FundClient FC on CS.FundClientPK = FC.FundClientPK and fc.Status=2  
                                    left join Agent AG on CS.AgentPK = AG.AgentPK and AG.Status=2
                                    where " + _statusSubs + _paramFund + _paramAgent + _paramFundClient +
                                    @"and NAVDate Between @ValueDateFrom and @ValueDateTo 

                                    UNION ALL 

                                    Select '2' NoRow,CR.ValueDate TransactionDate,CR.Paymentdate SettlementDate,CR.RedemptionFeeAmount FeeAmount,AG.Name AgentName,F.ID FundID,F.Name FundName,NAVDate,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName,CR.CashAmount, isnull(TotalCashAmount,0), TotalUnitAmount,CR.NAV  
                                    from ClientRedemption CR 
                                    left join Fund F on CR.FundPK = F.fundPK and f.Status=2   
                                    left join FundClient FC on CR.FundClientPK = FC.FundClientPK and fc.Status=2  
                                    left join Agent AG on CR.AgentPK = AG.AgentPK and AG.Status=2 
                                    where " + _statusRedemp + _paramFund + _paramAgent + _paramFundClient +
                                    @"and NAVDate Between @ValueDateFrom and @ValueDateTo 
                                    )A 
                                    Group by A.NoRow,A.TransactionDate,A.SettlementDate,A.FeeAmount,A.AgentName,A.FundID,A.FundName ,A.NAVDate,A.Type,A.ClientID,A.ClientName,A.CashAmount,A.TotalCashAmount,A.TotalUnitAmount,A.NAV 
                                    order by A.NoRow,A.FundID,A.ClientName, A.NAVDate Asc";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@AgentFrom", _unitRegistryRpt.AgentFrom);
                            cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TotalTransactionReportFund" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TotalTransactionReportFund" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Total Transaction Report Fund");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TotalTransactionReportFund> rList = new List<TotalTransactionReportFund>();
                                        while (dr0.Read())
                                        {
                                            TotalTransactionReportFund rSingle = new TotalTransactionReportFund();
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.TransactionDate = Convert.ToDateTime(dr0["TransactionDate"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["Nav"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["TotalCashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["TotalUnitAmount"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.FundName
                                            group r by new { r.Type, r.FundName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel = 2;

                                        worksheet.Cells[incRowExcel, 1].Value = "Period     :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 11].Value = _unitRegistryRpt.FundFrom;
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                        worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "CIF No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 3].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 5].Value = "Sales Name";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Transaction Date";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "SUBSCRIPTION")
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = "Payment Date";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = "Settled Date";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }

                                            worksheet.Cells[incRowExcel, 8].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "SUBSCRIPTION")
                                            {
                                                worksheet.Cells[incRowExcel, 9].Value = "Net IDR";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Merge = true;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["I" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }


                                            worksheet.Cells[incRowExcel, 11].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 12].Value = "Cash Amount";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            if (rsHeader.Key.Type == "SUBSCRIPTION")
                                            {
                                                worksheet.Cells[incRowExcel, 13].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 13].Value = "Total Cash Amount";
                                                worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            }

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            //worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;




                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;



                                                if (_fundID != rsDetail.FundID)
                                                {
                                                    worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                }

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":M" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                                //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":M" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Type;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClientName;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TransactionDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                                if (rsDetail.Type == "SUBSCRIPTION")
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.CashAmount;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                if (rsDetail.Type == "SUBSCRIPTION")
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnitBalance;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.CashBalance;
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _fundID = rsDetail.FundID;
                                            }

                                            worksheet.Cells["A" + _endRowDetail + ":M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 7].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();

                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            if (rsHeader.Key.Type == "SUBSCRIPTION")
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";

                                            if (rsHeader.Key.Type == "SUBSCRIPTION")
                                            {
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            }


                                        }


                                        incRowExcel++;




                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        string _rangeA = "A:M" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 28;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                        worksheet.Column(1).Width = 35;
                                        worksheet.Column(2).Width = 40;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 100;
                                        worksheet.Column(5).Width = 35;
                                        worksheet.Column(6).Width = 40;
                                        worksheet.Column(7).Width = 35;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 2;
                                        worksheet.Column(10).Width = 45;
                                        worksheet.Column(11).Width = 45;
                                        worksheet.Column(12).Width = 45;
                                        worksheet.Column(13).Width = 45;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Daily Total Transaction Report \n &28&B Subscription & Redemption";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Laporan Rekap Unit Penyertaan
            else if (_unitRegistryRpt.ReportName.Equals("Laporan Rekap Unit Penyertaan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK  in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText =

                            @"
                            Select C.Name FundName,B.SID,B.IFUACode,B.Name,A.UnitAmount from FundClientPosition A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
                            left join Fund C on A.FundPK = C.FundPK and C.status = 2
                            where A.Date = @DateTo " + _paramFund + _paramFundClient;



                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanRekapUnitPenyertaan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanRekapUnitPenyertaan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "LaporanRekapUnitPenyertaan_";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LaporanRekapUnitPenyertaan");

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 20;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RekapUnitPenyertaanEMCO> rList = new List<RekapUnitPenyertaanEMCO>();
                                        while (dr0.Read())
                                        {
                                            RekapUnitPenyertaanEMCO rSingle = new RekapUnitPenyertaanEMCO();
                                            rSingle.IFUACode = dr0["IFUACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IFUACode"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.InvestorName = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
                                            rSingle.UnitAmount = dr0["UnitAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.Fund = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.Fund } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Fund;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Merge = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Size = 20;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "SID";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 4].Value = "NAMA INVESTOR";
                                            worksheet.Cells[incRowExcel, 5].Value = "TOTAL UNIT PENYERTAAN";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.IFUACode;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestorName;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 20;


                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            incRowExcel = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 4].Value = "TOTAL UNIT PENYERTAAN :";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + first.ToString() + ":E" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 5].Calculate();

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            //worksheet.Cells.Calculate();
                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 60;
                                        worksheet.Column(3).Width = 60;
                                        worksheet.Column(4).Width = 85;
                                        worksheet.Column(5).Width = 60;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&20 LAPORAN REKAP UNIT PENYERTAAN \n " + "&20 REKSA DANA PT EMCO ASSET MANAGEMANT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).3 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).3 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).3 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Laporan  Risk Profile Tahunan
            else if (_unitRegistryRpt.ReportName.Equals("Laporan Risk Profile Tahunan"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandText =

                            @"
                            select datename(MONTH, RenewingDate) Month,A.ID, Name,B.DescOne InvestorsRiskProfileName,RenewingDate,A.UpdateUsersID,A.ApprovedUsersID,A.Notes,Convert(date, RenewingDate) Date from FundClient A
                            left join MasterValue B on A.Legality = B.Code and B.ID = 'InvestorsRiskProfile' and B.status = 2
                            where A.status in (1,2) and Convert(date, RenewingDate) <= DateAdd(month, 12, Convert(date, GetDate())) 
                            order by date asc";



                            cmd.CommandTimeout = 0;
                            //cmd.Parameters.AddWithValue("@RenewingDateTo", _unitRegistryRpt.ValueDateTo);
                            //cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            //cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanRiskProfileTahunan" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanRiskProfileTahunan" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "LaporanRiskProfileTahunan_";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("LaporanRiskProfileTahunan");

                                        int incRowExcel = 1;

                                        //worksheet.Cells[incRowExcel, 1].Value = "Periode: " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToShortDateString(); // + " s/d " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToShortDateString();
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.UnderLine = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 20;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RiskProfileTahunan> rList = new List<RiskProfileTahunan>();
                                        while (dr0.Read())
                                        {
                                            RiskProfileTahunan rSingle = new RiskProfileTahunan();
                                            rSingle.Month = dr0["Month"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Month"]);
                                            rSingle.ID = dr0["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ID"]);
                                            rSingle.Name = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
                                            rSingle.InvestorsRiskProfileName = dr0["InvestorsRiskProfileName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorsRiskProfileName"]);
                                            rSingle.RenewingDate = Convert.ToDateTime(dr0["RenewingDate"]);
                                            rSingle.UpdateUsersID = dr0["UpdateUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateUsersID"]);
                                            rSingle.ApprovedUsersID = dr0["ApprovedUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedUsersID"]);
                                            rSingle.Notes = dr0["Notes"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Notes"]);
                                            rSingle.Date = dr0["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Date"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.Month } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            worksheet.Cells[incRowExcel, 1].Value = "MONTH : ";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Size = 30;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Month;
                                            //worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Merge = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.Font.Size = 30;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "CLIENT ID";
                                            worksheet.Cells[incRowExcel, 2].Value = "CLIENT NAME";
                                            //worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            //worksheet.Cells[incRowExcel, 3].Value = "LEGALITY";
                                            worksheet.Cells[incRowExcel, 3].Value = "RISK PROFILE";
                                            worksheet.Cells[incRowExcel, 4].Value = "RENEWINGDATE";
                                            worksheet.Cells[incRowExcel, 5].Value = "UPDATE USERS ID";
                                            worksheet.Cells[incRowExcel, 6].Value = "APPRUVED USERS ID";
                                            worksheet.Cells[incRowExcel, 7].Value = "NOTES";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 30;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            //int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ID;
                                                //worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InvestorsRiskProfileName;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.RenewingDate;
                                                //worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.UpdateUsersID;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ApprovedUsersID;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Notes;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 30;


                                                incRowExcel++;
                                                //no++;
                                            }

                                            int last = incRowExcel - 1;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            incRowExcel = incRowExcel + 1;

                                            //worksheet.Cells[incRowExcel, 4].Value = "TOTAL UNIT PENYERTAAN :";
                                            //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + first.ToString() + ":E" + last.ToString() + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 20;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                            //worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            //worksheet.Cells.Calculate();
                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;
                                        }
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 100;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 55;
                                        worksheet.Column(6).Width = 55;
                                        worksheet.Column(7).Width = 85;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&35 LAPORAN RISK PROFILE TAHUNAN \n " + "&30 REKSA DANA PT EMCO ASSET MANAGEMANT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).3 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).3 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).3 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion //

            #region Monthly Report 100Mil
            else if (_unitRegistryRpt.ReportName.Equals("Monthly Report 100Mil"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }



                            cmd.CommandText =

                            @"
                            select A.date Date, D.Name FundName,C.Name ClientName,C.SID SID, A.UnitAmount UnitAmount, B.Nav Nav, (A.UnitAmount * B.NAV) CashAmount from fundclientposition A
                            left join CloseNav B on A.fundpk = b.FundPK and b.Status = 2 and b.Date = @DATE 
                            left join FundClient C on A.FundClientPK = C.FundClientPK and C.Status = 2
                            left join Fund D on A.FundPK = D.FundPK and D.Status = 2
                            where A.date = @Date and (A.UnitAmount * B.NAV) > 100000000 " + _paramFund + _paramFundClient +
                            @"order by C.Name    ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MonthlyReport100Mil" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "MonthlyReport100Mil" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Monthly Report 100Mil");


                                        //ATUR DATA GROUPINGNYA DULU

                                        List<MonthlyReport100Mil> rList = new List<MonthlyReport100Mil>();
                                        while (dr0.Read())
                                        {
                                            MonthlyReport100Mil rSingle = new MonthlyReport100Mil();
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["Nav"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            incRowExcel = incRowExcel + 2;

                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 4;

                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 24;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "Date       :";
                                            worksheet.Cells[incRowExcel, 13].Value = DateTime.Now;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "dd-MMMM-yyyy";
                                            worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "MONTHLY REPORT 100 MILLION";
                                            worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 12].Value = "Time       :";
                                            worksheet.Cells[incRowExcel, 13].Value = DateTime.Now.ToString("H:mm:ss");
                                            incRowExcel++;

                                            incRowExcel++;


                                            incRowExcel = incRowExcel + 1;



                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "SID";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 6].Value = "Unit Amount";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Nav";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Cash Amount";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":H" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Date;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CashBalance;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";


                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }


                                            worksheet.Cells["A" + _endRowDetail + ":H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";

                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        }
                                        //incRowExcel++;
                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A5:P" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 50;
                                        }

                                        worksheet.DeleteRow(_lastRow);


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 9];
                                        worksheet.Column(1).Width = 20;
                                        worksheet.Column(2).Width = 50;
                                        worksheet.Column(3).Width = 210;
                                        worksheet.Column(4).Width = 300;
                                        worksheet.Column(5).Width = 90;
                                        worksheet.Column(6).Width = 75;
                                        worksheet.Column(7).Width = 60;
                                        worksheet.Column(8).Width = 75;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &60&B MONTHLY \n &58&B REPORT 100 Mil";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Laporan Subs dan Redem Total 100 Juta
            else if (_unitRegistryRpt.ReportName.Equals("Report Laporan Subs dan Redem Total 100 Juta"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";


                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            cmd.CommandText =

                                    @"
                                  
                                    Select A.BulanTahun,A.ValueDate,A.Name,A.FundPK,A.FundID,A.FundName,sum(A.TotalSubs) TotalSubs,sum(A.TotalRedempt) TotalRedempt from (
		                            Select SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5) BulanTahun,ValueDate,
		                            B.Name,sum(totalCashAmount) TotalSubs, 0 TotalRedempt,A.FundPK,C.ID FundID,C.Name FundName 
		                            from ClientSubscription A
		                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
		                            left join Fund C on A.FundPK = C.FundPK and C.status = 2
		                            where ValueDate between @DateFrom and @DateTo 
		                            and A.Status = 2 and A.Posted = 1 " + _paramFund + @"
		                            group by SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5),B.Name,ValueDate,A.FundPK,C.ID,C.Name
		                            UNION ALL
		                            Select SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5) BulanTahun,ValueDate,
		                            B.Name,0 TotalSubs ,sum(totalCashAmount) TotalRedempt,A.FundPK,C.ID FundID,C.Name FundName
		                            from ClientRedemption A
		                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
		                            left join Fund C on A.FundPK = C.FundPK and C.status = 2
		                            where ValueDate between @DateFrom and @DateTo 
		                            and A.Status = 2 and A.Posted = 1 " + _paramFund + @"
		                            group by SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5),B.Name,ValueDate,A.FundPK,C.ID,C.Name
                            )A Where A.Name in
                            (
	
                            Select  A.Name from (
		                            Select SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5) BulanTahun,
		                            B.Name,sum(totalCashAmount) TotalSubs, 0 TotalRedempt 
		                            from ClientSubscription A
		                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
		                            where ValueDate between @DateFrom and @DateTo 
		                            and A.Status = 2 and A.Posted = 1 " + _paramFund + @"
		                            group by SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5),B.Name
		                            UNION ALL
		                            Select SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5) BulanTahun,
		                            B.Name,0 TotalSubs ,sum(totalCashAmount) TotalRedempt
		                            from ClientRedemption A
		                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status = 2
		                            where ValueDate between @DateFrom and @DateTo 
		                            and A.Status = 2 and A.Posted = 1 " + _paramFund + @"
		                            group by SUBSTRING(CONVERT(VARCHAR(8), ValueDate, 5), 4, 5),B.Name
                            )A 
                            group by A.BulanTahun,A.Name
                            Having sum(A.TotalRedempt) + sum(A.TotalSubs) > 100000000
                            )
                            group by
                            A.BulanTahun,A.ValueDate,A.Name,A.FundPK,A.FundID,A.FundName
                            order by A.FundName, A.Name";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            //cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportLaporanSubsdanRedemTotal100Juta" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportLaporanSubsdanRedemTotal100Juta" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Laporan Subs dan Redem Total 100 Juta");


                                        //ATUR DATA GROUPINGNYA DULU

                                        List<ReportLaporanSubsdanRedemTotal100Juta> rList = new List<ReportLaporanSubsdanRedemTotal100Juta>();
                                        while (dr0.Read())
                                        {
                                            ReportLaporanSubsdanRedemTotal100Juta rSingle = new ReportLaporanSubsdanRedemTotal100Juta();
                                            rSingle.ValueDate = Convert.ToString(dr0["ValueDate"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.TotalSubs = Convert.ToDecimal(dr0["TotalSubs"]);
                                            rSingle.TotalRedempt = Convert.ToDecimal(dr0["TotalRedempt"]);
                                            rSingle.BulanTahun = Convert.ToString(dr0["BulanTahun"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.Name, r.FundName } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {


                                            //incRowExcel = incRowExcel + 2;

                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 4;

                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 4].Value = "Period : ";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Value = _unitRegistryRpt.ValueDateFrom + " - " + _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            incRowExcel++;

                                            //incRowExcel++;


                                            incRowExcel = incRowExcel + 1;



                                            //Row B = 3
                                            int RowB = incRowExcel;


                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 20;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(251, 228, 213));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":E" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + RowB + ":E" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Name";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Tanggal Transaksi";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Total Subscription";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 5].Value = "Total Redemption";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells[incRowExcel, 6].Value = "TotalSubs";
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            ////worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            //worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells[incRowExcel, 7].Value = "TotalRedempt";
                                            //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            ////worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            //worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;


                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":E" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":E" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                                //area detail

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                //worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "MM/dd/yyyy";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalSubs;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TotalRedempt;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";


                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                            }


                                            worksheet.Cells["A" + _endRowDetail + ":E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            worksheet.Cells[incRowExcel, 3].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(D" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells[incRowExcel, 7].Calculate();
                                            //worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                        }

                                        incRowExcel++;
                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                        //incRowExcel++;
                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A5:P" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 18;
                                        }

                                        worksheet.DeleteRow(_lastRow);


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 80;
                                        worksheet.Column(3).Width = 30;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 40;
                                        //worksheet.Column(6).Width = 20;
                                        //worksheet.Column(7).Width = 20;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &18&B REPORT LAPORAN TOTAL 100 JUTA \n &18&B SUBSCRIPTIION DAN REDEMPTION";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion //

            #region Rebate Generali Fee Report
            else if (_unitRegistryRpt.ReportName.Equals("Rebate Generali Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClient = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }



                            cmd.CommandText = @"
                            Declare @CounterDate datetime

                            Declare @FundPK int, @FundClientPK int

                            set @FundPK = @FundFrom
                            set @FundclientPK = @FundClientFrom

                            set @CounterDate = @ValueDateFrom

                            Declare @tableDays table
                            (
	                            Hari datetime
                            )


                            While @CounterDate <= @ValueDateTo
                            Begin
	                            Insert into @tableDays
	                            select @CounterDate
	                            set @CounterDate = dateadd(day,1,@CounterDate)
                            end

                            Select datename(dw,hari) NamaHari, 
                            Hari, dbo.FgetLastCloseNav(hari,@FundPK) NAV,dbo.FgetLastUnitAmount(hari,@FundPK,@FundClientPK) Balance,'365' BasicDay,'0.83'Fee, '1' Days, '55.0' FeeAmount
                            From @tableDays 
                            where dbo.FgetLastUnitAmount(hari,@FundPK,@FundClientPK)  > 1";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RebateGeneraliFeeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RebateGeneraliFeeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Rebate Generali Fee Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PerhitunganFeeReport> rList = new List<PerhitunganFeeReport>();
                                        while (dr0.Read())
                                        {

                                            PerhitunganFeeReport rSingle = new PerhitunganFeeReport();
                                            //rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.NumberDays = Convert.ToString(dr0["Days"]);
                                            rSingle.BasicDay = Convert.ToString(dr0["BasicDay"]);
                                            rSingle.Date = Convert.ToString(dr0["hari"]);
                                            rSingle.UnitAmount = dr0["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.NAV = dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Fee = Convert.ToDecimal(dr0["Fee"]);
                                            rSingle.Days = Convert.ToString(dr0["NamaHari"]);
                                            rSingle.FeeAmount = Convert.ToString(dr0["FeeAmount"]);
                                            rList.Add(rSingle);

                                        }

                                        //var QueryByFundID =
                                        //  from r in rList
                                        //  group r by new { r.FundName } into rGroup
                                        //  select rGroup;

                                        var GroupByReference =
                                                from r in rList
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 2;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_FundClientName(_unitRegistryRpt.FundClientFrom);
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Masa";
                                            worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MMM/yyyy";
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FEE REPORT " + _host.Get_Fund(_unitRegistryRpt.FundFrom);
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 1].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Day";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Saldo Balance (Shares)";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Nav Per Unit";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Nav Amount";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Number Of Days";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Basic Day";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells[incRowExcel, 8].Value = "Nav Amount";
                                            //worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            //worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            //worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Management Fee Expense EMCO";
                                            worksheet.Cells["H" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["H" + incRowExcel + ":O" + incRowExcel].Merge = true;
                                            worksheet.Cells["H" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 16].Value = "Generally Fee (55%)";
                                            worksheet.Cells["P" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["P" + incRowExcel + ":R" + incRowExcel].Merge = true;
                                            worksheet.Cells["P" + incRowExcel + ":R" + incRowExcel].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 8].Value = "Fee Amount (%)";
                                            worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9].Value = "Amount Gross";
                                            worksheet.Cells["I" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 10].Value = "DPP";
                                            worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "PPN";
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 12].Value = "PPH 23";
                                            worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = "OJK";
                                            worksheet.Cells["M" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 14].Value = "Net";
                                            worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Value = "Cumulative";
                                            worksheet.Cells["O" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 16].Value = "Fee Amount";
                                            worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 17].Value = "Amount Gross";
                                            worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 18].Value = "Cumulative";
                                            worksheet.Cells["R" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            string _range = "A" + incRowExcel + ":R" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":R" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":R" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":R" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":R" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Double;

                                                worksheet.Cells["A" + RowG + ":R" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":R" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":R" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":R" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Double;


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Days;
                                                //worksheet.Cells[incRowExcel, 1].Value = "";
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.Date).ToShortDateString();
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.UnitAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(C" + incRowExcel + "*D" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 5].Calculate();
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NumberDays;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BasicDay;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Fee;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9].Formula = "SUM(E" + incRowExcel + "*F" + incRowExcel + "*H" + incRowExcel + ")/ G" + incRowExcel + "/ 100";
                                                worksheet.Cells[incRowExcel, 9].Calculate();
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10].Formula = "SUM(I" + incRowExcel + "/1.1)";
                                                worksheet.Cells[incRowExcel, 10].Calculate();
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11].Formula = "SUM(I" + incRowExcel + "-J" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(J" + incRowExcel + "*0.02)";
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(E" + incRowExcel + "*F" + incRowExcel + "*0.045 )/ 246/ 100";
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Formula = "SUM(I" + incRowExcel + "-K" + incRowExcel + "-L" + incRowExcel + "-M" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 17].Formula = "SUM(N" + incRowExcel + "*P" + incRowExcel + ")/100";
                                                worksheet.Cells[incRowExcel, 17].Calculate();
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;
                                                int _row = incRowExcel - 1;
                                                worksheet.Cells[_row, 15].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";

                                                worksheet.Cells[_row, 18].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";


                                            }

                                            worksheet.Cells[incRowExcel, 3].Value = "Total";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 17].Calculate();
                                            //worksheet.Cells[incRowExcel, 9].Calculate();
                                            //worksheet.Cells[incRowExcel, 10].Calculate();
                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                            //worksheet.Cells[incRowExcel, 12].Calculate();
                                            //worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";





                                            worksheet.Cells["A" + incRowExcel + ":R" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":R" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                        }

                                        string _rangeDetail = "A:R";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Rebate Generali Fee Report";



                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Perhitungan Agent Fee Report
            else if (_unitRegistryRpt.ReportName.Equals("Perhitungan Agent Fee Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClient = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }



                            cmd.CommandText = @"
                            Declare @CounterDate datetime

                            Declare @FundPK int, @FundClientPK int

                            set @FundPK = @FundFrom
                            set @FundclientPK = @FundClientFrom

                            set @CounterDate = @ValueDateFrom

                            Declare @tableDays table
                            (
	                            Hari datetime
                            )


                            While @CounterDate <= @ValueDateTo
                            Begin
	                            Insert into @tableDays
	                            select @CounterDate
	                            set @CounterDate = dbo.fworkingday(@Counterdate,1)
                            end

                            Select A.NamaHari,A.Hari,sum(isnull(A.subs,0)) Subs,sum(isnull(A.Redemp,0)) Redemp,NAV,UnitBalance,'365' BasicDay,'0.83'Fee,
                            datediff(day,dbo.FWorkingDay(A.hari,-1),A.hari)  Days, '40.0' FeeAmount 

                            from (
                            Select  datename(dw,A.Hari) NamaHari,Hari,B.CashAmount Subs, 0 Redemp,C.NAV NAV, D.UnitAmount UnitBalance
                            from 
                            @tableDays A left Join ClientSubscription B on dbo.FWorkingDay(A.hari,-1) = B.ValueDate 
                            left join CloseNAV C on A.hari = C.Date and C.FundPK = @FundPK
                            left join FundClientPosition D on dbo.FWorkingDay(A.hari,-1) = D.Date and D.FundClientPK = @FundclientPK
                            Where B.FundPK = @FundPK and B.FundClientPK = @FundClientPK
                            and A.Hari between @ValueDateFrom and @ValueDateTo 
                            and B.status  = 2 and B.Posted = 1 and C.status = 2


                            UNION ALL

                            Select  datename(dw,A.Hari) NamaHari,Hari,0 Subs, B.CashAmount Redemp,C.NAV NAV ,D.UnitAmount UnitBalance
                            from 
                            @tableDays A left Join ClientRedemption B on dbo.FWorkingDay(A.hari,-1) = B.ValueDate 
                            left join CloseNAV C on A.hari = C.Date and C.FundPK = @FundPK
                            left join FundClientPosition D on dbo.FWorkingDay(A.hari,-1) = D.Date and D.FundClientPK = @FundclientPK
                            Where B.FundPK = @FundPK and B.FundClientPK = @FundClientPK
                            and A.Hari between @ValueDateFrom and @ValueDateTo 
                            and B.status  = 2 and B.Posted = 1 and C.status = 2
                            )A

                            Group by A.NamaHari,A.Hari,A.NAV, A.UnitBalance

                            order by A.Hari asc ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);
                            cmd.Parameters.AddWithValue("@FundFrom", _unitRegistryRpt.FundFrom);
                            cmd.Parameters.AddWithValue("@FundClientFrom", _unitRegistryRpt.FundClientFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "PerhitunganAgentFeeReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "PerhitunganAgentFeeReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundAccountingReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Perhitungan Agent Fee Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<PerhitunganAgentFeeReport> rList = new List<PerhitunganAgentFeeReport>();
                                        while (dr0.Read())
                                        {

                                            PerhitunganAgentFeeReport rSingle = new PerhitunganAgentFeeReport();
                                            rSingle.Days = Convert.ToString(dr0["NamaHari"]);
                                            rSingle.Date = Convert.ToString(dr0["Hari"]);
                                            rSingle.AmountSubs = Convert.ToDecimal(dr0["Subs"]);
                                            rSingle.AmountRedemp = Convert.ToDecimal(dr0["Redemp"]);
                                            rSingle.NAV = dr0["NAV"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.BasicDay = Convert.ToString(dr0["BasicDay"]);
                                            rSingle.Fee = Convert.ToDecimal(dr0["Fee"]);
                                            rSingle.NumberDays = Convert.ToString(dr0["Days"]);
                                            rSingle.FeeAmount = Convert.ToString(dr0["FeeAmount"]);
                                            rSingle.UnitBalance = dr0["UnitBalance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["UnitBalance"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 2;

                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_FundClientName(_unitRegistryRpt.FundClientFrom);
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Masa";
                                            worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "MMM/yyyy";
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FEE REPORT " + _host.Get_Fund(_unitRegistryRpt.FundFrom);
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Value = "DATE : ";
                                            worksheet.Cells[incRowExcel, 1].Value = _unitRegistryRpt.ValueDateTo;
                                            worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd/MMM/yyyy";

                                            incRowExcel++;

                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            worksheet.Cells[incRowExcel, 1].Value = "Day";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Subs";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.WrapText = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Redemp";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Saldo Balance (Shares)";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Nav Per Unit";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Nav Amount";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.WrapText = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Naumber Of Days";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.WrapText = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Basic Day";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 9].Style.WrapText = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Management Fee Expense EMCO";
                                            worksheet.Cells["J" + incRowExcel + ":P" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["J" + incRowExcel + ":P" + incRowExcel].Merge = true;
                                            worksheet.Cells["J" + incRowExcel + ":P" + incRowExcel].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 17].Value = "Generally Fee (40%)";
                                            worksheet.Cells["Q" + incRowExcel + ":V" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["Q" + incRowExcel + ":V" + incRowExcel].Merge = true;
                                            worksheet.Cells["Q" + incRowExcel + ":V" + incRowExcel].Style.Font.Bold = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 10].Value = "Fee Amount (%)";
                                            worksheet.Cells["J" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11].Value = "Amount Gross";
                                            worksheet.Cells["K" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 12].Value = "DPP";
                                            worksheet.Cells["L" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13].Value = "PPN";
                                            worksheet.Cells["M" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 14].Value = "PPH 23";
                                            worksheet.Cells["N" + incRowExcel + ":N" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15].Value = "Net";
                                            worksheet.Cells["O" + incRowExcel + ":O" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 16].Value = "Cumulative";
                                            worksheet.Cells["P" + incRowExcel + ":P" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 17].Value = "Fee Amount";
                                            worksheet.Cells["Q" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 18].Value = "Amount Gross";
                                            worksheet.Cells["R" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 19].Value = "Cumulative";
                                            worksheet.Cells["S" + incRowExcel + ":S" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 20].Value = "PPH 23";
                                            worksheet.Cells["T" + incRowExcel + ":T" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 21].Value = "Net";
                                            worksheet.Cells["U" + incRowExcel + ":U" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 22].Value = "Cumulative";
                                            worksheet.Cells["V" + incRowExcel + ":V" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            string _range = "A" + incRowExcel + ":V" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {



                                                //ThickBox Border HEADER

                                                worksheet.Cells["A" + RowB + ":V" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":V" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":V" + RowB].Style.Border.Left.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowB + ":V" + RowB].Style.Border.Right.Style = ExcelBorderStyle.Double;

                                                worksheet.Cells["A" + RowG + ":V" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":V" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":V" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Double;
                                                worksheet.Cells["A" + RowG + ":V" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Double;


                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Days;
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.Date).ToShortDateString();
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AmountSubs;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AmountRedemp;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(E" + incRowExcel + "*F" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 7].Calculate();
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NumberDays;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.BasicDay;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Fee;
                                                worksheet.Cells[incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Formula = "SUM(G" + incRowExcel + "*H" + incRowExcel + ")*(J" + incRowExcel + "/ 100)/ I" + incRowExcel;
                                                worksheet.Cells[incRowExcel, 11].Calculate();
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12].Formula = "SUM(K" + incRowExcel + "/1.1)";
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 13].Formula = "SUM(K" + incRowExcel + "-L" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 13].Calculate();
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Formula = "SUM(L" + incRowExcel + "*0.02)";
                                                worksheet.Cells[incRowExcel, 14].Calculate();
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 15].Formula = "SUM(K" + incRowExcel + "-M" + incRowExcel + "-N" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 15].Calculate();
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 18].Formula = "SUM(O" + incRowExcel + "*Q" + incRowExcel + ")/100";
                                                worksheet.Cells[incRowExcel, 18].Calculate();
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 20].Formula = "SUM(R" + incRowExcel + "/1.1)*0.02";
                                                worksheet.Cells[incRowExcel, 20].Calculate();
                                                worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 21].Formula = "SUM(R" + incRowExcel + "-T" + incRowExcel + ")";
                                                worksheet.Cells[incRowExcel, 21].Calculate();
                                                worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                _endRowDetail = incRowExcel;

                                                _no++;
                                                incRowExcel++;
                                                int _row = incRowExcel - 1;
                                                worksheet.Cells[_row, 16].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                worksheet.Cells[_row, 19].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                worksheet.Cells[_row, 22].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";

                                            }

                                            worksheet.Cells[incRowExcel, 3].Value = "Total";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";

                                            worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 20].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 21].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 18].Calculate();
                                            worksheet.Cells[incRowExcel, 20].Calculate();
                                            worksheet.Cells[incRowExcel, 21].Calculate();

                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 20].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 21].Style.Numberformat.Format = "#,##0.00";






                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;



                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                        }

                                        string _rangeDetail = "A:V";

                                        using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Size = 11;
                                            r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.Column(1).Width = 15;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 15;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;
                                        worksheet.Column(22).Width = 20;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Perhitungan Agent Fee Report";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Subs With Interest
            else if (_unitRegistryRpt.ReportName.Equals("Subs With Interest"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                           
                            string _paramFundClient = "";


                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK  in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            
                            cmd.CommandText =
                            @"
                            --DECLARE @DateFrom DATETIME
                            --DECLARE @DateTo DATETIME
                            --DECLARE @FundClientPK INT
                            --SET @DateFrom = '01/01/19'
                            --SET @DateTo = '09/30/19'
                            --SET @FundClientPK = 2311

                            DECLARE @CClientSubsPK INT
                            DECLARE @CClientName NVARCHAR(500)
                            DECLARE @CFundName NVARCHAR(500)
                            DECLARE @CTotalCashAmount NUMERIC(22,4)
                            DECLARE @CValueDate DATETIME
                            DECLARE @CTenor INT
                            DECLARE @CPaymentTerm INT
                            DECLARE @CInterestRate NUMERIC(18,8)
                            DECLARE @CFundPK INT
                            DECLARE @CFundClientPK INT
                            declare @TotalRedempAmount numeric(22,4)
                            declare @PaymentDate date

                            DECLARE @MaxDate DATETIME

                            SELECT @MaxDate = MAX(Date) FROM dbo.ZDT_WorkingDays
                            --
                            DECLARE @MaturityDate datetime
                            DECLARE @CounterDate DATETIME
                            DECLARE @lastDate DATETIME

                            DECLARE @Result TABLE
                            (
                            FundClientPK INT,
                            FundPK INT,
                            ClientName NVARCHAR(500),
                            FundName NVARCHAR(500),
                            InterestRate NUMERIC(18,8),
                            Tenor INT,
                            PaymentTerm INT,
                            ValueDate DATETIME,
                            PaymentDate DATETIME,
                            RedemptDate DATETIME,
                            RedemptAmount NUMERIC(22,4),
                            ClientSubsPK int
                            )

                            Declare A Cursor For
	                            SELECT A.ClientSubscriptionPK 
	                            ,A.FundClientPK,ISNULL(B.Name,'') ClientName
	                            ,A.FundPK,ISNULL(C.Name,'') FundName
	                            ,A.TotalCashAmount
	                            ,A.ValueDate
	                            ,CASE WHEN A.Tenor = 1 THEN 3 WHEN A.Tenor = 2 THEN 6 ELSE 12 END
	                            ,CASE WHEN A.PaymentTerm = 1 THEN 3 WHEN A.PaymentTerm = 2 THEN 6 ELSE 12 END
	                            ,A.InterestRate
	                            FROM dbo.ClientSubscription A
	                            LEFT JOIN FundClient B ON A.FundClientPK = B.FundClientPK AND B.Status IN (1,2)
	                            LEFT JOIN Fund C ON A.FundPK = C.FundpK AND C.status IN (1,2)
	                            WHERE 
		                            isnull(A.Tenor,0) > 0
		                            AND isnull(A.InterestRate,0) > 0
		                            AND isnull(A.PaymentTerm,0) > 0
		
		                            -- PARAM DARI REPORT
		                            AND A.ValueDate BETWEEN @DateFrom AND @DateTo
		                            --and A.FundClientPK = @FundClientPK
		                            " + _paramFundClient + @"
                            Open A
                            Fetch Next From A
                            INTO @CClientSubsPK,@CFundClientPK,@CClientName,@CFundPK,@CFundName,@CTotalCashAmount,@CValueDate,@CTenor,@CPaymentTerm,@CInterestRate

                            While @@FETCH_STATUS = 0  
                            BEGIN
	                            SET @MaturityDate = NULL
	                            SET @CounterDate = NULL
	                            SET @lastDate = null
	                            SET @CounterDate = @CValueDate
	                            SET @MaturityDate = DATEADD(MONTH,@CTenor,@CValueDate)

	                            SELECT @MaturityDate = CASE WHEN isholiday = 1 THEN DTM1 ELSE @MaturityDate END  FROM dbo.ZDT_WorkingDays WHERE date = @MaturityDate

	                            WHILE @CounterDate < @MaturityDate AND @CounterDate <= @MaxDate
	                            BEGIN
		                            SET @lastDate = @CounterDate
		                            SELECT @counterdate =  CASE WHEN isholiday = 1 THEN DT1 ELSE  DATEADD(MONTH,@CPaymentTerm,@CounterDate)  END  FROM dbo.ZDT_WorkingDays WHERE date = DATEADD(MONTH,@CPaymentTerm,@CounterDate) 
	
		                            if @CTotalCashAmount < 100000000
		                            begin
			                            set @PaymentDate = (select CASE WHEN B.IsHoliday = 1 THEN A.DT1 ELSE B.Date end RedemptDate from dbo.ZDT_WorkingDays A 
								                            LEFT JOIN dbo.ZDT_WorkingDays B ON A.DT2 = B.Date where A.Date = @CounterDate)
		                            end
		                            else
		                            begin
			                            set @PaymentDate = (select CASE WHEN B.IsHoliday = 1 THEN A.DT1 ELSE B.Date end RedemptDate from dbo.ZDT_WorkingDays A 
								                            LEFT JOIN dbo.ZDT_WorkingDays B ON A.DTM3 = B.Date where A.Date = @CounterDate)
		                            end


		                            if @CounterDate = @MaturityDate
			                            set @TotalRedempAmount = ((@CInterestRate* @CPaymentTerm / @CTenor /100/365) * DATEDIFF(day,@lastDate,@CounterDate) * @CTotalCashAmount) + @CTotalCashAmount
		                            else
			                            set @TotalRedempAmount = ((@CInterestRate* @CPaymentTerm / @CTenor /100/365) * DATEDIFF(day,@lastDate,@CounterDate) * @CTotalCashAmount)


		                            INSERT INTO @Result
		                                    ( FundClientPK ,
		                                      FundPK ,
		                                      ClientName ,
		                                      FundName ,
		                                      InterestRate ,
		                                      Tenor ,
		                                      PaymentTerm ,
		                                      ValueDate ,
				                              PaymentDate,
		                                      RedemptDate ,
		                                      RedemptAmount,
				                              ClientSubsPK
		                                    )
		
		                            SELECT @CFundClientPK FundClientPK
		                            ,@CFundPK FundPK
		                            ,@CClientName ClientName
		                            ,@CFundName FundName
		                            ,@CInterestRate InterestRate
		                            ,@CTenor Tenor
		                            ,@CPaymentTerm PaymentTerm
		                            ,@CValueDate ValueDate
		                            ,@PaymentDate PaymentDate
		                            , CASE WHEN B.IsHoliday = 1 THEN A.DT1 ELSE B.Date END RedemptDate
		                            ,@TotalRedempAmount RedemptAmount
		                            ,@CClientSubsPK
		                            FROM dbo.ZDT_WorkingDays A 
		                            LEFT JOIN dbo.ZDT_WorkingDays B ON A.DTM3 = B.Date
		                            WHERE A.Date = @CounterDate


	                            END


	                            Fetch Next From A 
	                            INTO @CClientSubsPK,@CFundClientPK,@CClientName,@CFundPK,@CFundName,@CTotalCashAmount,@CValueDate,@CTenor,@CPaymentTerm,@CInterestRate
                            End	
                            Close A
                            Deallocate A


                            SELECT * FROM @Result
                            ";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SubsWithInterest" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SubsWithInterest" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Subs With Interest");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TotalTransactionReportClient> rList = new List<TotalTransactionReportClient>();
                                        while (dr0.Read())
                                        {
                                            TotalTransactionReportClient rSingle = new TotalTransactionReportClient();
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.InterestRate = Convert.ToDecimal(dr0["InterestRate"]);
                                            rSingle.Tenor = Convert.ToString(dr0["Tenor"]);
                                            rSingle.PaymentTerm = Convert.ToString(dr0["PaymentTerm"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);

                                            rSingle.PaymentDate = Convert.ToDateTime(dr0["PaymentDate"]);
                                            rSingle.RedemptDate = Convert.ToDateTime(dr0["RedemptDate"]);
                                            rSingle.RedemptAmount = Convert.ToDecimal(dr0["RedemptAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            orderby r.ClientName
                                            group r by new { r.ClientName, r.FundName, r.InterestRate, r.Tenor, r.PaymentTerm, r.ValueDate } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;


                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Interest Rate";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.InterestRate/100;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "##,#00%";
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Tenor";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Tenor;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Payment Term";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.PaymentTerm;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Value Date";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ":";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ValueDate;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy"; 

                                            incRowExcel = incRowExcel + 2;
                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;

                                            //Header Detail
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                            worksheet.Cells[incRowExcel, 2].Value = "Payment Date";
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.BorderAround(ExcelBorderStyle.Medium); 
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Value = "Redempt Date";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                            worksheet.Cells[incRowExcel, 5].Value = "Redempt Payment";
                                            worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Medium);
                                            incRowExcel++;

                                            // Row C = 4
                                            int RowC = incRowExcel;

                                            //incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //var _fundID = "";
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;

                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no; ;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.PaymentDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                                                worksheet.Cells[incRowExcel, 2].Style.Border.BorderAround(ExcelBorderStyle.Thin); 
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.RedemptDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 4].Style.Border.BorderAround(ExcelBorderStyle.Thin); 
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RedemptAmount;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 5].Style.Border.BorderAround(ExcelBorderStyle.Thin); 
                                                
                                                incRowExcel++;
                                                _no++;

                                            }
                                        }

                                        incRowExcel++;

                                        int _lastRow = incRowExcel;

                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                        string _rangeA = "A:I" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 13];
                                        worksheet.Column(1).Width = 4;
                                        worksheet.Column(2).Width = 19;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n \n \n \n \n &30&B Subs With Interest";



                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        Image thumb = img.GetThumbnailImage(Tools.imgWidth, Tools.imgHeight, null, IntPtr.Zero);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }
        public List<FundCombo> Fund_ComboHeader()
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<FundCombo> L_Fund = new List<FundCombo>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = "SELECT  FundPK,ID + ' - ' + Name as ID, Name FROM [Fund]  where status = 2 union all select 0,'All', '' order by FundPK,Name";
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    FundCombo M_Fund = new FundCombo();
                                    M_Fund.FundPK = Convert.ToInt32(dr["FundPK"]);
                                    M_Fund.ID = Convert.ToString(dr["ID"]);
                                    M_Fund.Name = Convert.ToString(dr["Name"]);
                                    L_Fund.Add(M_Fund);
                                }

                            }
                            return L_Fund;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }


        }


//        public decimal OMSEquityGetNetAvailableCash(DateTime _date, int _fundPK)
//        {

//            try
//            {
//                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
//                {
//                    DbCon.Open();
//                    using (SqlCommand cmd = DbCon.CreateCommand())
//                    {

//                        cmd.CommandTimeout = 0;
   
//                        cmd.CommandText = @"
//                        declare @Nav numeric (18,4)
//                        select @Nav = Nav From CloseNav where Date = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @FundPK
//
//
//                        create table #CashInvestmentProjection
//                        (FundPK int,amount numeric(22,4))
//
//                        if (@Nav is null)
//                        BEGIN
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(balance),0) from FundPosition where MaturityDate = @valuedate and fundpk  = @FundPK and status  = 2
//                        
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select FundPK,isnull(sum(TotalCashAmount),0) from ClientSubscription where ValueDate = @ValueDate and FundPK = @FundPK and status  in (1,2) and BitImmediateTransaction = 1
//                        Group By FundPK
//                        END
//                        ELSE
//                        BEGIN
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select FundPK,isnull(Amount,0) from CashProjection where FundPK = @FundPK and ValueDate = dbo.FWorkingDay(@ValueDate,-1)
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(basedebit-basecredit),0) from fundjournaldetail A left join fundjournal B
//                        on A.FundJournalPK = B.FundJournalPK and B.Status= 2  and B.Posted = 1 and B.Reversed = 0
//                        where  ValueDate <= @ValueDate and FundJournalAccountPK in (79,80,81,103) and fundpk = @FundPK   
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ),0) from investment 
//                        where  fundpk  = @FundPK and ValueDate =  dbo.FWorkingDay(@ValueDate,-3) and statusSettlement  = 2
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ),0) from investment 
//                        where  fundpk  = @FundPK and ValueDate =  dbo.FWorkingDay(@ValueDate,-2) and statusSettlement  = 2
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ),0) from investment 
//                        where  fundpk  = @FundPK and ValueDate =  dbo.FWorkingDay(@ValueDate,-1) and statusSettlement  = 2
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select FundPK,isnull(sum(TotalCashAmount),0) from ClientSubscription where ValueDate = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @FundPK and status  = 2 and Posted  = 1
//                        Group By FundPK
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select FundPK,isnull(sum(TotalCashAmount),0) from ClientSubscription where ValueDate = @ValueDate and FundPK = @FundPK and status  in (1,2) and BitImmediateTransaction = 1
//                        Group By FundPK
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select A.FundPK,isnull(sum((TotalUnitAmount * B.Nav )* -1),0) from ClientRedemption A left join CloseNav B
//                        on A.valuedate = B.date and A.FundPK = B.FundPK and B.status = 2
//                        where A.ValueDate = dbo.FWorkingDay(@ValueDate,-1) and A.FundPK = @FundPK and A.status  in (1,2)
//                        Group By A.FundPK
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (DoneAmount) * -1 else (DoneAmount) * 1 end ),0) from investment where valuedate = @valuedate and fundpk  = @FundPK and StatusDealing  in (2) and OrderStatus in ('M','P')
//                        and TrxType  = 2 and InstrumentTypePK <> 5
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (DoneAmount) * -1 else (DoneAmount) * 1 end ),0) from investment where valuedate = @valuedate and fundpk  = @FundPK and StatusInvestment <> 3 and StatusDealing <> 3 and StatusSettlement <> 3 
//                        and TrxType  = 1
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (DoneAmount) * -1 else (DoneAmount) * 1 end ),0) from investment where valuedate = @valuedate and fundpk  = @FundPK and StatusInvestment <> 3 and StatusDealing <> 3 and StatusSettlement <> 3 
//                        and TrxType  = 2 and InstrumentTypePK = 5
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(balance),0) from FundPosition where MaturityDate = @valuedate and fundpk  = @FundPK and status  = 2
//                        END
//                        
//
//                        select sum(isnull(Amount,0)) Amount from #CashInvestmentProjection ";
//                        cmd.Parameters.AddWithValue("@ValueDate", _date);
//                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
//                        using (SqlDataReader dr = cmd.ExecuteReader())
//                        {
//                            if (dr.HasRows)
//                            {
//                                dr.Read();
//                                return Convert.ToDecimal(dr["Amount"]);
//                            }
//                            return 0;
//                        }

//                    }
//                }
//            }
//            catch (Exception err)
//            {
//                throw err;
//            }
//        }


        public List<OMSEquityBySector> OMSEquityBySector(DateTime _date, int _fundPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSEquityBySector> L_model = new List<OMSEquityBySector>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                    
                   
					  Declare @TotalMarketValue numeric(26,6)

                        select @TotalMarketValue = aum From closeNav
                        where Date = dbo.FWorkingDay(@Date,-1) and FundPK = @FundPK
                        and status = 2
	             
				
                        Create table #OMSEquityBySector
                        (
		                    InstrumentID nvarchar(100) COLLATE DATABASE_DEFAULT,
	                        SectorID nvarchar(200) COLLATE DATABASE_DEFAULT,
	                        Balance numeric(18,0),
	                        AvgPrice numeric(18,6),
	                        CostValue numeric(22,4),
	                        ClosePrice numeric(18,4),
	                        LastPrice numeric(18,4),
	                        LotInShare int
                        )
	
                        Insert into #OMSEquityBySector(InstrumentID,SectorID,Balance,AvgPrice,CostValue,ClosePrice,LastPrice,LotInShare)
                        Select A.InstrumentID,C.ID,
	                    A.balance + isnull(case when D.TrxType = 1 and D.StatusDealing in( 0,1) then D.Volume else
	                    case when D.TrxType = 2 and D.StatusDealing in( 0,1) then D.Volume * -1 else
	                    case when D.TrxType = 1 and D.StatusDealing = 2 then D.DoneVolume else
	                    case when D.trxType = 2 and D.StatusDealing = 2 then D.DoneVolume * -1 end end end end,0)
	                    + isnull(case when E.TrxType = 1 and E.StatusDealing in( 0,1) then E.Volume else
	                    case when E.TrxType = 2 and E.StatusDealing in( 0,1) then E.Volume * -1 else
	                    case when E.TrxType = 1 and E.StatusDealing = 2 then E.DoneVolume else
	                    case when E.trxType = 2 and E.StatusDealing = 2 then E.DoneVolume * -1 end end end end,0)
	                    ,
	                    dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),A.Balance * dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK) CostValue,
	                    [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice, B.LotInShare
                        From FundPosition A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
	                    -- sisi buy dulu
	                    left join (
		                    Select TrxType,StatusDealing,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
		                    and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
		                    and TrxType = 1 and FundPK = @FundPK
		                    group by InstrumentPK,TrxType,StatusDealing
	                    )D on A.InstrumentPK = D.InstrumentPK
	                    -- sisi Sell
	                    left join (
		                    Select TrxType,StatusDealing,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
		                    and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
		                    and TrxType = 2 and FundPK = @FundPK
		                    group by InstrumentPK,TrxType,StatusDealing
	                    )E on A.InstrumentPK = E.InstrumentPK
                        left join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.status = 2
                        where A.Date = dbo.FWorkingDay(@Date,-1) and F.Type = 1 and A.FundPK = @FundPK
                        and B.InstrumentPK not in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )


	                    Insert into #OMSEquityBySector(InstrumentID,SectorID,Balance,AvgPrice,ClosePrice,LastPrice,LotInShare)
	                    Select B.ID,C.ID,   
	                    case when A.TrxType = 1 and A.StatusDealing in( 0,1) then A.Volume else
	                    case when A.TrxType = 2 and A.StatusDealing in( 0,1) then A.Volume * -1 else
	                    case when A.TrxType = 1 and A.StatusDealing = 2 then A.DoneVolume else
	                    case when A.trxType = 2 and A.StatusDealing = 2 then A.DoneVolume * -1 end end end end,
	                    dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),	[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) LastPrice,B.LotInShare  
	                    from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	                    left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
	                    where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and A.instrumentTypePK = 1
                        and A.FundPK = @FundPK
	                    and B.ID Not in 
	                    (
		                    select instrumentID From #OMSEquityBySector
	                    )
                        and B.InstrumentPK not in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )

                        Insert into #OMSEquityBySector(InstrumentID,SectorID,Balance,AvgPrice,CostValue,ClosePrice,LastPrice,LotInShare)
                        Select A.InstrumentID,C.ID,
	                    A.balance + isnull(case when D.TrxType = 1 and D.StatusDealing in( 0,1) then D.Volume else
	                    case when D.TrxType = 2 and D.StatusDealing in( 0,1) then D.Volume * -1 else
	                    case when D.TrxType = 1 and D.StatusDealing = 2 then D.DoneVolume else
	                    case when D.trxType = 2 and D.StatusDealing = 2 then D.DoneVolume * -1 end end end end,0)
	                    + isnull(case when E.TrxType = 1 and E.StatusDealing in( 0,1) then E.Volume else
	                    case when E.TrxType = 2 and E.StatusDealing in( 0,1) then E.Volume * -1 else
	                    case when E.TrxType = 1 and E.StatusDealing = 2 then E.DoneVolume else
	                    case when E.trxType = 2 and E.StatusDealing = 2 then E.DoneVolume * -1 end end end end,0)
	                    ,
	                    dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),A.Balance * dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK) CostValue,
	                    [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice, B.LotInShare
                        From FundPosition A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join Sector C on B.SectorPK = C.SectorPK and C.Status = 2
	                    -- sisi buy dulu
	                    left join (
		                    Select TrxType,StatusDealing,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
		                    and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
		                    and TrxType = 1 and FundPK = @FundPK
		                    group by InstrumentPK,TrxType,StatusDealing
	                    )D on A.InstrumentPK = D.InstrumentPK
	                    -- sisi Sell
	                    left join (
		                    Select TrxType,StatusDealing,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
		                    and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
		                    and TrxType = 2 and FundPK = @FundPK
		                    group by InstrumentPK,TrxType,StatusDealing
	                    )E on A.InstrumentPK = E.InstrumentPK
                        left join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.status = 2
                        where A.Date = dbo.FWorkingDay(@Date,-1) and F.Type = 1 and A.FundPK = @FundPK
                        and B.InstrumentPK in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )


	                    Insert into #OMSEquityBySector(InstrumentID,SectorID,Balance,AvgPrice,ClosePrice,LastPrice,LotInShare)
	                    Select B.ID,C.ID,   
	                    case when A.TrxType = 1 and A.StatusDealing in( 0,1) then A.Volume else
	                    case when A.TrxType = 2 and A.StatusDealing in( 0,1) then A.Volume * -1 else
	                    case when A.TrxType = 1 and A.StatusDealing = 2 then A.DoneVolume else
	                    case when A.trxType = 2 and A.StatusDealing = 2 then A.DoneVolume * -1 end end end end,
	                    dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),	[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) LastPrice,B.LotInShare  
	                    from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
	                    left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
	                    where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and A.instrumentTypePK = 1
                        and A.FundPK = @FundPK
	                    and B.ID Not in 
	                    (
		                    select instrumentID From #OMSEquityBySector
	                    )
                        and B.InstrumentPK in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )

                        Select InstrumentID,SectorID,isnull(sum(Balance * LastPrice) / @TotalMarketValue * 100,0) CurrentExposure  ,
	                    sum(Balance/LotInShare) Lot,avg(AvgPrice) AvgPrice,sum(Balance * AvgPrice) Cost,
                        Avg(ClosePrice) ClosePrice,Avg(LastPrice) LastPrice,
	                    ((Avg(LastPrice) / Avg(case when ClosePrice = 0 then 1 else closeprice end)) - 1) * 100 PriceDifference,sum(Balance * LastPrice) MarketValue,
                        (sum(Balance * LastPrice)) - (sum(Balance * AvgPrice)) Unrealized, 
	                    ((sum(Balance * LastPrice)) / (sum(Balance * case when AvgPrice = 0 then 1 else AvgPrice end)) -1) * 100 GainLoss

                        From #OMSEquityBySector
                        Group by SectorID,InstrumentID
                        having sum(balance) > 0
                                                                
                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OMSEquityBySector M_model = new OMSEquityBySector();
                                    M_model.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_model.SectorID = Convert.ToString(dr["SectorID"]);
                                    M_model.CurrentExposure = Convert.ToDecimal(dr["CurrentExposure"]);
                                    M_model.Lot = Convert.ToDecimal(dr["Lot"]);
                                    M_model.AvgPrice = Convert.ToDecimal(dr["AvgPrice"]);
                                    M_model.Cost = Convert.ToDecimal(dr["Cost"]);
                                    M_model.ClosePrice = Convert.ToDecimal(dr["ClosePrice"]);
                                    M_model.LastPrice = Convert.ToDecimal(dr["LastPrice"]);
                                    M_model.PriceDifference = Convert.ToDecimal(dr["PriceDifference"]);
                                    M_model.MarketValue = Convert.ToDecimal(dr["MarketValue"]);
                                    M_model.UnRealized = Convert.ToDecimal(dr["UnRealized"]);
                                    M_model.GainLoss = Convert.ToDecimal(dr["GainLoss"]);
                                    L_model.Add(M_model);
                                }
                            } return L_model;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<OMSEquityByIndex> OMSEquityByIndex(DateTime _date, int _fundPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSEquityByIndex> L_model = new List<OMSEquityByIndex>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                    
                       Declare @TotalMarketValue numeric(26,6)

                        select @TotalMarketValue = aum From closeNav
                        where Date = dbo.FWorkingDay(@Date,-1) and FundPK = @FundPK
                        and status = 2


                        Create table #OMSEquityByIndex
                        (
	                        InstrumentID nvarchar(100) COLLATE DATABASE_DEFAULT,
	                        IndexID nvarchar(200) COLLATE DATABASE_DEFAULT,
	                        Balance numeric(18,0),
	                        AvgPrice numeric(18,6),
	                        CostValue numeric(22,4),
	                        ClosePrice numeric(18,4),
	                        LastPrice numeric(18,4),
	                        LotInShare int
                        )
	
                        Insert into #OMSEquityByIndex(InstrumentID,IndexID,Balance,AvgPrice,CostValue,ClosePrice,LastPrice,LotInShare)
                        Select A.InstrumentID,D.ID,	A.balance + isnull(case when E.TrxType = 1 and E.StatusDealing in( 0,1) then E.Volume else
	                    case when E.TrxType = 2 and E.StatusDealing in( 0,1) then E.Volume * -1 else
	                    case when E.TrxType = 1 and E.StatusDealing = 2 then E.DoneVolume else
	                    case when E.trxType = 2 and E.StatusDealing = 2 then E.DoneVolume * -1 end end end end,0)
	                    ,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),A.Balance * dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK) CostValue,[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) LastPrice, B.LotInShare
                        From FundPosition A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join InstrumentIndex C on B.InstrumentPK = C.InstrumentPK and C.Status = 2
                        left join [Index] D on C.IndexPK = D.IndexPK and D.Status = 2
                        left join (
		                        Select TrxType,StatusDealing,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
		                        and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
		                        and TrxType = 1 and FundPK = @FundPK
		                        group by InstrumentPK,TrxType,StatusDealing
	                        )E on A.InstrumentPK = E.InstrumentPK
	                        -- sisi Sell
	                        left join (
		                        Select TrxType,StatusDealing,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
		                        and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
		                        and TrxType = 2 and FundPK = @FundPK
		                        group by InstrumentPK,TrxType,StatusDealing
	                        )F on A.InstrumentPK = F.InstrumentPK

                        left join InstrumentType G on B.InstrumentTypePK = G.InstrumentTypePK and G.status = 2
                        where A.Date = dbo.FWorkingDay(@Date,-1) and G.Type = 1 and A.FundPK = @FundPK

                        Insert into #OMSEquityByIndex(InstrumentID,IndexID,Balance,AvgPrice,ClosePrice,LastPrice,LotInShare)
                        Select B.ID,D.ID,   
                        case when A.TrxType = 1 and A.StatusDealing in( 0,1) then A.Volume else
                        case when A.TrxType = 2 and A.StatusDealing in( 0,1) then A.Volume * -1 else
                        case when A.TrxType = 1 and A.StatusDealing = 2 then A.DoneVolume else
                        case when A.trxType = 2 and A.StatusDealing = 2 then A.DoneVolume * -1 end end end end,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),	[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) LastPrice,B.LotInShare  
                        from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join InstrumentIndex C on B.InstrumentPK = C.InstrumentPK and C.Status = 2
                        left join [Index] D on C.IndexPK = D.IndexPK and D.Status = 2
                        where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and A.InstrumentTypePK = 1
                        and FundPK = @FundPK
                        and B.ID Not in 
                        (
	                        select instrumentID From #OMSEquityByIndex
                        )


                        Select InstrumentID,isnull(IndexID,'ZIndex') IndexID,isnull(sum(Balance * LastPrice) / @TotalMarketValue * 100,0)  CurrentExposure,sum(Balance/LotInShare) Lot,avg(AvgPrice) AvgPrice,sum(Balance * AvgPrice) Cost,
                        Avg(ClosePrice) ClosePrice,Avg(LastPrice) LastPrice,((Avg(LastPrice) / Avg(case when ClosePrice = 0 then 1 else closeprice end)) - 1) * 100 PriceDifference,sum(Balance * LastPrice) MarketValue,
                        (sum(Balance * LastPrice)) - (sum(Balance * AvgPrice)) Unrealized, ((sum(Balance * LastPrice)) / (sum(Balance * case when AvgPrice = 0 then 1 else AvgPrice end)) -1) * 100 GainLoss

                        From #OMSEquityByIndex
                        Group by IndexID,InstrumentID
                        having sum(balance) > 0 
                                    
                        ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OMSEquityByIndex M_model = new OMSEquityByIndex();
                                    M_model.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_model.IndexID = Convert.ToString(dr["IndexID"]);
                                    M_model.CurrentExposure = Convert.ToDecimal(dr["CurrentExposure"]);
                                    M_model.Lot = Convert.ToDecimal(dr["Lot"]);
                                    M_model.AvgPrice = Convert.ToDecimal(dr["AvgPrice"]);
                                    M_model.Cost = Convert.ToDecimal(dr["Cost"]);
                                    M_model.ClosePrice = Convert.ToDecimal(dr["ClosePrice"]);
                                    M_model.LastPrice = Convert.ToDecimal(dr["LastPrice"]);
                                    M_model.PriceDifference = Convert.ToDecimal(dr["PriceDifference"]);
                                    M_model.MarketValue = Convert.ToDecimal(dr["MarketValue"]);
                                    M_model.UnRealized = Convert.ToDecimal(dr["UnRealized"]);
                                    M_model.GainLoss = Convert.ToDecimal(dr["GainLoss"]);
                                    L_model.Add(M_model);
                                }
                            } return L_model;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public List<OMSEquityByInstrument> OMSEquityByInstrument(DateTime _date, int _fundPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSEquityByInstrument> L_model = new List<OMSEquityByInstrument>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                    

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

                     
                        Declare @TotalMarketValue numeric(26,6)
                        
                        select @TotalMarketValue = aum From closeNav
                        where Date = dbo.FWorkingDay(@Date,-1) and FundPK = @FundPK
                        and status = 2
	             
                        Create table #OMSEquityByAllInstrument
                        (
                        InstrumentID nvarchar(100) COLLATE DATABASE_DEFAULT,
                        SectorID nvarchar(200) COLLATE DATABASE_DEFAULT,
                        Balance numeric(18,0),
                        AvgPrice numeric(18,6),
                        CostValue numeric(22,4),
                        ClosePrice numeric(18,4),
                        LastPrice numeric(18,4),
                        LotInShare int,
                        Status int
                        )
                        	
                        Insert into #OMSEquityByAllInstrument(InstrumentID,SectorID,Balance,AvgPrice,CostValue,ClosePrice,LastPrice,LotInShare,Status)
                        Select A.InstrumentID,C.ID,
                        A.balance + isnull(
                        case when D.TrxType = 1 then isnull(D.DoneVolume,0) else
                        case when D.trxType = 2 then D.DoneVolume * -1 end end ,0)
                        + isnull(
                        case when E.TrxType = 1 then E.DoneVolume else
                        case when E.trxType = 2 then E.DoneVolume * -1 end end ,0)
                        ,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),A.Balance * dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK) CostValue,
                        [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice, B.LotInShare,isnull(case when D.TrxType = 1 then 1 else case when E.TrxType = 2 then 1 else 0  end end,0)
                        From FundPosition A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
                        -- sisi buy dulu
                        left join (
                        Select TrxType,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
                        and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
                        and TrxType = 1 and FundPK = @FundPK
                        group by InstrumentPK,TrxType
                        )D on A.InstrumentPK = D.InstrumentPK
                        -- sisi Sell
                        left join (
                        Select TrxType,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
                        and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
                        and TrxType = 2 and FundPK = @FundPK
                        group by InstrumentPK,TrxType
                        )E on A.InstrumentPK = E.InstrumentPK
                        left join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.status = 2
                        where A.Date = dbo.FWorkingDay(@Date,-1) and F.Type = 1 and A.FundPK = @FundPK and A.status  = 2
                        and B.InstrumentPK not in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )
                        
                        Insert into #OMSEquityByAllInstrument(InstrumentID,SectorID,Balance,AvgPrice,ClosePrice,LastPrice,LotInShare,Status)
                        Select B.ID,C.ID,   
                        case when A.TrxType = 1 then A.DoneVolume else
                        case when A.trxType = 2 then A.DoneVolume * -1 end end,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice,B.LotInShare ,1 
                        from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
                        where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and A.instrumentTypePK = 1
                        and A.FundPK = @FundPK and A.TrxType = 1
                        and B.ID Not in 
                        (
                        select instrumentID From #OMSEquityByAllInstrument
                        )
                        and B.InstrumentPK not in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )

                        union all

                        Select B.ID,C.ID,   
                        case when A.TrxType = 1 then A.DoneVolume else
                        case when A.trxType = 2 then A.DoneVolume * -1 end end,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),	[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice,B.LotInShare ,1 
                        from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
                        where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and statussettlement <> 3 and A.instrumentTypePK = 1
                        and A.FundPK = @FundPK and A.TrxType = 2
                        and B.ID Not in 
                        (
                        select instrumentID From #OMSEquityByAllInstrument
                        )
                        and B.InstrumentPK not in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )


                        Insert into #OMSEquityByAllInstrument(InstrumentID,SectorID,Balance,AvgPrice,CostValue,ClosePrice,LastPrice,LotInShare,Status)
                        Select A.InstrumentID,C.ID,
                        A.balance + isnull(
                        case when D.TrxType = 1 then D.DoneVolume else
                        case when D.trxType = 2 then D.DoneVolume * -1 end end,0)
                        + isnull(
                        case when E.TrxType = 1 then E.DoneVolume else
                        case when E.trxType = 2 then E.DoneVolume * -1 end end,0)
                        ,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),A.Balance * dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK) CostValue,
                        [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        G.ClosePriceValue LastPrice, B.LotInShare,isnull(case when D.TrxType = 1 then 1 else case when E.TrxType = 2 then 1 else 0  end end,0)
                        From FundPosition A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
                        left join UpdateClosePrice G on B.InstrumentPK = G.InstrumentPK and G.Status = 2
                        -- sisi buy dulu
                        left join (
                        Select TrxType,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
                        and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
                        and TrxType = 1 and FundPK = @FundPK
                        group by InstrumentPK,TrxType
                        )D on A.InstrumentPK = D.InstrumentPK
                        -- sisi Sell
                        left join (
                        Select TrxType,sum(volume) Volume, sum(DoneVolume) DoneVolume,InstrumentPK from Investment where ValueDate = @Date
                        and StatusInvestment <> 3 and StatusDealing <> 3 and instrumentTypePK = 1
                        and TrxType = 2 and FundPK = @FundPK
                        group by InstrumentPK,TrxType
                        )E on A.InstrumentPK = E.InstrumentPK
                        left join InstrumentType F on B.InstrumentTypePK = F.InstrumentTypePK and F.status = 2
                        where A.Date = dbo.FWorkingDay(@Date,-1) and F.Type = 1 and A.FundPK = @FundPK and A.status  = 2
                        and B.InstrumentPK  in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )

                        
                        
                        Insert into #OMSEquityByAllInstrument(InstrumentID,SectorID,Balance,AvgPrice,ClosePrice,LastPrice,LotInShare,Status)
                        Select B.ID,C.ID,   
                        case when A.TrxType = 1 then A.DoneVolume else
                        case when A.trxType = 2 then A.DoneVolume * -1 end end,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),	[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice,B.LotInShare ,1 
                        from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
                        where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and A.instrumentTypePK = 1
                        and A.FundPK = @FundPK and A.TrxType = 1
                        and B.ID Not in 
                        (
                        select instrumentID From #OMSEquityByAllInstrument
                        )
                        and B.InstrumentPK  in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )

                        union all

                        Select B.ID,C.ID,   
                        case when A.TrxType = 1 then A.DoneVolume else
                        case when A.trxType = 2 then A.DoneVolume * -1 end end,
                        dbo.FGetLastAvgFromInvestment_OMSEquity(@Date,A.InstrumentPK,A.FundPK),	[dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) ClosePrice,    
                        case when dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK)  = 0 then [dbo].[FGetLastClosePrice](@Date,A.InstrumentPK) else dbo.[FgetPriceFromInstrumentMarketInfo](@Date,A.InstrumentPK) End LastPrice,B.LotInShare ,1 
                        from Investment A
                        left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
                        left join SubSector C on B.SectorPK = C.SubSectorPK and C.Status = 2
                        where ValueDate = @Date and StatusInvestment <> 3 and StatusDealing <> 3 and statussettlement <> 3 and A.instrumentTypePK = 1
                        and A.FundPK = @FundPK and A.TrxType = 2
                        and B.ID Not in 
                        (
                        select instrumentID From #OMSEquityByAllInstrument
                        )
                        and B.InstrumentPK in
                        ( 
                        select instrumentPK From UpdateClosePrice where status  = 2
                        )
             



                        Select InstrumentID,SectorID,isnull(sum(Balance * LastPrice) / @TotalMarketValue * 100,0) CurrentExposure  ,
                        sum(Balance/LotInShare) Lot,avg(AvgPrice) AvgPrice,sum(Balance * AvgPrice) Cost,
                        Avg(ClosePrice) ClosePrice,Avg(LastPrice) LastPrice,
                        ((Avg(LastPrice) / Avg(case when ClosePrice = 0 then 1 else closeprice end)) - 1) * 100 PriceDifference,sum(Balance * LastPrice) MarketValue,
                        (sum(Balance * LastPrice)) - (sum(Balance * AvgPrice)) Unrealized, 
                        ((sum(Balance * LastPrice)) / (sum(Balance * case when AvgPrice = 0 then 1 else AvgPrice end)) -1) * 100 GainLoss,Status

                        From #OMSEquityByAllInstrument
                        Group by SectorID,InstrumentID,Status
                        having sum(balance) > 0
                        order by InstrumentID                                                                
                                                ";
                        cmd.Parameters.AddWithValue("@Date", _date);
                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OMSEquityByInstrument M_model = new OMSEquityByInstrument();
                                    M_model.InstrumentID = Convert.ToString(dr["InstrumentID"]);
                                    M_model.SectorID = Convert.ToString(dr["SectorID"]);
                                    M_model.CurrentExposure = Convert.ToDecimal(dr["CurrentExposure"]);
                                    M_model.Lot = Convert.ToDecimal(dr["Lot"]);
                                    M_model.AvgPrice = Convert.ToDecimal(dr["AvgPrice"]);
                                    M_model.Cost = Convert.ToDecimal(dr["Cost"]);
                                    M_model.ClosePrice = Convert.ToDecimal(dr["ClosePrice"]);
                                    M_model.LastPrice = Convert.ToDecimal(dr["LastPrice"]);
                                    M_model.PriceDifference = Convert.ToDecimal(dr["PriceDifference"]);
                                    M_model.MarketValue = Convert.ToDecimal(dr["MarketValue"]);
                                    M_model.UnRealized = Convert.ToDecimal(dr["UnRealized"]);
                                    M_model.GainLoss = Convert.ToDecimal(dr["GainLoss"]);
                                    M_model.Status = Convert.ToInt32(dr["Status"]);
                                    L_model.Add(M_model);
                                }
                            } return L_model;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

//        public Boolean Validate_CheckAvailableCash(decimal _amount, DateTime _valueDate, int _fundPK)
//        {
//            try
//            {
//                DateTime _dateTimeNow = DateTime.Now;
//                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
//                {
//                    DbCon.Open();
//                    using (SqlCommand cmd = DbCon.CreateCommand())
//                    {
//                        cmd.CommandText = @"
//                 declare @ValidateAmount numeric (18,4)
//                   declare @Nav numeric (18,4)
//                        select @Nav = Nav From CloseNav where Date = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @FundPK
//
//
//                        create table #CashInvestmentProjection
//                        (FundPK int,amount numeric(22,4))
//
//                        if (@Nav is null)
//                        BEGIN
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(balance),0) from FundPosition where MaturityDate = @valuedate and fundpk  = @FundPK and status  = 2
//                        
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select FundPK,isnull(sum(TotalCashAmount),0) from ClientSubscription where ValueDate = @ValueDate and FundPK = @FundPK and status  in (1,2) and BitImmediateTransaction = 1
//                        Group By FundPK
//                        END
//                        ELSE
//                        BEGIN
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select FundPK,isnull(Amount,0) from CashProjection where FundPK = @FundPK and ValueDate = dbo.FWorkingDay(@ValueDate,-1)
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(basedebit-basecredit),0) from fundjournaldetail A left join fundjournal B
//                        on A.FundJournalPK = B.FundJournalPK and B.Status= 2  and B.Posted = 1 and B.Reversed = 0
//                        where  ValueDate <= @ValueDate and FundJournalAccountPK in (79,80,81,103) and fundpk = @FundPK   
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ),0) from investment 
//                        where  fundpk  = @FundPK and ValueDate =  dbo.FWorkingDay(@ValueDate,-3) and statusSettlement  = 2
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ),0) from investment 
//                        where  fundpk  = @FundPK and ValueDate =  dbo.FWorkingDay(@ValueDate,-2) and statusSettlement  = 2
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (TotalAmount+WHTAmount) * -1 else (TotalAmount-WHTAmount) * 1 end ),0) from investment 
//                        where  fundpk  = @FundPK and ValueDate =  dbo.FWorkingDay(@ValueDate,-1) and statusSettlement  = 2
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select FundPK,isnull(sum(TotalCashAmount),0) from ClientSubscription where ValueDate = dbo.FWorkingDay(@ValueDate,-1) and FundPK = @FundPK and status  = 2 and Posted  = 1
//                        Group By FundPK
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select FundPK,isnull(sum(TotalCashAmount),0) from ClientSubscription where ValueDate = @ValueDate and FundPK = @FundPK and status  in (1,2) and BitImmediateTransaction = 1
//                        Group By FundPK
//
//                        insert into #CashInvestmentProjection (FundPK,Amount)
//                        select A.FundPK,isnull(sum((TotalUnitAmount * B.Nav )* -1),0) from ClientRedemption A left join CloseNav B
//                        on A.valuedate = B.date and A.FundPK = B.FundPK and B.status = 2
//                        where A.ValueDate = dbo.FWorkingDay(@ValueDate,-1) and A.FundPK = @FundPK and A.status  in (1,2)
//                        Group By A.FundPK
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (DoneAmount) * -1 else (DoneAmount) * 1 end ),0) from investment where valuedate = @valuedate and fundpk  = @FundPK and StatusDealing  in (2) and OrderStatus in ('M','P')
//                        and TrxType  = 2 and InstrumentTypePK <> 5
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (DoneAmount) * -1 else (DoneAmount) * 1 end ),0) from investment where valuedate = @valuedate and fundpk  = @FundPK and StatusInvestment <> 3 and StatusDealing <> 3 and StatusSettlement <> 3 
//                        and TrxType  = 1
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(case when TrxType = 1 then (DoneAmount) * -1 else (DoneAmount) * 1 end ),0) from investment where valuedate = @valuedate and fundpk  = @FundPK and StatusInvestment <> 3 and StatusDealing <> 3 and StatusSettlement <> 3 
//                        and TrxType  = 2 and InstrumentTypePK = 5
//
//                        insert into #CashInvestmentProjection (FundPK,amount)
//                        select @FundPK,isnull(sum(balance),0) from FundPosition where MaturityDate = @valuedate and fundpk  = @FundPK and status  = 2
//                        END
// 
//                        select @ValidateAmount = sum(isnull(Amount,0)) from #CashInvestmentProjection
//
//                        IF (@Amount > @ValidateAmount)
//                        BEGIN
//	                        select 1 Result
//                        END
//                        ELSE	
//                        BEGIN
//	                        select 0 Result
//                        END
//                           ";

//                        cmd.Parameters.AddWithValue("@Amount", _amount);
//                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
//                        cmd.Parameters.AddWithValue("@FundPK", _fundPK);
//                        using (SqlDataReader dr = cmd.ExecuteReader())
//                        {
//                            if (dr.HasRows)
//                            {
//                                dr.Read();
//                                return Convert.ToBoolean(dr["Result"]);

//                            }
//                            return false;
//                        }
//                    }
//                }
//            }
//            catch (Exception err)
//            {
//                throw err;
//            }

//        }

        public List<OMSExposureDeposito> OMSExposureDeposito(DateTime _date, string _fundID, int _type)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<OMSExposureDeposito> L_model = new List<OMSExposureDeposito>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_fundID == "0")
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"


Create table #tmpExposureDeposito
(
FundID nvarchar(100) COLLATE DATABASE_DEFAULT,
ExposureType nvarchar(200) COLLATE DATABASE_DEFAULT,
Parameter nvarchar(200) COLLATE DATABASE_DEFAULT,
CurrentValue Decimal(22,4),
PotentialValue Decimal(22,4),
MaxValue Decimal(22,4),
DifferenceValue Decimal(22,4),
CurrentPercentage Decimal(12,4),
PotentialPercentage Decimal(12,4),
MaxPercentage decimal(12,4),
DifferencePercentage Decimal(12,4),
)

Create table #tmpExposureDepositoA
(
Movement Decimal(22,4),
BankPK int
)
Declare @EndDayTrailsFundPortfolioPK int
Declare @BankName nvarchar(100)
Declare @Parameter nvarchar(100)

Declare @MaxDateEndDayFP datetime
Select @EndDayTrailsFundPortfolioPK =  EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
endDayTrailsFundPortfolio where 
valuedate = 
(
	Select max(ValueDate) from endDayTrailsFundPortfolio where
	valuedate < @Date  and status = 2
)
and status = 2


Declare @TotalMarketValue numeric(26,6)

select @TotalMarketValue = sum(aum) From closeNav
where Date = (
			Select max(date) from CloseNAV where date < @Date and status = 2
		)
and status = 2

set @TotalMarketValue = isnull(@TotalMarketValue,1)

    if @TotalMarketValue = 1
    BEGIN
        return
    END


Insert into #tmpExposureDeposito(FundID,ExposureType,Parameter,CurrentValue,PotentialValue,MaxValue,DifferenceValue,CurrentPercentage,PotentialPercentage
,MaxPercentage,DifferencePercentage)

Select 'ALL FUND' FundID,'ALL FUND PER BANK' ExposureType,B.BankPK Parameter,sum(isnull(B.CurrBal,0)) CurrentValue,0,MaxValue,0,sum(isnull(B.CurrBal,0))/@TotalMarketValue * 100,0,MaxExposurePercent,0   
from FundExposure A LEFT JOIN  
(  
    Select Sum(Balance) CurrBal, B.BankPK,C.ID from [FundPosition] A  
    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
    Left join Bank C on B.BankPK = C.BankPK and C.status = 2  
	left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
    Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and D.Type = 3
    Group By B.BankPK,C.ID   
)B ON A.Parameter = 0   
where A.Type = 9 and A.Status = 2 and A.Parameter = 0
group By B.BankPK,B.CurrBal,MaxValue,MaxExposurePercent

insert into #tmpExposureDepositoA
select sum(Movement) Movement,BankPK from (
Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK From Investment A  
left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date
and C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3 and A.MaturityDate  > @Date
Group By B.BankPK  
union all
Select sum(Balance) * -1 MaturedBalance,B.BankPK From [FundPosition] A  
Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2  
where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date and A.FundPositionPK = @EndDayTrailsFundPortfolioPK
Group By B.BankPK  ) A group by BankPK



Insert into #tmpExposureDeposito
select 'ALL FUND','ALL FUND PER BANK',A.BankPK,0,A.Movement,B.MaxValue,0,0, Movement/@TotalMarketValue * 100, 
MaxExposurePercent,0
from #tmpExposureDepositoA A
left join FundExposure B on B.Parameter = 0 and B.Type = 9 and B.status = 2
where A.BankPK not in
(
	Select isnull(Parameter,0) from #tmpExposureDeposito
)



update #tmpExposureDeposito set PotentialValue =  Movement, PotentialPercentage = Movement/@TotalMarketValue * 100 from #tmpExposureDepositoA
where #tmpExposureDeposito.Parameter = #tmpExposureDepositoA.BankPK
update A set Parameter = B.Name from #tmpExposureDeposito A
left join Bank B on A.Parameter = B.BankPK and B.Status = 2



DECLARE A CURSOR FOR 
Select B.Name from FundExposure A 
left join Bank B on A.Parameter  = B.BankPK and B.status  = 2
where A.status  = 2 and Type = 9 and Parameter <> 0

Open A
Fetch Next From A
Into @BankName
While @@FETCH_STATUS = 0
BEGIN
	DECLARE B CURSOR FOR 
	Select isnull(F.Name,'') Parameter
	from FundExposure A LEFT JOIN  
	(  
	Select Sum(Balance) CurrBal, B.BankPK,C.ID from [FundPosition] A  
	Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
	Left join Bank C on B.BankPK = C.BankPK and C.status = 2  
	left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
	Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and D.Type = 3
	Group By B.BankPK,C.ID   
	)B ON A.Parameter = B.BankPK 
	left join -- T0 from investment  
	(  
	Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK From Investment A  
	left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date
	and C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3 and A.MaturityDate  > @Date
	Group By B.BankPK  
	)D on A.Parameter = D.BankPK  
	left join -- T0 Matured   
	(  
	Select sum(Balance) * -1 MaturedBalance,B.BankPK From [FundPosition] A  
	Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2  
	where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date  and A.FundPositionPK = @EndDayTrailsFundPortfolioPK
	Group By B.BankPK  
	)E on A.Parameter = E.BankPK
	left join Bank F on A.Parameter = F.BankPK and F.Status = 2
	where A.Type = 9 and A.status  = 2 and A.Parameter <> 0

	Open B
	Fetch Next From B
	Into @Parameter
	While @@FETCH_STATUS = 0
	BEGIN
	IF (@BankName = @Parameter)
	BEGIN
	delete #tmpExposureDeposito where Parameter = @BankName
	END
	Fetch next From B                   
	Into @Parameter             
	end                  
	Close B                  
	Deallocate B 

Fetch next From A                   
Into @BankName             
end                  
Close A                  
Deallocate A 

Insert into #tmpExposureDeposito(FundID,ExposureType,Parameter,CurrentValue,PotentialValue,MaxValue,DifferenceValue,CurrentPercentage,PotentialPercentage
,MaxPercentage,DifferencePercentage)
Select 'ALL FUND' FundID,'ALL FUND PER BANK' ExposureType,isnull(F.Name,'') Parameter,isnull(B.CurrBal,0) CurrentValue,isnull(D.Movement,0) + isnull(E.MaturedBalance,0) PotentialValue,MaxValue,  
isnull(MaxValue - (B.CurrBal + isnull(D.Movement,0) + isnull(E.MaturedBalance,0) ),0) Difference,
isnull(B.CurrBal,0)/@TotalMarketValue * 100,(isnull(D.Movement,0) + isnull(E.MaturedBalance,0))/@TotalMarketValue * 100,MaxExposurePercent,0   

from FundExposure A LEFT JOIN  
(  
Select Sum(Balance) CurrBal, B.BankPK,C.ID from [FundPosition] A  
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
Left join Bank C on B.BankPK = C.BankPK and C.status = 2  
left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and D.Type = 3
Group By B.BankPK,C.ID   
)B ON A.Parameter = B.BankPK 
left join -- T0 from investment  
(  
Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK From Investment A  
left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date   
and C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3 and A.MaturityDate  > @Date
Group By B.BankPK  
)D on A.Parameter = D.BankPK  
left join -- T0 Matured   
(  
Select sum(Balance) * -1 MaturedBalance,B.BankPK From [FundPosition] A  
Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2  
where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date  and A.FundPositionPK = @EndDayTrailsFundPortfolioPK
Group By B.BankPK  
)E on A.Parameter = E.BankPK
left join Bank F on A.Parameter = F.BankPK and F.Status = 2  
where A.Type = 9 and A.status  = 2 and A.Parameter <> 0
                        

update #tmpExposureDeposito set DifferencePercentage = MaxPercentage - (CurrentPercentage + PotentialPercentage)
,DifferenceValue = MaxValue - (CurrentValue + PotentialValue)
                  
                       	       

Select FundID,ExposureType,Parameter,CurrentValue,PotentialValue,isnull(MaxValue,0) MaxValue,isnull(DifferenceValue,0) DifferenceValue
,0 CurrentPercentage,0 PotentialPercentage,0 MaxPercentage,0 DifferencePercentage 
,0 DifferenceAmount
from #tmpExposureDeposito
where CurrentValue <> 0 or PotentialValue <> 0
                
                
                        ";
                        }
                        else if (_type == 1)
                        {
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = @"

	Create table #tmpExposureDeposito
    (
    FundID nvarchar(100) COLLATE DATABASE_DEFAULT,
    ExposureType nvarchar(200) COLLATE DATABASE_DEFAULT,
    Parameter nvarchar(200) COLLATE DATABASE_DEFAULT,
    CurrentValue Decimal(22,4),
    PotentialValue Decimal(22,4),
    MaxValue Decimal(22,4),
    DifferenceValue Decimal(22,4),
    CurrentPercentage Decimal(12,4),
    PotentialPercentage Decimal(12,4),
    MaxPercentage decimal(12,4),
    DifferencePercentage Decimal(12,4),
    )

    Create table #tmpExposureDepositoA
    (
    Movement Decimal(22,4),
    BankPK int
    )
    Declare @EndDayTrailsFundPortfolioPK int
    Declare @BankName nvarchar(100)
    Declare @Parameter nvarchar(100)
   
   
   
		Declare @MaxDateEndDayFP datetime
		Select @EndDayTrailsFundPortfolioPK =  EndDayTrailsFundPortfolioPK , @MaxDateEndDayFP = ValueDate From 
		endDayTrailsFundPortfolio where 
		valuedate = 
		(
			Select max(ValueDate) from endDayTrailsFundPortfolio where
			valuedate < @Date  and status = 2
		)
		and status = 2

    Declare @fundID nvarchar(100)
    select @FundID = ID From Fund Where FundPK = @FundPK and status = 2
    Declare @TotalMarketValue numeric(26,6)

    select @TotalMarketValue = aum From closeNav
    where Date = 
	(
		Select max(date) from CloseNAV where date < @Date and status = 2 and FundPK = @FundPK
	)
	and FundPK = @FundPK
    and status = 2

    set @TotalMarketValue = isnull(@TotalMarketValue,1)

    if @TotalMarketValue = 1
    BEGIN
        return
    END
	 
	
    Insert into #tmpExposureDeposito(FundID,ExposureType,Parameter,CurrentValue,PotentialValue,MaxValue,DifferenceValue,CurrentPercentage,PotentialPercentage
    ,MaxPercentage,DifferencePercentage)
    Select E.ID FundID,'PER FUND PER BANK' ExposureType,B.BankPK Parameter,sum(isnull(B.CurrBal,0)) CurrentValue,0,MaxValue,0,
 sum(isnull(B.CurrBal,0))/@TotalMarketValue * 100,0,MaxExposurePercent,0   
    from FundExposure A LEFT JOIN  
    (  
        Select Sum(Balance) CurrBal, B.BankPK,C.ID from [FundPosition] A  
        Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
        Left join Bank C on B.BankPK = C.BankPK and C.status = 2  
	    left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
        Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and D.Type = 3 and A.FundPK = @FundPK
        Group By B.BankPK,C.ID   
    )B ON A.Parameter = 0 
    Left join Fund E on A.FundPK = E.FundPK and E.status = 2   
    where A.Type = 10 and A.Status = 2 and A.Parameter = 0 and A.FundPK = @FundPK

    group By E.ID,B.BankPK,B.CurrBal,MaxValue,MaxExposurePercent

    -----ga ada posisi sebelumnya
    Insert into #tmpExposureDeposito(FundID,ExposureType,Parameter,CurrentValue,PotentialValue,MaxValue,DifferenceValue,CurrentPercentage,PotentialPercentage
    ,MaxPercentage,DifferencePercentage)
	
    select E.ID FundID,'PER FUND PER BANK' ExposureType,BankPK Parameter,0,sum(Movement) Movement,MaxValue,0,0,0,MaxExposurePercent,0 from (
			Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK,FundPK From Investment A  
			left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
			where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date
			 and C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3   and A.FundPK = @FundPK and A.MaturityDate  > @Date
			Group By B.BankPK ,FundPK 
   
			union all
   
			Select sum(Balance) * -1 MaturedBalance,B.BankPK,FundPK From [FundPosition] A  
			Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2 
			left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
			where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date and A.FundPositionPK = @EndDayTrailsFundPortfolioPK and A.FundPK = @FundPK 
			and C.type = 3
			Group By B.BankPK,FundPK  ) 
	A 
	Left join FundExposure C on A.FundPK = C.FundPK and C.status = 2 
	Left join Fund E on A.FundPK = E.FundPK and E.status = 2 
	where C.Type = 10 and C.Parameter = 0 and C.FundPK = @FundPK
	and BankPK not in (
	select isnull(Parameter,0) from #tmpExposureDeposito
	)
    group by E.ID,BankPK,MaxValue,MaxExposurePercent

    insert into #tmpExposureDepositoA
    select sum(Movement) Movement,BankPK from (
    Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK From Investment A  
    left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date  
    and C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3   and A.FundPK = @FundPK and A.MaturityDate  > @Date
    Group By B.BankPK  
    union all
    Select sum(Balance) * -1 MaturedBalance,B.BankPK From [FundPosition] A  
    Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date and A.FundPositionPK = @EndDayTrailsFundPortfolioPK and A.FundPK = @FundPK and C.type = 3
    Group By B.BankPK  ) A group by BankPK



    update #tmpExposureDeposito set PotentialValue =  Movement, PotentialPercentage = Movement/@TotalMarketValue * 100 from #tmpExposureDepositoA
    where #tmpExposureDeposito.Parameter = #tmpExposureDepositoA.BankPK
    update A set Parameter = B.Name from #tmpExposureDeposito A
    left join Bank B on A.Parameter = B.BankPK and B.Status = 2

    DECLARE A CURSOR FOR 
    Select B.Name from FundExposure A 
    left join Bank B on A.Parameter  = B.BankPK and B.status  = 2
    where A.status  = 2 and Type = 10 and Parameter <> 0

    Open A
    Fetch Next From A
    Into @BankName
    While @@FETCH_STATUS = 0
    BEGIN
	    DECLARE B CURSOR FOR 
	    Select isnull(F.Name,'') Parameter
	    from FundExposure A LEFT JOIN  
	    (  
	    Select Sum(Balance) CurrBal, B.BankPK,C.ID from [FundPosition] A  
	    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
	    Left join Bank C on B.BankPK = C.BankPK and C.status = 2  
	    left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
	    Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and D.Type = 3 and A.FundPK = @fundpk
	    Group By B.BankPK,C.ID   
	    )B ON A.Parameter = B.BankPK 
	    left join -- T0 from investment  
	    (  
	    Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK From Investment A  
	    left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
	    where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date   
	    and C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3   and A.FundPK = @fundpk and A.MaturityDate  > @Date
	    Group By B.BankPK  
	    )D on A.Parameter = D.BankPK  
	    left join -- T0 Matured   
	    (  
	    Select sum(Balance) * -1 MaturedBalance,B.BankPK From [FundPosition] A  
	    Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2
		left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2  
	    where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date  and A.FundPositionPK = @EndDayTrailsFundPortfolioPK and A.FundPK = @fundpk and C.type = 3
	    Group By B.BankPK  
	    )E on A.Parameter = E.BankPK
	    left join Bank F on A.Parameter = F.BankPK and F.Status = 2
	    where A.Type = 10 and A.status  = 2 and A.Parameter <> 0

	    Open B
	    Fetch Next From B
	    Into @Parameter
	    While @@FETCH_STATUS = 0
	    BEGIN
	    IF (@BankName = @Parameter)
	    BEGIN
	    delete #tmpExposureDeposito where Parameter = @BankName
	    END
	    Fetch next From B                   
	    Into @Parameter             
	    end                  
	    Close B                  
	    Deallocate B 

    Fetch next From A                   
    Into @BankName             
    end                  
    Close A                  
    Deallocate A 

    Insert into #tmpExposureDeposito(FundID,ExposureType,Parameter,CurrentValue,PotentialValue,MaxValue,DifferenceValue,CurrentPercentage,PotentialPercentage
    ,MaxPercentage,DifferencePercentage)
    Select G.ID FundID,'PER FUND PER BANK' ExposureType,isnull(F.Name,'') Parameter,isnull(B.CurrBal,0) CurrentValue,isnull(D.Movement,0) + isnull(E.MaturedBalance,0) PotentialValue,MaxValue,  
    isnull(MaxValue - (B.CurrBal + isnull(D.Movement,0) + isnull(E.MaturedBalance,0) ),0) Difference,
    isnull(B.CurrBal,0)/@TotalMarketValue * 100,(isnull(D.Movement,0) + isnull(E.MaturedBalance,0))/@TotalMarketValue * 100,MaxExposurePercent,0   

    from FundExposure A LEFT JOIN  
    (  
    Select Sum(Balance) CurrBal, B.BankPK,C.ID from [FundPosition] A  
    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
    Left join Bank C on B.BankPK = C.BankPK and C.status = 2  
    left join InstrumentType D on B.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
    Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and D.Type = 3 and A.FundPK = @fundpk
    Group By B.BankPK,C.ID   
    )B ON A.Parameter = B.BankPK 
    left join -- T0 from investment  
    (  
    Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement,B.BankPK From Investment A  
    left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date   
    and  C.type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3   and A.FundPK = @FundPK
    Group By B.BankPK  
    )D on A.Parameter = D.BankPK  
    left join -- T0 Matured   
    (  
    Select sum(Balance) * -1 MaturedBalance,B.BankPK From [FundPosition] A  
    Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date  and A.FundPositionPK = @EndDayTrailsFundPortfolioPK and A.FundPK = @FundPK and C.type = 3
    Group By B.BankPK  
    )E on A.Parameter = E.BankPK
    left join Bank F on A.Parameter = F.BankPK and F.Status = 2  
    left join Fund G on A.FundPK = G.FundPK and G.Status = 2 
    where A.Type = 10 and A.status  = 2 and A.Parameter <> 0

	
	  Insert into #tmpExposureDeposito(FundID,ExposureType,Parameter,CurrentValue,PotentialValue,MaxValue,DifferenceValue,CurrentPercentage,PotentialPercentage
    ,MaxPercentage,DifferencePercentage)
    Select G.ID FundID,'INSTRUMENT TYPE' ExposureType,'DEPOSITO' Parameter,isnull(B.CurrBal,0) CurrentValue,isnull(D.Movement,0) + isnull(E.MaturedBalance,0) PotentialValue,MaxValue,  
    isnull(MaxValue - (B.CurrBal + isnull(D.Movement,0) + isnull(E.MaturedBalance,0) ),0) Difference,
    isnull(B.CurrBal,0)/@TotalMarketValue * 100,(isnull(D.Movement,0) + isnull(E.MaturedBalance,0))/@TotalMarketValue * 100,MaxExposurePercent,0   

    from FundExposure A LEFT JOIN  
    (  
    Select Sum(Balance) CurrBal from [FundPosition] A  
    Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    Where A.FundPositionPK = @EndDayTrailsFundPortfolioPK and C.Type = 3 and A.FundPK = @fundpk
    Group By B.InstrumentTypePK   
    )B ON A.Parameter = 5
    left join -- T0 from investment  
    (  
    Select isnull(sum(case when TrxType in(1,3) then Amount else amount * -1 end),0) Movement
	From Investment A  
    left join Instrument B on A.InstrumentPK = B.InstrumentPk and B.Status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    where ValueDate > @MaxDateEndDayFP and ValueDate <= @Date   
    and C.Type = 3 and StatusInvestment <> 3 and StatusSettlement <> 3 and StatusDealing <> 3   and A.FundPK = @FundPK and A.MaturityDate  > @Date
    )D on A.Parameter = 5
    left join -- T0 Matured   
    (  
    Select sum(Balance) * -1 MaturedBalance From [FundPosition] A  
    Left join instrument B on A.instrumentPK = B.InstrumentPK and B.status = 2  
	left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
    where A.MaturityDate >  @MaxDateEndDayFP and  A.MaturityDate <=  @Date  and A.FundPositionPK = @EndDayTrailsFundPortfolioPK and A.FundPK = @FundPK and C.type = 3
    
    )E on A.Parameter = 5
    left join Bank F on A.Parameter = F.BankPK and F.Status = 2  
    left join Fund G on A.FundPK = G.FundPK and G.Status = 2 
    where A.Type = 4 and A.status  = 2 and A.Parameter = 5


    update #tmpExposureDeposito set DifferencePercentage = MaxPercentage - (CurrentPercentage + PotentialPercentage)
    ,DifferenceValue = MaxValue - (CurrentValue + PotentialValue)
        

select @FundID FundID,A.ExposureType,A.Parameter,A.CurrentValue,A.PotentialValue,isnull(A.MaxValue,0) MaxValue, isnull(A.DifferenceValue,0) DifferenceValue,A.CurrentPercentage,A.PotentialPercentage,A.MaxPercentage,
	A.DifferencePercentage, Cast(isnull(A.DifferencePercentage * @TotalMarketValue,0) / 100 as numeric(24,4)) DifferenceAmount
	from #tmpExposureDeposito A
		                  
	where (currentValue <> 0 or PotentialValue <> 0 ) and FundID = @FundID
                                                    ";
                            cmd.Parameters.AddWithValue("@FundPK", _fundID);
                        }

                        cmd.Parameters.AddWithValue("@Date", _date);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    OMSExposureDeposito M_model = new OMSExposureDeposito();
                                    M_model.FundID = Convert.ToString(dr["FundID"]);
                                    M_model.ExposureType = Convert.ToString(dr["ExposureType"]);
                                    M_model.Parameter = Convert.ToString(dr["Parameter"]);
                                    M_model.CurrentValue = Convert.ToDecimal(dr["CurrentValue"]);
                                    M_model.PotentialValue = Convert.ToDecimal(dr["PotentialValue"]);
                                    M_model.MaxValue = Convert.ToDecimal(dr["MaxValue"]);
                                    M_model.DifferenceValue = Convert.ToDecimal(dr["DifferenceValue"]);
                                    M_model.CurrentPercentage = Convert.ToDecimal(dr["CurrentPercentage"]);
                                    M_model.PotentialPercentage = Convert.ToDecimal(dr["PotentialPercentage"]);
                                    M_model.MaxPercentage = Convert.ToDecimal(dr["MaxPercentage"]);
                                    M_model.DifferencePercentage = Convert.ToDecimal(dr["DifferencePercentage"]);
                                    M_model.DifferenceAmount = Convert.ToDecimal(dr["DifferenceAmount"]);
                                    L_model.Add(M_model);
                                }
                            } return L_model;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean Settlement_ListingRpt(string _userID, InvestmentListing _listing)
        {
            #region Listing Bond
            if (_listing.ParamInstType.Equals("2")) //Report Transaksi Obligasi Dinamis
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            //string _paramCounterpart = "";


                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "And F.ID  = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
    


                            cmd.CommandText =

                             @"Select D.BankAccountNo,MV.DescOne SettlementModeDesc,MV.DescTwo SettlementModeDescTwo,BC.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,BC.Phone1 BankCustodianPhone,C.ContactPerson,C.Fax FaxNo,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.EntryUsersID CheckedBy,IV.ApprovedUsersID ApprovedBy,IV.valueDate,I.ID InstrumentID,
                            F.ID FundID,IT.Name InstrumentType,isnull( AcqDate1,'') AcqDate1,isnull(AcqDate2,'') AcqDate2,isnull(AcqDate3,'') AcqDate3,isnull(AcqDate4,'') AcqDate4,isnull(AcqDate5,'') AcqDate5,IV.* 
                            from Investment IV 
                            left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2
                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2 
                            left join BankCustodian BC on BC.BankCustodianPK = F.BankBranchPK and BC.status = 2
                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2 
                            left join MasterValue MV on IV.SettlementMode = MV.Code and MV.ID ='SettlementMode' and MV.status = 2 
                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
                            left join FundCashRef D on IV.FundCashRefPK = D.FundCashRefPK and D.status = 2
                            Where  IV.ValueDate = @ParamListDate
                            and IV.InstrumentTypePK in (2,3)  and SettlementPK <> 0 and IV.statusSettlement = 2 " +
                             _paramFund;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            //cmd.Parameters.AddWithValue("@ValueDateTo", _FundAccountingRpt.ValueDateTo);

                            if (_listing.ParamFundID != "0")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }

                            //if (_FundAccountingRpt.CounterpartFrom != "0")
                            //{
                            //    cmd.Parameters.AddWithValue("@CounterpartFrom", _FundAccountingRpt.CounterpartFrom);
                            //}

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingBond" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SettlementListingBond");

                                        int incRowExcel = 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "Daily Transaction Form";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;

                                        incRowExcel = incRowExcel + 2;


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            rSingle.LastCouponDate = Convert.ToDateTime(dr0["LastCouponDate"]);
                                            rSingle.NextCouponDate = Convert.ToDateTime(dr0["NextCouponDate"]);
                                            rSingle.ContactPerson = Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FaxNo = Convert.ToString(dr0["FaxNo"]);
                                            rSingle.Tenor = Convert.ToInt32(dr0["Tenor"]);
                                            rSingle.SettlementModeDesc = Convert.ToString(dr0["SettlementModeDesc"]);
                                            rSingle.DoneAccruedInterest = dr0["DoneAccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAccruedInterest"]);
                                            rSingle.IncomeTaxInterestAmount = dr0["IncomeTaxInterestAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxInterestAmount"]);
                                            rSingle.IncomeTaxGainAmount = dr0["IncomeTaxGainAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxGainAmount"]);
                                            rSingle.TotalAmount = dr0["TotalAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.AcqPrice = dr0["AcqPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AcqPrice"]);

                                            rList.Add(rSingle);
                                        }

                                        var QueryByFundID =
                                                     from r in rList
                                                     group r by new { r.ValueDate, r.FundName, r.TrxTypeID, r.SettlementDate, r.InstrumentName, r.InstrumentID, r.BankAccountNo, r.Reference, r.LastCouponDate, r.MaturityDate, r.SettlementModeDesc } into rGroup
                                                     select rGroup;


                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;

                                            worksheet.Cells[incRowExcel, 10].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ": ";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.ValueDate;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Security";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.TrxTypeID;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Settle Date";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ": ";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.SettlementDate;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Reff No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Settlement Type";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ": ";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.SettlementModeDesc;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Bond Code";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentID;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Issued Date";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ": ";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.LastCouponDate;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Bond Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.InstrumentName;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ": ";
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.MaturityDate;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Buyer";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Cash Acc";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 2].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.BankAccountNo;
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 7].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Securities Acc";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ": ";
                                            worksheet.Cells[incRowExcel, 12].Value = "xxxxx";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 13].Merge = true;

                                            incRowExcel = incRowExcel + 2;


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "Date Last Coupon";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Date Next Coupon";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Face Value";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 5].Value = "Price";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":F" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Value = "%";
                                            worksheet.Cells[RowG, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 5].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Value = "Amount";
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Accrued Interest";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":I" + RowB].Merge = true;
                                            worksheet.Cells["G" + RowB + ":I" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":I" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[RowG, 7].Value = "# Days";
                                            worksheet.Cells[RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 8].Value = "%";
                                            worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "IDR";
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Capital Gain";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Tax On Capital Gain";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Style.WrapText = true;
                                            worksheet.Cells["K" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Taxable Accrued Int";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.WrapText = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Tax On Accrued Int";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 14].Style.WrapText = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = "Total Payments";
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 15].Style.WrapText = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells["A" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            //worksheet.Cells["O" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells["N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                            incRowExcel = incRowExcel + 1;

                                            int first = incRowExcel;

                                            int no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.LastCouponDate;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yyyy";

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.LastCouponDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 3].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneVolume;

                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;

                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneAmount;

                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Tenor;



                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestPercent;

                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.DoneAccruedInterest;

                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 10].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 10].Value = ((rsDetail.DonePrice - rsDetail.AcqPrice) / 100) * rsDetail.DoneVolume;

                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 12].Merge = true;
                                                worksheet.Cells[incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.IncomeTaxGainAmount;

                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 13].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.DoneAccruedInterest;

                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.IncomeTaxInterestAmount;

                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 15].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.TotalAmount;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 8;
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                //borderdata
                                                worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells["A" + RowB + ":O" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel - 1;
                                            //incRowExcel = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 13].Style.Border.Top.Style = ExcelBorderStyle.Double;

                                            //incRowExcel++;

                                            worksheet.Cells[incRowExcel, 5].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + first.ToString() + ":F" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + first.ToString() + ":H" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + first.ToString() + ":I" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 12].Merge = true;
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + first.ToString() + ":K" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + first.ToString() + ":M" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + first.ToString() + ":N" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + first.ToString() + ":O" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 15].Calculate();
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 8;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;

                                            int _RowA = incRowExcel;
                                            int _RowB = incRowExcel + 3;
                                            worksheet.Cells["A" + _RowB + ":O" + _RowB].Style.Font.Bold = true;
                                            worksheet.Cells["A" + _RowB + ":O" + _RowB].Style.Font.Size = 15;


                                            if (_listing.Signature1 != 0)
                                            {
                                                worksheet.Cells[_RowA, 3].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 3].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 3].Value = "";
                                                worksheet.Cells[_RowA, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 3].Value = "";
                                                worksheet.Cells[_RowB, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }


                                            if (_listing.Signature2 != 0)
                                            {
                                                worksheet.Cells[_RowA, 6].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 6].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 6].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells[_RowA, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 6].Value = "";
                                                worksheet.Cells[_RowB, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }

                                            if (_listing.Signature3 != 0)
                                            {
                                                worksheet.Cells[_RowA, 9].Value = _host.Get_PositionSignature(_listing.Signature3);
                                                worksheet.Cells[_RowA, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 9].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                                worksheet.Cells[_RowB, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 9].Value = "";
                                                worksheet.Cells[_RowA, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 9].Value = "";
                                                worksheet.Cells[_RowB, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }

                                            if (_listing.Signature4 != 0)
                                            {
                                                worksheet.Cells[_RowA, 13].Value = _host.Get_PositionSignature(_listing.Signature4);
                                                worksheet.Cells[_RowA, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 13].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                                worksheet.Cells[_RowB, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 13].Value = "";
                                                worksheet.Cells[_RowA, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 13].Value = "";
                                                worksheet.Cells[_RowB, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }


                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Row(incRowExcel).PageBreak = true;

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 16];
                                        worksheet.Column(1).Width = 13;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 17;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 9;
                                        worksheet.Column(6).Width = 17;
                                        worksheet.Column(7).Width = 5;
                                        worksheet.Column(8).Width = 5;
                                        worksheet.Column(9).Width = 17;
                                        worksheet.Column(10).Width = 17;
                                        worksheet.Column(11).Width = 4;
                                        worksheet.Column(12).Width = 12;
                                        worksheet.Column(13).Width = 17;
                                        worksheet.Column(14).Width = 12;
                                        worksheet.Column(15).Width = 15;


                                        //worksheet.Column(14).Width = 35;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).3 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).3 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).3 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }
            }
            #endregion

            #region Listing Equity
            else if (_listing.ParamInstType.Equals("1")) //EQUITY
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            //string _paramCounterpart = "";

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            //if (_listing.param != "All")
                            //{
                            //    _paramCounterpart = "and C.ID = left(@ParamCounterpartIDFrom,charindex('-',@ParamCounterpartIDFrom) - 1)";
                            //}
                            //else
                            //{
                            //    _paramCounterpart = "";
                            //}
                            cmd.CommandText =      //Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,
                                                    @"Select C.ID CounterpartID,C.Name CounterpartName,I.Name InstrumentName,F.Name FundName,IV.valueDate,I.ID InstrumentID,I.Name InstrumentName,  
                                                    F.ID FundID,IT.Name InstrumentType,BC.ID BankCustodianID,BC.Name BankCustodianName,BC.ContactPerson ContactPerson,BC.Fax1 FaxNo,FC.BankAccountNo,FC.BankAccountName,
                                                    IV.ValueDate InstructionDate,sum(IV.DoneVolume) DoneVolume,sum(IV.DoneAmount) DoneAmount,IV.DonePrice DonePrice,IV.InterestPercent InterestPercent,
                                                    IV.ValueDate ValueDate,IV.SettlementDate SettlementDate,IV.TrxTypeID,sum(IV.TotalAmount) TotalAmount,sum(IV.CommissionAmount) CommissionAmount,sum(IV.LevyAmount) LevyAmount,
                                                    sum(IV.KPEIAmount) KPEIAmount,sum(IV.VATAmount) VATAmount,sum(IV.WHTAmount) WHTAmount,sum(IV.IncomeTaxSellAmount) IncomeTaxSellAmount
                                                    from Investment IV  
                                                    left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2                                                     
                                                    left join Fund F on IV.FundPK = F.FundPK and F.status = 2
                                                    left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2 
                                                    left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                                                    left join FundCashRef FC on IV.FundCashRefPK = FC.FundCashRefPK and FC.Status = 2 
                                                    left join BankCustodian BC on BC.BankCustodianPK = F.BankBranchPK and BC.Status = 2
                                                    Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 1 and SettlementPK <> 0 and IV.statusSettlement in (1,2) " +
                                                    _paramFund + //_paramCounterpart +
                                                    @" Group By C.ID,C.Name,I.Name,F.Name,IV.valueDate,I.ID,I.Name,  
                                                    F.ID,IT.Name,BC.ID,BC.Name,BC.ContactPerson,BC.Fax1,FC.BankAccountNo,FC.BankAccountName,
                                                    IV.ValueDate,IV.DonePrice,IV.InterestPercent,IV.SettlementDate,IV.TrxTypeID";

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            //if (_listing.ParamCounterpartIDFrom != "All")
                            //{
                            //    cmd.Parameters.AddWithValue("@ParamCounterpartIDFrom", _listing.ParamCounterpartIDFrom);
                            //}
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingEquity" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Equity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();
                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            //rSingle.Reference = Convert.ToString(dr0["Reference"]);
                                            rSingle.FundID = dr0["FundID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundID"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.CounterpartID = dr0["CounterpartID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartID"]);
                                            //rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.BankAccountName = dr0["BankAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.DoneVolume = dr0["DoneVolume"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.DonePrice = dr0["DonePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.CounterpartName = dr0["CounterpartName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CounterpartName"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.SettlementDate = Convert.ToDateTime(dr0["SettlementDate"]);
                                            //rSingle.PurchaseAmount = Convert.ToDecimal(dr0["PurchaseAmount"]);
                                            //rSingle.AccruedInterest = dr0["AccruedInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["AccruedInterest"]);
                                            //rSingle.TaxCapitalGainLoss = Convert.ToDecimal(dr0["TaxCapitalGainLoss"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);
                                            rSingle.CommissionAmount = dr0["CommissionAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.LevyAmount = dr0["LevyAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["LevyAmount"]);
                                            rSingle.KPEIAmount = dr0["KPEIAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["KPEIAmount"]);
                                            rSingle.VATAmount = dr0["VATAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["VATAmount"]);
                                            rSingle.WHTAmount = dr0["WHTAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["WHTAmount"]);
                                            rSingle.IncomeTaxSellAmount = dr0["IncomeTaxSellAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["IncomeTaxSellAmount"]);
                                            rList.Add(rSingle);

                                        }


                                        var GroupByValueDate =
                                               from r in rList
                                               orderby r.CounterpartID, r.TrxTypeID ascending
                                               group r by new { r.ValueDate, r.FundID, r.FundName, r.CounterpartID, r.CounterpartName, r.InstrumentType, r.SettlementDate, r.ContactPerson, r.FaxNo, r.BankAccountNo, r.BankAccountName, r.BankCustodianName } into rGroup
                                               select rGroup;

                                        int incRowExcel = 0;


                                        foreach (var rsHeader in GroupByValueDate)
                                        {
                                            incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "REFERENCE";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Reference;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Date ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 7].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Ins. Type";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Value = rsHeader.Key.InstrumentType;
                                            worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "To ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.BankCustodianName;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 12].Value = (rsHeader.Key.ValueDate);
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = "Cash Acc No ";
                                            //worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 13].Value = ":";
                                            //worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 14].Value = rsHeader.Key.BankAccountNo;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Attention ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            if (_host.Get_CompanyID() == "AH002")
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = "Customer Service BK";
                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.ContactPerson;
                                            }

                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Value = "Settled Date";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 11].Value = ":";
                                            worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 12].Value = (rsHeader.Key.SettlementDate);
                                            worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Fax no ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.FaxNo;
                                            worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Broker ";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.CounterpartName;
                                            worksheet.Cells["G" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 10].Value = "Settlement Date";
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = ":";
                                            //worksheet.Cells[incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                            //worksheet.Cells[incRowExcel, 12].Value = (rsHeader.Key.SettlementDate);
                                            //worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            //worksheet.Cells["L" + incRowExcel + ":N" + incRowExcel].Merge = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 6].Value = ":";
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.FundName;
                                            worksheet.Cells["G" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                            //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 5].Value = "Re ";
                                            //worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 6].Value = ":";
                                            //worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 7].Value = "SETTLEMENT INSTRUCTION";
                                            incRowExcel++;




                                            incRowExcel = incRowExcel + 1;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Counterpart";
                                            worksheet.Cells[incRowExcel, 1].Value = "B / S";
                                            worksheet.Cells[incRowExcel, 2].Value = "Instrument";
                                            worksheet.Cells[incRowExcel, 3].Value = "Instrument Name";
                                            worksheet.Cells[incRowExcel, 4].Value = "Quantity";
                                            worksheet.Cells[incRowExcel, 5].Value = "Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Total Price";
                                            worksheet.Cells[incRowExcel, 7].Value = "Comm.";
                                            worksheet.Cells[incRowExcel, 8].Value = "Levy + KPEI";
                                            worksheet.Cells[incRowExcel, 9].Value = "VAT";
                                            //if (rsHeader.Key.TrxTypeID == "BUY")
                                            //{
                                            //    worksheet.Cells[incRowExcel, 10].Value = "KPEI";
                                            //}
                                            //else
                                            //{
                                            //    worksheet.Cells[incRowExcel, 10].Value = "Income Tax";
                                            //}
                                            worksheet.Cells[incRowExcel, 11].Value = "Total Settle";


                                            worksheet.Cells[incRowExcel, 12].Value = "WHT";
                                            //if (rsHeader.Key.TrxTypeID == "BUY")
                                            //{
                                            //    worksheet.Cells[incRowExcel, 13].Value = "Total Payment";
                                            //}
                                            //else
                                            //{
                                            //    worksheet.Cells[incRowExcel, 13].Value = "Total Receive";
                                            //}


                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                            string _range = "A" + incRowExcel + ":M" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 35;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }
                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            var _buySell = "";


                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                decimal _totalSettleForBuy = 0;
                                                decimal _totalSettleForSell = 0;
                                                _totalSettleForBuy = rsDetail.DoneAmount + rsDetail.CommissionAmount + rsDetail.LevyAmount + rsDetail.VATAmount + rsDetail.KPEIAmount;
                                                _totalSettleForSell = rsDetail.DoneAmount - rsDetail.CommissionAmount - rsDetail.LevyAmount - rsDetail.VATAmount - rsDetail.KPEIAmount - rsDetail.IncomeTaxSellAmount;
                                                _range = "A" + incRowExcel + ":M" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 35;
                                                    //r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }

                                                if (_buySell != rsDetail.TrxTypeID)
                                                {
                                                    incRowExcel = incRowExcel + 1;
                                                }


                                                //area detail

                                                //worksheet.Cells[incRowExcel, 1].Value = rsDetail.CounterpartID;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "B";

                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "S";

                                                }
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Row(incRowExcel).Height = 60;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentName;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.DoneVolume;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";   //.0000
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.LevyAmount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.VATAmount;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.KPEIAmount;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.IncomeTaxSellAmount;
                                                }

                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 11].Value = _totalSettleForBuy;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                                    //worksheet.Cells[incRowExcel, 12].Value = rsDetail.TotalAmount;
                                                    worksheet.Cells[incRowExcel, 11].Value = _totalSettleForSell;
                                                }

                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.WHTAmount;
                                                if (rsDetail.TrxTypeID == "BUY")
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalAmount;
                                                    //worksheet.Cells[incRowExcel, 14].Value = (_totalSettleForBuy - rsDetail.WHTAmount);
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TotalAmount;
                                                    //worksheet.Cells[incRowExcel, 14].Value = _totalSettleForSell;
                                                }

                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;

                                                _buySell = rsDetail.TrxTypeID;
                                                //AAAAAAAAA
                                                //worksheet.Cells[incRowExcel, 3].Value = "Total " + rsHeader.Key.TrxTypeID + " (IDR) :";
                                                //worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            }
                                            //THICK BOX DETAIL
                                            _endRowDetail = incRowExcel - 1;
                                            worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["J" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _startRowDetail + ":J" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["J" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["K" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _startRowDetail + ":K" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["K" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["L" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _startRowDetail + ":L" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["L" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells["M" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["M" + _startRowDetail + ":M" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["M" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 7].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 11].Value = "Net Proceeds " + rsHeader.Key.TrxTypeID + " (IDR) :";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Calculate();
                                            incRowExcel = incRowExcel + 2;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Notes :";
                                            worksheet.Cells[incRowExcel, 2].Value = _listing.Message;
                                            worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells["B" + incRowExcel + ":N" + (incRowExcel + 2)].Merge = true;
                                            incRowExcel = incRowExcel + 4;

                                            int _RowA = incRowExcel;
                                            int _RowB = incRowExcel + 3;
                                            worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Bold = true;
                                            worksheet.Cells["A" + _RowB + ":H" + _RowB].Style.Font.Size = 15;

                                            if (_listing.Signature1 != 0)
                                            {
                                                worksheet.Cells[_RowA, 7].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 7].Value = "( " + _host.Get_SignatureName(_listing.Signature1) + " )";
                                                worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 7].Value = "";
                                                worksheet.Cells[_RowA, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 7].Value = "";
                                                worksheet.Cells[_RowB, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }


                                            if (_listing.Signature2 != 0)
                                            {
                                                worksheet.Cells[_RowA, 9].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells[_RowA, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 9].Value = "( " + _host.Get_SignatureName(_listing.Signature2) + " )";
                                                worksheet.Cells[_RowB, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 9].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells[_RowA, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 9].Value = "";
                                                worksheet.Cells[_RowB, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }

                                            if (_listing.Signature3 != 0)
                                            {
                                                worksheet.Cells[_RowA, 11].Value = _host.Get_PositionSignature(_listing.Signature3);
                                                worksheet.Cells[_RowA, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 11].Value = "( " + _host.Get_SignatureName(_listing.Signature3) + " )";
                                                worksheet.Cells[_RowB, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 11].Value = "";
                                                worksheet.Cells[_RowA, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 11].Value = "";
                                                worksheet.Cells[_RowB, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }

                                            if (_listing.Signature4 != 0)
                                            {
                                                worksheet.Cells[_RowA, 13].Value = _host.Get_PositionSignature(_listing.Signature4);
                                                worksheet.Cells[_RowA, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 13].Value = "( " + _host.Get_SignatureName(_listing.Signature4) + " )";
                                                worksheet.Cells[_RowB, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            }
                                            else
                                            {
                                                worksheet.Cells[_RowA, 13].Value = "";
                                                worksheet.Cells[_RowA, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[_RowB, 13].Value = "";
                                                worksheet.Cells[_RowB, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            }
                                            worksheet.Row(incRowExcel).PageBreak = true;





                                        }


                                        string _rangeA = "A1:N" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 35;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                        worksheet.Column(1).Width = 18;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 130;
                                        worksheet.Column(4).Width = 40;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 50;
                                        worksheet.Column(7).Width = 37;
                                        worksheet.Column(8).Width = 40;
                                        worksheet.Column(9).Width = 40;
                                        worksheet.Column(10).Width = 42;
                                        worksheet.Column(11).Width = 50;
                                        worksheet.Column(12).Width = 40;
                                        worksheet.Column(13).Width = 50;
                                        //worksheet.Column(14).Width = 35;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&45 SETTLEMENT LISTING EQUITY";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Listing Deposito
            //EMCO
            else if (_listing.ParamInstType.Equals("3")) //TIME DEPOSIT ---
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _bitIsMature = "";
                            string _paramSettlementPK = "";

                            if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (" + _listing.stringInvestmentFrom + ") ";
                            }
                            else
                            {
                                _paramSettlementPK = " And IV.SettlementPK in (0) ";
                            }

                            if (_listing.ParamFundID != "All")
                            {
                                _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
//                            cmd.CommandText = @"
//                            Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,BC.ClearingCode,
//                            BC.RTGSCode,FC.BankAccountNo,BC.Name BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,D.ContactPerson ContactBankBranch,D.Fax1 FaxBankBranch,D.Phone1 PhoneBankBranch,D.Email1 EmailBankBranch,
//                            BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1,B.Email1,M.DescOne CityDesc,D.BankAccountNo BankBranchAccountNo,D.BankAccountName BankBranchAccountName,I.Name InstrumentName,
//                            F.Name FundName,IV.valueDate,I.ID InstrumentID,F.ID FundID,IT.Name InstrumentType,DATEDIFF(dd,  IV.ValueDate,IV.MaturityDate) TenorDays,CP.ID CounterpartID,IV.InvestmentNotes,D.ID BankBranchID, *
//                            from Investment IV  
//                            left join Fund F on IV.FundPK = F.FundPK and F.status = 2 
//                            left join FundCashRef FC on FC.FundCashRefPK = IV.FundCashRefPK and FC.status = 2 
//                            left join BankCustodian BC on BC.BankCustodianPK = F.BankBranchPK and BC.status = 2 
//                            left join Counterpart CP on IV.CounterpartPK = CP.CounterpartPK and CP.status = 2 
//                            left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2 
//                            left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2
//                            left join BankBranch D on IV.BankBranchPK = D.BankBranchPK and D.status = 2
//                            left join BankBranch B on FC.BankBranchPK = B.BankBranchPK and B.status = 2
//                            left join MasterValue M on B.City = M.Code and M.ID = 'SDICity' and M.status = 2 
//                            Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and SettlementPK <> 0 and SelectedSettlement = 1
//                            and IV.statusSettlement = 2
//                            " + _paramFund + _paramCounterpart;
                            if (_listing.BitIsMature == true)
                            {
                                _bitIsMature = @"UNION ALL
                                Select B.BitSyariah,Reference, RefNo,Tenor,A.ClearingCode,
                                RTGSCode,A.BankAccountNo, BankCustodianName, BankCustodianContactPerson, BankCustodianFaxNo,C.ContactPerson ContactBankBranch,C.Fax1 FaxBankBranch,C.Phone1 PhoneBankBranch,C.Email1 EmailBankBranch,
                                BankCustodianPhone,A.ContactPerson, FaxNo,A.Phone1,Email1,D.DescOne CityDesc,C.BankAccountNo BankBranchAccountNo,C.BankAccountName BankBranchAccountName, InstrumentName,
                                FundName,valueDate, InstrumentID, FundID, InstrumentType,datediff(day,AcqDate,MaturityDate) TenorDays,CounterpartID,InvestmentNotes,C.ID BankBranchID,TrxTypeID,InstructionDate,MaturityDate,InterestPercent,Amount,DoneAmount
                                from InvestmentMature A
                                left join Bank B on A.BankCode = B.PTPCode and A.InstrumentID = B.ID and A.BankBranchName = B.Name  and B.status in (1,2)
                                left join BankBranch C on A.BankAccountNo = C.BankAccountNo and B.BankPK = C.BankPK and C.status in (1,2)
                                left join MasterValue D on C.City = D.Code and D.status = 2 and D.ID = 'SDICity'
                                where Selected = 1 ";
                            }
                            else
                            {
                                _bitIsMature = "";
                            }

                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                            )
                            and status = 2

                            Select N.BitSyariah,Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.Tenor,N.ClearingCode,
N.RTGSCode,FC.BankAccountNo,'BANK' +' '+ N.ID BankCustodianName,BC.ContactPerson BankCustodianContactPerson,BC.Fax1 BankCustodianFaxNo,D.ContactPerson ContactBankBranch,D.Fax1 FaxBankBranch,D.Phone1 PhoneBankBranch,D.Email1 EmailBankBranch,
BC.Phone1 BankCustodianPhone,B.ContactPerson,B.Fax1 FaxNo,B.Phone1,B.Email1,M.DescOne CityDesc,D.BankAccountNo BankBranchAccountNo,D.BankAccountName BankBranchAccountName,I.Name InstrumentName,
F.Name FundName,IV.valueDate,I.ID InstrumentID,F.ID FundID,IT.Name InstrumentType,DATEDIFF(dd,  IV.ValueDate,IV.MaturityDate) TenorDays,CP.ID CounterpartID,IV.InvestmentNotes,D.ID BankBranchID, IV.TrxTypeID, IV.InstructionDate,
IV.MaturityDate,I.InterestPercent,IV.Amount,IV.DoneAmount --, *
from Investment IV  
left join Fund F on IV.FundPK = F.FundPK and F.status in (1,2)
left join FundCashRef FC on FC.FundCashRefPK = IV.FundCashRefPK and FC.status in (1,2) 
left join BankBranch BC on BC.BankBranchPK = F.BankBranchPK and BC.status in (1,2) 
left join Counterpart CP on IV.CounterpartPK = CP.CounterpartPK and CP.status in (1,2) 
left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status in (1,2) 
left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)
left join BankBranch D on IV.BankBranchPK = D.BankBranchPK and D.status in (1,2)
left join BankBranch B on FC.BankBranchPK = B.BankBranchPK and B.status in (1,2)
left join MasterValue M on B.City = M.Code and M.ID = 'SDICity' and M.status in (1,2)  
left join Bank N on IV.BankPK = N.BankPK and N.status in (1,2)   
Where  IV.ValueDate = @ParamListDate and IV.InstrumentTypePK = 5 and IV.statusSettlement = 2   
                            " + _paramFund + _paramSettlementPK + _bitIsMature;

                            cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                            if (_listing.ParamFundID != "All")
                            {
                                cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                            }
                            cmd.Parameters.AddWithValue("@ParamInstType", _listing.ParamInstType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SettlementListingDeposito" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "InvestmentReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Settlement Listing Deposito");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestmentListing> rList = new List<InvestmentListing>();
                                        while (dr0.Read())
                                        {
                                            InvestmentListing rSingle = new InvestmentListing();




                                            rSingle.FundName = dr0["FundName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundName"]);
                                            rSingle.TrxTypeID = dr0["TrxTypeID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InstructionDate = Convert.ToDateTime(dr0["InstructionDate"]);
                                            rSingle.Reference = dr0["Reference"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Reference"]);
                                            rSingle.InstrumentID = dr0["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentID"]);
                                            rSingle.InstrumentName = dr0["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentName"]);
                                            rSingle.InstrumentType = dr0["InstrumentType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InstrumentType"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            rSingle.Amount = dr0["Amount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.DoneAmount = dr0["DoneAmount"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["DoneAmount"]);
                                            rSingle.InterestPercent = dr0["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.ContactPerson = dr0["ContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactPerson"]);
                                            rSingle.ContactBankBranch = dr0["ContactBankBranch"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ContactBankBranch"]);
                                            rSingle.FaxBankBranch = dr0["FaxBankBranch"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxBankBranch"]);
                                            rSingle.PhoneBankBranch = dr0["PhoneBankBranch"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneBankBranch"]);
                                            rSingle.EmailBankBranch = dr0["EmailBankBranch"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EmailBankBranch"]);
                                            rSingle.FaxNo = dr0["FaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FaxNo"]);
                                            rSingle.Phone1 = dr0["Phone1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Phone1"]);
                                            rSingle.BankCustodianName = dr0["BankCustodianName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianName"]);
                                            rSingle.BankBranchID = dr0["BankBranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchID"]);
                                            rSingle.BankCustodianContactPerson = dr0["BankCustodianContactPerson"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianContactPerson"]);
                                            rSingle.BankCustodianFaxNo = dr0["BankCustodianFaxNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianFaxNo"]);
                                            rSingle.BankCustodianPhone = dr0["BankCustodianPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankCustodianPhone"]);
                                            rSingle.BankAccountNo = dr0["BankAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNo"]);
                                            rSingle.ClearingCode = dr0["ClearingCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ClearingCode"]);
                                            rSingle.RTGSCode = dr0["RTGSCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RTGSCode"]);
                                            rSingle.TenorDays = dr0["TenorDays"].Equals(DBNull.Value) == true ? 0 : Convert.ToInt32(dr0["TenorDays"]);
                                            rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.CityDesc = dr0["CityDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CityDesc"]);
                                            rSingle.BankBranchAccountNo = dr0["BankBranchAccountNo"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchAccountNo"]);
                                            rSingle.BankBranchAccountName = dr0["BankBranchAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchAccountName"]);
                                            rSingle.Email1 = dr0["Email1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Email1"]);                          
                                            rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["ValueDate"]);
                                            rSingle.InvestmentNotes = Convert.ToString(dr0["InvestmentNotes"]);
                                            rSingle.BitSyariah = Convert.ToBoolean(dr0["BitSyariah"]);
                                            //---------------------------------------------------------------------------------------------------------//

                                           
                                            rList.Add(rSingle);

                                        }


                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.FundName, r.InstrumentID } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            incRowExcel++;
                                            int _rowHeader = incRowExcel;
                                            int _rowLine1 = 0;
                                            int _rowLine2 = 0;
                                            int _rowLineA = 0;
                                            int _rowLineB = 0;
                                            int _rowLineC = 0;
                                            int _rowLineD = 0;
                                            int _rowLineE = 0;
                                            int _rowLineF = 0;
                                            int _rowLineG = 0;
                                            int _endRowDetail = incRowExcel;

                                            //incRowExcel++;
                                            worksheet.Cells["A" + _rowHeader + ":J" + _rowHeader].Merge = true;
                                            worksheet.Cells[_rowHeader, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[_rowHeader, 1].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[_rowHeader, 1].Value = "INSTRUKSI SETTLEMENT DEPOSITO";
                                            worksheet.Cells[_rowHeader, 1].Style.Font.Bold = true;
                                            worksheet.Cells[_rowHeader, 1].Style.Font.Size = 20;



                                            incRowExcel++;

                                            //area header

                                            foreach (var rsDetail in rsHeader)
                                            {


                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                decimal _purchaseAmount = (rsDetail.Amount * rsDetail.OrderPrice);
                                                decimal _recalNetProceeds = (_purchaseAmount + rsDetail.AccruedInterest);


                                                incRowExcel++;

                                                incRowExcel = incRowExcel + 2;

                                                worksheet.Cells[incRowExcel, 1].Value = "KEPADA ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianName;
                                                worksheet.Cells[incRowExcel, 6].Value = "TANGGAL ";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = ":";
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ValueDate;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "U.P. ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ContactPerson;
                                                worksheet.Cells[incRowExcel, 6].Value = "FORM NO ";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = ":";
                                                //worksheet.Cells[incRowExcel, 8].Value = rsDetail.BankCustodianContactPerson;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax / Telp ";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankCustodianFaxNo;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.BankCustodianPhone;
                                                worksheet.Cells[incRowExcel, 6].Value = "REF NO ";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 7].Value = ":";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Reference;
                                                _rowLine1 = incRowExcel;
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 1].Value = "Dengan ini kami informasikan bahwa transaksi berikut telah efektif dengan perincian sebagai berikut : ";
                                                worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                incRowExcel = incRowExcel + 1;
                                                _rowLine2 = incRowExcel;
                                                incRowExcel = incRowExcel + 1;
                                                worksheet.Cells[incRowExcel, 1].Value = "From ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                //worksheet.Cells[incRowExcel, 5].Value = "Reference : ";
                                                //worksheet.Cells[incRowExcel, 6].Value = rsDetail.Reference;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundName;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankAccountNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Jenis Transaksi ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TrxTypeID;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Bank ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InstrumentID + " KC " + rsDetail.BankBranchID;
                                                incRowExcel++;
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nominal (IDR) ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchAccountNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nama Rekening ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.BankBranchAccountName;
                                                //worksheet.Cells[incRowExcel, 3].Value = _host.Get_CompanyName();
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Jangka Waktu ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TenorDays + " Hari";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Code RTGS ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.RTGSCode;
                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Clearing Code ";
                                                //worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 2].Value = ":";
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClearingCode;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tanggal Transaksi ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                if (rsDetail.TrxTypeID == "PLACEMENT")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.ValueDate;
                                                }
                                                else if (rsDetail.TrxTypeID == "LIQUIDATE")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.AcqDateDeposito;
                                                }

                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Tanggal Jatuh Tempo ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                string _rateName = "";
                                                if(rsDetail.BitSyariah == true)
                                                {
                                                    _rateName = "Nisbah";
                                                    worksheet.Cells[incRowExcel, 1].Value = "Tingkat Nisbah (%) ";
                                                }
                                                else
                                                {
                                                    _rateName = "Bunga";
                                                    worksheet.Cells[incRowExcel, 1].Value = "Tingkat Bunga (%) ";
                                                }
                                         
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.0";
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Sumber Dana ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = "";
                                                //worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Value = "TIME DEPOSIT";
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Pada Saat Jatuh Tempo ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = "Dicairkan Pokok + " + _rateName + ", kredit ke rekening " + rsDetail.FundName + " AC. No. " + rsDetail.BankAccountNo;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Catatan ";
                                                worksheet.Cells["C" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InvestmentNotes;
                                                //worksheet.Cells[incRowExcel, 3].Value = rsDetail.ClearingCode;
                                                incRowExcel++;

                                                _rowLineE = incRowExcel;

                                                incRowExcel = incRowExcel + 2;
           
                                                incRowExcel = incRowExcel + 4;
                                                
                                                worksheet.Cells[incRowExcel, 1].Value = "Tanda tangan yang berwenang, ";
                                               
                                                _rowLineF = incRowExcel;
                                                incRowExcel++;
                                                
                                                _rowLineG = incRowExcel;
                                                incRowExcel = incRowExcel + 3;

                                                //_rowLineI = incRowExcel;
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 3;
                                               
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                incRowExcel = incRowExcel + 3;
                                                ////worksheet.Cells[incRowExcel, 1].Value = "Eric ";
                                                //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                ////worksheet.Cells[incRowExcel, 4].Value = "Rachman ";
                                                //worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                //incRowExcel++;
                                                //worksheet.Cells[incRowExcel, 1].Value = "Manager ";
                                                //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 1].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                                //worksheet.Cells[incRowExcel, 4].Value = "Manager";
                                                //worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                //worksheet.Cells[incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 1].Value = _host.Get_SignatureName(_listing.Signature1);
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;

                                                worksheet.Cells[incRowExcel, 4].Value = _host.Get_SignatureName(_listing.Signature2);
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 7].Style.Font.Size = 25;
                                                incRowExcel++;


                                                worksheet.Cells[incRowExcel, 1].Value = _host.Get_PositionSignature(_listing.Signature1);
                                                worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Top.Style = ExcelBorderStyle.Medium;

                                                worksheet.Cells[incRowExcel, 4].Value = _host.Get_PositionSignature(_listing.Signature2);
                                                worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                               
                                                incRowExcel++;
                                                incRowExcel = incRowExcel + 3;
                                                worksheet.Cells[incRowExcel, 1].Value = "Contact person ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.ContactBankBranch;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Phone ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.PhoneBankBranch;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Fax/Email ";
                                                worksheet.Cells[incRowExcel, 2].Value = ":";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.FaxBankBranch + "/" + rsDetail.EmailBankBranch;

                                                worksheet.Row(incRowExcel).PageBreak = true;
                                                //incRowExcel++;

                                            }

                                            //worksheet.Cells["A" + _rowHeader + ":F" + _rowHeader].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowLine1 + ":J" + _rowLine1].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowLine2 + ":J" + _rowLine2].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            //BORDER 
                                            //worksheet.Cells["A" + _rowLineA + ":F" + _rowLineA].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineA + ":F" + _rowLineA].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineB + ":F" + _rowLineB].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineC + ":F" + _rowLineC].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _rowLineD + ":F" + _rowLineD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _rowLineE + ":J" + _rowLineE].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;




                                            string _rangeA = "A1:J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 20;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            }
                                        }




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 10];
                                        worksheet.Column(1).Width = 40;
                                        worksheet.Column(2).Width = 4;
                                        worksheet.Column(3).Width = 35;
                                        worksheet.Column(4).Width = 35;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 4;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 10;
                                        worksheet.Column(10).Width = 10;

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        //worksheet.PrinterSettings.TopMargin = (decimal).3 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).3 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).3 / 2.54M; // narrow border


                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&34 SETTLEMENT LISTING BOND";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        //string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_listing.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }

        }


        public Boolean GenerateRptFundClientByInvestorType(string _userID, FundClientRpt _fundClientRpt)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    if (_fundClientRpt.InvestorType == 1)
                    {
                        string _paramDateFrom = "";
                        if (_fundClientRpt.ParamDate == "1")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasInd1 <> '01/01/1900' and FC.ExpiredDateIdentitasInd1 is not null  and FC.ExpiredDateIdentitasInd1 Between '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "9")
                        {
                            _paramDateFrom = " and FC.DatePengkinianData <> '01/01/1900' and FC.DatePengkinianData is not null and FC.DatePengkinianData Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "10")
                        {
                            if (_fundClientRpt.ParamMonth != "")
                            {
                                if (_fundClientRpt.ParamMonth == "1")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 1";
                                }
                                else if (_fundClientRpt.ParamMonth == "2")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '02/01/1900' and MONTH(FC.TanggalLahir) = 2";
                                }
                                else if (_fundClientRpt.ParamMonth == "3")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 3";
                                }
                                else if (_fundClientRpt.ParamMonth == "4")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 4";
                                }
                                else if (_fundClientRpt.ParamMonth == "5")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 5";
                                }
                                else if (_fundClientRpt.ParamMonth == "6")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 6";
                                }
                                else if (_fundClientRpt.ParamMonth == "7")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 7";
                                }
                                else if (_fundClientRpt.ParamMonth == "8")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 8";
                                }
                                else if (_fundClientRpt.ParamMonth == "9")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 9";
                                }
                                else if (_fundClientRpt.ParamMonth == "10")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 10";
                                }
                                else if (_fundClientRpt.ParamMonth == "11")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 11";
                                }
                                else if (_fundClientRpt.ParamMonth == "12")
                                {
                                    _paramDateFrom = " and FC.TanggalLahir <> '01/01/1900' and MONTH(FC.TanggalLahir) = 12";
                                }

                            }
                            else if (_fundClientRpt.ParamMonth == "")
                            {
                                _paramDateFrom = @" and FC.TanggalLahir is not null and (month(FC.TanggalLahir)) between (month(@DateFrom)) and (month(@DateTo)) 
							    and (day(FC.TanggalLahir)) between (day(@DateFrom)) and (day(@DateTo))";
                            }

                        }
                        else if (_fundClientRpt.ParamDate == "11")
                        {
                            _paramDateFrom = " and FC.Agama = " + _fundClientRpt.ParamReligion;
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _cmd = @" 
                            select mv13.DescOne Religion,Case When fc.jeniskelamin = 1 then 'MALE' ELSE CASE WHEN FC.JenisKelamin = 2 THEN 'FEMALE' ELSE '' END END SEX,fcps.Unit,*
                            from FundClient fc   
                            left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2 
							left join FundClientPositionSummary fcps on fc.FundClientPK = fcps.FundClientPK 
                            where  FC.status in(1,2) and FC.InvestorType = @InvestorType " + _paramDateFrom + @" ";

                            cmd.CommandText = _cmd;
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@InvestorType", _fundClientRpt.InvestorType);
                            cmd.Parameters.AddWithValue("@DateFrom", _fundClientRpt.DateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _fundClientRpt.DateTo);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundClientByIndividual" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundClientByIndividual";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientByIndividual");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                        while (dr0.Read())
                                        {
                                            FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();
                                            rSingle.FundClientID = dr0["ID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ID"]);
                                            rSingle.InternalName = dr0["Name"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Name"]);
                                            rSingle.DOB = dr0["TanggalLahir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TanggalLahir"]);
                                            rSingle.Religion = dr0["Religion"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Religion"]);
                                            rSingle.GenderSex = dr0["SEX"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SEX"]);
                                            rSingle.Email = dr0["Email"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Email"]);
                                            rSingle.AlamatInd1 = dr0["AlamatInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AlamatInd1"]);
                                            rSingle.MobilePhone = dr0["TeleponSelular"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TeleponSelular"]);
                                            rSingle.PhoneNumber = dr0["TeleponRumah"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TeleponRumah"]);
                                            rSingle.Unit = dr0["Unit"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.RegistrationDateIdentitasInd1 = dr0["RegistrationDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd1"]);
                                            rSingle.ExpiredDateIdentitasInd1 = dr0["ExpiredDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd1"]);
                                            rSingle.ExpiredDateIdentitasInd2 = dr0["ExpiredDateIdentitasInd2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd2"]);
                                            rSingle.ExpiredDateIdentitasInd3 = dr0["ExpiredDateIdentitasInd3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd3"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByTitle =
                                            from r in rList
                                            group r by new { r.InvestorType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 3;

                                        foreach (var rsHeader in GroupByTitle)
                                        {

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "List Ulang Tahun Nasabah";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 17;
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 1].Value = _host.Get_CompanyName();
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                            incRowExcel = incRowExcel + 5;

                                            worksheet.Cells[incRowExcel, 1].Value = "ID";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = "Name";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                            if (_fundClientRpt.ParamDate == "10")
                                            {
                                                worksheet.Cells[incRowExcel, 3].Value = "Birth Date";
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "Sex";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "Phone Number";
                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "Email";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 7].Value = "Address";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 8].Value = "Unit";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (_fundClientRpt.ParamDate == "11")
                                            {
                                                worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 3].Value = "Religion";
                                                worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 4].Value = "Sex";
                                                worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 5].Value = "Mobile Phone Number";
                                                worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 6].Value = "Email";
                                                worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 7].Value = "Address";
                                                worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 8].Value = "Unit";

                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }


                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InternalName;
                                                if (_fundClientRpt.ParamDate == "11")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.Religion;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.GenderSex;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.PhoneNumber;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Email;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AlamatInd1;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Unit;

                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                }
                                                else if (_fundClientRpt.ParamDate == "10")
                                                {
                                                    worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.DOB).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.GenderSex;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.MobilePhone;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Email;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AlamatInd1;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Unit;

                                                }

                                                _endRowDetail = incRowExcel;

                                                incRowExcel++;

                                            }

                                            if (_fundClientRpt.ParamDate == "1" || _fundClientRpt.ParamDate == "2")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else if (_fundClientRpt.ParamDate == "9")
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }
                                            else
                                            {
                                                worksheet.Cells["A" + _endRowDetail + ":H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            }



                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                    else if (_fundClientRpt.InvestorType == 2)
                    {
                        string _paramDateFrom = "";
                        if (_fundClientRpt.ParamDate == "3")
                        {
                            _paramDateFrom = " and FC.ExpiredDateSKD <> '01/01/1900' and FC.ExpiredDateSKD is not null and FC.ExpiredDateSKD Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "4")
                        {
                            _paramDateFrom = " and FC.SIUPExpirationDate <> '01/01/1900' and FC.SIUPExpirationDate is not null and FC.SIUPExpirationDate Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "5")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns11 <> '01/01/1900' and FC.ExpiredDateIdentitasIns11 is not null and FC.ExpiredDateIdentitasIns11 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "6")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns12 <> '01/01/1900' and FC.ExpiredDateIdentitasIns12 is not null and FC.ExpiredDateIdentitasIns12 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "7")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns21 <> '01/01/1900' and FC.ExpiredDateIdentitasIns21 is not null and FC.ExpiredDateIdentitasIns21 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "8")
                        {
                            _paramDateFrom = " and FC.ExpiredDateIdentitasIns22 <> '01/01/1900' and FC.ExpiredDateIdentitasIns22 is not null and FC.ExpiredDateIdentitasIns22 Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        else if (_fundClientRpt.ParamDate == "9")
                        {
                            _paramDateFrom = " and FC.DatePengkinianData <> '01/01/1900' and FC.DatePengkinianData is not null and FC.DatePengkinianData Between  '" + _fundClientRpt.DateFrom + "'  " + "and '" + _fundClientRpt.DateTo + "'";
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = @"
                                select FC.ID FundClientID,mv8.DescOne InvestorType,isnull(IC.Name,'') InternalCategory,  FC.NAME InternalName,A.Name SellingAgent,FC.SID,FC.IFUACode,
                                mv33.DescOne InvestorsRiskProfile, FC.DormantDate, case when FC.BitIsAfiliated=0 then 'No' else 'Yes' end Affiliated, Z.NAME AffiliatedWith,
                                case when FC.BitIsSuspend=0 then 'No' else 'Yes' end Suspended,mv69.DescOne KYCRiskProfile,
                                FC.NPWP,FC.RegistrationNPWP,FC.CompanyMail Email,FC.TeleponBisnis PhoneNumber,FC.TeleponSelular MobilePhone,FC.Companyfax Fax,
                                mv24.DescOne Country,mv25.DescOne Nationality,fc.SACode,mv43.DescOne CountryofDomicile,mv3.DescOne CityOfEstablishment,fc.TeleponBisnis BusinessPhone, 
                                BC4.ID BankRDN,Fc.RDNAccountNo RDNAccountName, FC.RDNAccountName RDNAccountNumber,
                                BC1.ID BankName1,Fc.NamaNasabah1 BankAccountName1, FC.NomorRekening1 BankAccountNumber1, FC.BankBranchName1, Y.ID Currency1, BC1.Name BICode1,BC1.Name BIMemberCode1,
                                BC1.ID BankName2,Fc.NamaNasabah2 BankAccountName2, FC.NomorRekening2 BankAccountNumber2, FC.BankBranchName2, W.ID Currency2, BC2.Name BICode2,BC2.Name BIMemberCode2, 
                                BC1.ID BankName3,Fc.NamaNasabah3 BankAccountName3, FC.NomorRekening3 BankAccountNumber3, FC.BankBranchName3, V.ID Currency3, BC3.Name BICode3,BC3.Name BIMemberCode3,  
                                mv34.DescOne AssetOwner,mv35.DescOne StatementType,mv36.DescOne FATCAStatus,FC.TIN,mv37.DescOne TINIssuanceCountry, FC.GIIN, FC.SubstantialOwnerName,  
                                FC.SubstantialOwnerAddress, FC.SubstantialOwnerTIN,Fc.NamaPerusahaan CompanyName, FC.AlamatPerusahaan CompanyAddress, FC.KodePosIns CompanyZipCode, mv3.DescOne CompanyCity, mv17.DescOne CompanyLegalDomicile, 
                                FC.TanggalBerdiri EstablishmentDate,FC.LokasiBerdiri EstablishmentPlace, mv44.DescOne CountryofEstablishment, FC.NoSKD SKDNumber,  FC.ExpiredDateSKD,
                                FC.NomorAnggaran ArticleOfAssociation, FC.NomorSIUP SIUPNumber,FC.SIUPExpirationDate ,FC.AssetFor1Year, FC.AssetFor2Year, FC.AssetFor3Year,
                                FC.OperatingProfitFor1Year,FC.OperatingProfitFor2Year,FC.OperatingProfitFor3Year,
                                mv18.DescOne CompanyType, mv19.DescOne CompanyCharacteristic,mv20.DescOne CompanyIncomePerAnnum,  
                                mv21.DescOne CompanySourceOfFunds,mv22.DescOne CompanyInvestmentObjective,   
                                mv45.DescOne CountryofCompany, mv46.DescOne CompanyCityName, mv26.DescOne Province, 
                                FC.NamaDepanIns1 FirstNameOfficer1,FC.NamaTengahIns1 MiddleNameOfficer1,FC.NamaBelakangIns1 LastNameOfficer1,FC.Jabatan1 PositionOfficer1,FC.PhoneIns1 PhoneNumberOfficer1, FC.EmailIns1 EmailOfficer1,
                                FC.IdentitasIns11 IDType1Officer1, FC.NoIdentitasIns11 IDNumber1Officer1, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer1, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer1,
                                FC.IdentitasIns12 IDType2Officer1, FC.NoIdentitasIns12 IDNumber2Officer1, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer1, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer1,
                                FC.IdentitasIns13 IDType3Officer1, FC.NoIdentitasIns13 IDNumber3Officer1, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer1, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer1,
                                FC.IdentitasIns14 IDType4Officer1, FC.NoIdentitasIns14 IDNumber4Officer1, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer1, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer1,
                                FC.NamaDepanIns2 FirstNameOfficer2,FC.NamaTengahIns2 MiddleNameOfficer2,FC.NamaBelakangIns2 LastNameOfficer2,FC.Jabatan2 PositionOfficer2,
                                FC.IdentitasIns21 IDType1Officer2, FC.NoIdentitasIns21 IDNumber1Officer2, FC.RegistrationDateIdentitasIns21 IDRegDate1Officer2, FC.ExpiredDateIdentitasIns21 IDExpireDate1Officer2,
                                FC.IdentitasIns22 IDType2Officer2, FC.NoIdentitasIns22 IDNumber2Officer2, FC.RegistrationDateIdentitasIns22 IDRegDate2Officer2, FC.ExpiredDateIdentitasIns22 IDExpireDate2Officer2,
                                FC.IdentitasIns23 IDType3Officer2, FC.NoIdentitasIns23 IDNumber3Officer2, FC.RegistrationDateIdentitasIns23 IDRegDate3Officer2, FC.ExpiredDateIdentitasIns23 IDExpireDate3Officer2,
                                FC.IdentitasIns24 IDType4Officer2, FC.NoIdentitasIns24 IDNumber4Officer2, FC.RegistrationDateIdentitasIns24 IDRegDate4Officer2, FC.ExpiredDateIdentitasIns24 IDExpireDate4Officer2,
                                FC.NamaDepanIns3 FirstNameOfficer3,FC.NamaTengahIns3 MiddleNameOfficer3,FC.NamaBelakangIns3 LastNameOfficer3,FC.Jabatan3 PositionOfficer3,
                                FC.IdentitasIns31 IDType1Officer3, FC.NoIdentitasIns31 IDNumber1Officer3, FC.RegistrationDateIdentitasIns31 IDRegDate1Officer3, FC.ExpiredDateIdentitasIns31 IDExpireDate1Officer3,
                                FC.IdentitasIns32 IDType2Officer3, FC.NoIdentitasIns32 IDNumber2Officer3, FC.RegistrationDateIdentitasIns32 IDRegDate2Officer3, FC.ExpiredDateIdentitasIns32 IDExpireDate2Officer3,
                                FC.IdentitasIns33 IDType3Officer3, FC.NoIdentitasIns33 IDNumber3Officer3, FC.RegistrationDateIdentitasIns33 IDRegDate3Officer3, FC.ExpiredDateIdentitasIns33 IDExpireDate3Officer3,
                                FC.IdentitasIns34 IDType4Officer3, FC.NoIdentitasIns34 IDNumber4Officer3, FC.RegistrationDateIdentitasIns34 IDRegDate4Officer3, FC.ExpiredDateIdentitasIns34 IDExpireDate4Officer3,
                                FC.NamaDepanIns4 FirstNameOfficer4,FC.NamaTengahIns4 MiddleNameOfficer4,FC.NamaBelakangIns4 LastNameOfficer4,FC.Jabatan4 PositionOfficer4,
                                FC.IdentitasIns41 IDType1Officer4, FC.NoIdentitasIns41 IDNumber1Officer4, FC.RegistrationDateIdentitasIns41 IDRegDate1Officer4, FC.ExpiredDateIdentitasIns41 IDExpireDate1Officer4,
                                FC.IdentitasIns42 IDType2Officer4, FC.NoIdentitasIns42 IDNumber2Officer4, FC.RegistrationDateIdentitasIns42 IDRegDate2Officer4, FC.ExpiredDateIdentitasIns42 IDExpireDate2Officer4,
                                FC.IdentitasIns43 IDType3Officer4, FC.NoIdentitasIns43 IDNumber3Officer4, FC.RegistrationDateIdentitasIns43 IDRegDate3Officer4, FC.ExpiredDateIdentitasIns43 IDExpireDate3Officer4,
                                FC.IdentitasIns44 IDType4Officer4, FC.NoIdentitasIns44 IDNumber4Officer4, FC.RegistrationDateIdentitasIns44 IDRegDate4Officer4, FC.ExpiredDateIdentitasIns44 IDExpireDate4Officer4,
                                FC.Description, FC.EntryUsersID, FC.EntryTime, FC.UpdateUsersID, FC.UpdateTime, FC.ApprovedUsersID, FC.ApprovedTime, FC.VoidUsersID, FC.VoidTime,
                                FC.SuspendBy, FC.SuspendTime, FC.UnSuspendBy, FC.UnSuspendTime
                                from FundClient fc   
                                left join Agent A on fc.SellingAgentPK = A.AgentPK and A.status = 2  
                                left join MasterValue mv1 on fc.KodeKotaInd1 = mv1.Code and mv1.ID = 'CityRHB' and mv1.status = 2  
                                left join MasterValue mv2 on fc.KodeKotaInd2 = mv2.Code and  mv2.ID = 'CityRHB' and mv2.status = 2  
                                left join MasterValue mv3 on fc.KodeKotaIns = mv3.Code and  mv3.ID = 'CityRHB' and mv3.status = 2  
                                left join MasterValue mv4 on fc.OtherKodeKotaInd1 = mv4.Code and mv4.ID = 'CityRHB' and mv4.status = 2  
                                left join MasterValue mv5 on fc.OtherKodeKotaInd2 = mv5.Code and mv5.ID = 'CityRHB' and mv5.status = 2  
                                left join MasterValue mv6 on fc.OtherKodeKotaInd3 = mv6.Code and mv6.ID = 'CityRHB' and mv6.status = 2  
                                left join MasterValue mv7 on fc.ClientCategory = mv7.code  and  mv7.ID = 'ClientCategory' and mv7.status = 2  
                                left join MasterValue mv8 on fc.InvestorType = mv8.code and  mv8.ID = 'InvestorType' and mv8.status = 2  
                                left join MasterValue mv9 on fc.JenisKelamin = mv9.code and  mv9.ID = 'Sex' and mv9.status = 2  
                                left join MasterValue mv10 on fc.StatusPerkawinan = mv10.code and  mv10.ID = 'MaritalStatus' and mv10.status = 2  
                                left join MasterValue mv11 on fc.Pekerjaan = mv11.code and  mv11.ID = 'Occupation' and mv11.status = 2  
                                left join MasterValue mv12 on fc.Pendidikan = mv12.code and  mv12.ID = 'EducationalBackground' and mv12.status = 2  
                                left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2  
                                left join MasterValue mv14 on fc.PenghasilanInd = mv14.code and  mv14.ID = 'IncomeIND' and mv14.status = 2  
                                left join MasterValue mv15 on fc.SumberDanaInd = mv15.code and  mv15.ID = 'IncomeSourceIND' and mv15.status = 2  
                                left join MasterValue mv16 on fc.MaksudTujuanInd = mv16.code and  mv16.ID = 'InvestmentObjectivesIND' and mv16.status = 2  
                                left join MasterValue mv17 on fc.Domisili = mv17.code and  mv17.ID = 'Domicile' and mv17.status = 2  
                                left join MasterValue mv18 on fc.Tipe = mv18.code and  mv18.ID = 'CompanyType' and mv18.status = 2  
                                left join MasterValue mv19 on fc.Karakteristik = mv19.code and  mv19.ID = 'CompanyCharacteristic' and mv19.status = 2  
                                left join MasterValue mv20 on fc.PenghasilanInstitusi = mv20.code and  mv20.ID = 'IncomeINS' and mv20.status = 2  
                                left join MasterValue mv21 on fc.SumberDanaInstitusi = mv21.code and  mv21.ID = 'IncomeSourceIND' and mv21.status = 2  
                                left join MasterValue mv22 on fc.MaksudTujuanInstitusi = mv22.code and  mv22.ID = 'InvestmentObjectivesINS' and mv22.status = 2  
                                left join MasterValue mv24 on fc.Negara = mv24.code and  mv24.ID = 'SDICountry' and mv24.status = 2  
                                left join MasterValue mv25 on fc.Nationality = mv25.code and  mv25.ID = 'Nationality' and mv25.status = 2  
                                left join MasterValue mv26 on fc.Propinsi = mv26.code and  mv26.ID = 'SDIProvince' and mv26.status = 2  
                                left join MasterValue mv27 on fc.OtherPropinsiInd1 = mv27.code and  mv27.ID = 'SDIProvince' and mv27.status = 2  
                                left join MasterValue mv28 on fc.OtherPropinsiInd2 = mv28.code and  mv28.ID = 'SDIProvince' and mv28.status = 2  
                                left join MasterValue mv29 on fc.OtherPropinsiInd3 = mv29.code and  mv29.ID = 'SDIProvince' and mv29.status = 2  
                                left join MasterValue mv30 on fc.OtherNegaraInd1 = mv30.code and  mv30.ID = 'SDICountry' and mv30.status = 2  
                                left join MasterValue mv31 on fc.OtherNegaraInd2 = mv31.code and  mv31.ID = 'SDICountry' and mv31.status = 2  
                                left join MasterValue mv32 on fc.OtherNegaraInd3 = mv32.code and  mv32.ID = 'SDICountry' and mv32.status = 2  
                                left join InternalCategory IC on fc.InternalCategoryPK = IC.InternalCategoryPK and IC.status = 2  
                                left join MasterValue mv33 on fc.InvestorsRiskProfile = mv33.code and  mv33.ID = 'InvestorsRiskProfile' and mv33.status = 2  
                                left join MasterValue mv34 on fc.AssetOwner = mv34.code and  mv34.ID = 'AssetOwner' and mv34.status = 2  
                                left join MasterValue mv35 on fc.StatementType = mv35.code and  mv35.ID = 'StatementType' and mv35.status = 2  
                                left join MasterValue mv36 on fc.fatca = mv36.code and  mv36.ID = 'FATCAInsti' and mv36.status = 2  
                                left join MasterValue mv37 on fc.TINIssuanceCountry = mv37.code and  mv37.ID = 'SDICountry' and mv37.status = 2  
                                left join MasterValue mv41 on fc.CountryOfBirth = mv41.code and  mv41.ID = 'SDICountry' and mv41.status = 2  
                                left join MasterValue mv42 on fc.CountryofCorrespondence = mv42.code and  mv42.ID = 'SDICountry' and mv42.status = 2  
                                left join MasterValue mv43 on fc.Negara = mv43.code and  mv43.ID = 'SDICountry' and mv43.status = 2  
                                left join MasterValue mv44 on fc.CountryofEstablishment = mv44.code and  mv44.ID = 'SDICountry' and mv44.status = 2  
                                left join MasterValue mv45 on fc.CountryofCompany = mv45.code and  mv45.ID = 'SDICountry' and mv45.status = 2  
                                left join MasterValue mv46 on fc.CompanyCityName = mv46.Code and mv46.ID = 'CityRHB' and mv46.status = 2  
                                left join MasterValue mv47 on fc.NatureOfBusiness = mv47.Code and mv47.ID = 'HRBusiness' and mv47.status = 2  
                                left join MasterValue mv48 on fc.Politis = mv48.Code and mv48.ID = 'PoliticallyExposed' and mv48.status = 2
                                left join MasterValue mv49 on fc.IdentitasInd1 = mv49.Code and mv49.ID = 'Identity' and mv49.status = 2
                                left join MasterValue mv50 on fc.IdentitasInd2 = mv50.Code and mv50.ID = 'Identity' and mv50.status = 2
                                left join MasterValue mv51 on fc.IdentitasInd3 = mv51.Code and mv51.ID = 'Identity' and mv51.status = 2
                                left join MasterValue mv52 on fc.IdentitasIns11 = mv52.Code and mv52.ID = 'Identity' and mv52.status = 2
                                left join MasterValue mv53 on fc.IdentitasIns12 = mv53.Code and mv53.ID = 'Identity' and mv53.status = 2
                                left join MasterValue mv54 on fc.IdentitasIns13 = mv54.Code and mv54.ID = 'Identity' and mv54.status = 2
                                left join MasterValue mv55 on fc.IdentitasIns14 = mv55.Code and mv55.ID = 'Identity' and mv55.status = 2
                                left join MasterValue mv56 on fc.IdentitasIns21 = mv56.Code and mv56.ID = 'Identity' and mv56.status = 2
                                left join MasterValue mv57 on fc.IdentitasIns22 = mv57.Code and mv57.ID = 'Identity' and mv57.status = 2
                                left join MasterValue mv58 on fc.IdentitasIns23 = mv58.Code and mv58.ID = 'Identity' and mv58.status = 2
                                left join MasterValue mv59 on fc.IdentitasIns24 = mv59.Code and mv59.ID = 'Identity' and mv59.status = 2
                                left join MasterValue mv60 on fc.IdentitasIns31 = mv60.Code and mv60.ID = 'Identity' and mv60.status = 2
                                left join MasterValue mv61 on fc.IdentitasIns32 = mv61.Code and mv61.ID = 'Identity' and mv61.status = 2
                                left join MasterValue mv62 on fc.IdentitasIns33 = mv62.Code and mv62.ID = 'Identity' and mv62.status = 2
                                left join MasterValue mv63 on fc.IdentitasIns34 = mv63.Code and mv63.ID = 'Identity' and mv63.status = 2
                                left join MasterValue mv64 on fc.IdentitasIns41 = mv64.Code and mv64.ID = 'Identity' and mv64.status = 2
                                left join MasterValue mv65 on fc.IdentitasIns42 = mv65.Code and mv65.ID = 'Identity' and mv65.status = 2
                                left join MasterValue mv66 on fc.IdentitasIns43 = mv66.Code and mv66.ID = 'Identity' and mv66.status = 2
                                left join MasterValue mv67 on fc.IdentitasIns44 = mv67.Code and mv67.ID = 'Identity' and mv67.status = 2
                                left join MasterValue mv68 on fc.SpouseOccupation = mv68.code and  mv68.ID = 'Occupation' and mv68.status = 2
                                left join MasterValue mv69 on fc.KYCRiskProfile = mv69.code and  mv69.ID = 'KYCRiskProfile' and mv69.status = 2
                                left join fundclient Z on FC.AfiliatedFromPK = Z.FundclientPK and  Z.status = 2
                                left join Currency Y on FC.MataUang1 =  Y.CurrencyPK and Y.status = 2
                                left join Currency W on FC.MataUang2 =  W.CurrencyPK and W.status = 2
                                left join Currency V on FC.MataUang3 =  V.CurrencyPK and V.status = 2
                                left join Bank BC1 on fc.NamaBank1 = BC1.BankPK and BC1.status = 2   
                                left join Bank BC2 on fc.NamaBank2 = BC2.BankPK and BC2.status = 2   
                                left join Bank BC3 on fc.NamaBank3 = BC3.BankPK and BC3.status = 2   
                                left join Bank BC4 on fc.BankRDNPK = BC4.BankPK and BC4.status = 2
                            where  FC.status in (1,2) and FC.InvestorType = @InvestorType " + _paramDateFrom + @" ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@InvestorType", _fundClientRpt.InvestorType);
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundClientByInstitution" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundClientByInstitution";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientByInstitution");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                        while (dr0.Read())
                                        {
                                            FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();

                                            rSingle.FundClientID = dr0["FundClientID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientID"]);
                                            rSingle.InvestorType = dr0["InvestorType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorType"]);
                                            rSingle.InternalCategory = dr0["InternalCategory"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalCategory"]);
                                            rSingle.InternalName = dr0["InternalName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalName"]);
                                            rSingle.SellingAgent = dr0["SellingAgent"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SellingAgent"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.IFUACode = dr0["IFUACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IFUACode"]);
                                            rSingle.InvestorsRiskProfile = dr0["InvestorsRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorsRiskProfile"]);
                                            rSingle.DormantDate = dr0["DormantDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DormantDate"]);
                                            rSingle.Affiliated = dr0["Affiliated"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Affiliated"]);
                                            rSingle.AffiliatedWith = dr0["AffiliatedWith"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AffiliatedWith"]);
                                            rSingle.Suspended = dr0["Suspended"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Suspended"]);
                                            rSingle.NPWP = dr0["NPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NPWP"]);
                                            rSingle.RegistrationNPWP = dr0["RegistrationNPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationNPWP"]);
                                            rSingle.Email = dr0["Email"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Email"]);
                                            rSingle.PhoneNumber = dr0["PhoneNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumber"]);
                                            rSingle.MobilePhone = dr0["MobilePhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MobilePhone"]);
                                            rSingle.BusinessPhone = dr0["BusinessPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinessPhone"]);
                                            rSingle.Fax = dr0["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax"]);
                                            rSingle.Country = dr0["Country"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Country"]);
                                            rSingle.Nationality = dr0["Nationality"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Nationality"]);
                                            rSingle.BankRDN = dr0["BankRDN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankRDN"]);
                                            rSingle.RDNAccountName = dr0["RDNAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountName"]);
                                            rSingle.RDNAccountNumber = dr0["RDNAccountNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountNumber"]);
                                            rSingle.BankName1 = dr0["BankName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName1"]);
                                            rSingle.BankAccountName1 = dr0["BankAccountName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName1"]);
                                            rSingle.BankAccountNumber1 = dr0["BankAccountNumber1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber1"]);
                                            rSingle.BankBranchName1 = dr0["BankBranchName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName1"]);
                                            rSingle.Currency1 = dr0["Currency1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency1"]);
                                            rSingle.BankName2 = dr0["BankName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName2"]);
                                            rSingle.BankAccountName2 = dr0["BankAccountName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName2"]);
                                            rSingle.BankAccountNumber2 = dr0["BankAccountNumber2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber2"]);
                                            rSingle.BankBranchName2 = dr0["BankBranchName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName2"]);
                                            rSingle.Currency2 = dr0["Currency2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency2"]);
                                            rSingle.BankName3 = dr0["BankName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName3"]);
                                            rSingle.BankAccountName3 = dr0["BankAccountName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName3"]);
                                            rSingle.BankAccountNumber3 = dr0["BankAccountNumber3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber3"]);
                                            rSingle.BankBranchName3 = dr0["BankBranchName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName3"]);
                                            rSingle.Currency3 = dr0["Currency3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency3"]);
                                            rSingle.AssetOwner = dr0["AssetOwner"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetOwner"]);
                                            rSingle.StatementType = dr0["StatementType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["StatementType"]);
                                            rSingle.FATCAStatus = dr0["FATCAStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FATCAStatus"]);
                                            rSingle.TIN = dr0["TIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TIN"]);
                                            rSingle.TINIssuanceCountry = dr0["TINIssuanceCountry"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TINIssuanceCountry"]);
                                            rSingle.GIIN = dr0["GIIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GIIN"]);
                                            rSingle.SubstantialOwnerName = dr0["SubstantialOwnerName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerName"]);
                                            rSingle.SubstantialOwnerAddress = dr0["SubstantialOwnerAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerAddress"]);
                                            rSingle.SubstantialOwnerTIN = dr0["SubstantialOwnerTIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerTIN"]);
                                            rSingle.CompanyName = dr0["CompanyName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyName"]);
                                            rSingle.CompanyAddress = dr0["CompanyAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyAddress"]);
                                            rSingle.CompanyZipCode = dr0["CompanyZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyZipCode"]);
                                            rSingle.CompanyCity = dr0["CompanyCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCity"]);
                                            rSingle.CompanyLegalDomicile = dr0["CompanyLegalDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyLegalDomicile"]);
                                            rSingle.EstablishmentDate = dr0["EstablishmentDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentDate"]);
                                            rSingle.EstablishmentPlace = dr0["EstablishmentPlace"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentPlace"]);
                                            rSingle.CountryofEstablishment = dr0["CountryofEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofEstablishment"]);
                                            rSingle.SKDNumber = dr0["SKDNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SKDNumber"]);
                                            rSingle.ExpiredDateSKD = dr0["ExpiredDateSKD"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateSKD"]);
                                            rSingle.ArticleOfAssociation = dr0["ArticleOfAssociation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ArticleOfAssociation"]);
                                            rSingle.SIUPNumber = dr0["SIUPNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPNumber"]);
                                            rSingle.SIUPExpirationDate = dr0["SIUPExpirationDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPExpirationDate"]);
                                            rSingle.AssetFor1Year = dr0["AssetFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor1Year"]);
                                            rSingle.AssetFor2Year = dr0["AssetFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor2Year"]);
                                            rSingle.AssetFor3Year = dr0["AssetFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor3Year"]);
                                            rSingle.OperatingProfitFor1Year = dr0["OperatingProfitFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor1Year"]);
                                            rSingle.OperatingProfitFor2Year = dr0["OperatingProfitFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor2Year"]);
                                            rSingle.OperatingProfitFor3Year = dr0["OperatingProfitFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor3Year"]);
                                            rSingle.CompanyType = dr0["CompanyType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyType"]);
                                            rSingle.CompanyCharacteristic = dr0["CompanyCharacteristic"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCharacteristic"]);
                                            rSingle.CompanyIncomePerAnnum = dr0["CompanyIncomePerAnnum"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyIncomePerAnnum"]);
                                            rSingle.CompanySourceOfFunds = dr0["CompanySourceOfFunds"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanySourceOfFunds"]);
                                            rSingle.CompanyInvestmentObjective = dr0["CompanyInvestmentObjective"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyInvestmentObjective"]);
                                            rSingle.CountryofCompany = dr0["CountryofCompany"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofCompany"]);
                                            rSingle.CompanyCityName = dr0["CompanyCityName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCityName"]);
                                            rSingle.Province = dr0["Province"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Province"]);
                                            rSingle.FirstNameOfficer1 = dr0["FirstNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer1"]);
                                            rSingle.MiddleNameOfficer1 = dr0["MiddleNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer1"]);
                                            rSingle.LastNameOfficer1 = dr0["LastNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer1"]);
                                            rSingle.PositionOfficer1 = dr0["PositionOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer1"]);
                                            rSingle.PhoneNumberOfficer1 = dr0["PhoneNumberOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumberOfficer1"]);
                                            rSingle.EmailOfficer1 = dr0["EmailOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EmailOfficer1"]);
                                            rSingle.IDType1Officer1 = dr0["IDType1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer1"]);
                                            rSingle.IDNumber1Officer1 = dr0["IDNumber1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer1"]);
                                            rSingle.IDRegDate1Officer1 = dr0["IDRegDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer1"]);
                                            rSingle.IDExpireDate1Officer1 = dr0["IDExpireDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer1"]);
                                            rSingle.IDType2Officer1 = dr0["IDType2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer1"]);
                                            rSingle.IDNumber2Officer1 = dr0["IDNumber2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer1"]);
                                            rSingle.IDRegDate2Officer1 = dr0["IDRegDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer1"]);
                                            rSingle.IDExpireDate2Officer1 = dr0["IDExpireDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer1"]);
                                            rSingle.IDType3Officer1 = dr0["IDType3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer1"]);
                                            rSingle.IDNumber3Officer1 = dr0["IDNumber3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer1"]);
                                            rSingle.IDRegDate3Officer1 = dr0["IDRegDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer1"]);
                                            rSingle.IDExpireDate3Officer1 = dr0["IDExpireDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer1"]);
                                            rSingle.IDType4Officer1 = dr0["IDType4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer1"]);
                                            rSingle.IDNumber4Officer1 = dr0["IDNumber4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer1"]);
                                            rSingle.IDRegDate4Officer1 = dr0["IDRegDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer1"]);
                                            rSingle.IDExpireDate4Officer1 = dr0["IDExpireDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer1"]);
                                            rSingle.FirstNameOfficer2 = dr0["FirstNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer2"]);
                                            rSingle.MiddleNameOfficer2 = dr0["MiddleNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer2"]);
                                            rSingle.LastNameOfficer2 = dr0["LastNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer2"]);
                                            rSingle.PositionOfficer2 = dr0["PositionOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer2"]);
                                            rSingle.IDType1Officer2 = dr0["IDType1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer2"]);
                                            rSingle.IDNumber1Officer2 = dr0["IDNumber1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer2"]);
                                            rSingle.IDRegDate1Officer2 = dr0["IDRegDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer2"]);
                                            rSingle.IDExpireDate1Officer2 = dr0["IDExpireDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer2"]);
                                            rSingle.IDType2Officer2 = dr0["IDType2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer2"]);
                                            rSingle.IDNumber2Officer2 = dr0["IDNumber2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer2"]);
                                            rSingle.IDRegDate2Officer2 = dr0["IDRegDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer2"]);
                                            rSingle.IDExpireDate2Officer2 = dr0["IDExpireDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer2"]);
                                            rSingle.IDType3Officer2 = dr0["IDType3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer2"]);
                                            rSingle.IDNumber3Officer2 = dr0["IDNumber3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer2"]);
                                            rSingle.IDRegDate3Officer2 = dr0["IDRegDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer2"]);
                                            rSingle.IDExpireDate3Officer2 = dr0["IDExpireDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer2"]);
                                            rSingle.IDType4Officer2 = dr0["IDType4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer2"]);
                                            rSingle.IDNumber4Officer2 = dr0["IDNumber4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer2"]);
                                            rSingle.IDRegDate4Officer2 = dr0["IDRegDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer2"]);
                                            rSingle.IDExpireDate4Officer2 = dr0["IDExpireDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer2"]);
                                            rSingle.FirstNameOfficer3 = dr0["FirstNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer3"]);
                                            rSingle.MiddleNameOfficer3 = dr0["MiddleNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer3"]);
                                            rSingle.LastNameOfficer3 = dr0["LastNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer3"]);
                                            rSingle.PositionOfficer3 = dr0["PositionOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer3"]);
                                            rSingle.IDType1Officer3 = dr0["IDType1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer3"]);
                                            rSingle.IDNumber1Officer3 = dr0["IDNumber1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer3"]);
                                            rSingle.IDRegDate1Officer3 = dr0["IDRegDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer3"]);
                                            rSingle.IDExpireDate1Officer3 = dr0["IDExpireDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer3"]);
                                            rSingle.IDType2Officer3 = dr0["IDType2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer3"]);
                                            rSingle.IDNumber2Officer3 = dr0["IDNumber2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer3"]);
                                            rSingle.IDRegDate2Officer3 = dr0["IDRegDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer3"]);
                                            rSingle.IDExpireDate2Officer3 = dr0["IDExpireDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer3"]);
                                            rSingle.IDType3Officer3 = dr0["IDType3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer3"]);
                                            rSingle.IDNumber3Officer3 = dr0["IDNumber3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer3"]);
                                            rSingle.IDRegDate3Officer3 = dr0["IDRegDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer3"]);
                                            rSingle.IDExpireDate3Officer3 = dr0["IDExpireDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer3"]);
                                            rSingle.IDType4Officer3 = dr0["IDType4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer3"]);
                                            rSingle.IDNumber4Officer3 = dr0["IDNumber4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer3"]);
                                            rSingle.IDRegDate4Officer3 = dr0["IDRegDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer3"]);
                                            rSingle.IDExpireDate4Officer3 = dr0["IDExpireDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer3"]);
                                            rSingle.FirstNameOfficer4 = dr0["FirstNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer4"]);
                                            rSingle.MiddleNameOfficer4 = dr0["MiddleNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer4"]);
                                            rSingle.LastNameOfficer4 = dr0["LastNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer4"]);
                                            rSingle.PositionOfficer4 = dr0["PositionOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer4"]);
                                            rSingle.IDType1Officer4 = dr0["IDType1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer4"]);
                                            rSingle.IDNumber1Officer4 = dr0["IDNumber1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer4"]);
                                            rSingle.IDRegDate1Officer4 = dr0["IDRegDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer4"]);
                                            rSingle.IDExpireDate1Officer4 = dr0["IDExpireDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer4"]);
                                            rSingle.IDType2Officer4 = dr0["IDType2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer4"]);
                                            rSingle.IDNumber2Officer4 = dr0["IDNumber2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer4"]);
                                            rSingle.IDRegDate2Officer4 = dr0["IDRegDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer4"]);
                                            rSingle.IDExpireDate2Officer4 = dr0["IDExpireDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer4"]);
                                            rSingle.IDType3Officer4 = dr0["IDType3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer4"]);
                                            rSingle.IDNumber3Officer4 = dr0["IDNumber3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer4"]);
                                            rSingle.IDRegDate3Officer4 = dr0["IDRegDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer4"]);
                                            rSingle.IDExpireDate3Officer4 = dr0["IDExpireDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer4"]);
                                            rSingle.IDType4Officer4 = dr0["IDType4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer4"]);
                                            rSingle.IDNumber4Officer4 = dr0["IDNumber4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer4"]);
                                            rSingle.IDRegDate4Officer4 = dr0["IDRegDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer4"]);
                                            rSingle.IDExpireDate4Officer4 = dr0["IDExpireDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer4"]);
                                            rSingle.Description = dr0["Description"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Description"]);
                                            rSingle.CityOfEstablishment = dr0["CityOfEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CityOfEstablishment"]);
                                            rSingle.SellingAgentCode = dr0["SACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SACode"]);
                                            rSingle.CountryofDomicile = dr0["CountryofDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofDomicile"]);
                                            rSingle.KYCRiskProfile = dr0["KYCRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KYCRiskProfile"]);
                                            rSingle.BICCode1 = dr0["BICode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode1"]);
                                            rSingle.BICCode2 = dr0["BICode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode2"]);
                                            rSingle.BICCode3 = dr0["BICode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode3"]);
                                            rSingle.BIMemberCode1 = dr0["BIMemberCode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode1"]);
                                            rSingle.BIMemberCode2 = dr0["BIMemberCode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode2"]);
                                            rSingle.BIMemberCode3 = dr0["BIMemberCode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode3"]);
                                            rSingle.EntryUsersID = dr0["EntryUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryUsersID"]);
                                            rSingle.EntryTime = dr0["EntryTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryTime"]);
                                            rSingle.UpdateUsersID = dr0["UpdateUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateUsersID"]);
                                            rSingle.UpdateTime = dr0["UpdateTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateTime"]);
                                            rSingle.ApprovedUsersID = dr0["ApprovedUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedUsersID"]);
                                            rSingle.ApprovedTime = dr0["ApprovedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedTime"]);
                                            rSingle.VoidUsersID = dr0["VoidUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidUsersID"]);
                                            rSingle.VoidTime = dr0["VoidTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidTime"]);
                                            rSingle.SuspendBy = dr0["SuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendBy"]);
                                            rSingle.SuspendTime = dr0["SuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendTime"]);
                                            rSingle.UnSuspendBy = dr0["UnSuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendBy"]);
                                            rSingle.UnSuspendTime = dr0["UnSuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendTime"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByTitle =
                                            from r in rList
                                            group r by new { r.InvestorType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByTitle)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Investor Type :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InvestorType;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "FundClientID";
                                            worksheet.Cells[incRowExcel, 2].Value = "InvestorType";
                                            worksheet.Cells[incRowExcel, 3].Value = "InternalCategory";
                                            worksheet.Cells[incRowExcel, 4].Value = "InternalName";
                                            worksheet.Cells[incRowExcel, 5].Value = "SellingAgent";
                                            worksheet.Cells[incRowExcel, 6].Value = "NPWP";
                                            worksheet.Cells[incRowExcel, 7].Value = "RegistrationNPWP";
                                            worksheet.Cells[incRowExcel, 8].Value = "Email";
                                            worksheet.Cells[incRowExcel, 9].Value = "PhoneNumber";
                                            worksheet.Cells[incRowExcel, 10].Value = "MobilePhone";
                                            worksheet.Cells[incRowExcel, 11].Value = "Fax";
                                            worksheet.Cells[incRowExcel, 12].Value = "SID";
                                            worksheet.Cells[incRowExcel, 13].Value = "IFUACode";
                                            worksheet.Cells[incRowExcel, 14].Value = "InvestorsRiskProfile";
                                            worksheet.Cells[incRowExcel, 15].Value = "KYCRiskProfile";
                                            worksheet.Cells[incRowExcel, 16].Value = "AssetOwner";
                                            worksheet.Cells[incRowExcel, 17].Value = "StatementType";
                                            worksheet.Cells[incRowExcel, 18].Value = "SellingAgentCode";
                                            worksheet.Cells[incRowExcel, 19].Value = "DormantDate";
                                            worksheet.Cells[incRowExcel, 20].Value = "Description";
                                            worksheet.Cells[incRowExcel, 21].Value = "Affiliated";
                                            worksheet.Cells[incRowExcel, 22].Value = "AffiliatedWith";
                                            worksheet.Cells[incRowExcel, 23].Value = "Suspended";
                                            worksheet.Cells[incRowExcel, 24].Value = "BankName1";
                                            worksheet.Cells[incRowExcel, 25].Value = "BankAccountName1";
                                            worksheet.Cells[incRowExcel, 26].Value = "BankAccountNumber1";
                                            worksheet.Cells[incRowExcel, 27].Value = "BankBranchName1";
                                            worksheet.Cells[incRowExcel, 28].Value = "Currency1";
                                            worksheet.Cells[incRowExcel, 29].Value = "BICCode1";
                                            worksheet.Cells[incRowExcel, 30].Value = "BIMemberCode1";
                                            worksheet.Cells[incRowExcel, 31].Value = "BankName2";
                                            worksheet.Cells[incRowExcel, 32].Value = "BankAccountName2";
                                            worksheet.Cells[incRowExcel, 33].Value = "BankAccountNumber2";
                                            worksheet.Cells[incRowExcel, 34].Value = "BankBranchName2";
                                            worksheet.Cells[incRowExcel, 35].Value = "Currency2";
                                            worksheet.Cells[incRowExcel, 36].Value = "BICCode2";
                                            worksheet.Cells[incRowExcel, 37].Value = "BIMemberCode2";
                                            worksheet.Cells[incRowExcel, 38].Value = "BankName3";
                                            worksheet.Cells[incRowExcel, 39].Value = "BankAccountName3";
                                            worksheet.Cells[incRowExcel, 40].Value = "BankAccountNumber3";
                                            worksheet.Cells[incRowExcel, 41].Value = "BankBranchName3";
                                            worksheet.Cells[incRowExcel, 42].Value = "Currency3";
                                            worksheet.Cells[incRowExcel, 43].Value = "BICCode3";
                                            worksheet.Cells[incRowExcel, 44].Value = "BIMemberCode3";
                                            worksheet.Cells[incRowExcel, 45].Value = "BankRDN";
                                            worksheet.Cells[incRowExcel, 46].Value = "RDNAccountName";
                                            worksheet.Cells[incRowExcel, 47].Value = "RDNAccountNumber";
                                            worksheet.Cells[incRowExcel, 48].Value = "CompanyName";
                                            worksheet.Cells[incRowExcel, 49].Value = "CompanyAddress";
                                            worksheet.Cells[incRowExcel, 50].Value = "CompanyZipCode";
                                            worksheet.Cells[incRowExcel, 51].Value = "CompanyCity";
                                            worksheet.Cells[incRowExcel, 52].Value = "CompanyLegalDomicile";
                                            worksheet.Cells[incRowExcel, 53].Value = "CountryOfDomicile";
                                            worksheet.Cells[incRowExcel, 54].Value = "CompanyType";
                                            worksheet.Cells[incRowExcel, 55].Value = "CompanyCharacteristic";
                                            worksheet.Cells[incRowExcel, 56].Value = "CompanyIncomePerAnnum";
                                            worksheet.Cells[incRowExcel, 57].Value = "CompanySourceOfFunds";
                                            worksheet.Cells[incRowExcel, 58].Value = "CompanyInvestmentObjective";
                                            worksheet.Cells[incRowExcel, 59].Value = "SKDNumber";
                                            worksheet.Cells[incRowExcel, 60].Value = "ExpiredDateSKD";
                                            worksheet.Cells[incRowExcel, 61].Value = "ArticleOfAssociation";
                                            worksheet.Cells[incRowExcel, 62].Value = "SIUPNumber";
                                            worksheet.Cells[incRowExcel, 63].Value = "SIUPExpirationDate";
                                            worksheet.Cells[incRowExcel, 64].Value = "FirstNameOfficer1";
                                            worksheet.Cells[incRowExcel, 65].Value = "MiddleNameOfficer1";
                                            worksheet.Cells[incRowExcel, 66].Value = "LastNameOfficer1";
                                            worksheet.Cells[incRowExcel, 67].Value = "PositionOfficer1";
                                            worksheet.Cells[incRowExcel, 68].Value = "PhoneNumberOfficer1";
                                            worksheet.Cells[incRowExcel, 69].Value = "EmailOfficer1";
                                            worksheet.Cells[incRowExcel, 70].Value = "IDType1Officer1";
                                            worksheet.Cells[incRowExcel, 71].Value = "IDNumber1Officer1";
                                            worksheet.Cells[incRowExcel, 72].Value = "IDRegDate1Officer1";
                                            worksheet.Cells[incRowExcel, 73].Value = "IDExpireDate1Officer1";
                                            worksheet.Cells[incRowExcel, 74].Value = "IDType2Officer1";
                                            worksheet.Cells[incRowExcel, 75].Value = "IDNumber2Officer1";
                                            worksheet.Cells[incRowExcel, 76].Value = "IDRegDate2Officer1";
                                            worksheet.Cells[incRowExcel, 77].Value = "IDExpireDate2Officer1";
                                            worksheet.Cells[incRowExcel, 78].Value = "IDType3Officer1";
                                            worksheet.Cells[incRowExcel, 79].Value = "IDNumber3Officer1";
                                            worksheet.Cells[incRowExcel, 80].Value = "IDRegDate3Officer1";
                                            worksheet.Cells[incRowExcel, 81].Value = "IDExpireDate3Officer1";
                                            worksheet.Cells[incRowExcel, 82].Value = "IDType4Officer1";
                                            worksheet.Cells[incRowExcel, 83].Value = "IDNumber4Officer1";
                                            worksheet.Cells[incRowExcel, 84].Value = "IDRegDate4Officer1";
                                            worksheet.Cells[incRowExcel, 85].Value = "IDExpireDate4Officer1";
                                            worksheet.Cells[incRowExcel, 86].Value = "FirstNameOfficer2";
                                            worksheet.Cells[incRowExcel, 87].Value = "MiddleNameOfficer2";
                                            worksheet.Cells[incRowExcel, 88].Value = "LastNameOfficer2";
                                            worksheet.Cells[incRowExcel, 89].Value = "PositionOfficer2";
                                            worksheet.Cells[incRowExcel, 90].Value = "IDType1Officer2";
                                            worksheet.Cells[incRowExcel, 91].Value = "IDNumber1Officer2";
                                            worksheet.Cells[incRowExcel, 92].Value = "IDRegDate1Officer2";
                                            worksheet.Cells[incRowExcel, 93].Value = "IDExpireDate1Officer2";
                                            worksheet.Cells[incRowExcel, 94].Value = "IDType2Officer2";
                                            worksheet.Cells[incRowExcel, 95].Value = "IDNumber2Officer2";
                                            worksheet.Cells[incRowExcel, 96].Value = "IDRegDate2Officer2";
                                            worksheet.Cells[incRowExcel, 97].Value = "IDExpireDate2Officer2";
                                            worksheet.Cells[incRowExcel, 98].Value = "IDType3Officer2";
                                            worksheet.Cells[incRowExcel, 99].Value = "IDNumber3Officer2";
                                            worksheet.Cells[incRowExcel, 100].Value = "IDRegDate3Officer2";
                                            worksheet.Cells[incRowExcel, 101].Value = "IDExpireDate3Officer2";
                                            worksheet.Cells[incRowExcel, 102].Value = "IDType4Officer2";
                                            worksheet.Cells[incRowExcel, 103].Value = "IDNumber4Officer2";
                                            worksheet.Cells[incRowExcel, 104].Value = "IDRegDate4Officer2";
                                            worksheet.Cells[incRowExcel, 105].Value = "IDExpireDate4Officer2";
                                            worksheet.Cells[incRowExcel, 106].Value = "EstablishmentDate";
                                            worksheet.Cells[incRowExcel, 107].Value = "EstablishmentPlace";
                                            worksheet.Cells[incRowExcel, 108].Value = "CountryofEstablishment";
                                            worksheet.Cells[incRowExcel, 109].Value = "CityOfEstablishment";
                                            worksheet.Cells[incRowExcel, 110].Value = "CountryofCompany";
                                            worksheet.Cells[incRowExcel, 111].Value = "CompanyCityName";
                                            worksheet.Cells[incRowExcel, 112].Value = "CompanyAddress";
                                            worksheet.Cells[incRowExcel, 113].Value = "ZIPCode";
                                            worksheet.Cells[incRowExcel, 114].Value = "BusinessPhone";
                                            worksheet.Cells[incRowExcel, 115].Value = "AssetFor1Year";
                                            worksheet.Cells[incRowExcel, 116].Value = "AssetFor2Year";
                                            worksheet.Cells[incRowExcel, 117].Value = "AssetFor3Year";
                                            worksheet.Cells[incRowExcel, 118].Value = "OperatingProfitFor1Year";
                                            worksheet.Cells[incRowExcel, 119].Value = "OperatingProfitFor2Year";
                                            worksheet.Cells[incRowExcel, 120].Value = "OperatingProfitFor3Year";
                                            worksheet.Cells[incRowExcel, 121].Value = "FirstNameOfficer3";
                                            worksheet.Cells[incRowExcel, 122].Value = "MiddleNameOfficer3";
                                            worksheet.Cells[incRowExcel, 123].Value = "LastNameOfficer3";
                                            worksheet.Cells[incRowExcel, 124].Value = "PositionOfficer3";
                                            worksheet.Cells[incRowExcel, 125].Value = "IDType1Officer3";
                                            worksheet.Cells[incRowExcel, 126].Value = "IDNumber1Officer3";
                                            worksheet.Cells[incRowExcel, 127].Value = "IDRegDate1Officer3";
                                            worksheet.Cells[incRowExcel, 128].Value = "IDExpireDate1Officer3";
                                            worksheet.Cells[incRowExcel, 129].Value = "IDType2Officer3";
                                            worksheet.Cells[incRowExcel, 130].Value = "IDNumber2Officer3";
                                            worksheet.Cells[incRowExcel, 131].Value = "IDRegDate2Officer3";
                                            worksheet.Cells[incRowExcel, 132].Value = "IDExpireDate2Officer3";
                                            worksheet.Cells[incRowExcel, 133].Value = "IDType3Officer3";
                                            worksheet.Cells[incRowExcel, 134].Value = "IDNumber3Officer3";
                                            worksheet.Cells[incRowExcel, 135].Value = "IDRegDate3Officer3";
                                            worksheet.Cells[incRowExcel, 136].Value = "IDExpireDate3Officer3";
                                            worksheet.Cells[incRowExcel, 137].Value = "IDType4Officer3";
                                            worksheet.Cells[incRowExcel, 138].Value = "IDNumber4Officer3";
                                            worksheet.Cells[incRowExcel, 139].Value = "IDRegDate4Officer3";
                                            worksheet.Cells[incRowExcel, 140].Value = "IDExpireDate4Officer3";
                                            worksheet.Cells[incRowExcel, 141].Value = "FirstNameOfficer4";
                                            worksheet.Cells[incRowExcel, 142].Value = "MiddleNameOfficer4";
                                            worksheet.Cells[incRowExcel, 143].Value = "LastNameOfficer4";
                                            worksheet.Cells[incRowExcel, 144].Value = "PositionOfficer4";
                                            worksheet.Cells[incRowExcel, 145].Value = "IDType1Officer4";
                                            worksheet.Cells[incRowExcel, 146].Value = "IDNumber1Officer4";
                                            worksheet.Cells[incRowExcel, 147].Value = "IDRegDate1Officer4";
                                            worksheet.Cells[incRowExcel, 148].Value = "IDExpireDate1Officer4";
                                            worksheet.Cells[incRowExcel, 149].Value = "IDType2Officer4";
                                            worksheet.Cells[incRowExcel, 150].Value = "IDNumber2Officer4";
                                            worksheet.Cells[incRowExcel, 151].Value = "IDRegDate2Officer4";
                                            worksheet.Cells[incRowExcel, 152].Value = "IDExpireDate2Officer4";
                                            worksheet.Cells[incRowExcel, 153].Value = "IDType3Officer4";
                                            worksheet.Cells[incRowExcel, 154].Value = "IDNumber3Officer4";
                                            worksheet.Cells[incRowExcel, 155].Value = "IDRegDate3Officer4";
                                            worksheet.Cells[incRowExcel, 156].Value = "IDExpireDate3Officer4";
                                            worksheet.Cells[incRowExcel, 157].Value = "IDType4Officer4";
                                            worksheet.Cells[incRowExcel, 158].Value = "IDNumber4Officer4";
                                            worksheet.Cells[incRowExcel, 159].Value = "IDRegDate4Officer4";
                                            worksheet.Cells[incRowExcel, 160].Value = "IDExpireDate4Officer4";
                                            worksheet.Cells[incRowExcel, 161].Value = "FATCAStatus";
                                            worksheet.Cells[incRowExcel, 162].Value = "TIN";
                                            worksheet.Cells[incRowExcel, 163].Value = "TINIssuanceCountry";
                                            worksheet.Cells[incRowExcel, 164].Value = "GIIN";
                                            worksheet.Cells[incRowExcel, 165].Value = "SubstantialOwnerName";
                                            worksheet.Cells[incRowExcel, 166].Value = "SubstantialOwnerAddress";
                                            worksheet.Cells[incRowExcel, 167].Value = "SubstantialOwnerTIN";
                                            worksheet.Cells[incRowExcel, 168].Value = "EntryUsersID";
                                            worksheet.Cells[incRowExcel, 169].Value = "EntryTime";
                                            worksheet.Cells[incRowExcel, 170].Value = "UpdateUsersID";
                                            worksheet.Cells[incRowExcel, 171].Value = "UpdateTime";
                                            worksheet.Cells[incRowExcel, 172].Value = "ApprovedUsersID";
                                            worksheet.Cells[incRowExcel, 173].Value = "ApprovedTime";
                                            worksheet.Cells[incRowExcel, 174].Value = "VoidUsersID";
                                            worksheet.Cells[incRowExcel, 175].Value = "VoidTime";
                                            worksheet.Cells[incRowExcel, 176].Value = "SuspendBy";
                                            worksheet.Cells[incRowExcel, 177].Value = "SuspendTime";
                                            worksheet.Cells[incRowExcel, 178].Value = "UnSuspendBy";
                                            worksheet.Cells[incRowExcel, 179].Value = "UnSuspendTime";
                                            string _range = "A" + incRowExcel + ":FW" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            }
                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InvestorType;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.InternalCategory;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InternalName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SellingAgent;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NPWP;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.RegistrationNPWP;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Email;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PhoneNumber;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.MobilePhone;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Fax;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.IFUACode;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.InvestorsRiskProfile;
                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.KYCRiskProfile;
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.AssetOwner;
                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.StatementType;
                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.SellingAgentCode;
                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.DormantDate;
                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.Description;
                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.Affiliated;
                                                worksheet.Cells[incRowExcel, 22].Value = rsDetail.AffiliatedWith;
                                                worksheet.Cells[incRowExcel, 23].Value = rsDetail.Suspended;
                                                worksheet.Cells[incRowExcel, 24].Value = rsDetail.BankName1;
                                                worksheet.Cells[incRowExcel, 25].Value = rsDetail.BankAccountName1;
                                                worksheet.Cells[incRowExcel, 26].Value = rsDetail.BankAccountNumber1;
                                                worksheet.Cells[incRowExcel, 27].Value = rsDetail.BankBranchName1;
                                                worksheet.Cells[incRowExcel, 28].Value = rsDetail.Currency1;
                                                worksheet.Cells[incRowExcel, 29].Value = rsDetail.BICCode1;
                                                worksheet.Cells[incRowExcel, 30].Value = rsDetail.BIMemberCode1;
                                                worksheet.Cells[incRowExcel, 31].Value = rsDetail.BankName2;
                                                worksheet.Cells[incRowExcel, 32].Value = rsDetail.BankAccountName2;
                                                worksheet.Cells[incRowExcel, 33].Value = rsDetail.BankAccountNumber2;
                                                worksheet.Cells[incRowExcel, 34].Value = rsDetail.BankBranchName2;
                                                worksheet.Cells[incRowExcel, 35].Value = rsDetail.Currency2;
                                                worksheet.Cells[incRowExcel, 36].Value = rsDetail.BICCode2;
                                                worksheet.Cells[incRowExcel, 37].Value = rsDetail.BIMemberCode2;
                                                worksheet.Cells[incRowExcel, 38].Value = rsDetail.BankName3;
                                                worksheet.Cells[incRowExcel, 39].Value = rsDetail.BankAccountName3;
                                                worksheet.Cells[incRowExcel, 40].Value = rsDetail.BankAccountNumber3;
                                                worksheet.Cells[incRowExcel, 41].Value = rsDetail.BankBranchName3;
                                                worksheet.Cells[incRowExcel, 42].Value = rsDetail.Currency3;
                                                worksheet.Cells[incRowExcel, 43].Value = rsDetail.BICCode3;
                                                worksheet.Cells[incRowExcel, 44].Value = rsDetail.BIMemberCode3;
                                                worksheet.Cells[incRowExcel, 45].Value = rsDetail.BankRDN;
                                                worksheet.Cells[incRowExcel, 46].Value = rsDetail.RDNAccountName;
                                                worksheet.Cells[incRowExcel, 47].Value = rsDetail.RDNAccountNumber;
                                                worksheet.Cells[incRowExcel, 48].Value = rsDetail.CompanyName;
                                                worksheet.Cells[incRowExcel, 49].Value = rsDetail.CompanyAddress;
                                                worksheet.Cells[incRowExcel, 50].Value = rsDetail.CompanyZipCode;
                                                worksheet.Cells[incRowExcel, 51].Value = rsDetail.CompanyCity;
                                                worksheet.Cells[incRowExcel, 52].Value = rsDetail.CompanyLegalDomicile;
                                                worksheet.Cells[incRowExcel, 53].Value = rsDetail.CountryofDomicile;
                                                worksheet.Cells[incRowExcel, 54].Value = rsDetail.CompanyType;
                                                worksheet.Cells[incRowExcel, 55].Value = rsDetail.CompanyCharacteristic;
                                                worksheet.Cells[incRowExcel, 56].Value = rsDetail.CompanyIncomePerAnnum;
                                                worksheet.Cells[incRowExcel, 57].Value = rsDetail.CompanySourceOfFunds;
                                                worksheet.Cells[incRowExcel, 58].Value = rsDetail.CompanyInvestmentObjective;
                                                worksheet.Cells[incRowExcel, 59].Value = rsDetail.SKDNumber;
                                                worksheet.Cells[incRowExcel, 60].Value = Convert.ToDateTime(rsDetail.ExpiredDateSKD).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 61].Value = rsDetail.ArticleOfAssociation;
                                                worksheet.Cells[incRowExcel, 62].Value = rsDetail.SIUPNumber;
                                                worksheet.Cells[incRowExcel, 63].Value = Convert.ToDateTime(rsDetail.SIUPExpirationDate).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 64].Value = rsDetail.FirstNameOfficer1;
                                                worksheet.Cells[incRowExcel, 65].Value = rsDetail.MiddleNameOfficer1;
                                                worksheet.Cells[incRowExcel, 66].Value = rsDetail.LastNameOfficer1;
                                                worksheet.Cells[incRowExcel, 67].Value = rsDetail.PositionOfficer1;
                                                worksheet.Cells[incRowExcel, 68].Value = rsDetail.PhoneNumberOfficer1;
                                                worksheet.Cells[incRowExcel, 69].Value = rsDetail.EmailOfficer1;
                                                worksheet.Cells[incRowExcel, 70].Value = rsDetail.IDType1Officer1;
                                                worksheet.Cells[incRowExcel, 71].Value = rsDetail.IDNumber1Officer1;
                                                worksheet.Cells[incRowExcel, 72].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 73].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 74].Value = rsDetail.IDType2Officer1;
                                                worksheet.Cells[incRowExcel, 75].Value = rsDetail.IDNumber2Officer1;
                                                worksheet.Cells[incRowExcel, 76].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 77].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 78].Value = rsDetail.IDType3Officer1;
                                                worksheet.Cells[incRowExcel, 79].Value = rsDetail.IDNumber3Officer1;
                                                worksheet.Cells[incRowExcel, 80].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 81].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 82].Value = rsDetail.IDType4Officer1;
                                                worksheet.Cells[incRowExcel, 83].Value = rsDetail.IDNumber4Officer1;
                                                worksheet.Cells[incRowExcel, 84].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 85].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer1).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 86].Value = rsDetail.FirstNameOfficer2;
                                                worksheet.Cells[incRowExcel, 87].Value = rsDetail.MiddleNameOfficer2;
                                                worksheet.Cells[incRowExcel, 88].Value = rsDetail.LastNameOfficer2;
                                                worksheet.Cells[incRowExcel, 89].Value = rsDetail.PositionOfficer2;
                                                worksheet.Cells[incRowExcel, 90].Value = rsDetail.IDType1Officer2;
                                                worksheet.Cells[incRowExcel, 91].Value = rsDetail.IDNumber1Officer2;
                                                worksheet.Cells[incRowExcel, 92].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 93].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 94].Value = rsDetail.IDType2Officer2;
                                                worksheet.Cells[incRowExcel, 95].Value = rsDetail.IDNumber2Officer2;
                                                worksheet.Cells[incRowExcel, 96].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 97].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 98].Value = rsDetail.IDType3Officer2;
                                                worksheet.Cells[incRowExcel, 99].Value = rsDetail.IDNumber3Officer2;
                                                worksheet.Cells[incRowExcel, 100].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 101].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 102].Value = rsDetail.IDType4Officer2;
                                                worksheet.Cells[incRowExcel, 103].Value = rsDetail.IDNumber4Officer2;
                                                worksheet.Cells[incRowExcel, 104].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 105].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer2).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 106].Value = Convert.ToDateTime(rsDetail.EstablishmentDate).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 107].Value = rsDetail.EstablishmentPlace;
                                                worksheet.Cells[incRowExcel, 108].Value = rsDetail.CountryofEstablishment;
                                                worksheet.Cells[incRowExcel, 109].Value = rsDetail.CityOfEstablishment;
                                                worksheet.Cells[incRowExcel, 110].Value = rsDetail.CountryofCompany;
                                                worksheet.Cells[incRowExcel, 111].Value = rsDetail.CompanyCityName;
                                                worksheet.Cells[incRowExcel, 112].Value = rsDetail.CompanyAddress;
                                                worksheet.Cells[incRowExcel, 113].Value = rsDetail.CompanyZipCode;
                                                worksheet.Cells[incRowExcel, 114].Value = rsDetail.BusinessPhone;
                                                worksheet.Cells[incRowExcel, 115].Value = rsDetail.AssetFor1Year;
                                                worksheet.Cells[incRowExcel, 116].Value = rsDetail.AssetFor2Year;
                                                worksheet.Cells[incRowExcel, 117].Value = rsDetail.AssetFor3Year;
                                                worksheet.Cells[incRowExcel, 118].Value = rsDetail.OperatingProfitFor1Year;
                                                worksheet.Cells[incRowExcel, 119].Value = rsDetail.OperatingProfitFor2Year;
                                                worksheet.Cells[incRowExcel, 120].Value = rsDetail.OperatingProfitFor3Year;
                                                worksheet.Cells[incRowExcel, 121].Value = rsDetail.FirstNameOfficer3;
                                                worksheet.Cells[incRowExcel, 122].Value = rsDetail.MiddleNameOfficer3;
                                                worksheet.Cells[incRowExcel, 123].Value = rsDetail.LastNameOfficer3;
                                                worksheet.Cells[incRowExcel, 124].Value = rsDetail.PositionOfficer3;
                                                worksheet.Cells[incRowExcel, 125].Value = rsDetail.IDType1Officer3;
                                                worksheet.Cells[incRowExcel, 126].Value = rsDetail.IDNumber1Officer3;
                                                worksheet.Cells[incRowExcel, 127].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 128].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 129].Value = rsDetail.IDType2Officer3;
                                                worksheet.Cells[incRowExcel, 130].Value = rsDetail.IDNumber2Officer3;
                                                worksheet.Cells[incRowExcel, 131].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 132].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 133].Value = rsDetail.IDType3Officer3;
                                                worksheet.Cells[incRowExcel, 134].Value = rsDetail.IDNumber3Officer3;
                                                worksheet.Cells[incRowExcel, 135].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 136].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 137].Value = rsDetail.IDType4Officer3;
                                                worksheet.Cells[incRowExcel, 138].Value = rsDetail.IDNumber4Officer3;
                                                worksheet.Cells[incRowExcel, 139].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 140].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer3).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 141].Value = rsDetail.FirstNameOfficer4;
                                                worksheet.Cells[incRowExcel, 142].Value = rsDetail.MiddleNameOfficer4;
                                                worksheet.Cells[incRowExcel, 143].Value = rsDetail.LastNameOfficer4;
                                                worksheet.Cells[incRowExcel, 144].Value = rsDetail.PositionOfficer4;
                                                worksheet.Cells[incRowExcel, 145].Value = rsDetail.IDType1Officer4;
                                                worksheet.Cells[incRowExcel, 146].Value = rsDetail.IDNumber1Officer4;
                                                worksheet.Cells[incRowExcel, 147].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 148].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 149].Value = rsDetail.IDType2Officer4;
                                                worksheet.Cells[incRowExcel, 150].Value = rsDetail.IDNumber2Officer4;
                                                worksheet.Cells[incRowExcel, 151].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 152].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 153].Value = rsDetail.IDType3Officer4;
                                                worksheet.Cells[incRowExcel, 154].Value = rsDetail.IDNumber3Officer4;
                                                worksheet.Cells[incRowExcel, 155].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 156].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 157].Value = rsDetail.IDType4Officer4;
                                                worksheet.Cells[incRowExcel, 158].Value = rsDetail.IDNumber4Officer4;
                                                worksheet.Cells[incRowExcel, 159].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 160].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer4).ToString("dd/MM/yyyy");
                                                worksheet.Cells[incRowExcel, 161].Value = rsDetail.FATCAStatus;
                                                worksheet.Cells[incRowExcel, 162].Value = rsDetail.TIN;
                                                worksheet.Cells[incRowExcel, 163].Value = rsDetail.TINIssuanceCountry;
                                                worksheet.Cells[incRowExcel, 164].Value = rsDetail.GIIN;
                                                worksheet.Cells[incRowExcel, 165].Value = rsDetail.SubstantialOwnerName;
                                                worksheet.Cells[incRowExcel, 166].Value = rsDetail.SubstantialOwnerAddress;
                                                worksheet.Cells[incRowExcel, 167].Value = rsDetail.SubstantialOwnerTIN;
                                                worksheet.Cells[incRowExcel, 168].Value = rsDetail.EntryUsersID;
                                                worksheet.Cells[incRowExcel, 169].Value = rsDetail.EntryTime;
                                                worksheet.Cells[incRowExcel, 170].Value = rsDetail.UpdateUsersID;
                                                worksheet.Cells[incRowExcel, 171].Value = rsDetail.UpdateTime;
                                                worksheet.Cells[incRowExcel, 172].Value = rsDetail.ApprovedUsersID;
                                                worksheet.Cells[incRowExcel, 173].Value = rsDetail.ApprovedTime;
                                                worksheet.Cells[incRowExcel, 174].Value = rsDetail.VoidUsersID;
                                                worksheet.Cells[incRowExcel, 175].Value = rsDetail.VoidTime;
                                                worksheet.Cells[incRowExcel, 176].Value = rsDetail.SuspendBy;
                                                worksheet.Cells[incRowExcel, 177].Value = rsDetail.SuspendTime;
                                                worksheet.Cells[incRowExcel, 178].Value = rsDetail.UnSuspendBy;
                                                worksheet.Cells[incRowExcel, 179].Value = rsDetail.UnSuspendTime;

                                                _endRowDetail = incRowExcel;
                                                worksheet.Cells["A" + incRowExcel + ":FW" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":FW" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                            }

                                            //_endRowDetail = incRowExcel;
                                            //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                    else if (_fundClientRpt.InvestorType == 3)
                    {
                        string _paramDateFrom = "";
                        if (_fundClientRpt.ParamDate == "9")
                        {
                            _paramDateFrom = " and FC.DatePengkinianData <> '01/01/1900' and FC.DatePengkinianData is not null and FC.DatePengkinianData Between  '" + _fundClientRpt.DateFrom + "'  " + " and '" + _fundClientRpt.DateTo + "'";
                        }
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            cmd.CommandText = @"
                                select FC.ID FundClientID,mv7.DescOne InvestorType,isnull(IC.Name,'') InternalCategory,  FC.NAME InternalName,A.Name SellingAgent,FC.SID,FC.IFUACode,
                                mv33.DescOne InvestorsRiskProfile, FC.DormantDate, case when FC.BitIsAfiliated=0 then 'No' else 'Yes' end Affiliated, Z.NAME AffiliatedWith,
                                case when FC.BitIsSuspend=0 then 'No' else 'Yes' end Suspended,mv69.DescOne KYCRiskProfile,
                                FC.NPWP,FC.RegistrationNPWP,FC.CompanyMail Email,FC.TeleponBisnis PhoneNumber,FC.TeleponSelular MobilePhone,FC.Companyfax Fax,
                                mv24.DescOne Country,mv25.DescOne Nationality,fc.SACode,mv43.DescOne CountryofDomicile,mv3.DescOne CityOfEstablishment,fc.TeleponBisnis BusinessPhone, 
                                BC4.ID BankRDN,Fc.RDNAccountNo RDNAccountName, FC.RDNAccountName RDNAccountNumber,
                                BC1.ID BankName1,Fc.NamaNasabah1 BankAccountName1, FC.NomorRekening1 BankAccountNumber1, FC.BankBranchName1, Y.ID Currency1, BC1.Name BICode1,BC1.Name BIMemberCode1,
                                BC1.ID BankName2,Fc.NamaNasabah2 BankAccountName2, FC.NomorRekening2 BankAccountNumber2, FC.BankBranchName2, W.ID Currency2, BC2.Name BICode2,BC2.Name BIMemberCode2, 
                                BC1.ID BankName3,Fc.NamaNasabah3 BankAccountName3, FC.NomorRekening3 BankAccountNumber3, FC.BankBranchName3, V.ID Currency3, BC3.Name BICode3,BC3.Name BIMemberCode3,  
                                mv34.DescOne AssetOwner,mv35.DescOne StatementType,mv36.DescOne FATCAStatus,FC.TIN,mv37.DescOne TINIssuanceCountry, FC.GIIN, FC.SubstantialOwnerName,  
                                FC.SubstantialOwnerAddress, FC.SubstantialOwnerTIN,Fc.NamaPerusahaan CompanyName, FC.AlamatPerusahaan CompanyAddress, FC.KodePosIns CompanyZipCode, mv3.DescOne CompanyCity, mv17.DescOne CompanyLegalDomicile, 
                                FC.TanggalBerdiri EstablishmentDate,FC.LokasiBerdiri EstablishmentPlace, mv44.DescOne CountryofEstablishment, FC.NoSKD SKDNumber,  FC.ExpiredDateSKD,
                                FC.NomorAnggaran ArticleOfAssociation, FC.NomorSIUP SIUPNumber,FC.SIUPExpirationDate ,FC.AssetFor1Year, FC.AssetFor2Year, FC.AssetFor3Year,
                                FC.OperatingProfitFor1Year,FC.OperatingProfitFor2Year,FC.OperatingProfitFor3Year,
                                mv18.DescOne CompanyType, mv19.DescOne CompanyCharacteristic,mv20.DescOne CompanyIncomePerAnnum,  
                                mv21.DescOne CompanySourceOfFunds,mv22.DescOne CompanyInvestmentObjective,   
                                mv45.DescOne CountryofCompany, mv46.DescOne CompanyCityName, mv26.DescOne Province, 
                                FC.NamaDepanIns1 FirstNameOfficer1,FC.NamaTengahIns1 MiddleNameOfficer1,FC.NamaBelakangIns1 LastNameOfficer1,FC.Jabatan1 PositionOfficer1,FC.PhoneIns1 PhoneNumberOfficer1, FC.EmailIns1 EmailOfficer1,
                                FC.IdentitasIns11 IDType1Officer1, FC.NoIdentitasIns11 IDNumber1Officer1, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer1, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer1,
                                FC.IdentitasIns12 IDType2Officer1, FC.NoIdentitasIns12 IDNumber2Officer1, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer1, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer1,
                                FC.IdentitasIns13 IDType3Officer1, FC.NoIdentitasIns13 IDNumber3Officer1, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer1, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer1,
                                FC.IdentitasIns14 IDType4Officer1, FC.NoIdentitasIns14 IDNumber4Officer1, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer1, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer1,
                                FC.NamaDepanIns2 FirstNameOfficer2,FC.NamaTengahIns2 MiddleNameOfficer2,FC.NamaBelakangIns2 LastNameOfficer2,FC.Jabatan2 PositionOfficer2,
                                FC.IdentitasIns11 IDType1Officer2, FC.NoIdentitasIns11 IDNumber1Officer2, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer2, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer2,
                                FC.IdentitasIns12 IDType2Officer2, FC.NoIdentitasIns12 IDNumber2Officer2, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer2, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer2,
                                FC.IdentitasIns13 IDType3Officer2, FC.NoIdentitasIns13 IDNumber3Officer2, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer2, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer2,
                                FC.IdentitasIns14 IDType4Officer2, FC.NoIdentitasIns14 IDNumber4Officer2, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer2, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer2,
                                FC.NamaDepanIns3 FirstNameOfficer3,FC.NamaTengahIns3 MiddleNameOfficer3,FC.NamaBelakangIns3 LastNameOfficer3,FC.Jabatan3 PositionOfficer3,
                                FC.IdentitasIns11 IDType1Officer3, FC.NoIdentitasIns11 IDNumber1Officer3, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer3, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer3,
                                FC.IdentitasIns12 IDType2Officer3, FC.NoIdentitasIns12 IDNumber2Officer3, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer3, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer3,
                                FC.IdentitasIns13 IDType3Officer3, FC.NoIdentitasIns13 IDNumber3Officer3, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer3, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer3,
                                FC.IdentitasIns14 IDType4Officer3, FC.NoIdentitasIns14 IDNumber4Officer3, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer3, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer3,
                                FC.NamaDepanIns4 FirstNameOfficer4,FC.NamaTengahIns4 MiddleNameOfficer4,FC.NamaBelakangIns4 LastNameOfficer4,FC.Jabatan4 PositionOfficer4,
                                FC.IdentitasIns11 IDType1Officer4, FC.NoIdentitasIns11 IDNumber1Officer4, FC.RegistrationDateIdentitasIns11 IDRegDate1Officer4, FC.ExpiredDateIdentitasIns11 IDExpireDate1Officer4,
                                FC.IdentitasIns12 IDType2Officer4, FC.NoIdentitasIns12 IDNumber2Officer4, FC.RegistrationDateIdentitasIns12 IDRegDate2Officer4, FC.ExpiredDateIdentitasIns12 IDExpireDate2Officer4,
                                FC.IdentitasIns13 IDType3Officer4, FC.NoIdentitasIns13 IDNumber3Officer4, FC.RegistrationDateIdentitasIns13 IDRegDate3Officer4, FC.ExpiredDateIdentitasIns13 IDExpireDate3Officer4,
                                FC.IdentitasIns14 IDType4Officer4, FC.NoIdentitasIns14 IDNumber4Officer4, FC.RegistrationDateIdentitasIns14 IDRegDate4Officer4, FC.ExpiredDateIdentitasIns14 IDExpireDate4Officer4,

								--individu
								FC.NamaDepanInd FirstNameInd,FC.NamaTengahInd MiddleNameInd,FC.NamaBelakangInd LastNameInd, FC.TempatLahir BirthPlace,FC.TanggalLahir TanggalLahir,FC.AhliWaris Heir, FC.HubunganAhliWaris HeirRelation,FC.NatureOfBusinessLainnya NatureOfBusinessDesc,
								FC.PolitisLainnya PoliticallyExposedDesc,FC.OtherTeleponRumah OtherHomePhone, FC.OtherTeleponSelular OtherCellPhone, FC.OtherFax, FC.OtherEmail,FC.AlamatInd1 CorrespondenceAddress,FC.AlamatInd2 DomicileAddress,
								FC.KodePosInd2 DomicileZipCode,FC.OtherAlamatInd1 IdentityAddress1,FC.OtherKodePosInd1 IdentityZipCode1,FC.OtherAlamatInd2 IdentityAddress2,FC.OtherKodePosInd2 IdentityZipCode2,FC.OtherAlamatInd3 IdentityAddress3,
								FC.OtherKodePosInd3 IdentityZipCode3,FC.NoIdentitasInd1 IdentityNumber1, FC.RegistrationDateIdentitasInd1, FC.ExpiredDateIdentitasInd1, FC.NoIdentitasInd2 IdentityNumber2, FC.RegistrationDateIdentitasInd2, FC.ExpiredDateIdentitasInd2, 
								FC.NoIdentitasInd3 IdentityNumber3, FC.RegistrationDateIdentitasInd3, FC.ExpiredDateIdentitasInd3, fc.CorrespondenceRT, fc.CorrespondenceRW,FC.Description, Fc.AlamatKantorInd,fc.DomicileRT, fc.DomicileRW, fc.Identity1RT, fc.Identity1RW,FC.MotherMaidenName MotherMaidenName,
								FC.SpouseName , fc.KodeDomisiliPropinsi, fc.KodePosKantorInd, FC.KodePosInd1 CorrespondenceZipCode,
								mv1.DescOne CorrespondenceCity,mv4.DescOne IdentityCity1, mv9.DescOne GenderSex, mv10.DescOne MaritalStatus, mv11.DescOne Occupation, mv12.DescOne Education, mv13.DescOne Religion, mv14.DescOne IncomePerAnnum, mv15.DescOne SourceOfFunds,
								mv16.DescOne InvestmentObjectives, mv68.DescOne SpouseOccupation, mv47.DescOne NatureOfBusiness, mv48.DescOne PoliticallyExposed, mv42.DescOne CountryofCorrespondence, mv1.DescOne DomicileCity, 
								mv73.DescOne CountryofDomicile, mv26.DescOne Propinsi, mv27.DescOne IdentityProvince1, mv30.DescOne IdentityCountry1, mv2.DescOne IdentityCity2, mv28.DescOne IdentityProvince2, mv31.DescOne IdentityCountry2, mv6.DescOne IdentityCity3,
								mv29.DescOne IdentityProvince3, mv32.DescOne IdentityCountry3,mv41.DescOne CountryOfBirth, mv49.DescOne IdentityType1, mv50.DescOne IdentityType2, mv51.DescOne IdentityType3, mv72.DescOne KodeKotaKantorInd, mv74.DescOne KodePropinsiKantorInd,
								mv71.DescOne KodeCountryofKantor, mv70.DescOne KodeDomisiliPropinsi,

                                FC.Description, FC.EntryUsersID, FC.EntryTime, FC.UpdateUsersID, FC.UpdateTime, FC.ApprovedUsersID, FC.ApprovedTime, FC.VoidUsersID, FC.VoidTime,
                                FC.SuspendBy, FC.SuspendTime, FC.UnSuspendBy, FC.UnSuspendTime
                                from FundClient fc   
                                left join Agent A on fc.SellingAgentPK = A.AgentPK and A.status = 2  
                                left join MasterValue mv1 on fc.KodeKotaInd1 = mv1.Code and mv1.ID = 'CityRHB' and mv1.status = 2  
                                left join MasterValue mv2 on fc.KodeKotaInd2 = mv2.Code and  mv2.ID = 'CityRHB' and mv2.status = 2  
                                left join MasterValue mv3 on fc.KodeKotaIns = mv3.Code and  mv3.ID = 'CityRHB' and mv3.status = 2  
                                left join MasterValue mv7 on fc.ClientCategory = mv7.code  and  mv7.ID = 'ClientCategory' and mv7.status = 2  
                                left join MasterValue mv8 on fc.InvestorType = mv8.code and  mv8.ID = 'InvestorType' and mv8.status = 2  
                                left join MasterValue mv17 on fc.Domisili = mv17.code and  mv17.ID = 'Domicile' and mv17.status = 2  
                                left join MasterValue mv18 on fc.Tipe = mv18.code and  mv18.ID = 'CompanyType' and mv18.status = 2  
                                left join MasterValue mv19 on fc.Karakteristik = mv19.code and  mv19.ID = 'CompanyCharacteristic' and mv19.status = 2  
                                left join MasterValue mv20 on fc.PenghasilanInstitusi = mv20.code and  mv20.ID = 'IncomeINS' and mv20.status = 2  
                                left join MasterValue mv21 on fc.SumberDanaInstitusi = mv21.code and  mv21.ID = 'IncomeSourceIND' and mv21.status = 2  
                                left join MasterValue mv22 on fc.MaksudTujuanInstitusi = mv22.code and  mv22.ID = 'InvestmentObjectivesINS' and mv22.status = 2  
                                left join MasterValue mv24 on fc.Negara = mv24.code and  mv24.ID = 'SDICountry' and mv24.status = 2  
                                left join MasterValue mv25 on fc.Nationality = mv25.code and  mv25.ID = 'Nationality' and mv25.status = 2  
                                left join MasterValue mv26 on fc.Propinsi = mv26.code and  mv26.ID = 'SDIProvince' and mv26.status = 2  
                                left join InternalCategory IC on fc.InternalCategoryPK = IC.InternalCategoryPK and IC.status = 2  
                                left join MasterValue mv33 on fc.InvestorsRiskProfile = mv33.code and  mv33.ID = 'InvestorsRiskProfile' and mv33.status = 2  
                                left join MasterValue mv34 on fc.AssetOwner = mv34.code and  mv34.ID = 'AssetOwner' and mv34.status = 2  
                                left join MasterValue mv35 on fc.StatementType = mv35.code and  mv35.ID = 'StatementType' and mv35.status = 2  
                                left join MasterValue mv36 on fc.fatca = mv36.code and  mv36.ID = 'FATCAInsti' and mv36.status = 2  
                                left join MasterValue mv37 on fc.TINIssuanceCountry = mv37.code and  mv37.ID = 'SDICountry' and mv37.status = 2  
                                left join MasterValue mv41 on fc.CountryOfBirth = mv41.code and  mv41.ID = 'SDICountry' and mv41.status = 2  
                                left join MasterValue mv42 on fc.CountryofCorrespondence = mv42.code and  mv42.ID = 'SDICountry' and mv42.status = 2  
                                left join MasterValue mv43 on fc.Negara = mv43.code and  mv43.ID = 'SDICountry' and mv43.status = 2  
                                left join MasterValue mv44 on fc.CountryofEstablishment = mv44.code and  mv44.ID = 'SDICountry' and mv44.status = 2  
                                left join MasterValue mv45 on fc.CountryofCompany = mv45.code and  mv45.ID = 'SDICountry' and mv45.status = 2  
                                left join MasterValue mv46 on fc.CompanyCityName = mv46.Code and mv46.ID = 'CityRHB' and mv46.status = 2  
                                left join MasterValue mv52 on fc.IdentitasIns11 = mv52.Code and mv52.ID = 'Identity' and mv52.status = 2
                                left join MasterValue mv53 on fc.IdentitasIns12 = mv53.Code and mv53.ID = 'Identity' and mv53.status = 2
                                left join MasterValue mv54 on fc.IdentitasIns13 = mv54.Code and mv54.ID = 'Identity' and mv54.status = 2
                                left join MasterValue mv55 on fc.IdentitasIns14 = mv55.Code and mv55.ID = 'Identity' and mv55.status = 2
                                left join MasterValue mv56 on fc.IdentitasIns21 = mv56.Code and mv56.ID = 'Identity' and mv56.status = 2
                                left join MasterValue mv57 on fc.IdentitasIns22 = mv57.Code and mv57.ID = 'Identity' and mv57.status = 2
                                left join MasterValue mv58 on fc.IdentitasIns23 = mv58.Code and mv58.ID = 'Identity' and mv58.status = 2
                                left join MasterValue mv59 on fc.IdentitasIns24 = mv59.Code and mv59.ID = 'Identity' and mv59.status = 2
                                left join MasterValue mv60 on fc.IdentitasIns31 = mv60.Code and mv60.ID = 'Identity' and mv60.status = 2
                                left join MasterValue mv61 on fc.IdentitasIns32 = mv61.Code and mv61.ID = 'Identity' and mv61.status = 2
                                left join MasterValue mv62 on fc.IdentitasIns33 = mv62.Code and mv62.ID = 'Identity' and mv62.status = 2
                                left join MasterValue mv63 on fc.IdentitasIns34 = mv63.Code and mv63.ID = 'Identity' and mv63.status = 2
                                left join MasterValue mv64 on fc.IdentitasIns41 = mv64.Code and mv64.ID = 'Identity' and mv64.status = 2
                                left join MasterValue mv65 on fc.IdentitasIns42 = mv65.Code and mv65.ID = 'Identity' and mv65.status = 2
                                left join MasterValue mv66 on fc.IdentitasIns43 = mv66.Code and mv66.ID = 'Identity' and mv66.status = 2
                                left join MasterValue mv67 on fc.IdentitasIns44 = mv67.Code and mv67.ID = 'Identity' and mv67.status = 2
                                left join MasterValue mv69 on fc.KYCRiskProfile = mv69.code and  mv69.ID = 'KYCRiskProfile' and mv69.status = 2

								--individu 
                                left join MasterValue mv4 on fc.OtherKodeKotaInd1 = mv4.Code and mv4.ID = 'CityRHB' and mv4.status = 2  
                                left join MasterValue mv5 on fc.OtherKodeKotaInd2 = mv5.Code and mv5.ID = 'CityRHB' and mv5.status = 2  
                                left join MasterValue mv6 on fc.OtherKodeKotaInd3 = mv6.Code and mv6.ID = 'CityRHB' and mv6.status = 2 
                                left join MasterValue mv9 on fc.JenisKelamin = mv9.code and  mv9.ID = 'Sex' and mv9.status = 2  
                                left join MasterValue mv10 on fc.StatusPerkawinan = mv10.code and  mv10.ID = 'MaritalStatus' and mv10.status = 2  
                                left join MasterValue mv11 on fc.Pekerjaan = mv11.code and  mv11.ID = 'Occupation' and mv11.status = 2  
                                left join MasterValue mv12 on fc.Pendidikan = mv12.code and  mv12.ID = 'EducationalBackground' and mv12.status = 2  
                                left join MasterValue mv13 on fc.Agama = mv13.code and  mv13.ID = 'Religion' and mv13.status = 2  
                                left join MasterValue mv14 on fc.PenghasilanInd = mv14.code and  mv14.ID = 'IncomeIND' and mv14.status = 2  
                                left join MasterValue mv15 on fc.SumberDanaInd = mv15.code and  mv15.ID = 'IncomeSourceIND' and mv15.status = 2  
                                left join MasterValue mv16 on fc.MaksudTujuanInd = mv16.code and  mv16.ID = 'InvestmentObjectivesIND' and mv16.status = 2   
                                left join MasterValue mv27 on fc.OtherPropinsiInd1 = mv27.code and  mv27.ID = 'SDIProvince' and mv27.status = 2  
                                left join MasterValue mv28 on fc.OtherPropinsiInd2 = mv28.code and  mv28.ID = 'SDIProvince' and mv28.status = 2  
                                left join MasterValue mv29 on fc.OtherPropinsiInd3 = mv29.code and  mv29.ID = 'SDIProvince' and mv29.status = 2 
                                left join MasterValue mv30 on fc.OtherNegaraInd1 = mv30.code and  mv30.ID = 'SDICountry' and mv30.status = 2  
                                left join MasterValue mv31 on fc.OtherNegaraInd2 = mv31.code and  mv31.ID = 'SDICountry' and mv31.status = 2  
                                left join MasterValue mv32 on fc.OtherNegaraInd3 = mv32.code and  mv32.ID = 'SDICountry' and mv32.status = 2  
                                left join MasterValue mv47 on fc.NatureOfBusiness = mv47.Code and mv47.ID = 'HRBusiness' and mv47.status = 2  
                                left join MasterValue mv48 on fc.Politis = mv48.Code and mv48.ID = 'PoliticallyExposed' and mv48.status = 2
                                left join MasterValue mv49 on fc.IdentitasInd1 = mv49.Code and mv49.ID = 'Identity' and mv49.status = 2
                                left join MasterValue mv50 on fc.IdentitasInd2 = mv50.Code and mv50.ID = 'Identity' and mv50.status = 2
                                left join MasterValue mv51 on fc.IdentitasInd3 = mv51.Code and mv51.ID = 'Identity' and mv51.status = 2
                                left join MasterValue mv68 on fc.SpouseOccupation = mv68.code and  mv68.ID = 'Occupation' and mv68.status = 2
								left join MasterValue mv70 on fc.KodeDomisiliPropinsi = mv70.code and  mv70.ID = 'SDIProvince' and mv70.status = 2
								left join MasterValue mv71 on fc.KodeCountryofKantor = mv71.code and  mv71.ID = 'SDICountry' and mv71.status = 2 
								left join MasterValue mv72 on fc.KodeKotaKantorInd = mv72.code and  mv72.ID = 'CityRHB' and mv72.status = 2 
								left join MasterValue mv73 on fc.CountryofDomicile = mv73.code and  mv73.ID = 'SDICountry' and mv73.status = 2
								left join MasterValue mv74 on fc.KodePropinsiKantorInd = mv74.code and  mv74.ID = 'SDIProvince' and mv74.status = 2


                                left join fundclient Z on FC.AfiliatedFromPK = Z.FundclientPK and  Z.status = 2
                                left join Currency Y on FC.MataUang1 =  Y.CurrencyPK and Y.status = 2
                                left join Currency W on FC.MataUang2 =  W.CurrencyPK and W.status = 2
                                left join Currency V on FC.MataUang3 =  V.CurrencyPK and V.status = 2
                                left join Bank BC1 on fc.NamaBank1 = BC1.BankPK and BC1.status = 2   
                                left join Bank BC2 on fc.NamaBank2 = BC2.BankPK and BC2.status = 2   
                                left join Bank BC3 on fc.NamaBank3 = BC3.BankPK and BC3.status = 2   
                                left join Bank BC4 on fc.BankRDNPK = BC4.BankPK and BC4.status = 2
                                where  FC.status in (1,2)  " + _paramDateFrom + @"  order by FC.InvestorType";
                            cmd.CommandTimeout = 0;
                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "FundClientAll" + "_" + _userID + ".xlsx";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "FundClientAll";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientAll");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                        while (dr0.Read())
                                        {
                                            FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();

                                            rSingle.FundClientID = dr0["FundClientID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientID"]);
                                            rSingle.InvestorType = dr0["InvestorType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorType"]);
                                            rSingle.InternalCategory = dr0["InternalCategory"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalCategory"]);
                                            rSingle.InternalName = dr0["InternalName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalName"]);
                                            rSingle.SellingAgent = dr0["SellingAgent"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SellingAgent"]);
                                            rSingle.SID = dr0["SID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SID"]);
                                            rSingle.IFUACode = dr0["IFUACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IFUACode"]);
                                            rSingle.InvestorsRiskProfile = dr0["InvestorsRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestorsRiskProfile"]);
                                            rSingle.DormantDate = dr0["DormantDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DormantDate"]);
                                            rSingle.Affiliated = dr0["Affiliated"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Affiliated"]);
                                            rSingle.AffiliatedWith = dr0["AffiliatedWith"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AffiliatedWith"]);
                                            rSingle.Suspended = dr0["Suspended"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Suspended"]);
                                            rSingle.NPWP = dr0["NPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NPWP"]);
                                            rSingle.RegistrationNPWP = dr0["RegistrationNPWP"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationNPWP"]);
                                            rSingle.Email = dr0["Email"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Email"]);
                                            rSingle.PhoneNumber = dr0["PhoneNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumber"]);
                                            rSingle.MobilePhone = dr0["MobilePhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MobilePhone"]);
                                            rSingle.BusinessPhone = dr0["BusinessPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BusinessPhone"]);
                                            rSingle.Fax = dr0["Fax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Fax"]);
                                            rSingle.Country = dr0["Country"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Country"]);
                                            rSingle.Nationality = dr0["Nationality"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Nationality"]);
                                            rSingle.BankRDN = dr0["BankRDN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankRDN"]);
                                            rSingle.RDNAccountName = dr0["RDNAccountName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountName"]);
                                            rSingle.RDNAccountNumber = dr0["RDNAccountNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RDNAccountNumber"]);
                                            rSingle.BankName1 = dr0["BankName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName1"]);
                                            rSingle.BankAccountName1 = dr0["BankAccountName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName1"]);
                                            rSingle.BankAccountNumber1 = dr0["BankAccountNumber1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber1"]);
                                            rSingle.BankBranchName1 = dr0["BankBranchName1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName1"]);
                                            rSingle.Currency1 = dr0["Currency1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency1"]);
                                            rSingle.BankName2 = dr0["BankName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName2"]);
                                            rSingle.BankAccountName2 = dr0["BankAccountName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName2"]);
                                            rSingle.BankAccountNumber2 = dr0["BankAccountNumber2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber2"]);
                                            rSingle.BankBranchName2 = dr0["BankBranchName2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName2"]);
                                            rSingle.Currency2 = dr0["Currency2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency2"]);
                                            rSingle.BankName3 = dr0["BankName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankName3"]);
                                            rSingle.BankAccountName3 = dr0["BankAccountName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountName3"]);
                                            rSingle.BankAccountNumber3 = dr0["BankAccountNumber3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankAccountNumber3"]);
                                            rSingle.BankBranchName3 = dr0["BankBranchName3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BankBranchName3"]);
                                            rSingle.Currency3 = dr0["Currency3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Currency3"]);
                                            rSingle.AssetOwner = dr0["AssetOwner"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetOwner"]);
                                            rSingle.StatementType = dr0["StatementType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["StatementType"]);
                                            rSingle.FATCAStatus = dr0["FATCAStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FATCAStatus"]);
                                            rSingle.TIN = dr0["TIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TIN"]);
                                            rSingle.TINIssuanceCountry = dr0["TINIssuanceCountry"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TINIssuanceCountry"]);
                                            rSingle.GIIN = dr0["GIIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GIIN"]);
                                            rSingle.SubstantialOwnerName = dr0["SubstantialOwnerName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerName"]);
                                            rSingle.SubstantialOwnerAddress = dr0["SubstantialOwnerAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerAddress"]);
                                            rSingle.SubstantialOwnerTIN = dr0["SubstantialOwnerTIN"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SubstantialOwnerTIN"]);
                                            rSingle.CompanyName = dr0["CompanyName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyName"]);
                                            rSingle.CompanyAddress = dr0["CompanyAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyAddress"]);
                                            rSingle.CompanyZipCode = dr0["CompanyZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyZipCode"]);
                                            rSingle.CompanyCity = dr0["CompanyCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCity"]);
                                            rSingle.CompanyLegalDomicile = dr0["CompanyLegalDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyLegalDomicile"]);
                                            rSingle.EstablishmentDate = dr0["EstablishmentDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentDate"]);
                                            rSingle.EstablishmentPlace = dr0["EstablishmentPlace"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EstablishmentPlace"]);
                                            rSingle.CountryofEstablishment = dr0["CountryofEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofEstablishment"]);
                                            rSingle.SKDNumber = dr0["SKDNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SKDNumber"]);
                                            rSingle.ExpiredDateSKD = dr0["ExpiredDateSKD"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateSKD"]);
                                            rSingle.ArticleOfAssociation = dr0["ArticleOfAssociation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ArticleOfAssociation"]);
                                            rSingle.SIUPNumber = dr0["SIUPNumber"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPNumber"]);
                                            rSingle.SIUPExpirationDate = dr0["SIUPExpirationDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SIUPExpirationDate"]);
                                            rSingle.AssetFor1Year = dr0["AssetFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor1Year"]);
                                            rSingle.AssetFor2Year = dr0["AssetFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor2Year"]);
                                            rSingle.AssetFor3Year = dr0["AssetFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AssetFor3Year"]);
                                            rSingle.OperatingProfitFor1Year = dr0["OperatingProfitFor1Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor1Year"]);
                                            rSingle.OperatingProfitFor2Year = dr0["OperatingProfitFor2Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor2Year"]);
                                            rSingle.OperatingProfitFor3Year = dr0["OperatingProfitFor3Year"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OperatingProfitFor3Year"]);
                                            rSingle.CompanyType = dr0["CompanyType"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyType"]);
                                            rSingle.CompanyCharacteristic = dr0["CompanyCharacteristic"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCharacteristic"]);
                                            rSingle.CompanyIncomePerAnnum = dr0["CompanyIncomePerAnnum"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyIncomePerAnnum"]);
                                            rSingle.CompanySourceOfFunds = dr0["CompanySourceOfFunds"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanySourceOfFunds"]);
                                            rSingle.CompanyInvestmentObjective = dr0["CompanyInvestmentObjective"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyInvestmentObjective"]);
                                            rSingle.CountryofCompany = dr0["CountryofCompany"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofCompany"]);
                                            rSingle.CompanyCityName = dr0["CompanyCityName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CompanyCityName"]);
                                            rSingle.Province = dr0["Province"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Province"]);
                                            rSingle.FirstNameOfficer1 = dr0["FirstNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer1"]);
                                            rSingle.MiddleNameOfficer1 = dr0["MiddleNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer1"]);
                                            rSingle.LastNameOfficer1 = dr0["LastNameOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer1"]);
                                            rSingle.PositionOfficer1 = dr0["PositionOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer1"]);
                                            rSingle.PhoneNumberOfficer1 = dr0["PhoneNumberOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PhoneNumberOfficer1"]);
                                            rSingle.EmailOfficer1 = dr0["EmailOfficer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EmailOfficer1"]);
                                            rSingle.IDType1Officer1 = dr0["IDType1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer1"]);
                                            rSingle.IDNumber1Officer1 = dr0["IDNumber1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer1"]);
                                            rSingle.IDRegDate1Officer1 = dr0["IDRegDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer1"]);
                                            rSingle.IDExpireDate1Officer1 = dr0["IDExpireDate1Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer1"]);
                                            rSingle.IDType2Officer1 = dr0["IDType2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer1"]);
                                            rSingle.IDNumber2Officer1 = dr0["IDNumber2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer1"]);
                                            rSingle.IDRegDate2Officer1 = dr0["IDRegDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer1"]);
                                            rSingle.IDExpireDate2Officer1 = dr0["IDExpireDate2Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer1"]);
                                            rSingle.IDType3Officer1 = dr0["IDType3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer1"]);
                                            rSingle.IDNumber3Officer1 = dr0["IDNumber3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer1"]);
                                            rSingle.IDRegDate3Officer1 = dr0["IDRegDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer1"]);
                                            rSingle.IDExpireDate3Officer1 = dr0["IDExpireDate3Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer1"]);
                                            rSingle.IDType4Officer1 = dr0["IDType4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer1"]);
                                            rSingle.IDNumber4Officer1 = dr0["IDNumber4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer1"]);
                                            rSingle.IDRegDate4Officer1 = dr0["IDRegDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer1"]);
                                            rSingle.IDExpireDate4Officer1 = dr0["IDExpireDate4Officer1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer1"]);
                                            rSingle.FirstNameOfficer2 = dr0["FirstNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer2"]);
                                            rSingle.MiddleNameOfficer2 = dr0["MiddleNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer2"]);
                                            rSingle.LastNameOfficer2 = dr0["LastNameOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer2"]);
                                            rSingle.PositionOfficer2 = dr0["PositionOfficer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer2"]);
                                            rSingle.IDType1Officer2 = dr0["IDType1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer2"]);
                                            rSingle.IDNumber1Officer2 = dr0["IDNumber1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer2"]);
                                            rSingle.IDRegDate1Officer2 = dr0["IDRegDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer2"]);
                                            rSingle.IDExpireDate1Officer2 = dr0["IDExpireDate1Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer2"]);
                                            rSingle.IDType2Officer2 = dr0["IDType2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer2"]);
                                            rSingle.IDNumber2Officer2 = dr0["IDNumber2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer2"]);
                                            rSingle.IDRegDate2Officer2 = dr0["IDRegDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer2"]);
                                            rSingle.IDExpireDate2Officer2 = dr0["IDExpireDate2Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer2"]);
                                            rSingle.IDType3Officer2 = dr0["IDType3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer2"]);
                                            rSingle.IDNumber3Officer2 = dr0["IDNumber3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer2"]);
                                            rSingle.IDRegDate3Officer2 = dr0["IDRegDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer2"]);
                                            rSingle.IDExpireDate3Officer2 = dr0["IDExpireDate3Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer2"]);
                                            rSingle.IDType4Officer2 = dr0["IDType4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer2"]);
                                            rSingle.IDNumber4Officer2 = dr0["IDNumber4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer2"]);
                                            rSingle.IDRegDate4Officer2 = dr0["IDRegDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer2"]);
                                            rSingle.IDExpireDate4Officer2 = dr0["IDExpireDate4Officer2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer2"]);
                                            rSingle.FirstNameOfficer3 = dr0["FirstNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer3"]);
                                            rSingle.MiddleNameOfficer3 = dr0["MiddleNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer3"]);
                                            rSingle.LastNameOfficer3 = dr0["LastNameOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer3"]);
                                            rSingle.PositionOfficer3 = dr0["PositionOfficer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer3"]);
                                            rSingle.IDType1Officer3 = dr0["IDType1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer3"]);
                                            rSingle.IDNumber1Officer3 = dr0["IDNumber1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer3"]);
                                            rSingle.IDRegDate1Officer3 = dr0["IDRegDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer3"]);
                                            rSingle.IDExpireDate1Officer3 = dr0["IDExpireDate1Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer3"]);
                                            rSingle.IDType2Officer3 = dr0["IDType2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer3"]);
                                            rSingle.IDNumber2Officer3 = dr0["IDNumber2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer3"]);
                                            rSingle.IDRegDate2Officer3 = dr0["IDRegDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer3"]);
                                            rSingle.IDExpireDate2Officer3 = dr0["IDExpireDate2Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer3"]);
                                            rSingle.IDType3Officer3 = dr0["IDType3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer3"]);
                                            rSingle.IDNumber3Officer3 = dr0["IDNumber3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer3"]);
                                            rSingle.IDRegDate3Officer3 = dr0["IDRegDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer3"]);
                                            rSingle.IDExpireDate3Officer3 = dr0["IDExpireDate3Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer3"]);
                                            rSingle.IDType4Officer3 = dr0["IDType4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer3"]);
                                            rSingle.IDNumber4Officer3 = dr0["IDNumber4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer3"]);
                                            rSingle.IDRegDate4Officer3 = dr0["IDRegDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer3"]);
                                            rSingle.IDExpireDate4Officer3 = dr0["IDExpireDate4Officer3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer3"]);
                                            rSingle.FirstNameOfficer4 = dr0["FirstNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameOfficer4"]);
                                            rSingle.MiddleNameOfficer4 = dr0["MiddleNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameOfficer4"]);
                                            rSingle.LastNameOfficer4 = dr0["LastNameOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameOfficer4"]);
                                            rSingle.PositionOfficer4 = dr0["PositionOfficer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PositionOfficer4"]);
                                            rSingle.IDType1Officer4 = dr0["IDType1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType1Officer4"]);
                                            rSingle.IDNumber1Officer4 = dr0["IDNumber1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber1Officer4"]);
                                            rSingle.IDRegDate1Officer4 = dr0["IDRegDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate1Officer4"]);
                                            rSingle.IDExpireDate1Officer4 = dr0["IDExpireDate1Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate1Officer4"]);
                                            rSingle.IDType2Officer4 = dr0["IDType2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType2Officer4"]);
                                            rSingle.IDNumber2Officer4 = dr0["IDNumber2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber2Officer4"]);
                                            rSingle.IDRegDate2Officer4 = dr0["IDRegDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate2Officer4"]);
                                            rSingle.IDExpireDate2Officer4 = dr0["IDExpireDate2Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate2Officer4"]);
                                            rSingle.IDType3Officer4 = dr0["IDType3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType3Officer4"]);
                                            rSingle.IDNumber3Officer4 = dr0["IDNumber3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber3Officer4"]);
                                            rSingle.IDRegDate3Officer4 = dr0["IDRegDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate3Officer4"]);
                                            rSingle.IDExpireDate3Officer4 = dr0["IDExpireDate3Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate3Officer4"]);
                                            rSingle.IDType4Officer4 = dr0["IDType4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDType4Officer4"]);
                                            rSingle.IDNumber4Officer4 = dr0["IDNumber4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDNumber4Officer4"]);
                                            rSingle.IDRegDate4Officer4 = dr0["IDRegDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDRegDate4Officer4"]);
                                            rSingle.IDExpireDate4Officer4 = dr0["IDExpireDate4Officer4"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IDExpireDate4Officer4"]);
                                            rSingle.Description = dr0["Description"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Description"]);
                                            rSingle.CityOfEstablishment = dr0["CityOfEstablishment"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CityOfEstablishment"]);
                                            rSingle.SellingAgentCode = dr0["SACode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SACode"]);
                                            rSingle.CountryofDomicile = dr0["CountryofDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofDomicile"]);
                                            rSingle.KYCRiskProfile = dr0["KYCRiskProfile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KYCRiskProfile"]);
                                            rSingle.BICCode1 = dr0["BICode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode1"]);
                                            rSingle.BICCode2 = dr0["BICode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode2"]);
                                            rSingle.BICCode3 = dr0["BICode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BICode3"]);
                                            rSingle.BIMemberCode1 = dr0["BIMemberCode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode1"]);
                                            rSingle.BIMemberCode2 = dr0["BIMemberCode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode2"]);
                                            rSingle.BIMemberCode3 = dr0["BIMemberCode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BIMemberCode3"]);

                                            // individual
                                            rSingle.FirstNameInd = dr0["FirstNameInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FirstNameInd"]);
                                            rSingle.MiddleNameInd = dr0["MiddleNameInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MiddleNameInd"]);
                                            rSingle.LastNameInd = dr0["LastNameInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["LastNameInd"]);
                                            rSingle.BirthPlace = dr0["BirthPlace"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["BirthPlace"]);
                                            rSingle.CountryOfBirth = dr0["CountryOfBirth"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryOfBirth"]);
                                            rSingle.DOB = dr0["TanggalLahir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TanggalLahir"]);
                                            rSingle.GenderSex = dr0["GenderSex"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["GenderSex"]);
                                            rSingle.MaritalStatus = dr0["MaritalStatus"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MaritalStatus"]);
                                            rSingle.Occupation = dr0["Occupation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Occupation"]);
                                            rSingle.Education = dr0["Education"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Education"]);
                                            rSingle.Religion = dr0["Religion"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Religion"]);
                                            rSingle.IncomePerAnnum = dr0["IncomePerAnnum"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IncomePerAnnum"]);
                                            rSingle.SourceOfFunds = dr0["SourceOfFunds"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SourceOfFunds"]);
                                            rSingle.InvestmentObjectives = dr0["InvestmentObjectives"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InvestmentObjectives"]);
                                            rSingle.MotherMaidenName = dr0["MotherMaidenName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["MotherMaidenName"]);
                                            rSingle.SpouseName = dr0["SpouseName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SpouseName"]);
                                            rSingle.SpouseOccupation = dr0["SpouseOccupation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SpouseOccupation"]);
                                            rSingle.Heir = dr0["Heir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Heir"]);
                                            rSingle.HeirRelation = dr0["HeirRelation"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["HeirRelation"]);
                                            rSingle.NatureOfBusiness = dr0["NatureOfBusiness"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NatureOfBusiness"]);
                                            rSingle.NatureOfBusinessDesc = dr0["NatureOfBusinessDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["NatureOfBusinessDesc"]);
                                            rSingle.PoliticallyExposed = dr0["PoliticallyExposed"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PoliticallyExposed"]);
                                            rSingle.PoliticallyExposedDesc = dr0["PoliticallyExposedDesc"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["PoliticallyExposedDesc"]);
                                            rSingle.OtherHomePhone = dr0["OtherHomePhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherHomePhone"]);
                                            rSingle.OtherCellPhone = dr0["OtherCellPhone"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherCellPhone"]);
                                            rSingle.OtherFax = dr0["OtherFax"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherFax"]);
                                            rSingle.OtherEmail = dr0["OtherEmail"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["OtherEmail"]);
                                            rSingle.CorrespondenceAddress = dr0["CorrespondenceAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceAddress"]);
                                            rSingle.CorrespondenceCity = dr0["CorrespondenceCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceCity"]);
                                            rSingle.CorrespondenceZipCode = dr0["CorrespondenceZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceZipCode"]);
                                            rSingle.CountryofCorrespondence = dr0["CountryofCorrespondence"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofCorrespondence"]);
                                            rSingle.DomicileAddress = dr0["DomicileAddress"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileAddress"]);
                                            rSingle.DomicileCity = dr0["DomicileCity"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileCity"]);
                                            rSingle.DomicileZipCode = dr0["DomicileZipCode"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileZipCode"]);
                                            rSingle.CountryofDomicile = dr0["CountryofDomicile"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CountryofDomicile"]);
                                            rSingle.IdentityAddress1 = dr0["IdentityAddress1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityAddress1"]);
                                            rSingle.IdentityCity1 = dr0["IdentityCity1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCity1"]);
                                            rSingle.IdentityZipCode1 = dr0["IdentityZipCode1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityZipCode1"]);
                                            rSingle.IdentityProvince1 = dr0["IdentityProvince1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityProvince1"]);
                                            rSingle.Propinsi = dr0["Propinsi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Propinsi"]);
                                            rSingle.IdentityCountry1 = dr0["IdentityCountry1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCountry1"]);
                                            rSingle.IdentityAddress2 = dr0["IdentityAddress2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityAddress2"]);
                                            rSingle.IdentityCity2 = dr0["IdentityCity2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCity2"]);
                                            rSingle.IdentityZipCode2 = dr0["IdentityZipCode2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityZipCode2"]);
                                            rSingle.IdentityProvince2 = dr0["IdentityProvince2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityProvince2"]);
                                            rSingle.IdentityCountry2 = dr0["IdentityCountry2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCountry2"]);
                                            rSingle.IdentityAddress3 = dr0["IdentityAddress3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityAddress3"]);
                                            rSingle.IdentityCity3 = dr0["IdentityCity3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCity3"]);
                                            rSingle.IdentityZipCode3 = dr0["IdentityZipCode3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityZipCode3"]);
                                            rSingle.IdentityProvince3 = dr0["IdentityProvince3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityProvince3"]);
                                            rSingle.IdentityCountry3 = dr0["IdentityCountry3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityCountry3"]);
                                            rSingle.IdentityType1 = dr0["IdentityType1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityType1"]);
                                            rSingle.IdentityNumber1 = dr0["IdentityNumber1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityNumber1"]);
                                            rSingle.RegistrationDateIdentitasInd1 = dr0["RegistrationDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd1"]);
                                            rSingle.ExpiredDateIdentitasInd1 = dr0["ExpiredDateIdentitasInd1"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd1"]);
                                            rSingle.IdentityType2 = dr0["IdentityType2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityType2"]);
                                            rSingle.IdentityNumber2 = dr0["IdentityNumber2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityNumber2"]);
                                            rSingle.RegistrationDateIdentitasInd2 = dr0["RegistrationDateIdentitasInd2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd2"]);
                                            rSingle.ExpiredDateIdentitasInd2 = dr0["ExpiredDateIdentitasInd2"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd2"]);
                                            rSingle.IdentityType3 = dr0["IdentityType3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityType3"]);
                                            rSingle.IdentityNumber3 = dr0["IdentityNumber3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["IdentityNumber3"]);
                                            rSingle.RegistrationDateIdentitasInd3 = dr0["RegistrationDateIdentitasInd3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["RegistrationDateIdentitasInd3"]);
                                            rSingle.ExpiredDateIdentitasInd3 = dr0["ExpiredDateIdentitasInd3"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ExpiredDateIdentitasInd3"]);
                                            rSingle.AlamatKantorInd = dr0["AlamatKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["AlamatKantorInd"]);
                                            rSingle.KodeKotaKantorInd = dr0["KodeKotaKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeKotaKantorInd"]);
                                            rSingle.KodePosKantorInd = dr0["KodePosKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodePosKantorInd"]);
                                            rSingle.KodePropinsiKantorInd = dr0["KodePropinsiKantorInd"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodePropinsiKantorInd"]);
                                            rSingle.KodeCountryofKantor = dr0["KodeCountryofKantor"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeCountryofKantor"]);
                                            rSingle.CorrespondenceRT = dr0["CorrespondenceRT"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceRT"]);
                                            rSingle.CorrespondenceRW = dr0["CorrespondenceRW"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["CorrespondenceRW"]);
                                            rSingle.DomicileRT = dr0["DomicileRT"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileRT"]);
                                            rSingle.DomicileRW = dr0["DomicileRW"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["DomicileRW"]);
                                            rSingle.Identity1RT = dr0["Identity1RT"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Identity1RT"]);
                                            rSingle.Identity1RW = dr0["Identity1RW"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["Identity1RW"]);
                                            rSingle.KodeDomisiliPropinsi = dr0["KodeDomisiliPropinsi"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["KodeDomisiliPropinsi"]);

                                            rSingle.EntryUsersID = dr0["EntryUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryUsersID"]);
                                            rSingle.EntryTime = dr0["EntryTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["EntryTime"]);
                                            rSingle.UpdateUsersID = dr0["UpdateUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateUsersID"]);
                                            rSingle.UpdateTime = dr0["UpdateTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UpdateTime"]);
                                            rSingle.ApprovedUsersID = dr0["ApprovedUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedUsersID"]);
                                            rSingle.ApprovedTime = dr0["ApprovedTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["ApprovedTime"]);
                                            rSingle.VoidUsersID = dr0["VoidUsersID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidUsersID"]);
                                            rSingle.VoidTime = dr0["VoidTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["VoidTime"]);
                                            rSingle.SuspendBy = dr0["SuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendBy"]);
                                            rSingle.SuspendTime = dr0["SuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SuspendTime"]);
                                            rSingle.UnSuspendBy = dr0["UnSuspendBy"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendBy"]);
                                            rSingle.UnSuspendTime = dr0["UnSuspendTime"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["UnSuspendTime"]);
                                            rList.Add(rSingle);

                                        }

                                        var GroupByTitle =
                                            from r in rList
                                            group r by new { r.InvestorType } into rGroup
                                            select rGroup;

                                        int incRowExcel = 0;

                                        foreach (var rsHeader in GroupByTitle)
                                        {

                                            incRowExcel++;
                                            string _range = "";
                                            worksheet.Cells[incRowExcel, 1].Value = "Investor Type :";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InvestorType;
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            if (rsHeader.Key.InvestorType == "INDIVIDUAL")
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "FundClientID";
                                                worksheet.Cells[incRowExcel, 2].Value = "OldID";
                                                worksheet.Cells[incRowExcel, 3].Value = "InvestorType";
                                                worksheet.Cells[incRowExcel, 4].Value = "InternalCategory";
                                                worksheet.Cells[incRowExcel, 5].Value = "InternalName";
                                                worksheet.Cells[incRowExcel, 6].Value = "SellingAgent";
                                                worksheet.Cells[incRowExcel, 7].Value = "SID";
                                                worksheet.Cells[incRowExcel, 8].Value = "IFUACode";
                                                worksheet.Cells[incRowExcel, 9].Value = "InvestorsRiskProfile";
                                                worksheet.Cells[incRowExcel, 10].Value = "KYCRiskProfile";
                                                worksheet.Cells[incRowExcel, 11].Value = "AssetOwner";
                                                worksheet.Cells[incRowExcel, 12].Value = "StatementType";
                                                worksheet.Cells[incRowExcel, 13].Value = "DormantDate";
                                                worksheet.Cells[incRowExcel, 14].Value = "Affiliated";
                                                worksheet.Cells[incRowExcel, 15].Value = "AffiliatedWith";
                                                worksheet.Cells[incRowExcel, 16].Value = "Suspended";
                                                worksheet.Cells[incRowExcel, 17].Value = "NPWP";
                                                worksheet.Cells[incRowExcel, 18].Value = "RegistrationNPWP";
                                                worksheet.Cells[incRowExcel, 19].Value = "Email";
                                                worksheet.Cells[incRowExcel, 20].Value = "PhoneNumber";
                                                worksheet.Cells[incRowExcel, 21].Value = "MobilePhone";
                                                worksheet.Cells[incRowExcel, 22].Value = "Fax";
                                                worksheet.Cells[incRowExcel, 23].Value = "Country";
                                                worksheet.Cells[incRowExcel, 24].Value = "Nationality";
                                                worksheet.Cells[incRowExcel, 25].Value = "BankRDN";
                                                worksheet.Cells[incRowExcel, 26].Value = "RDNAccountName";
                                                worksheet.Cells[incRowExcel, 27].Value = "RDNAccountNumber";
                                                worksheet.Cells[incRowExcel, 28].Value = "BankName1";
                                                worksheet.Cells[incRowExcel, 29].Value = "BankAccountName1";
                                                worksheet.Cells[incRowExcel, 30].Value = "BankAccountNumber1";
                                                worksheet.Cells[incRowExcel, 31].Value = "BankBranchName1";
                                                worksheet.Cells[incRowExcel, 32].Value = "Currency1";
                                                worksheet.Cells[incRowExcel, 33].Value = "BICCode1";
                                                worksheet.Cells[incRowExcel, 34].Value = "BIMemberCode1";

                                                worksheet.Cells[incRowExcel, 35].Value = "BankName2";
                                                worksheet.Cells[incRowExcel, 36].Value = "BankAccountName2";
                                                worksheet.Cells[incRowExcel, 37].Value = "BankAccountNumber2";
                                                worksheet.Cells[incRowExcel, 38].Value = "BankBranchName2";
                                                worksheet.Cells[incRowExcel, 39].Value = "Currency2";
                                                worksheet.Cells[incRowExcel, 40].Value = "BICCode2";
                                                worksheet.Cells[incRowExcel, 41].Value = "BIMemberCode2";

                                                worksheet.Cells[incRowExcel, 42].Value = "BankName3";
                                                worksheet.Cells[incRowExcel, 43].Value = "BankAccountName3";
                                                worksheet.Cells[incRowExcel, 44].Value = "BankAccountNumber3";
                                                worksheet.Cells[incRowExcel, 45].Value = "BankBranchName3";
                                                worksheet.Cells[incRowExcel, 46].Value = "Currency3";
                                                worksheet.Cells[incRowExcel, 47].Value = "BICCode3";
                                                worksheet.Cells[incRowExcel, 48].Value = "BIMemberCode3";

                                                worksheet.Cells[incRowExcel, 49].Value = "FirstNameInd";
                                                worksheet.Cells[incRowExcel, 50].Value = "MiddleNameInd";
                                                worksheet.Cells[incRowExcel, 51].Value = "LastNameInd";
                                                worksheet.Cells[incRowExcel, 52].Value = "BirthPlace";
                                                worksheet.Cells[incRowExcel, 53].Value = "CountryOfBirth";
                                                worksheet.Cells[incRowExcel, 54].Value = "DOB";
                                                worksheet.Cells[incRowExcel, 55].Value = "GenderSex";
                                                worksheet.Cells[incRowExcel, 56].Value = "MaritalStatus";
                                                worksheet.Cells[incRowExcel, 57].Value = "Occupation";
                                                worksheet.Cells[incRowExcel, 58].Value = "Education";
                                                worksheet.Cells[incRowExcel, 59].Value = "Religion";
                                                worksheet.Cells[incRowExcel, 60].Value = "IncomePerAnnum";
                                                worksheet.Cells[incRowExcel, 61].Value = "SourceOfFunds";
                                                worksheet.Cells[incRowExcel, 62].Value = "InvestmentObjectives";
                                                worksheet.Cells[incRowExcel, 63].Value = "MotherMaidenName";
                                                worksheet.Cells[incRowExcel, 64].Value = "SpouseName";
                                                worksheet.Cells[incRowExcel, 65].Value = "SpouseOccupation";
                                                worksheet.Cells[incRowExcel, 66].Value = "Heir";
                                                worksheet.Cells[incRowExcel, 67].Value = "HeirRelation";
                                                worksheet.Cells[incRowExcel, 68].Value = "NatureOfBusiness";
                                                worksheet.Cells[incRowExcel, 69].Value = "NatureOfBusinessDesc";
                                                worksheet.Cells[incRowExcel, 70].Value = "PoliticallyExposed";
                                                worksheet.Cells[incRowExcel, 71].Value = "PoliticallyExposedDesc";
                                                worksheet.Cells[incRowExcel, 72].Value = "OtherHomePhone";
                                                worksheet.Cells[incRowExcel, 73].Value = "OtherCellPhone";
                                                worksheet.Cells[incRowExcel, 74].Value = "OtherFax";
                                                worksheet.Cells[incRowExcel, 75].Value = "OtherEmail";
                                                worksheet.Cells[incRowExcel, 76].Value = "CorrespondenceAddress";
                                                worksheet.Cells[incRowExcel, 77].Value = "CorrespondenceCity";
                                                worksheet.Cells[incRowExcel, 78].Value = "CorrespondenceZipCode";
                                                worksheet.Cells[incRowExcel, 79].Value = "CorrespondenceProvince";
                                                worksheet.Cells[incRowExcel, 80].Value = "CorrespondenceRT";
                                                worksheet.Cells[incRowExcel, 81].Value = "CorrespondenceRW";
                                                worksheet.Cells[incRowExcel, 82].Value = "CountryofCorrespondence";
                                                worksheet.Cells[incRowExcel, 83].Value = "DomicileAddress";
                                                worksheet.Cells[incRowExcel, 84].Value = "KodeDomisiliPropinsi";
                                                worksheet.Cells[incRowExcel, 85].Value = "DomicileCity";
                                                worksheet.Cells[incRowExcel, 86].Value = "DomicileZipCode";
                                                worksheet.Cells[incRowExcel, 87].Value = "DomicileRT";
                                                worksheet.Cells[incRowExcel, 88].Value = "DomicileRW";
                                                worksheet.Cells[incRowExcel, 89].Value = "CountryofDomicile";
                                                worksheet.Cells[incRowExcel, 90].Value = "IdentityAddress1";
                                                worksheet.Cells[incRowExcel, 91].Value = "IdentityCity1";
                                                worksheet.Cells[incRowExcel, 92].Value = "IdentityZipCode1";
                                                worksheet.Cells[incRowExcel, 93].Value = "IdentityProvince1";
                                                worksheet.Cells[incRowExcel, 94].Value = "IdentityCountry1";
                                                worksheet.Cells[incRowExcel, 95].Value = "IdentityAddress2";
                                                worksheet.Cells[incRowExcel, 96].Value = "IdentityCity2";
                                                worksheet.Cells[incRowExcel, 97].Value = "IdentityZipCode2";
                                                worksheet.Cells[incRowExcel, 98].Value = "IdentityProvince2";
                                                worksheet.Cells[incRowExcel, 99].Value = "IdentityCountry2";
                                                worksheet.Cells[incRowExcel, 100].Value = "IdentityAddress3";
                                                worksheet.Cells[incRowExcel, 101].Value = "IdentityCity3";
                                                worksheet.Cells[incRowExcel, 102].Value = "IdentityZipCode3";
                                                worksheet.Cells[incRowExcel, 103].Value = "IdentityProvince3";
                                                worksheet.Cells[incRowExcel, 104].Value = "IdentityCountry3";
                                                worksheet.Cells[incRowExcel, 105].Value = "IdentityType1";
                                                worksheet.Cells[incRowExcel, 106].Value = "IdentityNumber1";
                                                worksheet.Cells[incRowExcel, 107].Value = "Identity1RT";
                                                worksheet.Cells[incRowExcel, 108].Value = "Identity1RW";
                                                worksheet.Cells[incRowExcel, 109].Value = "RegistrationDateIdentitasInd1";
                                                worksheet.Cells[incRowExcel, 110].Value = "ExpiredDateIdentitasInd1";
                                                worksheet.Cells[incRowExcel, 111].Value = "IdentityType2";
                                                worksheet.Cells[incRowExcel, 112].Value = "IdentityNumber2";
                                                worksheet.Cells[incRowExcel, 113].Value = "RegistrationDateIdentitasInd2";
                                                worksheet.Cells[incRowExcel, 114].Value = "ExpiredDateIdentitasInd2";
                                                worksheet.Cells[incRowExcel, 115].Value = "IdentityType3";
                                                worksheet.Cells[incRowExcel, 116].Value = "IdentityNumber3";
                                                worksheet.Cells[incRowExcel, 117].Value = "RegistrationDateIdentitasInd3";
                                                worksheet.Cells[incRowExcel, 118].Value = "ExpiredDateIdentitasInd3";
                                                worksheet.Cells[incRowExcel, 119].Value = "FATCAStatus";
                                                worksheet.Cells[incRowExcel, 120].Value = "TIN";
                                                worksheet.Cells[incRowExcel, 121].Value = "TINIssuanceCountry";
                                                worksheet.Cells[incRowExcel, 122].Value = "GIIN";
                                                worksheet.Cells[incRowExcel, 123].Value = "SubstantialOwnerName";
                                                worksheet.Cells[incRowExcel, 124].Value = "SubstantialOwnerAddress";
                                                worksheet.Cells[incRowExcel, 125].Value = "SubstantialOwnerTIN";
                                                worksheet.Cells[incRowExcel, 126].Value = "AlamatKantorInd";
                                                worksheet.Cells[incRowExcel, 127].Value = "KodeKotaKantorInd";
                                                worksheet.Cells[incRowExcel, 128].Value = "KodePosKantorInd";
                                                worksheet.Cells[incRowExcel, 129].Value = "KodePropinsiKantorInd";
                                                worksheet.Cells[incRowExcel, 130].Value = "KodeCountryofKantor";
                                                worksheet.Cells[incRowExcel, 131].Value = "Description";


                                                worksheet.Cells[incRowExcel, 132].Value = "EntryUsersID";
                                                worksheet.Cells[incRowExcel, 133].Value = "EntryTime";
                                                worksheet.Cells[incRowExcel, 134].Value = "UpdateUsersID";
                                                worksheet.Cells[incRowExcel, 135].Value = "UpdateTime";
                                                worksheet.Cells[incRowExcel, 136].Value = "ApprovedUsersID";
                                                worksheet.Cells[incRowExcel, 137].Value = "ApprovedTime";
                                                worksheet.Cells[incRowExcel, 138].Value = "VoidUsersID";
                                                worksheet.Cells[incRowExcel, 139].Value = "VoidTime";
                                                worksheet.Cells[incRowExcel, 140].Value = "SuspendBy";
                                                worksheet.Cells[incRowExcel, 141].Value = "SuspendTime";
                                                worksheet.Cells[incRowExcel, 142].Value = "UnSuspendBy";
                                                worksheet.Cells[incRowExcel, 143].Value = "UnSuspendTime";
                                                _range = "A" + incRowExcel + ":EM" + incRowExcel;
                                            }
                                            else
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "FundClientID";
                                                worksheet.Cells[incRowExcel, 2].Value = "InvestorType";
                                                worksheet.Cells[incRowExcel, 3].Value = "InternalCategory";
                                                worksheet.Cells[incRowExcel, 4].Value = "InternalName";
                                                worksheet.Cells[incRowExcel, 5].Value = "SellingAgent";
                                                worksheet.Cells[incRowExcel, 6].Value = "NPWP";
                                                worksheet.Cells[incRowExcel, 7].Value = "RegistrationNPWP";
                                                worksheet.Cells[incRowExcel, 8].Value = "Email";
                                                worksheet.Cells[incRowExcel, 9].Value = "PhoneNumber";
                                                worksheet.Cells[incRowExcel, 10].Value = "MobilePhone";
                                                worksheet.Cells[incRowExcel, 11].Value = "Fax";
                                                worksheet.Cells[incRowExcel, 12].Value = "SID";
                                                worksheet.Cells[incRowExcel, 13].Value = "IFUACode";
                                                worksheet.Cells[incRowExcel, 14].Value = "InvestorsRiskProfile";
                                                worksheet.Cells[incRowExcel, 15].Value = "KYCRiskProfile";
                                                worksheet.Cells[incRowExcel, 16].Value = "AssetOwner";
                                                worksheet.Cells[incRowExcel, 17].Value = "StatementType";
                                                worksheet.Cells[incRowExcel, 18].Value = "SellingAgentCode";
                                                worksheet.Cells[incRowExcel, 19].Value = "DormantDate";
                                                worksheet.Cells[incRowExcel, 20].Value = "Description";
                                                worksheet.Cells[incRowExcel, 21].Value = "Affiliated";
                                                worksheet.Cells[incRowExcel, 22].Value = "AffiliatedWith";
                                                worksheet.Cells[incRowExcel, 23].Value = "Suspended";
                                                worksheet.Cells[incRowExcel, 24].Value = "BankName1";
                                                worksheet.Cells[incRowExcel, 25].Value = "BankAccountName1";
                                                worksheet.Cells[incRowExcel, 26].Value = "BankAccountNumber1";
                                                worksheet.Cells[incRowExcel, 27].Value = "BankBranchName1";
                                                worksheet.Cells[incRowExcel, 28].Value = "Currency1";
                                                worksheet.Cells[incRowExcel, 29].Value = "BICCode1";
                                                worksheet.Cells[incRowExcel, 30].Value = "BIMemberCode1";
                                                worksheet.Cells[incRowExcel, 31].Value = "BankName2";
                                                worksheet.Cells[incRowExcel, 32].Value = "BankAccountName2";
                                                worksheet.Cells[incRowExcel, 33].Value = "BankAccountNumber2";
                                                worksheet.Cells[incRowExcel, 34].Value = "BankBranchName2";
                                                worksheet.Cells[incRowExcel, 35].Value = "Currency2";
                                                worksheet.Cells[incRowExcel, 36].Value = "BICCode2";
                                                worksheet.Cells[incRowExcel, 37].Value = "BIMemberCode2";
                                                worksheet.Cells[incRowExcel, 38].Value = "BankName3";
                                                worksheet.Cells[incRowExcel, 39].Value = "BankAccountName3";
                                                worksheet.Cells[incRowExcel, 40].Value = "BankAccountNumber3";
                                                worksheet.Cells[incRowExcel, 41].Value = "BankBranchName3";
                                                worksheet.Cells[incRowExcel, 42].Value = "Currency3";
                                                worksheet.Cells[incRowExcel, 43].Value = "BICCode3";
                                                worksheet.Cells[incRowExcel, 44].Value = "BIMemberCode3";
                                                worksheet.Cells[incRowExcel, 45].Value = "BankRDN";
                                                worksheet.Cells[incRowExcel, 46].Value = "RDNAccountName";
                                                worksheet.Cells[incRowExcel, 47].Value = "RDNAccountNumber";
                                                worksheet.Cells[incRowExcel, 48].Value = "CompanyName";
                                                worksheet.Cells[incRowExcel, 49].Value = "CompanyAddress";
                                                worksheet.Cells[incRowExcel, 50].Value = "CompanyZipCode";
                                                worksheet.Cells[incRowExcel, 51].Value = "CompanyCity";
                                                worksheet.Cells[incRowExcel, 52].Value = "CompanyLegalDomicile";
                                                worksheet.Cells[incRowExcel, 53].Value = "CountryOfDomicile";
                                                worksheet.Cells[incRowExcel, 54].Value = "CompanyType";
                                                worksheet.Cells[incRowExcel, 55].Value = "CompanyCharacteristic";
                                                worksheet.Cells[incRowExcel, 56].Value = "CompanyIncomePerAnnum";
                                                worksheet.Cells[incRowExcel, 57].Value = "CompanySourceOfFunds";
                                                worksheet.Cells[incRowExcel, 58].Value = "CompanyInvestmentObjective";
                                                worksheet.Cells[incRowExcel, 59].Value = "SKDNumber";
                                                worksheet.Cells[incRowExcel, 60].Value = "ExpiredDateSKD";
                                                worksheet.Cells[incRowExcel, 61].Value = "ArticleOfAssociation";
                                                worksheet.Cells[incRowExcel, 62].Value = "SIUPNumber";
                                                worksheet.Cells[incRowExcel, 63].Value = "SIUPExpirationDate";
                                                worksheet.Cells[incRowExcel, 64].Value = "FirstNameOfficer1";
                                                worksheet.Cells[incRowExcel, 65].Value = "MiddleNameOfficer1";
                                                worksheet.Cells[incRowExcel, 66].Value = "LastNameOfficer1";
                                                worksheet.Cells[incRowExcel, 67].Value = "PositionOfficer1";
                                                worksheet.Cells[incRowExcel, 68].Value = "PhoneNumberOfficer1";
                                                worksheet.Cells[incRowExcel, 69].Value = "EmailOfficer1";
                                                worksheet.Cells[incRowExcel, 70].Value = "IDType1Officer1";
                                                worksheet.Cells[incRowExcel, 71].Value = "IDNumber1Officer1";
                                                worksheet.Cells[incRowExcel, 72].Value = "IDRegDate1Officer1";
                                                worksheet.Cells[incRowExcel, 73].Value = "IDExpireDate1Officer1";
                                                worksheet.Cells[incRowExcel, 74].Value = "IDType2Officer1";
                                                worksheet.Cells[incRowExcel, 75].Value = "IDNumber2Officer1";
                                                worksheet.Cells[incRowExcel, 76].Value = "IDRegDate2Officer1";
                                                worksheet.Cells[incRowExcel, 77].Value = "IDExpireDate2Officer1";
                                                worksheet.Cells[incRowExcel, 78].Value = "IDType3Officer1";
                                                worksheet.Cells[incRowExcel, 79].Value = "IDNumber3Officer1";
                                                worksheet.Cells[incRowExcel, 80].Value = "IDRegDate3Officer1";
                                                worksheet.Cells[incRowExcel, 81].Value = "IDExpireDate3Officer1";
                                                worksheet.Cells[incRowExcel, 82].Value = "IDType4Officer1";
                                                worksheet.Cells[incRowExcel, 83].Value = "IDNumber4Officer1";
                                                worksheet.Cells[incRowExcel, 84].Value = "IDRegDate4Officer1";
                                                worksheet.Cells[incRowExcel, 85].Value = "IDExpireDate4Officer1";
                                                worksheet.Cells[incRowExcel, 86].Value = "FirstNameOfficer2";
                                                worksheet.Cells[incRowExcel, 87].Value = "MiddleNameOfficer2";
                                                worksheet.Cells[incRowExcel, 88].Value = "LastNameOfficer2";
                                                worksheet.Cells[incRowExcel, 89].Value = "PositionOfficer2";
                                                worksheet.Cells[incRowExcel, 90].Value = "IDType1Officer2";
                                                worksheet.Cells[incRowExcel, 91].Value = "IDNumber1Officer2";
                                                worksheet.Cells[incRowExcel, 92].Value = "IDRegDate1Officer2";
                                                worksheet.Cells[incRowExcel, 93].Value = "IDExpireDate1Officer2";
                                                worksheet.Cells[incRowExcel, 94].Value = "IDType2Officer2";
                                                worksheet.Cells[incRowExcel, 95].Value = "IDNumber2Officer2";
                                                worksheet.Cells[incRowExcel, 96].Value = "IDRegDate2Officer2";
                                                worksheet.Cells[incRowExcel, 97].Value = "IDExpireDate2Officer2";
                                                worksheet.Cells[incRowExcel, 98].Value = "IDType3Officer2";
                                                worksheet.Cells[incRowExcel, 99].Value = "IDNumber3Officer2";
                                                worksheet.Cells[incRowExcel, 100].Value = "IDRegDate3Officer2";
                                                worksheet.Cells[incRowExcel, 101].Value = "IDExpireDate3Officer2";
                                                worksheet.Cells[incRowExcel, 102].Value = "IDType4Officer2";
                                                worksheet.Cells[incRowExcel, 103].Value = "IDNumber4Officer2";
                                                worksheet.Cells[incRowExcel, 104].Value = "IDRegDate4Officer2";
                                                worksheet.Cells[incRowExcel, 105].Value = "IDExpireDate4Officer2";
                                                worksheet.Cells[incRowExcel, 106].Value = "EstablishmentDate";
                                                worksheet.Cells[incRowExcel, 107].Value = "EstablishmentPlace";
                                                worksheet.Cells[incRowExcel, 108].Value = "CountryofEstablishment";
                                                worksheet.Cells[incRowExcel, 109].Value = "CityOfEstablishment";
                                                worksheet.Cells[incRowExcel, 110].Value = "CountryofCompany";
                                                worksheet.Cells[incRowExcel, 111].Value = "CompanyCityName";
                                                worksheet.Cells[incRowExcel, 112].Value = "CompanyAddress";
                                                worksheet.Cells[incRowExcel, 113].Value = "ZIPCode";
                                                worksheet.Cells[incRowExcel, 114].Value = "BusinessPhone";
                                                worksheet.Cells[incRowExcel, 115].Value = "AssetFor1Year";
                                                worksheet.Cells[incRowExcel, 116].Value = "AssetFor2Year";
                                                worksheet.Cells[incRowExcel, 117].Value = "AssetFor3Year";
                                                worksheet.Cells[incRowExcel, 118].Value = "OperatingProfitFor1Year";
                                                worksheet.Cells[incRowExcel, 119].Value = "OperatingProfitFor2Year";
                                                worksheet.Cells[incRowExcel, 120].Value = "OperatingProfitFor3Year";
                                                worksheet.Cells[incRowExcel, 121].Value = "FirstNameOfficer3";
                                                worksheet.Cells[incRowExcel, 122].Value = "MiddleNameOfficer3";
                                                worksheet.Cells[incRowExcel, 123].Value = "LastNameOfficer3";
                                                worksheet.Cells[incRowExcel, 124].Value = "PositionOfficer3";
                                                worksheet.Cells[incRowExcel, 125].Value = "IDType1Officer3";
                                                worksheet.Cells[incRowExcel, 126].Value = "IDNumber1Officer3";
                                                worksheet.Cells[incRowExcel, 127].Value = "IDRegDate1Officer3";
                                                worksheet.Cells[incRowExcel, 128].Value = "IDExpireDate1Officer3";
                                                worksheet.Cells[incRowExcel, 129].Value = "IDType2Officer3";
                                                worksheet.Cells[incRowExcel, 130].Value = "IDNumber2Officer3";
                                                worksheet.Cells[incRowExcel, 131].Value = "IDRegDate2Officer3";
                                                worksheet.Cells[incRowExcel, 132].Value = "IDExpireDate2Officer3";
                                                worksheet.Cells[incRowExcel, 133].Value = "IDType3Officer3";
                                                worksheet.Cells[incRowExcel, 134].Value = "IDNumber3Officer3";
                                                worksheet.Cells[incRowExcel, 135].Value = "IDRegDate3Officer3";
                                                worksheet.Cells[incRowExcel, 136].Value = "IDExpireDate3Officer3";
                                                worksheet.Cells[incRowExcel, 137].Value = "IDType4Officer3";
                                                worksheet.Cells[incRowExcel, 138].Value = "IDNumber4Officer3";
                                                worksheet.Cells[incRowExcel, 139].Value = "IDRegDate4Officer3";
                                                worksheet.Cells[incRowExcel, 140].Value = "IDExpireDate4Officer3";
                                                worksheet.Cells[incRowExcel, 141].Value = "FirstNameOfficer4";
                                                worksheet.Cells[incRowExcel, 142].Value = "MiddleNameOfficer4";
                                                worksheet.Cells[incRowExcel, 143].Value = "LastNameOfficer4";
                                                worksheet.Cells[incRowExcel, 144].Value = "PositionOfficer4";
                                                worksheet.Cells[incRowExcel, 145].Value = "IDType1Officer4";
                                                worksheet.Cells[incRowExcel, 146].Value = "IDNumber1Officer4";
                                                worksheet.Cells[incRowExcel, 147].Value = "IDRegDate1Officer4";
                                                worksheet.Cells[incRowExcel, 148].Value = "IDExpireDate1Officer4";
                                                worksheet.Cells[incRowExcel, 149].Value = "IDType2Officer4";
                                                worksheet.Cells[incRowExcel, 150].Value = "IDNumber2Officer4";
                                                worksheet.Cells[incRowExcel, 151].Value = "IDRegDate2Officer4";
                                                worksheet.Cells[incRowExcel, 152].Value = "IDExpireDate2Officer4";
                                                worksheet.Cells[incRowExcel, 153].Value = "IDType3Officer4";
                                                worksheet.Cells[incRowExcel, 154].Value = "IDNumber3Officer4";
                                                worksheet.Cells[incRowExcel, 155].Value = "IDRegDate3Officer4";
                                                worksheet.Cells[incRowExcel, 156].Value = "IDExpireDate3Officer4";
                                                worksheet.Cells[incRowExcel, 157].Value = "IDType4Officer4";
                                                worksheet.Cells[incRowExcel, 158].Value = "IDNumber4Officer4";
                                                worksheet.Cells[incRowExcel, 159].Value = "IDRegDate4Officer4";
                                                worksheet.Cells[incRowExcel, 160].Value = "IDExpireDate4Officer4";
                                                worksheet.Cells[incRowExcel, 161].Value = "FATCAStatus";
                                                worksheet.Cells[incRowExcel, 162].Value = "TIN";
                                                worksheet.Cells[incRowExcel, 163].Value = "TINIssuanceCountry";
                                                worksheet.Cells[incRowExcel, 164].Value = "GIIN";
                                                worksheet.Cells[incRowExcel, 165].Value = "SubstantialOwnerName";
                                                worksheet.Cells[incRowExcel, 166].Value = "SubstantialOwnerAddress";
                                                worksheet.Cells[incRowExcel, 167].Value = "SubstantialOwnerTIN";
                                                worksheet.Cells[incRowExcel, 168].Value = "EntryUsersID";
                                                worksheet.Cells[incRowExcel, 169].Value = "EntryTime";
                                                worksheet.Cells[incRowExcel, 170].Value = "UpdateUsersID";
                                                worksheet.Cells[incRowExcel, 171].Value = "UpdateTime";
                                                worksheet.Cells[incRowExcel, 172].Value = "ApprovedUsersID";
                                                worksheet.Cells[incRowExcel, 173].Value = "ApprovedTime";
                                                worksheet.Cells[incRowExcel, 174].Value = "VoidUsersID";
                                                worksheet.Cells[incRowExcel, 175].Value = "VoidTime";
                                                worksheet.Cells[incRowExcel, 176].Value = "SuspendBy";
                                                worksheet.Cells[incRowExcel, 177].Value = "SuspendTime";
                                                worksheet.Cells[incRowExcel, 178].Value = "UnSuspendBy";
                                                worksheet.Cells[incRowExcel, 179].Value = "UnSuspendTime";
                                                _range = "A" + incRowExcel + ":FW" + incRowExcel;
                                            }

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            }
                                            incRowExcel++;


                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            //end area header
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsDetail.InvestorType == "INDIVIDUAL")
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.OldID;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.InternalName;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.SellingAgent;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.SID;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.IFUACode;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.InvestorsRiskProfile;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.KYCRiskProfile;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.AssetOwner;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.StatementType;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.DormantDate;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.Affiliated;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.AffiliatedWith;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.Suspended;
                                                    worksheet.Cells[incRowExcel, 17].Value = Convert.ToDateTime(rsDetail.NPWP).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.RegistrationNPWP;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.Email;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.PhoneNumber;
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.MobilePhone;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.Fax;
                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail.Country;
                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail.Nationality;
                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail.BankRDN;
                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail.RDNAccountName;
                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail.RDNAccountNumber;
                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail.BankName1;
                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail.BankAccountName1;
                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail.BankAccountNumber1;
                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail.BankBranchName1;
                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail.Currency1;
                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail.BICCode1;
                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail.BIMemberCode1;

                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail.BankName2;
                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail.BankAccountName2;
                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail.BankAccountNumber2;
                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail.BankBranchName2;
                                                    worksheet.Cells[incRowExcel, 39].Value = rsDetail.Currency2;
                                                    worksheet.Cells[incRowExcel, 40].Value = rsDetail.BICCode2;
                                                    worksheet.Cells[incRowExcel, 41].Value = rsDetail.BIMemberCode2;

                                                    worksheet.Cells[incRowExcel, 42].Value = rsDetail.BankName3;
                                                    worksheet.Cells[incRowExcel, 43].Value = rsDetail.BankAccountName3;
                                                    worksheet.Cells[incRowExcel, 44].Value = rsDetail.BankAccountNumber3;
                                                    worksheet.Cells[incRowExcel, 45].Value = rsDetail.BankBranchName3;
                                                    worksheet.Cells[incRowExcel, 46].Value = rsDetail.Currency3;
                                                    worksheet.Cells[incRowExcel, 47].Value = rsDetail.BICCode3;
                                                    worksheet.Cells[incRowExcel, 48].Value = rsDetail.BIMemberCode3;

                                                    worksheet.Cells[incRowExcel, 49].Value = rsDetail.FirstNameInd;
                                                    worksheet.Cells[incRowExcel, 50].Value = rsDetail.MiddleNameInd;
                                                    worksheet.Cells[incRowExcel, 51].Value = rsDetail.LastNameInd;
                                                    worksheet.Cells[incRowExcel, 52].Value = rsDetail.BirthPlace;
                                                    worksheet.Cells[incRowExcel, 53].Value = Convert.ToDateTime(rsDetail.CountryOfBirth).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 54].Value = rsDetail.DOB;
                                                    worksheet.Cells[incRowExcel, 55].Value = rsDetail.GenderSex;
                                                    worksheet.Cells[incRowExcel, 56].Value = rsDetail.MaritalStatus;
                                                    worksheet.Cells[incRowExcel, 57].Value = rsDetail.Occupation;
                                                    worksheet.Cells[incRowExcel, 58].Value = rsDetail.Education;
                                                    worksheet.Cells[incRowExcel, 59].Value = rsDetail.Religion;
                                                    worksheet.Cells[incRowExcel, 60].Value = rsDetail.IncomePerAnnum;
                                                    worksheet.Cells[incRowExcel, 61].Value = rsDetail.SourceOfFunds;
                                                    worksheet.Cells[incRowExcel, 62].Value = rsDetail.InvestmentObjectives;
                                                    worksheet.Cells[incRowExcel, 63].Value = rsDetail.MotherMaidenName;
                                                    worksheet.Cells[incRowExcel, 64].Value = rsDetail.SpouseName;
                                                    worksheet.Cells[incRowExcel, 65].Value = rsDetail.SpouseOccupation;
                                                    worksheet.Cells[incRowExcel, 66].Value = rsDetail.Heir;
                                                    worksheet.Cells[incRowExcel, 67].Value = rsDetail.HeirRelation;
                                                    worksheet.Cells[incRowExcel, 68].Value = rsDetail.NatureOfBusiness;
                                                    worksheet.Cells[incRowExcel, 69].Value = rsDetail.NatureOfBusinessDesc;
                                                    worksheet.Cells[incRowExcel, 70].Value = rsDetail.PoliticallyExposed;
                                                    worksheet.Cells[incRowExcel, 71].Value = rsDetail.PoliticallyExposedDesc;
                                                    worksheet.Cells[incRowExcel, 72].Value = rsDetail.OtherHomePhone;
                                                    worksheet.Cells[incRowExcel, 73].Value = rsDetail.OtherCellPhone;
                                                    worksheet.Cells[incRowExcel, 74].Value = rsDetail.OtherFax;
                                                    worksheet.Cells[incRowExcel, 75].Value = rsDetail.OtherEmail;
                                                    worksheet.Cells[incRowExcel, 76].Value = rsDetail.CorrespondenceAddress;
                                                    worksheet.Cells[incRowExcel, 77].Value = rsDetail.CorrespondenceCity;
                                                    worksheet.Cells[incRowExcel, 78].Value = rsDetail.CorrespondenceZipCode;
                                                    worksheet.Cells[incRowExcel, 79].Value = rsDetail.Propinsi;
                                                    worksheet.Cells[incRowExcel, 80].Value = rsDetail.CorrespondenceRT;
                                                    worksheet.Cells[incRowExcel, 81].Value = rsDetail.CorrespondenceRW;
                                                    worksheet.Cells[incRowExcel, 82].Value = rsDetail.CountryofCorrespondence;
                                                    worksheet.Cells[incRowExcel, 83].Value = rsDetail.DomicileAddress;
                                                    worksheet.Cells[incRowExcel, 84].Value = rsDetail.KodeDomisiliPropinsi;
                                                    worksheet.Cells[incRowExcel, 85].Value = rsDetail.DomicileCity;
                                                    worksheet.Cells[incRowExcel, 86].Value = rsDetail.DomicileZipCode;
                                                    worksheet.Cells[incRowExcel, 87].Value = rsDetail.DomicileRT;
                                                    worksheet.Cells[incRowExcel, 88].Value = rsDetail.DomicileRW;
                                                    worksheet.Cells[incRowExcel, 89].Value = rsDetail.CountryofDomicile;
                                                    worksheet.Cells[incRowExcel, 90].Value = rsDetail.IdentityAddress1;
                                                    worksheet.Cells[incRowExcel, 91].Value = rsDetail.IdentityCity1;
                                                    worksheet.Cells[incRowExcel, 92].Value = rsDetail.IdentityZipCode1;
                                                    worksheet.Cells[incRowExcel, 93].Value = rsDetail.IdentityProvince1;
                                                    worksheet.Cells[incRowExcel, 94].Value = rsDetail.IdentityCountry1;
                                                    worksheet.Cells[incRowExcel, 95].Value = rsDetail.IdentityAddress2;
                                                    worksheet.Cells[incRowExcel, 96].Value = rsDetail.IdentityCity2;
                                                    worksheet.Cells[incRowExcel, 97].Value = rsDetail.IdentityZipCode2;
                                                    worksheet.Cells[incRowExcel, 98].Value = rsDetail.IdentityProvince2;
                                                    worksheet.Cells[incRowExcel, 99].Value = rsDetail.IdentityCountry2;
                                                    worksheet.Cells[incRowExcel, 100].Value = rsDetail.IdentityAddress3;
                                                    worksheet.Cells[incRowExcel, 101].Value = rsDetail.IdentityCity3;
                                                    worksheet.Cells[incRowExcel, 102].Value = rsDetail.IdentityZipCode3;
                                                    worksheet.Cells[incRowExcel, 103].Value = rsDetail.IdentityProvince3;
                                                    worksheet.Cells[incRowExcel, 104].Value = rsDetail.IdentityCountry3;
                                                    worksheet.Cells[incRowExcel, 105].Value = rsDetail.IdentityType1;
                                                    worksheet.Cells[incRowExcel, 106].Value = rsDetail.IdentityNumber1;
                                                    worksheet.Cells[incRowExcel, 107].Value = rsDetail.Identity1RT;
                                                    worksheet.Cells[incRowExcel, 108].Value = rsDetail.Identity1RW;
                                                    worksheet.Cells[incRowExcel, 109].Value = Convert.ToDateTime(rsDetail.RegistrationDateIdentitasInd1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 110].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 111].Value = rsDetail.IdentityType2;
                                                    worksheet.Cells[incRowExcel, 112].Value = rsDetail.IdentityNumber2;
                                                    worksheet.Cells[incRowExcel, 113].Value = Convert.ToDateTime(rsDetail.RegistrationDateIdentitasInd2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 114].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 115].Value = rsDetail.IdentityType3;
                                                    worksheet.Cells[incRowExcel, 116].Value = rsDetail.IdentityNumber3;
                                                    worksheet.Cells[incRowExcel, 117].Value = Convert.ToDateTime(rsDetail.RegistrationDateIdentitasInd3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 118].Value = Convert.ToDateTime(rsDetail.ExpiredDateIdentitasInd3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 119].Value = rsDetail.FATCAStatus;
                                                    worksheet.Cells[incRowExcel, 120].Value = rsDetail.TIN;
                                                    worksheet.Cells[incRowExcel, 121].Value = rsDetail.TINIssuanceCountry;
                                                    worksheet.Cells[incRowExcel, 122].Value = rsDetail.GIIN;
                                                    worksheet.Cells[incRowExcel, 123].Value = rsDetail.SubstantialOwnerName;
                                                    worksheet.Cells[incRowExcel, 124].Value = rsDetail.SubstantialOwnerAddress;
                                                    worksheet.Cells[incRowExcel, 125].Value = rsDetail.SubstantialOwnerTIN;
                                                    worksheet.Cells[incRowExcel, 126].Value = rsDetail.AlamatKantorInd;
                                                    worksheet.Cells[incRowExcel, 127].Value = rsDetail.KodeKotaKantorInd;
                                                    worksheet.Cells[incRowExcel, 128].Value = rsDetail.KodePosKantorInd;
                                                    worksheet.Cells[incRowExcel, 129].Value = rsDetail.KodePropinsiKantorInd;
                                                    worksheet.Cells[incRowExcel, 130].Value = rsDetail.KodeCountryofKantor;
                                                    worksheet.Cells[incRowExcel, 131].Value = rsDetail.Description;

                                                    worksheet.Cells[incRowExcel, 132].Value = rsDetail.EntryUsersID;
                                                    worksheet.Cells[incRowExcel, 133].Value = rsDetail.EntryTime;
                                                    worksheet.Cells[incRowExcel, 134].Value = rsDetail.UpdateUsersID;
                                                    worksheet.Cells[incRowExcel, 135].Value = rsDetail.UpdateTime;
                                                    worksheet.Cells[incRowExcel, 136].Value = rsDetail.ApprovedUsersID;
                                                    worksheet.Cells[incRowExcel, 137].Value = rsDetail.ApprovedTime;
                                                    worksheet.Cells[incRowExcel, 138].Value = rsDetail.VoidUsersID;
                                                    worksheet.Cells[incRowExcel, 139].Value = rsDetail.VoidTime;
                                                    worksheet.Cells[incRowExcel, 140].Value = rsDetail.SuspendBy;
                                                    worksheet.Cells[incRowExcel, 141].Value = rsDetail.SuspendTime;
                                                    worksheet.Cells[incRowExcel, 142].Value = rsDetail.UnSuspendBy;
                                                    worksheet.Cells[incRowExcel, 143].Value = rsDetail.UnSuspendTime;
                                                    _endRowDetail = incRowExcel;
                                                    incRowExcel++;

                                                    //worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":EM" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.InvestorType;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.InternalCategory;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.InternalName;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.SellingAgent;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.NPWP;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.RegistrationNPWP;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Email;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.PhoneNumber;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.MobilePhone;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.Fax;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.SID;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.IFUACode;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.InvestorsRiskProfile;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.KYCRiskProfile;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.AssetOwner;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.StatementType;
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.SellingAgentCode;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.DormantDate;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.Description;
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.Affiliated;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.AffiliatedWith;
                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail.Suspended;
                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail.BankName1;
                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail.BankAccountName1;
                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail.BankAccountNumber1;
                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail.BankBranchName1;
                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail.Currency1;
                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail.BICCode1;
                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail.BIMemberCode1;
                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail.BankName2;
                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail.BankAccountName2;
                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail.BankAccountNumber2;
                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail.BankBranchName2;
                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail.Currency2;
                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail.BICCode2;
                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail.BIMemberCode2;
                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail.BankName3;
                                                    worksheet.Cells[incRowExcel, 39].Value = rsDetail.BankAccountName3;
                                                    worksheet.Cells[incRowExcel, 40].Value = rsDetail.BankAccountNumber3;
                                                    worksheet.Cells[incRowExcel, 41].Value = rsDetail.BankBranchName3;
                                                    worksheet.Cells[incRowExcel, 42].Value = rsDetail.Currency3;
                                                    worksheet.Cells[incRowExcel, 43].Value = rsDetail.BICCode3;
                                                    worksheet.Cells[incRowExcel, 44].Value = rsDetail.BIMemberCode3;
                                                    worksheet.Cells[incRowExcel, 45].Value = rsDetail.BankRDN;
                                                    worksheet.Cells[incRowExcel, 46].Value = rsDetail.RDNAccountName;
                                                    worksheet.Cells[incRowExcel, 47].Value = rsDetail.RDNAccountNumber;
                                                    worksheet.Cells[incRowExcel, 48].Value = rsDetail.CompanyName;
                                                    worksheet.Cells[incRowExcel, 49].Value = rsDetail.CompanyAddress;
                                                    worksheet.Cells[incRowExcel, 50].Value = rsDetail.CompanyZipCode;
                                                    worksheet.Cells[incRowExcel, 51].Value = rsDetail.CompanyCity;
                                                    worksheet.Cells[incRowExcel, 52].Value = rsDetail.CompanyLegalDomicile;
                                                    worksheet.Cells[incRowExcel, 53].Value = rsDetail.CountryofDomicile;
                                                    worksheet.Cells[incRowExcel, 54].Value = rsDetail.CompanyType;
                                                    worksheet.Cells[incRowExcel, 55].Value = rsDetail.CompanyCharacteristic;
                                                    worksheet.Cells[incRowExcel, 56].Value = rsDetail.CompanyIncomePerAnnum;
                                                    worksheet.Cells[incRowExcel, 57].Value = rsDetail.CompanySourceOfFunds;
                                                    worksheet.Cells[incRowExcel, 58].Value = rsDetail.CompanyInvestmentObjective;
                                                    worksheet.Cells[incRowExcel, 59].Value = rsDetail.SKDNumber;
                                                    worksheet.Cells[incRowExcel, 60].Value = Convert.ToDateTime(rsDetail.ExpiredDateSKD).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 61].Value = rsDetail.ArticleOfAssociation;
                                                    worksheet.Cells[incRowExcel, 62].Value = rsDetail.SIUPNumber;
                                                    worksheet.Cells[incRowExcel, 63].Value = Convert.ToDateTime(rsDetail.SIUPExpirationDate).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 64].Value = rsDetail.FirstNameOfficer1;
                                                    worksheet.Cells[incRowExcel, 65].Value = rsDetail.MiddleNameOfficer1;
                                                    worksheet.Cells[incRowExcel, 66].Value = rsDetail.LastNameOfficer1;
                                                    worksheet.Cells[incRowExcel, 67].Value = rsDetail.PositionOfficer1;
                                                    worksheet.Cells[incRowExcel, 68].Value = rsDetail.PhoneNumberOfficer1;
                                                    worksheet.Cells[incRowExcel, 69].Value = rsDetail.EmailOfficer1;
                                                    worksheet.Cells[incRowExcel, 70].Value = rsDetail.IDType1Officer1;
                                                    worksheet.Cells[incRowExcel, 71].Value = rsDetail.IDNumber1Officer1;
                                                    worksheet.Cells[incRowExcel, 72].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 73].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 74].Value = rsDetail.IDType2Officer1;
                                                    worksheet.Cells[incRowExcel, 75].Value = rsDetail.IDNumber2Officer1;
                                                    worksheet.Cells[incRowExcel, 76].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 77].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 78].Value = rsDetail.IDType3Officer1;
                                                    worksheet.Cells[incRowExcel, 79].Value = rsDetail.IDNumber3Officer1;
                                                    worksheet.Cells[incRowExcel, 80].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 81].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 82].Value = rsDetail.IDType4Officer1;
                                                    worksheet.Cells[incRowExcel, 83].Value = rsDetail.IDNumber4Officer1;
                                                    worksheet.Cells[incRowExcel, 84].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 85].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer1).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 86].Value = rsDetail.FirstNameOfficer2;
                                                    worksheet.Cells[incRowExcel, 87].Value = rsDetail.MiddleNameOfficer2;
                                                    worksheet.Cells[incRowExcel, 88].Value = rsDetail.LastNameOfficer2;
                                                    worksheet.Cells[incRowExcel, 89].Value = rsDetail.PositionOfficer2;
                                                    worksheet.Cells[incRowExcel, 90].Value = rsDetail.IDType1Officer2;
                                                    worksheet.Cells[incRowExcel, 91].Value = rsDetail.IDNumber1Officer2;
                                                    worksheet.Cells[incRowExcel, 92].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 93].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 94].Value = rsDetail.IDType2Officer2;
                                                    worksheet.Cells[incRowExcel, 95].Value = rsDetail.IDNumber2Officer2;
                                                    worksheet.Cells[incRowExcel, 96].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 97].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 98].Value = rsDetail.IDType3Officer2;
                                                    worksheet.Cells[incRowExcel, 99].Value = rsDetail.IDNumber3Officer2;
                                                    worksheet.Cells[incRowExcel, 100].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 101].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 102].Value = rsDetail.IDType4Officer2;
                                                    worksheet.Cells[incRowExcel, 103].Value = rsDetail.IDNumber4Officer2;
                                                    worksheet.Cells[incRowExcel, 104].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 105].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer2).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 106].Value = Convert.ToDateTime(rsDetail.EstablishmentDate).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 107].Value = rsDetail.EstablishmentPlace;
                                                    worksheet.Cells[incRowExcel, 108].Value = rsDetail.CountryofEstablishment;
                                                    worksheet.Cells[incRowExcel, 109].Value = rsDetail.CityOfEstablishment;
                                                    worksheet.Cells[incRowExcel, 110].Value = rsDetail.CountryofCompany;
                                                    worksheet.Cells[incRowExcel, 111].Value = rsDetail.CompanyCityName;
                                                    worksheet.Cells[incRowExcel, 112].Value = rsDetail.CompanyAddress;
                                                    worksheet.Cells[incRowExcel, 113].Value = rsDetail.CompanyZipCode;
                                                    worksheet.Cells[incRowExcel, 114].Value = rsDetail.BusinessPhone;
                                                    worksheet.Cells[incRowExcel, 115].Value = rsDetail.AssetFor1Year;
                                                    worksheet.Cells[incRowExcel, 116].Value = rsDetail.AssetFor2Year;
                                                    worksheet.Cells[incRowExcel, 117].Value = rsDetail.AssetFor3Year;
                                                    worksheet.Cells[incRowExcel, 118].Value = rsDetail.OperatingProfitFor1Year;
                                                    worksheet.Cells[incRowExcel, 119].Value = rsDetail.OperatingProfitFor2Year;
                                                    worksheet.Cells[incRowExcel, 120].Value = rsDetail.OperatingProfitFor3Year;
                                                    worksheet.Cells[incRowExcel, 121].Value = rsDetail.FirstNameOfficer3;
                                                    worksheet.Cells[incRowExcel, 122].Value = rsDetail.MiddleNameOfficer3;
                                                    worksheet.Cells[incRowExcel, 123].Value = rsDetail.LastNameOfficer3;
                                                    worksheet.Cells[incRowExcel, 124].Value = rsDetail.PositionOfficer3;
                                                    worksheet.Cells[incRowExcel, 125].Value = rsDetail.IDType1Officer3;
                                                    worksheet.Cells[incRowExcel, 126].Value = rsDetail.IDNumber1Officer3;
                                                    worksheet.Cells[incRowExcel, 127].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 128].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 129].Value = rsDetail.IDType2Officer3;
                                                    worksheet.Cells[incRowExcel, 130].Value = rsDetail.IDNumber2Officer3;
                                                    worksheet.Cells[incRowExcel, 131].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 132].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 133].Value = rsDetail.IDType3Officer3;
                                                    worksheet.Cells[incRowExcel, 134].Value = rsDetail.IDNumber3Officer3;
                                                    worksheet.Cells[incRowExcel, 135].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 136].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 137].Value = rsDetail.IDType4Officer3;
                                                    worksheet.Cells[incRowExcel, 138].Value = rsDetail.IDNumber4Officer3;
                                                    worksheet.Cells[incRowExcel, 139].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 140].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer3).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 141].Value = rsDetail.FirstNameOfficer4;
                                                    worksheet.Cells[incRowExcel, 142].Value = rsDetail.MiddleNameOfficer4;
                                                    worksheet.Cells[incRowExcel, 143].Value = rsDetail.LastNameOfficer4;
                                                    worksheet.Cells[incRowExcel, 144].Value = rsDetail.PositionOfficer4;
                                                    worksheet.Cells[incRowExcel, 145].Value = rsDetail.IDType1Officer4;
                                                    worksheet.Cells[incRowExcel, 146].Value = rsDetail.IDNumber1Officer4;
                                                    worksheet.Cells[incRowExcel, 147].Value = Convert.ToDateTime(rsDetail.IDRegDate1Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 148].Value = Convert.ToDateTime(rsDetail.IDExpireDate1Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 149].Value = rsDetail.IDType2Officer4;
                                                    worksheet.Cells[incRowExcel, 150].Value = rsDetail.IDNumber2Officer4;
                                                    worksheet.Cells[incRowExcel, 151].Value = Convert.ToDateTime(rsDetail.IDRegDate2Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 152].Value = Convert.ToDateTime(rsDetail.IDExpireDate2Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 153].Value = rsDetail.IDType3Officer4;
                                                    worksheet.Cells[incRowExcel, 154].Value = rsDetail.IDNumber3Officer4;
                                                    worksheet.Cells[incRowExcel, 155].Value = Convert.ToDateTime(rsDetail.IDRegDate3Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 156].Value = Convert.ToDateTime(rsDetail.IDExpireDate3Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 157].Value = rsDetail.IDType4Officer4;
                                                    worksheet.Cells[incRowExcel, 158].Value = rsDetail.IDNumber4Officer4;
                                                    worksheet.Cells[incRowExcel, 159].Value = Convert.ToDateTime(rsDetail.IDRegDate4Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 160].Value = Convert.ToDateTime(rsDetail.IDExpireDate4Officer4).ToString("dd/MM/yyyy");
                                                    worksheet.Cells[incRowExcel, 161].Value = rsDetail.FATCAStatus;
                                                    worksheet.Cells[incRowExcel, 162].Value = rsDetail.TIN;
                                                    worksheet.Cells[incRowExcel, 163].Value = rsDetail.TINIssuanceCountry;
                                                    worksheet.Cells[incRowExcel, 164].Value = rsDetail.GIIN;
                                                    worksheet.Cells[incRowExcel, 165].Value = rsDetail.SubstantialOwnerName;
                                                    worksheet.Cells[incRowExcel, 166].Value = rsDetail.SubstantialOwnerAddress;
                                                    worksheet.Cells[incRowExcel, 167].Value = rsDetail.SubstantialOwnerTIN;
                                                    worksheet.Cells[incRowExcel, 168].Value = rsDetail.EntryUsersID;
                                                    worksheet.Cells[incRowExcel, 169].Value = rsDetail.EntryTime;
                                                    worksheet.Cells[incRowExcel, 170].Value = rsDetail.UpdateUsersID;
                                                    worksheet.Cells[incRowExcel, 171].Value = rsDetail.UpdateTime;
                                                    worksheet.Cells[incRowExcel, 172].Value = rsDetail.ApprovedUsersID;
                                                    worksheet.Cells[incRowExcel, 173].Value = rsDetail.ApprovedTime;
                                                    worksheet.Cells[incRowExcel, 174].Value = rsDetail.VoidUsersID;
                                                    worksheet.Cells[incRowExcel, 175].Value = rsDetail.VoidTime;
                                                    worksheet.Cells[incRowExcel, 176].Value = rsDetail.SuspendBy;
                                                    worksheet.Cells[incRowExcel, 177].Value = rsDetail.SuspendTime;
                                                    worksheet.Cells[incRowExcel, 178].Value = rsDetail.UnSuspendBy;
                                                    worksheet.Cells[incRowExcel, 179].Value = rsDetail.UnSuspendTime;
                                                    _endRowDetail = incRowExcel;
                                                    incRowExcel++;
                                                    worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _endRowDetail + ":FW" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                }
                                                //area detail


                                            }
                                            incRowExcel = incRowExcel + 2;

                                            //_endRowDetail = incRowExcel;
                                            //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                        }

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.Cells.AutoFitColumns(0);
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        // worksheet.PrinterSettings.FitToPage = true;
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        return true;
                                    }

                                }
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public void Cashier_ApproveBySelected(string _usersID, string _permissionID, DateTime _dateFrom, DateTime _dateTo, string _type, ParamCashierBySelected _paramCashierBySelected)
        {
            try
            {
                string paramCashierPK = "";
                if (!_host.findString(_paramCashierBySelected.stringCashierPaymentSelected.ToLower(), "0", ",") && !string.IsNullOrEmpty(_paramCashierBySelected.stringCashierPaymentSelected))
                {
                    paramCashierPK = " And CashierPK in (" + _paramCashierBySelected.stringCashierPaymentSelected + ") ";
                }
                else
                {
                    paramCashierPK = " And CashierPK in (0) ";
                }

                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"

Declare @PeriodPK int
select @PeriodPK = PeriodPK from period where status in (1,2) and @DateFrom between DateFrom and DateTo

                     Declare @IPAddress nvarchar(50) select @IPAddress = IPAddress from Users where ID = @UsersID and Status = 2      
                     Insert into Activity(Time,PermissionID,ObjectTable,ObjectTablePK,Status,Message,UsersID,IPAddress,LastUpdate)      
                     Select @Time,@PermissionID,'Cashier',CashierPK,1,'Approve by Selected Data',@UsersID,@IPAddress,@Time  from Cashier where ValueDate between @DateFrom and @DateTo and Status = 1 " + paramCashierPK + @" and type = @type  and PeriodPK = @PeriodpK
                     

Declare @CashierID bigint  
                    declare @CValueDate datetime
                    Declare @CType nvarchar(100)
                    Declare @CPeriodPK int  

DECLARE Header CURSOR FOR             
    SELECT distinct CashierID,ValueDate,Type,PeriodPK FROM Cashier    
    WHERE status = 1  " + paramCashierPK + @" and ValueDate between @DateFrom and @DateTo   and PeriodPK = @PeriodpK and Type = @type
    order by ValueDate Asc  
OPEN Header             
    FETCH NEXT FROM Header INTO @CashierID,@CValueDate,@Ctype,@CPeriodPK
WHILE @@FETCH_STATUS = 0              
BEGIN      



Declare @valueDateForRef datetime
Declare @typeForRef nvarchar(100)
Declare @PeriodPKForRef int
Declare @Ref nvarchar(100)

set @Ref = ''

select top 1 @valueDateForRef = ValueDate,@typeForRef = Type,@PeriodPKForRef = PeriodPK, @Ref = Reference  From Cashier where CashierID = @CashierID and Type = @Ctype
and PeriodPK = @CPeriodPK and status not in (3,4)
				
if isnull(@Ref,'') = '' or right(@Ref,4) != REPLACE(RIGHT(CONVERT(VARCHAR(8), @valueDateForRef, 3), 5) ,'/','') 
BEGIN
	Declare @LastNo int   
    Declare @Reference nvarchar(20) 
      
    if exists(Select Top 1 * from cashierReference where Type = @typeForRef And PeriodPK = @PeriodPKForRef   
        
    and substring(right(reference,4),1,2) = month(@valueDateForRef))       
    
    BEGIN       
     

        
    Select @LastNo = max(No) + 1 From CashierReference where Type = @type And PeriodPK = @periodPK and   
    
    substring(right(reference,4),1,2) = month(@valueDateForRef)       
    
    Set @Reference =  Case when @type = 'CP' then 'BV' else    
    
    Case When @type = 'CR' then 'BR'  else 'PK' END END
    
    + '/' + Cast(@LastNo as nvarchar(10)) + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @valueDateForRef, 3), 5) ,'/','')       

	      
    
    Update CashierReference Set Reference = @Reference, No = @LastNo where Type = @typeForRef And PeriodPK = @PeriodPKForRef   
        
    and substring(right(reference,4),1,2) = month(@valueDateForRef)    
    
END    
    
ELSE BEGIN       
    
   Set @Reference = Case when @typeForRef = 'CP' then 'BV' 
                                    When @typeForRef = 'CR' then 'BR'   
                                        When @typeForRef = 'AR' then 'AR' 
                                            when @typeForRef = 'AP' then 'AP'    
                                                when @typeForRef = 'ADJ' then 'ADJ' 
                                                    when @typeForRef = 'INV' then 'INV' else 'IN' END + '/1' + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @valueDateForRef, 3), 5) ,'/','')    
    
    Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No)    
        
    Select isnull(Max(CashierReferencePK),0) +  1,@PeriodPKForRef,@typeForRef,@Reference,1 from CashierReference   
    
    END       

	update Cashier set Reference = @Reference where CashierID = @CashierID and Type = @typeForRef and PeriodPK = @PeriodPKForRef 
END 

  FETCH NEXT FROM Header INTO @CashierID ,@CValueDate,@CType ,@CPeriodPK
END          
CLOSE Header       
DEALLOCATE Header  




                     update Cashier set status = 2,ApprovedUsersID = @UsersID,ApprovedTime = @Time,LastUpdate=@Time 
                     where CashierID in ( Select CashierID from Cashier where ValueDate between @DateFrom and @DateTo and Status = 1 " + paramCashierPK + @" and type = @type and PeriodPK = @PeriodpK)   and Status = 1  and type = @type   and PeriodPK = @PeriodpK
                     
                     Update Cashier set status= 3,VoidUsersID=@UsersID,VoidTime=@Time,LastUpdate=@Time  where CashierID in (Select CashierID from Cashier where ValueDate between @DateFrom and @DateTo and Status = 4  and type = @type and PeriodPK = @PeriodpK)    
                     and Status = 4 " + paramCashierPK + @" and type = @type and PeriodPK = @PeriodpK
     
 

                        ";
                        cmd.Parameters.AddWithValue("@PermissionID", _permissionID);
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@Time", _datetimeNow);
                        cmd.Parameters.AddWithValue("@type", _type);
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public List<Cashier> Cashier_SelectFromTo(int _status, string _type, DateTime _dateFrom, DateTime _dateTo)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Cashier> L_Cashier = new List<Cashier>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_status != 9)
                        {

                            cmd.CommandText = @"Select case when A.status=1 then 'PENDING' else Case When A.status = 2 then 'APPROVED' else Case when A.Status = 3 then 'VOID' else 'WAITING' END END END StatusDesc  
                            ,case when Reference is not null and Reference <> '' then cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) else 0 end RefNo,A.Reference,B.ID PeriodID,C.ID OfficeID,D.ID DepartmentID,E.ID AgentID,F.ID CounterpartID,  
                            G.ID DebitCurrencyID,H.ID CreditCurrencyID,I.ID DebitCashRefID,I.Name DebitCashRefName, J.ID CreditCashRefID,J.Name CreditCashRefName,     
                            K.ID DebitAccountID,K.Name DebitAccountName,L.ID CreditAccountID,L.Name CreditAccountName, M.ID ConsigneeID, N.ID InstrumentID,N.Name InstrumentName,    
                            A.* From Cashier A Left join      
                            Period B on A.PeriodPK = B.PeriodPK and B.Status = 2 Left join      
                            Office C on A.OfficePK = C.OfficePK and C.Status = 2 Left join      
                            Department D on A.DepartmentPK = D.DepartmentPK and D.Status = 2 Left join      
                            Agent E on A.AgentPK = E.AgentPK and E.Status = 2 Left join      
                            Counterpart F on A.CounterpartPK = F.CounterpartPK and F.Status = 2 Left join     
                            Currency G on A.DebitCurrencyPK = G.CurrencyPK and G.Status = 2 Left join      
                            Currency H on A.CreditCurrencyPK = H.CurrencyPK and H.Status = 2 Left join      
                            CashRef I on A.DebitCashRefPK = I.CashRefPK and I.Status = 2 Left join      
                            Cashref J on A.CreditCashRefPK = J.CashRefPK and J.Status = 2 Left join      
                            Account K on A.DebitAccountPK = K.AccountPK and K.Status = 2 Left join      
                            Account L on A.CreditAccountPK = L.AccountPK and L.Status = 2 Left join     
                            Consignee M on A.ConsigneePK = M.ConsigneePK and M.Status = 2 Left join    
                            Instrument N on A.InstrumentPK = N.InstrumentPK and N.Status = 2    
                            Where  A.Status = @Status and A.Type= @Type and A.ValueDate between @DateFrom and @DateTo order By RefNo";
                            cmd.Parameters.AddWithValue("@Status", _status);
                            cmd.Parameters.AddWithValue("@Type", _type);
                            cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        }
                        else
                        {
                            cmd.CommandText = @"Select case when A.status=1 then 'PENDING' else Case When A.status = 2 then 'APPROVED' else Case when A.Status = 3 then 'VOID' else 'WAITING' END END END StatusDesc, 
                            case when Reference is not null and Reference <> '' then cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) else 0 end RefNo,A.Reference,B.ID PeriodID,C.ID OfficeID,D.ID DepartmentID,E.ID AgentID,F.ID CounterpartID,  
                            G.ID DebitCurrencyID,H.ID CreditCurrencyID,I.ID DebitCashRefID,I.Name DebitCashRefName, J.ID CreditCashRefID,J.Name CreditCashRefName,     
                            K.ID DebitAccountID,K.Name DebitAccountName,L.ID CreditAccountID,L.Name CreditAccountName, M.ID ConsigneeID, N.ID InstrumentID,N.Name InstrumentName,    
                            A.* From Cashier A Left join      
                            Period B on A.PeriodPK = B.PeriodPK and B.Status = 2 Left join      
                            Office C on A.OfficePK = C.OfficePK and C.Status = 2 Left join      
                            Department D on A.DepartmentPK = D.DepartmentPK and D.Status = 2 Left join      
                            Agent E on A.AgentPK = E.AgentPK and E.Status = 2 Left join      
                            Counterpart F on A.CounterpartPK = F.CounterpartPK and F.Status = 2 Left join     
                            Currency G on A.DebitCurrencyPK = G.CurrencyPK and G.Status = 2 Left join      
                            Currency H on A.CreditCurrencyPK = H.CurrencyPK and H.Status = 2 Left join      
                            CashRef I on A.DebitCashRefPK = I.CashRefPK and I.Status = 2 Left join      
                            Cashref J on A.CreditCashRefPK = J.CashRefPK and J.Status = 2 Left join      
                            Account K on A.DebitAccountPK = K.AccountPK and K.Status = 2 Left join      
                            Account L on A.CreditAccountPK = L.AccountPK and L.Status = 2 Left join     
                            Consignee M on A.ConsigneePK = M.ConsigneePK and M.Status = 2 Left join    
                            Instrument N on A.InstrumentPK = N.InstrumentPK and N.Status = 2  
                            Where A.Type= @Type and ValueDate between @DateFrom and @DateTo order By RefNo";

                            cmd.Parameters.AddWithValue("@Type", _type);
                            cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        }

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Cashier.Add(setCashier(dr));
                                }
                            }
                            return L_Cashier;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public string CashierReference_GenerateNewReference(string _type, int _periodPK, DateTime _valueDate)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText =
                      @" 

                     Declare @LastNo int   
                     Declare @Reference nvarchar(20) 
      
                     if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK    
        
                     and substring(right(reference,4),1,2) = month(@ValueDate))       
    
                     BEGIN       
    
                     Select @LastNo = max(No) +  1 From CashierReference where Type = @type And PeriodPK = @periodPK and   
        
                     substring(right(reference,4),1,2) = month(@ValueDate)       
        

                    IF (@Type = 'INV')
                    BEGIN
                        Set @Reference =  Cast(@LastNo as nvarchar(10)) + '/'  + Case when @type = 'CP' then 'OUT' else    
        
                        Case When @type = 'AR' then 'AR' else Case when @type = 'AP' then 'AP' else    
        
                        case when @type = 'ADJ' then 'ADJ' Else Case when @Type = 'INV' then 'INV' else 'IN' END END END END END   
        
                        + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @ValueDate, 3), 5) ,'/','')    


                    END
                    ELSE
                    BEGIN
                        Set @Reference =  Case when @type = 'CP' then 'BV' else    
    
                        Case When @type = 'CR' then 'BR'  else 'JV' END END
    
                        + '/' + Cast(@LastNo as nvarchar(10)) + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @ValueDate, 3), 5) ,'/','')
                    END

                       
    
                     Update CashierReference Set Reference = @Reference, No = @LastNo where Type = @type And PeriodPK = @periodPK    
        
                     and substring(right(reference,4),1,2) = month(@ValueDate)    
    
                    END    
    
                    ELSE BEGIN       

                    IF (@Type = 'INV')
                    BEGIN
    
                        Set @Reference = '1/' +  Case when @type = 'CP' then 'OUT' else    
        
                        Case When @type = 'AR' then 'AR' else Case when @type = 'AP' then 'AP' else    
       
                        case when @type = 'ADJ' then 'ADJ' Else Case when @Type = 'INV' then 'INV' else 'IN' END END END END END + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @ValueDate, 3), 5) ,'/','')    
    


                    END
                    ELSE
                    BEGIN
		                Set @Reference = Case when @type = 'CP' then 'BV' 
                                        When @type = 'CR' then 'BR'   
                                            When @type = 'AR' then 'AR' 
                                                when @type = 'AP' then 'AP'    
                                                    when @type = 'ADJ' then 'JV' 
                                                        when @type = 'INV' then 'INV' else 'IN' END + '/1' + '/' +  REPLACE(RIGHT(CONVERT(VARCHAR(8), @ValueDate, 3), 5) ,'/','')    
    
                 
                    END


                      Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No)    
        
                      Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,@type,@Reference,1 from CashierReference   
    
                     END       
    
                     Select isnull(@Reference,'')   LastReference ";


                        cmd.Parameters.AddWithValue("@type", _type);
                        cmd.Parameters.AddWithValue("@periodPK", _periodPK);
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (!dr.Read())
                            {
                                return "";
                            }
                            else
                            {
                                return Convert.ToString(dr["LastReference"]);
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                throw err;
            }

        }


        public string FundClient_GenerateKPD(SInvestRpt _sinvestRpt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

                       --drop table #Text--
                        create table #Text(      
                        [ResultText] [nvarchar](1000)  NULL          
                        )                        
        
                        truncate table #Text --         

                        --drop Table #KPD--
                        Create Table #KPD
(AUM nvarchar(50),CashAmount nvarchar(50),InstrumentTypePK int,PK int,KodeNasabah nvarchar(50),NamaNasabah nvarchar(50) ,NomorKontrak nvarchar(50),TanggalKontrak nvarchar(50),TanggalJatuhTempo nvarchar(50),
NomorAdendum nvarchar(50), TanggalAdendum nvarchar(50),NilaiInvestasiAwalIDR nvarchar(50), NilaiInvestasiAwalNonIDR nvarchar(50),NilaiInvestasiAkhir nvarchar(50),
NilaiInvestasiAkhirNonIDR nvarchar(50), JenisEfek nvarchar(50), DNatauLN int,JumlahEfek nvarchar(50),NilaiPembelian nvarchar(50), NilaiNominal nvarchar(50),
HPW nvarchar(50), Deposito nvarchar(50), TotalNilai nvarchar(50),KodeBK  nvarchar(50), type int,KodeSaham nvarchar(50),MarketValue nvarchar(50),SID nvarchar(50)
)

DECLARE A CURSOR FOR 
select FundPK
from Fund
where [Status] = 2 and FundTypeInternal = 2
Open A
Fetch Next From A
Into @FundPK

While @@FETCH_STATUS = 0
Begin


Insert into #KPD (AUM,CashAmount,InstrumentTypePK,PK,KodeNasabah ,NamaNasabah ,NomorKontrak,TanggalKontrak,TanggalJatuhTempo,
NomorAdendum, TanggalAdendum,NilaiInvestasiAwalIDR, NilaiInvestasiAwalNonIDR,NilaiInvestasiAkhir,
NilaiInvestasiAkhirNonIDR, JenisEfek, DNatauLN,JumlahEfek,NilaiPembelian, NilaiNominal,
HPW, Deposito, TotalNilai,KodeBK,type,KodeSaham,MarketValue,SID)
select F.AUM,E.CashAmount,InstrumentTypePK,ROW_NUMBER() OVER(ORDER BY C.ID ASC) AS PK,H.InvestorType KodeNasabah ,H.Name NamaNasabah ,NKPDName NomorKontrak,isnull(CONVERT(VARCHAR(8), A.EffectiveDate, 112),0) TanggalKontrak,isnull(CONVERT(VARCHAR(8), A.MaturityDate, 112),0) TanggalJatuhTempo,
0 NomorAdendum,0 TanggalAdendum,cast(isnull(TotalUnits,CAST(TotalUnits AS DECIMAL(22, 0))) * isnull(A.Nav,CAST(A.Nav AS DECIMAL(22, 0)))as DECIMAL(22, 0)) NilaiInvestasiAwalIDR,0 NilaiInvestasiAwalNonIDR,case when C.InstrumentTypePK not in (1,5) then CAST(isnull(dbo.FGetTotalMarketValue(@Date,A.FundPK),0) AS DECIMAL(22, 0)) else case when C.InstrumentTypePK = 1 then CAST(F.AUM - isnull(E.CashAmount,0) AS DECIMAL(22, 0)) end end NilaiInvestasiAkhir,
0 NilaiInvestasiAkhirNonIDR, C.ID JenisEfek,1 DNatauLN,CAST (B.Balance AS DECIMAL(22, 0)) JumlahEfek,CAST(B.CostValue AS DECIMAL(22, 0)) NilaiPembelian,CAST(0 AS DECIMAL(22, 2)) NilaiNominal,
case when C.InstrumentTypePK not in (1,5) then   CAST(B.ClosePrice AS DECIMAL(22, 6))  else CAST(B.ClosePrice AS DECIMAL(22, 0)) end HPW,CAST(0 AS DECIMAL(22, 2)) Deposito,0 TotalNilai,isnull(D.ID,0) KodeBK,C.InstrumentTypePK type, '1' KodeSaham,CAST(B.MarketValue AS DECIMAL(22, 0)) MarketValue,isnull(H.SID,'') SID from Fund A
left join FundPosition B on A.FundPK = B.FundPK and B.Status = 2
left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2 
left join BankBranch D on A.BankBranchPK = D.BankBranchPK and D.status  = 2
left join DistributedIncome E on A.FundPK = E.FundPK and E.status  = 2 and E.ValueDate <= @Date and Posted = 1
left join CloseNAV F on A.FundPK = F.FundPK and F.Status = 2 and F.Date = @Date
left join FundClientposition G on A.FundPK = G.FundPK
left join FundClient H on G.FundClientPK = H.FundClientPK and H.status = 2
--left join ClosePrice I on B.InstrumentPK = I.instrumentPK and I.status = 2 and B.Date = @Date
where A.FundPK = @FundPK and B.Date = @Date and A.status = 2
Group By  F.AUM,E.CashAmount,C.ID,H.InvestorType,H.Name,NKPDName,A.EffectiveDate,A.MaturityDate,A.TotalUnits,A.Nav,E.CashAmount,B.Balance,B.CostValue,B.ClosePrice,D.ID,C.InstrumentTypePK,B.MarketValue,A.FundPK,H.SID
order By C.ID asc

Fetch next From A Into @FundPK
end
Close A
Deallocate A

update #KPD set 
NomorAdendum = 0, TanggalAdendum = 0, NilaiInvestasiAwalNonIDR = 0, --NilaiInvestasiAkhir = CAST(0 AS DECIMAL(22, 2)),
NilaiInvestasiAkhirNonIDR = 0 where PK <> 1

insert into #Text 

select isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeNasabah,'')))),'') + --1
'|' + isnull(RTRIM(LTRIM(isnull(NamaNasabah,''))),'')  +    --2
'|' + isnull(RTRIM(LTRIM(isnull(NomorKontrak,''))),'')  +  --3
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalKontrak,'')))),'')  +  --4
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalJatuhTempo,'')))),'')  +  --5
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NomorAdendum,'')))),'')  +  --6
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalAdendum,'')))),'')  +  --7
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAwalIDR,''))),'')  +  --8
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAwalNonIDR,'')))),'')  + --9
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAkhir,''))),'')  + --10
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAkhirNonIDR,'')))),'')  +  --11
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JenisEfek,'')))),'')  +  --12
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(DNatauLN,'')))),'')  + --13
'|' + case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeSaham,'')))),'') else '' end end + --14
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'')  +  --14
'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(JumlahEfek,''))),'') else '' end end + --15
--'|' + isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'')  +  --15
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end + --16
'|' + isnull(RTRIM(LTRIM(isnull(0,''))),'')  +  --16
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(HPW,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(PriceBond,''))),'') else '' end end +
'|' + isnull(RTRIM(LTRIM(isnull(HPW,''))),'')  +  --17
'|' + isnull(RTRIM(LTRIM(isnull(Deposito,''))),'')  +  --18
'|' + case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(MarketValue,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end + --19
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TotalNilai,'')))),'')  +   --19
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeBK,'')))),'') + --20
'|' + '0' +--21
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))),'') --22
from #KPD

select * from #text

                         ";
                        cmd.Parameters.AddWithValue("@Date", _sinvestRpt.Date);
                        cmd.Parameters.AddWithValue("@FundPK", _sinvestRpt.Fund);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {


                                string filePath = Tools.ARIATextPath + "AH002KPD.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlARIATextPath + "AH002KPD.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean GenerateReportKPD(string _userID, SInvestRpt _sInvestRpt)
        {
            #region KPD
            if (_sInvestRpt.ReportName.Equals("5"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            cmd.CommandTimeout = 0;
                            cmd.CommandText =
                            @"

create table #Text(      
[ResultText] [nvarchar](1000)  NULL          
)                        
        
        

--drop Table #KPD--
Create Table #KPD
(AUM nvarchar(50),CashAmount nvarchar(50),InstrumentTypePK int,PK int,KodeNasabah nvarchar(50),NamaNasabah nvarchar(50) ,NomorKontrak nvarchar(50),TanggalKontrak nvarchar(50),TanggalJatuhTempo nvarchar(50),
NomorAdendum nvarchar(50), TanggalAdendum nvarchar(50),NilaiInvestasiAwalIDR nvarchar(50), NilaiInvestasiAwalNonIDR nvarchar(50),NilaiInvestasiAkhir nvarchar(50),
NilaiInvestasiAkhirNonIDR nvarchar(50), JenisEfek nvarchar(50), DNatauLN int,JumlahEfek nvarchar(50),NilaiPembelian nvarchar(50), NilaiNominal nvarchar(50),
HPW nvarchar(50), Deposito nvarchar(50), TotalNilai nvarchar(50),KodeBK  nvarchar(50), type int,KodeSaham nvarchar(50),MarketValue nvarchar(50),SID nvarchar(50)
)

DECLARE A CURSOR FOR 
select FundPK
from Fund
where [Status] = 2 and FundTypeInternal = 2
Open A
Fetch Next From A
Into @FundPK

While @@FETCH_STATUS = 0
Begin


Insert into #KPD (AUM,CashAmount,InstrumentTypePK,PK,KodeNasabah ,NamaNasabah ,NomorKontrak,TanggalKontrak,TanggalJatuhTempo,
NomorAdendum, TanggalAdendum,NilaiInvestasiAwalIDR, NilaiInvestasiAwalNonIDR,NilaiInvestasiAkhir,
NilaiInvestasiAkhirNonIDR, JenisEfek, DNatauLN,JumlahEfek,NilaiPembelian, NilaiNominal,
HPW, Deposito, TotalNilai,KodeBK,type,KodeSaham,MarketValue,SID)
select F.AUM,E.CashAmount,InstrumentTypePK,ROW_NUMBER() OVER(ORDER BY C.ID ASC) AS PK,H.InvestorType KodeNasabah ,H.Name NamaNasabah ,NKPDName NomorKontrak,isnull(CONVERT(VARCHAR(8), A.EffectiveDate, 112),0) TanggalKontrak,isnull(CONVERT(VARCHAR(8), A.MaturityDate, 112),0) TanggalJatuhTempo,
0 NomorAdendum,0 TanggalAdendum,cast(isnull(TotalUnits,CAST(TotalUnits AS DECIMAL(22, 0))) * isnull(A.Nav,CAST(A.Nav AS DECIMAL(22, 0)))as DECIMAL(22, 0)) NilaiInvestasiAwalIDR,0 NilaiInvestasiAwalNonIDR,F.AUM NilaiInvestasiAkhir,
0 NilaiInvestasiAkhirNonIDR, C.ID JenisEfek,1 DNatauLN,CAST (B.Balance AS DECIMAL(22, 0)) JumlahEfek,CAST(B.CostValue AS DECIMAL(22, 0)) NilaiPembelian,CAST(0 AS DECIMAL(22, 2)) NilaiNominal,
case when C.InstrumentTypePK not in (1,5) then   CAST(B.ClosePrice AS DECIMAL(22, 6))  else CAST(B.ClosePrice AS DECIMAL(22, 0)) end HPW,CAST(0 AS DECIMAL(22, 2)) Deposito,0 TotalNilai,isnull(D.ID,0) KodeBK,C.InstrumentTypePK type, '1' KodeSaham,CAST(B.MarketValue AS DECIMAL(22, 0)) MarketValue,isnull(H.SID,'') SID from Fund A
left join FundPosition B on A.FundPK = B.FundPK and B.Status = 2
left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2 
left join BankBranch D on A.BankBranchPK = D.BankBranchPK and D.status  = 2
left join DistributedIncome E on A.FundPK = E.FundPK and E.status  = 2 and E.ValueDate <= @Date and Posted = 1
left join CloseNAV F on A.FundPK = F.FundPK and F.Status = 2 and F.Date = @Date
left join FundClientposition G on A.FundPK = G.FundPK
left join FundClient H on G.FundClientPK = H.FundClientPK and H.status = 2
--left join ClosePrice I on B.InstrumentPK = I.instrumentPK and I.status = 2 and B.Date = @Date
where A.FundPK = @FundPK and B.Date = @Date and A.status = 2
Group By  F.AUM,E.CashAmount,C.ID,H.InvestorType,H.Name,NKPDName,A.EffectiveDate,A.MaturityDate,A.TotalUnits,A.Nav,E.CashAmount,B.Balance,B.CostValue,B.ClosePrice,D.ID,C.InstrumentTypePK,B.MarketValue,A.FundPK,H.SID
order By C.ID asc

Fetch next From A Into @FundPK
end
Close A
Deallocate A

update #KPD set 
NomorAdendum = 0, TanggalAdendum = 0, NilaiInvestasiAwalNonIDR = 0, --NilaiInvestasiAkhir = CAST(0 AS DECIMAL(22, 2)),
NilaiInvestasiAkhirNonIDR = 0 where PK <> 1


select isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeNasabah,'')))),'') KodeNasabah --1
, isnull(RTRIM(LTRIM(isnull(NamaNasabah,''))),'') NamaNasabah     --2
, isnull(RTRIM(LTRIM(isnull(NomorKontrak,''))),'')  NomorKontrak  --3
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalKontrak,'')))),'')  TanggalKontrak  --4
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalJatuhTempo,'')))),'')  TanggalJatuhTempo  --5
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NomorAdendum,'')))),'')  NomorAdendum  --6
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalAdendum,'')))),'')  TanggalAdendum  --7
, isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAwalIDR,''))),'') NilaiInvestasiAwalIDR   --8
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAwalNonIDR,'')))),'') NilaiInvestasiAwalNonIDR  --9
, isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAkhir,''))),'') NilaiInvestasiAkhir  --10
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAkhirNonIDR,'')))),'') NilaiInvestasiAkhirNonIDR   --11
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JenisEfek,'')))),'')  JenisEfek  --12
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(DNatauLN,'')))),'') KodeKategoriEfek  --13
,case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeSaham,'')))),'') else '' end end JumlahEfek --14
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'')  +  --14
, case when type = 1 then isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(JumlahEfek,''))),'') else '' end end NilaiPembelian --15
--'|' + isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'')  +  --15
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end + --16
, isnull(RTRIM(LTRIM(isnull(0,''))),'')  NilaiNominal  --16
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(HPW,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(PriceBond,''))),'') else '' end end +
, isnull(RTRIM(LTRIM(isnull(HPW,''))),'') HPW   --17
, isnull(RTRIM(LTRIM(isnull(Deposito,''))),'')  Deposito  --18
, case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(MarketValue,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end TotalInvestasi --19
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TotalNilai,'')))),'')    --19
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeBK,'')))),'') KodeBK --20
, '0' Keterangan --21
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))),'') SID --22
from #KPD
                            ";

                            
                            //cmd.Parameters.AddWithValue("@date", _sInvestRpt.ParamDate);

                            cmd.Parameters.AddWithValue("@Date", _sInvestRpt.Date);
                            cmd.Parameters.AddWithValue("@FundPK", _sInvestRpt.FundFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "KPD" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "KPD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "KPDReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("KPD Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<KPD> rList = new List<KPD>();
                                        while (dr0.Read())
                                        {
                                            KPD rSingle = new KPD();
                                            rSingle.KodeNasabah = Convert.ToString(dr0["KodeNasabah"]);
                                            rSingle.NamaNasabah = Convert.ToString(dr0["NamaNasabah"]);
                                            rSingle.NomorKontrak = Convert.ToString(dr0["NomorKontrak"]);
                                            rSingle.TanggalKontrak = Convert.ToString(dr0["TanggalKontrak"]);
                                            rSingle.TanggalJatuhTempo = Convert.ToString(dr0["TanggalJatuhTempo"]);
                                            rSingle.NomorAdendum = Convert.ToString(dr0["NomorAdendum"]);
                                            rSingle.TanggalAdendum = Convert.ToString(dr0["TanggalAdendum"]);
                                            rSingle.NilaiInvestasiAwalIDR = Convert.ToString(dr0["NilaiInvestasiAwalIDR"]);
                                            rSingle.NilaiInvestasiAwalNonIDR = Convert.ToString(dr0["NilaiInvestasiAwalNonIDR"]);
                                            rSingle.NilaiInvestasiAkhir = Convert.ToString(dr0["NilaiInvestasiAkhir"]);
                                            rSingle.NilaiInvestasiAkhirNonIDR = Convert.ToString(dr0["NilaiInvestasiAkhirNonIDR"]);
                                            rSingle.JenisEfek = Convert.ToString(dr0["JenisEfek"]);
                                            rSingle.KodeKategoriEfek = Convert.ToInt32(dr0["KodeKategoriEfek"]);
                                            rSingle.JumlahEfek = Convert.ToString(dr0["JumlahEfek"]);
                                            rSingle.NilaiPembelian = Convert.ToString(dr0["NilaiPembelian"]);
                                            rSingle.NilaiNominal = Convert.ToString(dr0["NilaiNominal"]);
                                            rSingle.HPW = Convert.ToString(dr0["HPW"]);
                                            rSingle.Deposito = Convert.ToString(dr0["Deposito"]);
                                            rSingle.TotalInvestasi = Convert.ToString(dr0["TotalInvestasi"]);
                                            rSingle.KodeBK = Convert.ToString(dr0["KodeBK"]);
                                            rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { } into rGroup
                                         select rGroup;

                                        int incRowExcel = 0;
                                        int _startRowDetail = 0;
                                        foreach (var rsHeader in QueryByClientID)
                                        {

                                            incRowExcel++;
                                            //Row A = 2
                                            int RowA = incRowExcel;
                                            int RowB = incRowExcel + 1;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.WrapText = true;

                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);

                                            worksheet.Cells[incRowExcel, 1].Value = "Kode Nasabah";
                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                            worksheet.Cells[incRowExcel, 3].Value = "Nomer Kontrak";
                                            worksheet.Cells[incRowExcel, 4].Value = "Tanggal Kontrak";
                                            worksheet.Cells[incRowExcel, 5].Value = "Tanggal Jatuh Tempo";
                                            worksheet.Cells[incRowExcel, 6].Value = "Nomer Adendum";
                                            worksheet.Cells[incRowExcel, 7].Value = "Tanggal Adendum";
                                            worksheet.Cells[incRowExcel, 8].Value = "Nilai Investasi Awal IDR";
                                            worksheet.Cells[incRowExcel, 9].Value = "Nilai Investasi Awal Non IDR";
                                            worksheet.Cells[incRowExcel, 10].Value = "Nilai investtasi Akhir IDR";
                                            worksheet.Cells[incRowExcel, 11].Value = "Nilai investasi Akhir Non IDR";
                                            worksheet.Cells[incRowExcel, 12].Value = "Kode Efek";
                                            worksheet.Cells[incRowExcel, 13].Value = "Kode Kategori Efek";
                                            worksheet.Cells[incRowExcel, 14].Value = "Jumlah Efek";
                                            worksheet.Cells[incRowExcel, 15].Value = "Nilai Pembelian";
                                            worksheet.Cells[incRowExcel, 16].Value = "Nilai Nominal";
                                            worksheet.Cells[incRowExcel, 17].Value = "HPW";
                                            worksheet.Cells[incRowExcel, 18].Value = "Deposito";
                                            worksheet.Cells[incRowExcel, 19].Value = "Total Investtasi";
                                            worksheet.Cells[incRowExcel, 20].Value = "Kode BK";
                                            worksheet.Cells[incRowExcel, 21].Value = "Keterangan";
                                            worksheet.Cells[incRowExcel, 22].Value = "SID";

                                            //area header
                                            int _endRowDetail = 0;
                                            int _startRow = incRowExcel;
                                            incRowExcel++;
                                            _startRowDetail = incRowExcel;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.KodeNasabah;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaNasabah;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NomorKontrak;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TanggalKontrak;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TanggalJatuhTempo;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NomorAdendum;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TanggalAdendum;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NilaiInvestasiAwalIDR;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.NilaiInvestasiAwalNonIDR;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NilaiInvestasiAkhir;
                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NilaiInvestasiAkhirNonIDR;
                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.JenisEfek;
                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.KodeKategoriEfek;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.JumlahEfek;
                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.NilaiPembelian;
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.NilaiNominal;
                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.HPW;
                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.Deposito;
                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.TotalInvestasi;
                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.KodeBK;
                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.Keterangan;
                                                worksheet.Cells[incRowExcel, 22].Value = rsDetail.SID;

                                                _endRowDetail = incRowExcel;

                                                incRowExcel++;


                                            }

                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSeaGreen);
                                            //worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                            //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                            //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Calculate();
                                            //worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Calculate();
                                            //worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Calculate();
                                            //worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Calculate();
                                            //worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Calculate();
                                            //worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Calculate();
                                            //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Calculate();
                                            //worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Calculate();
                                            //worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Calculate();
                                            //worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Calculate();
                                            //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Calculate();
                                            //worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Calculate();
                                            //worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Calculate();
                                            //worksheet.Cells["N" + incRowExcel + ":O" + incRowExcel].Calculate();
                                            //worksheet.Cells["O" + incRowExcel + ":P" + incRowExcel].Calculate();
                                            //worksheet.Cells["P" + incRowExcel + ":Q" + incRowExcel].Calculate();
                                            //worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Calculate();
                                            //worksheet.Cells["R" + incRowExcel + ":S" + incRowExcel].Calculate();
                                            //worksheet.Cells["S" + incRowExcel + ":T" + incRowExcel].Calculate();
                                            //worksheet.Cells["T" + incRowExcel + ":U" + incRowExcel].Calculate();
                                            //worksheet.Cells["U" + incRowExcel + ":V" + incRowExcel].Calculate();
                                            //worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Numberformat.Format = "#,##0";
                                            //worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Font.Bold = true;

                                            worksheet.Cells["A" + _startRow + ":V" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + _startRow + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                        }



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 1;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 22];
                                        worksheet.Column(1).Width = 9;
                                        worksheet.Column(2).Width = 35;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 20;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;
                                        worksheet.Column(15).Width = 20;
                                        worksheet.Column(16).Width = 20;
                                        worksheet.Column(17).Width = 20;
                                        worksheet.Column(18).Width = 20;
                                        worksheet.Column(19).Width = 20;
                                        worksheet.Column(20).Width = 20;
                                        worksheet.Column(21).Width = 20;
                                        worksheet.Column(22).Width = 20;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:O14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 KPD REPORT";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }
        public List<Journal> Journal_SelectFromTo(int _status, DateTime _dateFrom, DateTime _dateTo)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<Journal> L_Journal = new List<Journal>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        if (_status != 9)
                        {
                            cmd.CommandText = @"Select  case when A.Status=1 then 'PENDING' else case when A.Status = 2 then 'APPROVED' else case when A.Status = 3 then 'VOID' else 'WAITING' end end end StatusDesc,
case when Reference is not null and Reference <> '' then cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) else 0 end RefNo,
A.Reference,C.DescOne TypeDesc,B.ID PeriodID,* From Journal A
Left join Period B on A.PeriodPK = B.PeriodPK and B.Status = 2 
left join MasterValue C on A.Type = C.Code and C.Id = 'JournalType' and C.status = 2 
Where  A.Status = @Status and ValueDate between @DateFrom and @DateTo Order By RefNo ";
                            cmd.Parameters.AddWithValue("@Status", _status);
                            cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _dateTo);

                        }
                        else
                        {
                            cmd.CommandText = @"Select  case when A.Status=1 then 'PENDING' else case when A.Status = 2 then 'APPROVED' else case when A.Status = 3 then 'VOID' else 'WAITING' end end end StatusDesc,
case when Reference is not null and Reference <> '' then cast(SUBSTRING(reference, 4, charindex('/',reference,5) - 4) as integer) else 0 end RefNo,
A.Reference,C.DescOne TypeDesc,B.ID PeriodID,* From Journal A 
Left join Period B on A.PeriodPK = B.PeriodPK and B.Status = 2 
left join MasterValue C on A.Type = C.Code and C.Id = 'JournalType' and C.status = 2
Where  ValueDate between @DateFrom and @DateTo Order By RefNo ";
                            cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        }

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    L_Journal.Add(setJournal(dr));
                                }
                            }
                            return L_Journal;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean GenerateReportCompliance(string _userID, OjkRpt _OjkRpt)
        {



            #region NKPD
            if (_OjkRpt.ReportName.Equals("3"))
            {
                #region Txt
                if (_OjkRpt.DownloadMode == "Txt")
                {
                    try
                    {
                        DateTime _datetimeNow = DateTime.Now;
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"
             SELECT  RTRIM(LTRIM(isnull(FU.NKPDName,'')))             
+ '|' + RTRIM(LTRIM(isnull(AAA.NKPDCode,'')))         
+ '|' + RTRIM(LTRIM(isnull(A.jumlahPerorangan,0)))
+ '|' + CAST(CAST(isnull(B.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                  
+ '|' + RTRIM(LTRIM(isnull(C.jumlahPerusahaanEfek,0)))    
+ '|' + CAST(CAST(isnull(D.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                     
+ '|' + RTRIM(LTRIM(isnull(E.jumlahDanaPensiun,0)))    
+ '|' + CAST(CAST(isnull(F.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                  
+ '|' + RTRIM(LTRIM(isnull(G.jumlahAsuransi,0)))    
+ '|' + CAST(CAST(isnull(H.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' + RTRIM(LTRIM(isnull(I.jumlahBank,0)))        
+ '|' + CAST(CAST(isnull(J.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))              
+ '|' + RTRIM(LTRIM(isnull(K.jumlahPT,0)))     
+ '|' + CAST(CAST(isnull(L.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                    
+ '|' + RTRIM(LTRIM(isnull(M.jumlahBUMN,0)))     
+ '|' + CAST(CAST(isnull(N.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                  
+ '|' + RTRIM(LTRIM(isnull(O.jumlahBUMD,0)))        
+ '|' + CAST(CAST(isnull(P.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))              
+ '|' + RTRIM(LTRIM(isnull(Q.jumlahYayasan,0)))  
+ '|' + CAST(CAST(isnull(R.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                     
+ '|' + RTRIM(LTRIM(isnull(S.jumlahKoperasi,0)))     
+ '|' + CAST(CAST(isnull(T.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' + RTRIM(LTRIM(isnull(U.jumlahLembagaNasionalLainnya,0)))
+ '|' + CAST(CAST(isnull(V.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))             
            
------ASING            
+ '|' + RTRIM(LTRIM(isnull(AA.jumlahPeroranganAsing,0)))      
+ '|' + CAST(CAST(isnull(AB.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' + RTRIM(LTRIM(isnull(AC.jumlahPerusahaanEfekAsing,0)))     
+ '|' + CAST(CAST(isnull(AD.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                     
+ '|' + RTRIM(LTRIM(isnull(AE.jumlahDanaPensiunAsing,0)))  
+ '|' + CAST(CAST(isnull(AF.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' + RTRIM(LTRIM(isnull(AG.jumlahAsuransiAsing,0)))        
+ '|' + CAST(CAST(isnull(AH.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                 
+ '|' + RTRIM(LTRIM(isnull(AI.jumlahBankAsing,0)))   
+ '|' + CAST(CAST(isnull(AJ.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                        
+ '|' + RTRIM(LTRIM(isnull(AK.jumlahPTAsing,0))) 
+ '|' + CAST(CAST(isnull(AL.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                         
+ '|' + RTRIM(LTRIM(isnull(AM.jumlahBUMNAsing,0)))    
+ '|' + CAST(CAST(isnull(AN.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                     
+ '|' + RTRIM(LTRIM(isnull(AO.jumlahBUMDAsing,0)))   
+ '|' + CAST(CAST(isnull(AP.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                       
+ '|' + RTRIM(LTRIM(isnull(AQ.jumlahYayasanAsing,0)))  
+ '|' + CAST(CAST(isnull(AR.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                       
+ '|' + RTRIM(LTRIM(isnull(SS.jumlahKoperasiAsing,0)))       
+ '|' + CAST(CAST(isnull(AT.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))                   
+ '|' + RTRIM(LTRIM(isnull(AU.jumlahLembagaAsingLainnya,0)))           
+ '|' + CAST(CAST(isnull(AV.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) 
+ '|' +   CAST( CASE WHEN (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)) = 0 THEN 0 ELSE 
 ((ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0)) 
/ (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)
 )) * 100 END AS NVARCHAR(30))    
	       
+ '|' + CAST( CASE WHEN (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)) = 0 THEN 0 ELSE 
 ((isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)) 
/ (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)
 )) * 100 END AS NVARCHAR(30))  
             
FROM FundClientPosition FCP (NOLOCK)                      
LEFT JOIN FundClient FC (NOLOCK) ON FCP.FundClientPK = FC.FundClientPK and FC.Status in (1,2)         
LEFT JOIN Fund FU on FCP.FundPK = FU.FundPK and FU.Status = 2 
LEFT JOIN FundCashRef ZZZ on FU.FundPK = ZZZ.FundPK and ZZZ.Status = 2
LEFT JOIN BankBranch ZZ on FU.BankBranchPK = ZZ.BankBranchPK and ZZ.Status in (1,2)
LEFT JOIN Bank AAA on ZZ.BankPK = AAA.BankPK and AAA.Status in (1,2)
----LEFT JOIN FundCashRef FCR on FU.FundPK = FCR.FundPK and FCR.Status in (1,2)       
LEFT JOIN             
(            
select COUNT (*) jumlahperorangan, CS.FundPK from FundClientPosition CS            
left join FundClient g            
on CS.FundClientPK = g.FundClientPK   and g.Status in (1,2)       
where g.InvestorType = 1 and g.nationality= 'ID'
and CS.Date = @FinalDate                      
group by CS.FundPK            
) A On FCP.FundPK = A.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG        
on CS.FundClientPK=CG.FundClientPK    and CG.Status in (1,2)      
where CG.InvestorType = 1 and CG.nationality= 'ID'
and CS.Date = @FinalDate     
             
            
group by CS.FundPK            
) B On FCP.FundPK = B.FundPK            
             
LEFT JOIN             
(            
----------EFEK----------------        
select COUNT(*) jumlahPerusahaanEfek, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (7)  
                  
            
group by CS.FundPK            
) C On FCP.FundPK = C.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (7)   
                 
            
group by CS.FundPK            
) D On FCP.FundPK = D.FundPK            
             
             
LEFT JOIN             
(            
---------DANA PENSIUN-------------        
select COUNT(*) jumlahDanaPensiun, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6  
               
            
group by CS.FundPK            
) E On FCP.FundPK = E.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6    
                   
            
group by CS.FundPK            
) F On FCP.FundPK = F.FundPK            
             
LEFT JOIN             
(            
----------ASURANSI-----------        
select COUNT(*) jumlahAsuransi, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=4     
                   
            
group by CS.FundPK            
) G On FCP.FundPK = G.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)    
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=4          
               
            
group by CS.FundPK            
) H On FCP.FundPK = H.FundPK            
             
LEFT JOIN             
(            
------------BANK-----------        
select COUNT(*) jumlahBank, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)           
               
            
group by CS.FundPK            
) I On FCP.FundPK = I.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)          
               
            
group by CS.FundPK            
) J On FCP.FundPK = J.FundPK            
             
LEFT JOIN             
(            
--------PEURSAHAAN SWASTA-----------        
select COUNT(*) jumlahPT, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)          
             
            
group by CS.FundPK            
) K On FCP.FundPK = K.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)       
              
            
group by CS.FundPK            
) L On FCP.FundPK = L.FundPK            
             
LEFT JOIN             
(            
---------------BUMN----------------        
select COUNT(*) jumlahBUMN, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 1           
             
            
group by CS.FundPK            
) M On FCP.FundPK = M.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 1 
                          
            
group by CS.FundPK            
) N On FCP.FundPK = N.FundPK            
             
LEFT JOIN             
(            
-------------BUMD-------------        
select COUNT(*) jumlahBUMD, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 8      
                    
            
group by CS.FundPK            
) O On FCP.FundPK = O.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 8    
                      
            
group by CS.FundPK            
) P On FCP.FundPK = P.FundPK            
             
LEFT JOIN             
(            
-----YAYASAN-----------        
select COUNT(*) jumlahYayasan, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=2            
             
            
group by CS.FundPK            
) Q On FCP.FundPK = Q.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=2       
                 
            
group by CS.FundPK            
) R On FCP.FundPK = R.FundPK            
             
LEFT JOIN             
(            
------------KOPERASI--------------        
select COUNT(*) jumlahKoperasi, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe= 3 and CG.Karakteristik = 8  
                      
            
group by CS.FundPK            
) S On FCP.FundPK = S.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe= 3 and CG.Karakteristik = 8  
                    
            
group by CS.FundPK            
) T On FCP.FundPK = T.FundPK    

					
------------LEMBAGA LAINNYA--------------            
             
LEFT JOIN             
(            
select COUNT(*) jumlahLembagaNasionalLainnya, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=8           
              
            
group by CS.FundPK            
) U On FCP.FundPK = U.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=8         
                
            
group by CS.FundPK            
) V On FCP.FundPK = V.FundPK            
             
----ASING            
             
LEFT JOIN             
(            
select COUNT(*) jumlahPeroranganAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)          
where CG.InvestorType = 1 and CG.nationality <> 'ID'
and CS.Date = @FinalDate              
             
            
group by CS.FundPK            
) AA On FCP.FundPK = AA.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK    and CG.Status in (1,2)       
where CG.InvestorType = 1 and CG.nationality <> 'ID'
and CS.Date = @FinalDate               
             
            
group by CS.FundPK            
) AB On FCP.FundPK = AB.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahPerusahaanEfekAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (3,7)   
                     
            
group by CS.FundPK          
) AC On FCP.FundPK = AC.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (3,7)    
                   
            
group by CS.FundPK            
) AD On FCP.FundPK = AD.FundPK            
             
             
LEFT JOIN             
(            
select COUNT(*) jumlahDanaPensiunAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)    
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6           
             
            
group by CS.FundPK            
) AE On FCP.FundPK = AE.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6     
                   
            
group by CS.FundPK            
) AF On FCP.FundPK = AF.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahAsuransiAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.tipe=4    
                    
            
group by CS.FundPK            
) AG On FCP.FundPK = AG.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=4       
                  
            
group by CS.FundPK            
) AH On FCP.FundPK = AH.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahBankAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)         
              
            
group by CS.FundPK            
) AI On FCP.FundPK = AI.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)
                         
            
group by CS.FundPK            
) AJ On FCP.FundPK = AJ.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahPTAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7) 
                       
            
group by CS.FundPK            
) AK On FCP.FundPK = AK.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)  
                        
            
group by CS.FundPK            
) AL On FCP.FundPK = AL.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahBUMNAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK   and CG.Status in (1,2)       
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik =1            
              
            
group by CS.FundPK            
) AM On FCP.FundPK = AM.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik =1           
             
            
group by CS.FundPK            
) AN On FCP.FundPK = AN.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahBUMDAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<>'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik = 8  
                    
            
group by CS.FundPK            
) AO On FCP.FundPK = AO.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik = 8      
                   
            
group by CS.FundPK            
) AP On FCP.FundPK = AP.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahYayasanAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'          
and CS.Date = @FinalDate   and CG.Tipe=2      
                  
            
group by CS.FundPK            
) AQ On FCP.FundPK = AQ.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=2       
                  
            
group by CS.FundPK            
) AR On FCP.FundPK = AR.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahKoperasiAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe= 3 and CG.Karakteristik = 8 
                         
            
group by CS.FundPK            
) SS On FCP.FundPK = SS.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe= 3 and CG.Karakteristik = 8  
                       
            
group by CS.FundPK            
) AT On FCP.FundPK = AT.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahLembagaAsingLainnya, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=8            
             
            
group by CS.FundPK            
) AU On FCP.FundPK = AU.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=8         
                
            
group by CS.FundPK            
) AV On FCP.FundPK = AV.FundPK            
left Join Fund Z on FCp.FundPK = Z.FundPK and Z.Status in (1,2)       
WHERE FCP.Date =@date 
and Z.FundTypeInternal <> 2   -- BUKAN KPD        
GROUP BY FU.NKPDName,AAA.NKPDCode,A.jumlahPerorangan,            
B.UnitAmount           
,C.jumlahPerusahaanEfek,            
D.UnitAmount ,E.jumlahDanaPensiun,            
F.UnitAmount ,G.jumlahAsuransi,            
H.UnitAmount ,I.jumlahBank,           
J.UnitAmount ,K.jumlahPT,            
L.UnitAmount ,M.jumlahBUMN,            
N.UnitAmount ,O.jumlahBUMD,            
P.UnitAmount ,Q.jumlahYayasan,            
R.UnitAmount ,S.jumlahKoperasi,            
T.UnitAmount ,U.jumlahLembagaNasionalLainnya,            
V.UnitAmount ,            
----asing            
AA.jumlahPeroranganAsing,            
AB.UnitAmount ,AC.jumlahPerusahaanEfekAsing,            
AD.UnitAmount ,AE.jumlahDanaPensiunAsing,            
AF.UnitAmount ,AG.jumlahAsuransiAsing,            
AH.UnitAmount ,AI.jumlahBankAsing,            
AJ.UnitAmount ,AK.jumlahPTAsing,            
AL.UnitAmount ,AM.jumlahBUMNAsing,            
AN.UnitAmount ,AO.jumlahBUMDAsing,            
AP.UnitAmount ,AQ.jumlahYayasanAsing,            
AR.UnitAmount ,SS.jumlahKoperasiAsing,            
AT.UnitAmount ,AU.jumlahLembagaAsingLainnya,            
AV.UnitAmount , FCP.FundPK
             
select * from #text

    ";
                                cmd.Parameters.AddWithValue("@Date", _OjkRpt.Date);

                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr.HasRows)
                                    {


                                        string filePath = Tools.ARIATextPath + "NKPD01.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            while (dr.Read())
                                            {

                                                file.WriteLine(Convert.ToString(dr["ResultText"]));
                                            }
                                            //return Tools.HtmlARIATextPath + "NKPD01.txt";
                                            return true;
                                        }

                                    }
                                    return false;
                                }

                            }
                        }
                    }
                    catch (Exception err)
                    {
                        throw err;
                    }

                } // bates

                #endregion

                #region Excel
                else
                {

                    if (_OjkRpt.ReportName.Equals("3"))
                    {
                        try
                        {
                            using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                            {
                                DbCon.Open();
                                using (SqlCommand cmd = DbCon.CreateCommand())
                                {

                                    string _paramFund = "";
                                    _paramFund = "left(@FundFrom,charindex('-',@FundFrom) - 1) ";


                                    cmd.CommandText =
                                    @"
                            Declare @FinalDate datetime
set @FinalDate =dbo.FWorkingDay(@Date ,-1)

SELECT  RTRIM(LTRIM(isnull(FU.Name,''))) FundName,  
RTRIM(LTRIM(isnull(FU.NKPDName,''))) KodeProduk            
, RTRIM(LTRIM(isnull(AAA.NKPDCode,''))) KodeBK         
, RTRIM(LTRIM(isnull(A.jumlahPerorangan,0))) JmlNasabahPerorangan
, CAST(CAST(isnull(B.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahPerorangan                   
, RTRIM(LTRIM(isnull(C.jumlahPerusahaanEfek,0)))    JmlNasabahLembagaPE
, CAST(CAST(isnull(D.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30))  DanaNasabahLembagaPE                   
, RTRIM(LTRIM(isnull(E.jumlahDanaPensiun,0)))    JmlNasabahLembagaDAPEN
, CAST(CAST(isnull(F.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaDAPEN                 
, RTRIM(LTRIM(isnull(G.jumlahAsuransi,0)))    JmlNasabahLembagaAsuransi
, CAST(CAST(isnull(H.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaAsuransi                  
, RTRIM(LTRIM(isnull(I.jumlahBank,0)))        JmlNasabahLembagaBank
, CAST(CAST(isnull(J.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaBank             
, RTRIM(LTRIM(isnull(K.jumlahPT,0)))     JmlNasabahLembagaSwasta
, CAST(CAST(isnull(L.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaSwasta                   
, RTRIM(LTRIM(isnull(M.jumlahBUMN,0)))     JmlNasabahLembagaBUMN
, CAST(CAST(isnull(N.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaBUMN                 
, RTRIM(LTRIM(isnull(O.jumlahBUMD,0)))        JmlNasabahLembagaBUMD
, CAST(CAST(isnull(P.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaBUMD             
, RTRIM(LTRIM(isnull(Q.jumlahYayasan,0)))  JmlNasabahLembagaYayasan
, CAST(CAST(isnull(R.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaYayasan                    
, RTRIM(LTRIM(isnull(S.jumlahKoperasi,0)))     JmlNasabahLembagaKoperasi
, CAST(CAST(isnull(T.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaKoperasi                
, RTRIM(LTRIM(isnull(U.jumlahLembagaNasionalLainnya,0))) JmlNasabahLembagaLainnya
, CAST(CAST(isnull(V.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaNasabahLembagaLainnya            
            
------ASING            
, RTRIM(LTRIM(isnull(AA.jumlahPeroranganAsing,0))) JmlAsingPerorangan     
, CAST(CAST(isnull(AB.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingPerorangan                  
, RTRIM(LTRIM(isnull(AC.jumlahPerusahaanEfekAsing,0)))     JmlAsingLembagaPE
, CAST(CAST(isnull(AD.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaPE                    
, RTRIM(LTRIM(isnull(AE.jumlahDanaPensiunAsing,0))) JmlAsingLembagaDAPEN 
, CAST(CAST(isnull(AF.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaDAPEN                  
, RTRIM(LTRIM(isnull(AG.jumlahAsuransiAsing,0)))        JmlAsingLembagaAsuransi
, CAST(CAST(isnull(AH.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaAsuransi                
, RTRIM(LTRIM(isnull(AI.jumlahBankAsing,0)))   JmlAsingLembagaBank
, CAST(CAST(isnull(AJ.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaBank                       
, RTRIM(LTRIM(isnull(AK.jumlahPTAsing,0))) JmlAsingLembagaSwasta
, CAST(CAST(isnull(AL.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaSwasta                        
, RTRIM(LTRIM(isnull(AM.jumlahBUMNAsing,0)))    JmlAsingLembagaBUMN
, CAST(CAST(isnull(AN.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaBUMN                     
, RTRIM(LTRIM(isnull(AO.jumlahBUMDAsing,0)))   JmlAsingLembagaBUMD
, CAST(CAST(isnull(AP.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaBUMD                      
, RTRIM(LTRIM(isnull(AQ.jumlahYayasanAsing,0)))  JmlAsingLembagaYayasan
, CAST(CAST(isnull(AR.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaYayasan                      
, RTRIM(LTRIM(isnull(SS.jumlahKoperasiAsing,0)))       JmlAsingLembagaKoperasi
, CAST(CAST(isnull(AT.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaKoperasi                  
, RTRIM(LTRIM(isnull(AU.jumlahLembagaAsingLainnya,0)))           JmlAsingLembagaLainnya
, CAST(CAST(isnull(AV.UnitAmount * dbo.FgetCloseNav(@date,FCP.FundPK),0) as DECIMAL(30,6)) as NVARCHAR(30)) DanaAsingLembagaLainnya


, CAST( CASE WHEN (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)) = 0 THEN 0 ELSE 
((ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0)) 
/ (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)
)) * 100 END AS NVARCHAR(30)) InvestasiDN



, CAST( CASE WHEN (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)) = 0 THEN 0 ELSE 
((isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)) 
/ (ISNULL(B.UnitAmount,0) + isnull(D.UnitAmount,0) + isnull(F.UnitAmount,0) + isnull(H.UnitAmount,0) 
+ isnull(J.UnitAmount,0) + isnull(L.UnitAmount,0) + isnull(N.UnitAmount,0) + isnull(P.UnitAmount,0) + isnull(R.UnitAmount,0) 
+ isnull(T.UnitAmount,0) + isnull(V.UnitAmount,0) + 
isnull(AB.UnitAmount,0) + isnull(AD.UnitAmount,0) + isnull(AF.UnitAmount,0) + isnull(AH.UnitAmount,0) 
+ isnull(AJ.UnitAmount,0) + isnull(AL.UnitAmount,0) + isnull(AN.UnitAmount,0) + isnull(AP.UnitAmount,0) + isnull(AR.UnitAmount,0) 
+ isnull(AT.UnitAmount,0) + isnull(AV.UnitAmount,0)
)) * 100 END AS NVARCHAR(30)) InvestasiLN
	         
             
FROM FundClientPosition FCP (NOLOCK)                      
LEFT JOIN FundClient FC (NOLOCK) ON FCP.FundClientPK = FC.FundClientPK and FC.Status in  (1,2)           
LEFT JOIN Fund FU on FCP.FundPK = FU.FundPK and FU.Status = 2 
LEFT JOIN FundCashRef ZZZ on FU.FundPK = ZZZ.FundPK and ZZZ.Status = 2
LEFT JOIN BankBranch ZZ on FU.BankBranchPK = ZZ.BankBranchPK and ZZ.Status = 2  
LEFT JOIN Bank AAA on ZZ.BankPK = AAA.BankPK and AAA.Status = 2  
----LEFT JOIN FundCashRef FCR on FU.FundPK = FCR.FundPK and FCR.Status = 2         
LEFT JOIN             
(            
select COUNT (*) jumlahperorangan, CS.FundPK from FundClientPosition CS            
left join FundClient g            
on CS.FundClientPK = g.FundClientPK   and g.Status in  (1,2)         
where g.InvestorType = 1 and g.nationality= 'ID'
and CS.Date = @FinalDate          
            
group by CS.FundPK            
) A On FCP.FundPK = A.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG        
on CS.FundClientPK=CG.FundClientPK    and CG.Status in  (1,2)       
where CG.InvestorType = 1 and CG.nationality= 'ID'
and CS.Date = @FinalDate             
            
group by CS.FundPK            
) B On FCP.FundPK = B.FundPK            
             
LEFT JOIN             
(            
----------EFEK----------------        
select COUNT(*) jumlahPerusahaanEfek, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (7)               
            
group by CS.FundPK            
) C On FCP.FundPK = C.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (7)                
            
group by CS.FundPK            
) D On FCP.FundPK = D.FundPK            
             
             
LEFT JOIN             
(            
---------DANA PENSIUN-------------        
select COUNT(*) jumlahDanaPensiun, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)            
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6              
            
group by CS.FundPK            
) E On FCP.FundPK = E.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6            
            
group by CS.FundPK            
) F On FCP.FundPK = F.FundPK            
             
LEFT JOIN             
(            
----------ASURANSI-----------        
select COUNT(*) jumlahAsuransi, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)            
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=4             
            
group by CS.FundPK            
) G On FCP.FundPK = G.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)     
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=4             
            
group by CS.FundPK            
) H On FCP.FundPK = H.FundPK            
             
LEFT JOIN             
(            
------------BANK-----------        
select COUNT(*) jumlahBank, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)                
            
group by CS.FundPK            
) I On FCP.FundPK = I.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)               
            
group by CS.FundPK            
) J On FCP.FundPK = J.FundPK            
             
LEFT JOIN             
(            
--------PEURSAHAAN SWASTA-----------        
select COUNT(*) jumlahPT, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)            
            
group by CS.FundPK            
) K On FCP.FundPK = K.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)          
            
group by CS.FundPK            
) L On FCP.FundPK = L.FundPK            
             
LEFT JOIN             
(            
---------------BUMN----------------        
select COUNT(*) jumlahBUMN, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 1             
            
group by CS.FundPK            
) M On FCP.FundPK = M.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 1                 
            
group by CS.FundPK            
) N On FCP.FundPK = N.FundPK            
             
LEFT JOIN             
(            
-------------BUMD-------------        
select COUNT(*) jumlahBUMD, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 8               
            
group by CS.FundPK            
) O On FCP.FundPK = O.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik = 8                 
            
group by CS.FundPK            
) P On FCP.FundPK = P.FundPK            
             
LEFT JOIN             
(            
-----YAYASAN-----------        
select COUNT(*) jumlahYayasan, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=2              
            
group by CS.FundPK            
) Q On FCP.FundPK = Q.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in  (1,2)            
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe=2             
            
group by CS.FundPK            
) R On FCP.FundPK = R.FundPK            
             
LEFT JOIN             
(            
------------KOPERASI--------------        
select COUNT(*) jumlahKoperasi, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)            
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe= 3 and CG.Karakteristik = 8            
            
group by CS.FundPK            
) S On FCP.FundPK = S.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe= 3 and CG.Karakteristik = 8           
            
group by CS.FundPK            
) T On FCP.FundPK = T.FundPK    

					
------------LEMBAGA LAINNYA--------------            
             
LEFT JOIN             
(            
select COUNT(*) jumlahLembagaNasionalLainnya, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe in (5,8)              
            
group by CS.FundPK            
) U On FCP.FundPK = U.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara= 'ID'            
and CS.Date = @FinalDate   and CG.tipe in (5,8)           
            
group by CS.FundPK            
) V On FCP.FundPK = V.FundPK            
             
----ASING            
             
LEFT JOIN             
(            
select COUNT(*) jumlahPeroranganAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)            
where CG.InvestorType = 1 and CG.nationality <> 'ID'
and CS.Date = @FinalDate                
            
group by CS.FundPK            
) AA On FCP.FundPK = AA.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK    and CG.Status in  (1,2)         
where CG.InvestorType = 1 and CG.nationality <> 'ID'
and CS.Date = @FinalDate                 
            
group by CS.FundPK            
) AB On FCP.FundPK = AB.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahPerusahaanEfekAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (7)           
            
group by CS.FundPK          
) AC On FCP.FundPK = AC.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe IN (7)           
            
group by CS.FundPK            
) AD On FCP.FundPK = AD.FundPK            
             
             
LEFT JOIN             
(            
select COUNT(*) jumlahDanaPensiunAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)     
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6            
            
group by CS.FundPK            
) AE On FCP.FundPK = AE.FundPK            
             
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=6           
            
group by CS.FundPK            
) AF On FCP.FundPK = AF.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahAsuransiAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.tipe=4           
            
group by CS.FundPK            
) AG On FCP.FundPK = AG.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=4             
            
group by CS.FundPK            
) AH On FCP.FundPK = AH.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahBankAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)         
            
group by CS.FundPK            
) AI On FCP.FundPK = AI.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=3 and CG.Karakteristik IN (1,2,3,4,5,6,7)             
            
group by CS.FundPK            
) AJ On FCP.FundPK = AJ.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahPTAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)            
            
group by CS.FundPK            
) AK On FCP.FundPK = AK.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)        
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik IN (2,3,4,5,6,7)             
            
group by CS.FundPK            
) AL On FCP.FundPK = AL.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahBUMNAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK   and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik =1              
            
group by CS.FundPK            
) AM On FCP.FundPK = AM.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik =1            
            
group by CS.FundPK            
) AN On FCP.FundPK = AN.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahBUMDAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara<>'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik = 8          
            
group by CS.FundPK            
) AO On FCP.FundPK = AO.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=1 and CG.Karakteristik = 8              
            
group by CS.FundPK            
) AP On FCP.FundPK = AP.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahYayasanAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)          
where CG.InvestorType = 2 and CG.Negara<> 'ID'          
and CS.Date = @FinalDate   and CG.Tipe=2           
            
group by CS.FundPK            
) AQ On FCP.FundPK = AQ.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe=2             
            
group by CS.FundPK            
) AR On FCP.FundPK = AR.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahKoperasiAsing, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe= 3 and CG.Karakteristik = 8               
            
group by CS.FundPK            
) SS On FCP.FundPK = SS.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe= 3 and CG.Karakteristik = 8              
            
group by CS.FundPK            
) AT On FCP.FundPK = AT.FundPK            
             
LEFT JOIN             
(            
select COUNT(*) jumlahLembagaAsingLainnya, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK = CG.FundClientPK and CG.Status in  (1,2)           
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe in (5,8)             
            
group by CS.FundPK            
) AU On FCP.FundPK = AU.FundPK            
             
LEFT JOIN             
(            
select SUM (UnitAmount) UnitAmount, CS.FundPK from FundClientPosition CS            
left join FundClient CG            
on CS.FundClientPK=CG.FundClientPK  and CG.Status in  (1,2)         
where CG.InvestorType = 2 and CG.Negara<> 'ID'            
and CS.Date = @FinalDate   and CG.Tipe in (5,8)             
            
group by CS.FundPK            
) AV On FCP.FundPK = AV.FundPK            
left Join Fund Z on FCp.FundPK = Z.FundPK and Z.Status in  (1,2)        
WHERE FCP.Date =@FinalDate
and Z.FundTypeInternal <> 2   -- BUKAN KPD        
AND FCP.UnitAmount > 10
GROUP BY FU.Name,FU.NKPDName,AAA.NKPDCode,A.jumlahPerorangan,            
B.UnitAmount           
,C.jumlahPerusahaanEfek,            
D.UnitAmount ,E.jumlahDanaPensiun,            
F.UnitAmount ,G.jumlahAsuransi,            
H.UnitAmount ,I.jumlahBank,           
J.UnitAmount ,K.jumlahPT,            
L.UnitAmount ,M.jumlahBUMN,            
N.UnitAmount ,O.jumlahBUMD,            
P.UnitAmount ,Q.jumlahYayasan,            
R.UnitAmount ,S.jumlahKoperasi,            
T.UnitAmount ,U.jumlahLembagaNasionalLainnya,            
V.UnitAmount ,            
----asing            
AA.jumlahPeroranganAsing,            
AB.UnitAmount ,AC.jumlahPerusahaanEfekAsing,            
AD.UnitAmount ,AE.jumlahDanaPensiunAsing,            
AF.UnitAmount ,AG.jumlahAsuransiAsing,            
AH.UnitAmount ,AI.jumlahBankAsing,            
AJ.UnitAmount ,AK.jumlahPTAsing,            
AL.UnitAmount ,AM.jumlahBUMNAsing,            
AN.UnitAmount ,AO.jumlahBUMDAsing,            
AP.UnitAmount ,AQ.jumlahYayasanAsing,            
AR.UnitAmount ,SS.jumlahKoperasiAsing,            
AT.UnitAmount ,AU.jumlahLembagaAsingLainnya,            
AV.UnitAmount , FCP.FundPK  ";

                                    cmd.CommandTimeout = 0;
                                    cmd.Parameters.AddWithValue("@date", _OjkRpt.Date);


                                    using (SqlDataReader dr0 = cmd.ExecuteReader())
                                    {
                                        if (!dr0.HasRows)
                                        {
                                            return false;
                                        }
                                        else
                                        {
                                            string filePath = Tools.ReportsPath + "NKPD" + "_" + _userID + ".xlsx";
                                            string pdfPath = Tools.ReportsPath + "NKPD" + "_" + _userID + ".pdf";
                                            FileInfo excelFile = new FileInfo(filePath);
                                            if (excelFile.Exists)
                                            {
                                                excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                                excelFile = new FileInfo(filePath);
                                            }


                                            // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                            using (ExcelPackage package = new ExcelPackage(excelFile))
                                            {
                                                package.Workbook.Properties.Title = "NKPDReport";
                                                package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                                package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                                package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                                package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                                package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("NKPD Report");


                                                //ATUR DATA GROUPINGNYA DULU
                                                List<NKPD> rList = new List<NKPD>();
                                                while (dr0.Read())
                                                {
                                                    NKPD rSingle = new NKPD();
                                                    rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                                    rSingle.KodeProduk = Convert.ToString(dr0["KodeProduk"]);
                                                    rSingle.KodeBK = Convert.ToString(dr0["KodeBK"]);
                                                    rSingle.JmlNasabahPerorangan = Convert.ToInt32(dr0["JmlNasabahPerorangan"]);
                                                    rSingle.DanaNasabahPerorangan = Convert.ToDecimal(dr0["DanaNasabahPerorangan"]);
                                                    rSingle.JmlNasabahLembagaPE = Convert.ToInt32(dr0["JmlNasabahLembagaPE"]);
                                                    rSingle.DanaNasabahLembagaPE = Convert.ToDecimal(dr0["DanaNasabahLembagaPE"]);
                                                    rSingle.JmlNasabahLembagaDAPEN = Convert.ToInt32(dr0["JmlNasabahLembagaDAPEN"]);
                                                    rSingle.DanaNasabahLembagaDAPEN = Convert.ToDecimal(dr0["DanaNasabahLembagaDAPEN"]);
                                                    rSingle.JmlNasabahLembagaAsuransi = Convert.ToInt32(dr0["JmlNasabahLembagaAsuransi"]);
                                                    rSingle.DanaNasabahLembagaAsuransi = Convert.ToDecimal(dr0["DanaNasabahLembagaAsuransi"]);
                                                    rSingle.JmlNasabahLembagaBank = Convert.ToInt32(dr0["JmlNasabahLembagaBank"]);
                                                    rSingle.DanaNasabahLembagaBank = Convert.ToDecimal(dr0["DanaNasabahLembagaBank"]);
                                                    rSingle.JmlNasabahLembagaSwasta = Convert.ToInt32(dr0["JmlNasabahLembagaSwasta"]);
                                                    rSingle.DanaNasabahLembagaSwasta = Convert.ToDecimal(dr0["DanaNasabahLembagaSwasta"]);
                                                    rSingle.JmlNasabahLembagaBUMN = Convert.ToInt32(dr0["JmlNasabahLembagaBUMN"]);
                                                    rSingle.DanaNasabahLembagaBUMN = Convert.ToDecimal(dr0["DanaNasabahLembagaBUMN"]);
                                                    rSingle.JmlNasabahLembagaBUMD = Convert.ToInt32(dr0["JmlNasabahLembagaBUMD"]);
                                                    rSingle.DanaNasabahLembagaBUMD = Convert.ToDecimal(dr0["DanaNasabahLembagaBUMD"]);
                                                    rSingle.JmlNasabahLembagaYayasan = Convert.ToInt32(dr0["JmlNasabahLembagaYayasan"]);
                                                    rSingle.DanaNasabahLembagaYayasan = Convert.ToDecimal(dr0["DanaNasabahLembagaYayasan"]);
                                                    rSingle.JmlNasabahLembagaKoperasi = Convert.ToInt32(dr0["JmlNasabahLembagaKoperasi"]);
                                                    rSingle.DanaNasabahLembagaKoperasi = Convert.ToDecimal(dr0["DanaNasabahLembagaKoperasi"]);
                                                    rSingle.JmlNasabahLembagaLainnya = Convert.ToInt32(dr0["JmlNasabahLembagaLainnya"]);
                                                    rSingle.DanaNasabahLembagaLainnya = Convert.ToDecimal(dr0["DanaNasabahLembagaLainnya"]);
                                                    rSingle.JmlAsingPerorangan = Convert.ToInt32(dr0["JmlAsingPerorangan"]);
                                                    rSingle.DanaAsingPerorangan = Convert.ToDecimal(dr0["DanaAsingPerorangan"]);
                                                    rSingle.JmlAsingLembagaPE = Convert.ToInt32(dr0["JmlAsingLembagaPE"]);
                                                    rSingle.DanaAsingLembagaPE = Convert.ToDecimal(dr0["DanaAsingLembagaPE"]);
                                                    rSingle.JmlAsingLembagaDAPEN = Convert.ToInt32(dr0["JmlAsingLembagaDAPEN"]);
                                                    rSingle.DanaAsingLembagaDAPEN = Convert.ToDecimal(dr0["DanaAsingLembagaDAPEN"]);
                                                    rSingle.JmlAsingLembagaAsuransi = Convert.ToInt32(dr0["JmlAsingLembagaAsuransi"]);
                                                    rSingle.DanaAsingLembagaAsuransi = Convert.ToDecimal(dr0["DanaAsingLembagaAsuransi"]);
                                                    rSingle.JmlAsingLembagaBank = Convert.ToInt32(dr0["JmlAsingLembagaBank"]);
                                                    rSingle.DanaAsingLembagaBank = Convert.ToDecimal(dr0["DanaAsingLembagaBank"]);
                                                    rSingle.JmlAsingLembagaSwasta = Convert.ToInt32(dr0["JmlAsingLembagaSwasta"]);
                                                    rSingle.DanaAsingLembagaSwasta = Convert.ToDecimal(dr0["DanaAsingLembagaSwasta"]);
                                                    rSingle.JmlAsingLembagaBUMN = Convert.ToInt32(dr0["JmlAsingLembagaBUMN"]);
                                                    rSingle.DanaAsingLembagaBUMN = Convert.ToDecimal(dr0["DanaAsingLembagaBUMN"]);
                                                    rSingle.JmlAsingLembagaBUMD = Convert.ToInt32(dr0["JmlAsingLembagaBUMD"]);
                                                    rSingle.DanaAsingLembagaBUMD = Convert.ToDecimal(dr0["DanaAsingLembagaBUMD"]);
                                                    rSingle.JmlAsingLembagaYayasan = Convert.ToInt32(dr0["JmlAsingLembagaYayasan"]);
                                                    rSingle.DanaAsingLembagaYayasan = Convert.ToDecimal(dr0["DanaAsingLembagaYayasan"]);
                                                    rSingle.JmlAsingLembagaKoperasi = Convert.ToInt32(dr0["JmlAsingLembagaKoperasi"]);
                                                    rSingle.DanaAsingLembagaKoperasi = Convert.ToDecimal(dr0["DanaAsingLembagaKoperasi"]);
                                                    rSingle.JmlAsingLembagaLainnya = Convert.ToInt32(dr0["JmlAsingLembagaLainnya"]);
                                                    rSingle.DanaAsingLembagaLainnya = Convert.ToDecimal(dr0["DanaAsingLembagaLainnya"]);
                                                    rSingle.InvestasiDN = Convert.ToDecimal(dr0["InvestasiDN"]);
                                                    rSingle.InvestasiLN = Convert.ToDecimal(dr0["InvestasiLN"]);
                                                    rList.Add(rSingle);

                                                }

                                                var QueryByClientID =
                                                 from r in rList
                                                 group r by new { } into rGroup
                                                 select rGroup;

                                                int incRowExcel = 0;
                                                int _startRowDetail = 0;
                                                foreach (var rsHeader in QueryByClientID)
                                                {

                                                    incRowExcel++;
                                                    //Row A = 2
                                                    int RowA = incRowExcel;
                                                    int RowB = incRowExcel + 1;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.WrapText = true;

                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);

                                                    worksheet.Cells[incRowExcel, 1].Value = "Nama Produk";
                                                    worksheet.Cells[incRowExcel, 2].Value = "Kode Produk";
                                                    worksheet.Cells[incRowExcel, 3].Value = "Kode BK";
                                                    worksheet.Cells[incRowExcel, 4].Value = "Jumlah Nasabah Nasional Perorangan";
                                                    worksheet.Cells[incRowExcel, 5].Value = "Dana Kelolaan Nasabah Nasional Perorangan";
                                                    worksheet.Cells[incRowExcel, 6].Value = "Jumlah Nasabah Nasional Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 7].Value = "Dana Kelolaan Nasabah Nasional Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 8].Value = "Jumlah Nasabah Nasional Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 9].Value = "Dana Kelolaan Nasabah Nasional Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 10].Value = "Jumlah Nasabah Nasional Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 11].Value = "Dana Kelolaan Nasabah Nasional Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 12].Value = "Jumlah Nasabah Nasional Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 13].Value = "Dana Kelolaan Nasabah Nasional Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 14].Value = "Jumlah Nasabah Nasional Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 15].Value = "Dana Kelolaan Nasabah Nasional Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 16].Value = "Jumlah Nasabah Nasional Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 17].Value = "Dana Kelolaan Nasabah Nasional Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 18].Value = "Jumlah Nasabah Nasional Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 19].Value = "Dana Kelolaan Nasabah Nasional Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 20].Value = "Jumlah Nasabah Nasional Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 21].Value = "Dana Kelolaan Nasabah Nasional Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 22].Value = "Jumlah Nasabah Nasional Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 23].Value = "Dana Kelolaan Nasabah Nasional Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 24].Value = "Jumlah Nasabah Nasional Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 25].Value = "Dana Kelolaan Nasabah Nasional Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 26].Value = "Jumlah Nasabah Asing Perorangan";
                                                    worksheet.Cells[incRowExcel, 27].Value = "Dana Kelolaan Nasabah Asing Perorangan";
                                                    worksheet.Cells[incRowExcel, 28].Value = "Jumlah Nasabah Asing Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 29].Value = "Dana Kelolaan Nasabah Asing Lembaga PE";
                                                    worksheet.Cells[incRowExcel, 30].Value = "Jumlah Nasabah Asing Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 31].Value = "Dana Kelolaan Nasabah Asing Lembaga DAPEN";
                                                    worksheet.Cells[incRowExcel, 32].Value = "Jumlah Nasabah Asing Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 33].Value = "Dana Kelolaan Nasabah Asing Lembaga Asuransi";
                                                    worksheet.Cells[incRowExcel, 34].Value = "Jumlah Nasabah Asing Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 35].Value = "Dana Kelolaan Nasabah Asing Lembaga Bank";
                                                    worksheet.Cells[incRowExcel, 36].Value = "Jumlah Nasabah Asing Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 37].Value = "Dana Kelolaan Nasabah Asing Lembaga Perus. Swasta/ Patungan";
                                                    worksheet.Cells[incRowExcel, 38].Value = "Jumlah Nasabah Asing Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 39].Value = "Dana Kelolaan Nasabah Asing Lembaga BUMN";
                                                    worksheet.Cells[incRowExcel, 40].Value = "Jumlah Nasabah Asing Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 41].Value = "Dana Kelolaan Nasabah Asing Lembaga BUMD";
                                                    worksheet.Cells[incRowExcel, 42].Value = "Jumlah Nasabah Asing Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 43].Value = "Dana Kelolaan Nasabah Asing Lembaga Yayasan";
                                                    worksheet.Cells[incRowExcel, 44].Value = "Jumlah Nasabah Asing Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 45].Value = "Dana Kelolaan Nasabah Asing Lembaga Koperasi";
                                                    worksheet.Cells[incRowExcel, 46].Value = "Jumlah Nasabah Asing Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 47].Value = "Dana Kelolaan Nasabah Asing Lembaga Lainnya";
                                                    worksheet.Cells[incRowExcel, 48].Value = "Investasi DN";
                                                    worksheet.Cells[incRowExcel, 49].Value = "Investasi LN";
                                                    worksheet.Cells[incRowExcel, 50].Value = "Total";

                                                    incRowExcel++;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    worksheet.Cells[incRowExcel, 1].Value = "(1)";
                                                    worksheet.Cells[incRowExcel, 2].Value = "(2)";
                                                    worksheet.Cells[incRowExcel, 3].Value = "(3)";
                                                    worksheet.Cells[incRowExcel, 4].Value = "(4)";
                                                    worksheet.Cells[incRowExcel, 5].Value = "(5)";
                                                    worksheet.Cells[incRowExcel, 6].Value = "(6)";
                                                    worksheet.Cells[incRowExcel, 7].Value = "(7)";
                                                    worksheet.Cells[incRowExcel, 8].Value = "(8)";
                                                    worksheet.Cells[incRowExcel, 9].Value = "(9)";
                                                    worksheet.Cells[incRowExcel, 10].Value = "(10)";
                                                    worksheet.Cells[incRowExcel, 11].Value = "(11)";
                                                    worksheet.Cells[incRowExcel, 12].Value = "(12)";
                                                    worksheet.Cells[incRowExcel, 13].Value = "(13)";
                                                    worksheet.Cells[incRowExcel, 14].Value = "(14)";
                                                    worksheet.Cells[incRowExcel, 15].Value = "(15)";
                                                    worksheet.Cells[incRowExcel, 16].Value = "(16)";
                                                    worksheet.Cells[incRowExcel, 17].Value = "(17)";
                                                    worksheet.Cells[incRowExcel, 18].Value = "(18)";
                                                    worksheet.Cells[incRowExcel, 19].Value = "(19)";
                                                    worksheet.Cells[incRowExcel, 20].Value = "(20)";
                                                    worksheet.Cells[incRowExcel, 21].Value = "(21)";
                                                    worksheet.Cells[incRowExcel, 22].Value = "(22)";
                                                    worksheet.Cells[incRowExcel, 23].Value = "(23)";
                                                    worksheet.Cells[incRowExcel, 24].Value = "(24)";
                                                    worksheet.Cells[incRowExcel, 25].Value = "(25)";
                                                    worksheet.Cells[incRowExcel, 26].Value = "(26)";
                                                    worksheet.Cells[incRowExcel, 27].Value = "(27)";
                                                    worksheet.Cells[incRowExcel, 28].Value = "(28)";
                                                    worksheet.Cells[incRowExcel, 29].Value = "(29)";
                                                    worksheet.Cells[incRowExcel, 30].Value = "(30)";
                                                    worksheet.Cells[incRowExcel, 31].Value = "(31)";
                                                    worksheet.Cells[incRowExcel, 32].Value = "(32)";
                                                    worksheet.Cells[incRowExcel, 33].Value = "(33)";
                                                    worksheet.Cells[incRowExcel, 34].Value = "(34)";
                                                    worksheet.Cells[incRowExcel, 35].Value = "(35)";
                                                    worksheet.Cells[incRowExcel, 36].Value = "(36)";
                                                    worksheet.Cells[incRowExcel, 37].Value = "(37)";
                                                    worksheet.Cells[incRowExcel, 38].Value = "(38)";
                                                    worksheet.Cells[incRowExcel, 39].Value = "(39)";
                                                    worksheet.Cells[incRowExcel, 40].Value = "(40)";
                                                    worksheet.Cells[incRowExcel, 41].Value = "(41)";
                                                    worksheet.Cells[incRowExcel, 42].Value = "(42)";
                                                    worksheet.Cells[incRowExcel, 43].Value = "(43)";
                                                    worksheet.Cells[incRowExcel, 44].Value = "(44)";
                                                    worksheet.Cells[incRowExcel, 45].Value = "(45)";
                                                    worksheet.Cells[incRowExcel, 46].Value = "(46)";
                                                    worksheet.Cells[incRowExcel, 47].Value = "(47)";
                                                    worksheet.Cells[incRowExcel, 48].Value = "(48)";

                                                    //area header
                                                    int _endRowDetail = 0;
                                                    int _startRow = incRowExcel;
                                                    incRowExcel++;
                                                    _startRowDetail = incRowExcel;
                                                    foreach (var rsDetail in rsHeader)
                                                    {
                                                        worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundName;
                                                        worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                        worksheet.Cells[incRowExcel, 2].Value = rsDetail.KodeProduk;
                                                        worksheet.Cells[incRowExcel, 3].Value = rsDetail.KodeBK;
                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail.JmlNasabahPerorangan;
                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail.DanaNasabahPerorangan;
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.JmlNasabahLembagaPE;
                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.DanaNasabahLembagaPE;
                                                        worksheet.Cells[incRowExcel, 8].Value = rsDetail.JmlNasabahLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.DanaNasabahLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 10].Value = rsDetail.JmlNasabahLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 11].Value = rsDetail.DanaNasabahLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.JmlNasabahLembagaBank;
                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.DanaNasabahLembagaBank;
                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.JmlNasabahLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 15].Value = rsDetail.DanaNasabahLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 16].Value = rsDetail.JmlNasabahLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 17].Value = rsDetail.DanaNasabahLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 18].Value = rsDetail.JmlNasabahLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 19].Value = rsDetail.DanaNasabahLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 20].Value = rsDetail.JmlNasabahLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 21].Value = rsDetail.DanaNasabahLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 22].Value = rsDetail.JmlNasabahLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 23].Value = rsDetail.DanaNasabahLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 24].Value = rsDetail.JmlNasabahLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 25].Value = rsDetail.DanaNasabahLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 26].Value = rsDetail.JmlAsingPerorangan;
                                                        worksheet.Cells[incRowExcel, 27].Value = rsDetail.DanaAsingPerorangan;
                                                        worksheet.Cells[incRowExcel, 28].Value = rsDetail.JmlAsingLembagaPE;
                                                        worksheet.Cells[incRowExcel, 29].Value = rsDetail.DanaAsingLembagaPE;
                                                        worksheet.Cells[incRowExcel, 30].Value = rsDetail.JmlAsingLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 31].Value = rsDetail.DanaAsingLembagaDAPEN;
                                                        worksheet.Cells[incRowExcel, 32].Value = rsDetail.JmlAsingLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 33].Value = rsDetail.DanaAsingLembagaAsuransi;
                                                        worksheet.Cells[incRowExcel, 34].Value = rsDetail.JmlAsingLembagaBank;
                                                        worksheet.Cells[incRowExcel, 35].Value = rsDetail.DanaAsingLembagaBank;
                                                        worksheet.Cells[incRowExcel, 36].Value = rsDetail.JmlAsingLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 37].Value = rsDetail.DanaAsingLembagaSwasta;
                                                        worksheet.Cells[incRowExcel, 38].Value = rsDetail.JmlAsingLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 39].Value = rsDetail.DanaAsingLembagaBUMN;
                                                        worksheet.Cells[incRowExcel, 40].Value = rsDetail.JmlAsingLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 41].Value = rsDetail.DanaAsingLembagaBUMD;
                                                        worksheet.Cells[incRowExcel, 42].Value = rsDetail.JmlAsingLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 43].Value = rsDetail.DanaAsingLembagaYayasan;
                                                        worksheet.Cells[incRowExcel, 44].Value = rsDetail.JmlAsingLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 45].Value = rsDetail.DanaAsingLembagaKoperasi;
                                                        worksheet.Cells[incRowExcel, 46].Value = rsDetail.JmlAsingLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 47].Value = rsDetail.DanaAsingLembagaLainnya;
                                                        worksheet.Cells[incRowExcel, 48].Value = rsDetail.InvestasiDN;
                                                        worksheet.Cells[incRowExcel, 49].Value = rsDetail.InvestasiLN;
                                                        worksheet.Cells[incRowExcel, 50].Formula =
                                                        "SUM(E" + incRowExcel + "+G" + incRowExcel + "+I" + incRowExcel + "+K" + incRowExcel + "+M" + incRowExcel +
                                                        "+O" + incRowExcel + "+Q" + incRowExcel + "+S" + incRowExcel + "+U" + incRowExcel + "+W" + incRowExcel + "+Y" + incRowExcel +
                                                        "+AA" + incRowExcel + "+AC" + incRowExcel + "+AE" + incRowExcel + "+AG" + incRowExcel + "+AI" + incRowExcel + "+AK" + incRowExcel +
                                                        "+AM" + incRowExcel + "+AO" + incRowExcel + "+AQ" + incRowExcel + "+AS" + incRowExcel + "+AU" + incRowExcel + ")";
                                                        worksheet.Cells[incRowExcel, 50].Calculate();

                                                        _endRowDetail = incRowExcel;

                                                        incRowExcel++;


                                                    }

                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSeaGreen);
                                                    worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                    worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 23].Formula = "SUM(W" + _startRowDetail + ":W" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 24].Formula = "SUM(X" + _startRowDetail + ":X" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 25].Formula = "SUM(Y" + _startRowDetail + ":Y" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 26].Formula = "SUM(Z" + _startRowDetail + ":Z" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 27].Formula = "SUM(AA" + _startRowDetail + ":AA" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 28].Formula = "SUM(AB" + _startRowDetail + ":AB" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 29].Formula = "SUM(AC" + _startRowDetail + ":AC" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 30].Formula = "SUM(AD" + _startRowDetail + ":AD" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 31].Formula = "SUM(AE" + _startRowDetail + ":AE" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 32].Formula = "SUM(AF" + _startRowDetail + ":AF" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 33].Formula = "SUM(AG" + _startRowDetail + ":AG" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 34].Formula = "SUM(AH" + _startRowDetail + ":AH" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 35].Formula = "SUM(AI" + _startRowDetail + ":AI" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 36].Formula = "SUM(AJ" + _startRowDetail + ":AJ" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 37].Formula = "SUM(AK" + _startRowDetail + ":AK" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 38].Formula = "SUM(AL" + _startRowDetail + ":AL" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 39].Formula = "SUM(AM" + _startRowDetail + ":AM" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 40].Formula = "SUM(AN" + _startRowDetail + ":AN" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 41].Formula = "SUM(AO" + _startRowDetail + ":AO" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 42].Formula = "SUM(AP" + _startRowDetail + ":AP" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 43].Formula = "SUM(AQ" + _startRowDetail + ":AQ" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 44].Formula = "SUM(AR" + _startRowDetail + ":AR" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 45].Formula = "SUM(AS" + _startRowDetail + ":AS" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 46].Formula = "SUM(AT" + _startRowDetail + ":AT" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 47].Formula = "SUM(AU" + _startRowDetail + ":AU" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 48].Formula = "SUM(AV" + _startRowDetail + ":AV" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 49].Formula = "SUM(AW" + _startRowDetail + ":AW" + _endRowDetail + ")";
                                                    worksheet.Cells[incRowExcel, 50].Formula = "SUM(AX" + _startRowDetail + ":AX" + _endRowDetail + ")";
                                                    worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Calculate();
                                                    worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Calculate();
                                                    worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Calculate();
                                                    worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Calculate();
                                                    worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Calculate();
                                                    worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Calculate();
                                                    worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Calculate();
                                                    worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Calculate();
                                                    worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Calculate();
                                                    worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Calculate();
                                                    worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Calculate();
                                                    worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Calculate();
                                                    worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Calculate();
                                                    worksheet.Cells["N" + incRowExcel + ":O" + incRowExcel].Calculate();
                                                    worksheet.Cells["O" + incRowExcel + ":P" + incRowExcel].Calculate();
                                                    worksheet.Cells["P" + incRowExcel + ":Q" + incRowExcel].Calculate();
                                                    worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Calculate();
                                                    worksheet.Cells["R" + incRowExcel + ":S" + incRowExcel].Calculate();
                                                    worksheet.Cells["S" + incRowExcel + ":T" + incRowExcel].Calculate();
                                                    worksheet.Cells["T" + incRowExcel + ":U" + incRowExcel].Calculate();
                                                    worksheet.Cells["U" + incRowExcel + ":V" + incRowExcel].Calculate();
                                                    worksheet.Cells["V" + incRowExcel + ":W" + incRowExcel].Calculate();
                                                    worksheet.Cells["W" + incRowExcel + ":X" + incRowExcel].Calculate();
                                                    worksheet.Cells["X" + incRowExcel + ":Y" + incRowExcel].Calculate();
                                                    worksheet.Cells["Z" + incRowExcel + ":Z" + incRowExcel].Calculate();
                                                    worksheet.Cells["AA" + incRowExcel + ":AA" + incRowExcel].Calculate();
                                                    worksheet.Cells["AB" + incRowExcel + ":AB" + incRowExcel].Calculate();
                                                    worksheet.Cells["AC" + incRowExcel + ":AC" + incRowExcel].Calculate();
                                                    worksheet.Cells["AD" + incRowExcel + ":AD" + incRowExcel].Calculate();
                                                    worksheet.Cells["AE" + incRowExcel + ":AE" + incRowExcel].Calculate();
                                                    worksheet.Cells["AF" + incRowExcel + ":AF" + incRowExcel].Calculate();
                                                    worksheet.Cells["AG" + incRowExcel + ":AG" + incRowExcel].Calculate();
                                                    worksheet.Cells["AH" + incRowExcel + ":AH" + incRowExcel].Calculate();
                                                    worksheet.Cells["AI" + incRowExcel + ":AI" + incRowExcel].Calculate();
                                                    worksheet.Cells["AJ" + incRowExcel + ":AJ" + incRowExcel].Calculate();
                                                    worksheet.Cells["AK" + incRowExcel + ":AK" + incRowExcel].Calculate();
                                                    worksheet.Cells["AL" + incRowExcel + ":AL" + incRowExcel].Calculate();
                                                    worksheet.Cells["AM" + incRowExcel + ":AM" + incRowExcel].Calculate();
                                                    worksheet.Cells["AN" + incRowExcel + ":AN" + incRowExcel].Calculate();
                                                    worksheet.Cells["AO" + incRowExcel + ":AO" + incRowExcel].Calculate();
                                                    worksheet.Cells["AP" + incRowExcel + ":AP" + incRowExcel].Calculate();
                                                    worksheet.Cells["AQ" + incRowExcel + ":AQ" + incRowExcel].Calculate();
                                                    worksheet.Cells["AR" + incRowExcel + ":AR" + incRowExcel].Calculate();
                                                    worksheet.Cells["AS" + incRowExcel + ":AS" + incRowExcel].Calculate();
                                                    worksheet.Cells["AT" + incRowExcel + ":AT" + incRowExcel].Calculate();
                                                    worksheet.Cells["AU" + incRowExcel + ":AU" + incRowExcel].Calculate();
                                                    worksheet.Cells["AV" + incRowExcel + ":AV" + incRowExcel].Calculate();
                                                    worksheet.Cells["AW" + incRowExcel + ":AW" + incRowExcel].Calculate();
                                                    worksheet.Cells["AX" + incRowExcel + ":AX" + incRowExcel].Calculate();
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Font.Bold = true;

                                                    worksheet.Cells["A" + _startRow + ":AX" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;
                                                    worksheet.Cells["A" + _startRow + ":AX" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + _startRow + ":AX" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                    worksheet.Cells["A" + incRowExcel + ":AX" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                    incRowExcel++;
                                                }



                                                worksheet.PrinterSettings.FitToPage = true;
                                                worksheet.PrinterSettings.FitToWidth = 1;
                                                worksheet.PrinterSettings.FitToHeight = 1;
                                                worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 50];
                                                worksheet.Column(1).Width = 45;
                                                worksheet.Column(2).Width = 20;
                                                worksheet.Column(3).Width = 10;
                                                worksheet.Column(4).Width = 20;
                                                worksheet.Column(5).Width = 20;
                                                worksheet.Column(6).Width = 20;
                                                worksheet.Column(7).Width = 20;
                                                worksheet.Column(8).Width = 20;
                                                worksheet.Column(9).Width = 20;
                                                worksheet.Column(10).Width = 20;
                                                worksheet.Column(11).Width = 20;
                                                worksheet.Column(12).Width = 20;
                                                worksheet.Column(13).Width = 20;
                                                worksheet.Column(14).Width = 20;
                                                worksheet.Column(15).Width = 20;
                                                worksheet.Column(16).Width = 20;
                                                worksheet.Column(17).Width = 20;
                                                worksheet.Column(18).Width = 20;
                                                worksheet.Column(19).Width = 20;
                                                worksheet.Column(20).Width = 20;
                                                worksheet.Column(21).Width = 20;
                                                worksheet.Column(22).Width = 20;
                                                worksheet.Column(23).Width = 20;
                                                worksheet.Column(24).Width = 20;
                                                worksheet.Column(25).Width = 20;
                                                worksheet.Column(26).Width = 20;
                                                worksheet.Column(27).Width = 20;
                                                worksheet.Column(28).Width = 20;
                                                worksheet.Column(29).Width = 20;
                                                worksheet.Column(30).Width = 20;
                                                worksheet.Column(31).Width = 20;
                                                worksheet.Column(32).Width = 20;
                                                worksheet.Column(33).Width = 20;
                                                worksheet.Column(34).Width = 20;
                                                worksheet.Column(35).Width = 20;
                                                worksheet.Column(36).Width = 20;
                                                worksheet.Column(37).Width = 20;
                                                worksheet.Column(38).Width = 20;
                                                worksheet.Column(39).Width = 20;
                                                worksheet.Column(40).Width = 20;
                                                worksheet.Column(41).Width = 20;
                                                worksheet.Column(42).Width = 20;
                                                worksheet.Column(43).Width = 20;
                                                worksheet.Column(44).Width = 20;
                                                worksheet.Column(45).Width = 20;
                                                worksheet.Column(46).Width = 20;
                                                worksheet.Column(47).Width = 20;
                                                worksheet.Column(48).Width = 20;
                                                worksheet.Column(49).Width = 20;
                                                worksheet.Column(50).Width = 20;



                                                // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                //worksheet.Cells["A3:O14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                                worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 NKPD REPORT";

                                                // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                                worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                //Image img = Image.FromFile(Tools.ReportImage);
                                                //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                                //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                                //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                                worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                                package.Save();
                                                return true;
                                            }
                                        }
                                    }

                                }

                            }
                        }
                        catch (Exception err)
                        {
                            return false;
                            throw err;
                        }

                    }

                }
                #endregion

                return true;
            }//else if
            #endregion


            #region KPD
            else if (_OjkRpt.ReportName.Equals("5"))
            {
                #region Txt

                if (_OjkRpt.DownloadMode == "Txt")
                {
                    try
                    {
                        DateTime _datetimeNow = DateTime.Now;
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                cmd.CommandTimeout = 0;
                                cmd.CommandText = @"
declare @FundPK int
                       --drop table #Text--
                        create table #Text(      
                        [ResultText] [nvarchar](1000)  NULL          
                        )                        
        
                        truncate table #Text --         

                        --drop Table #KPD--
                        Create Table #KPD
(AUM nvarchar(50),CashAmount nvarchar(50),InstrumentTypePK int,PK int,KodeNasabah nvarchar(50),NamaNasabah nvarchar(50) ,NomorKontrak nvarchar(50),TanggalKontrak nvarchar(50),TanggalJatuhTempo nvarchar(50),
NomorAdendum nvarchar(50), TanggalAdendum nvarchar(50),NilaiInvestasiAwalIDR nvarchar(50), NilaiInvestasiAwalNonIDR nvarchar(50),NilaiInvestasiAkhir nvarchar(50),
NilaiInvestasiAkhirNonIDR nvarchar(50), JenisEfek nvarchar(50), DNatauLN int,JumlahEfek nvarchar(50),NilaiPembelian nvarchar(50), NilaiNominal nvarchar(50),
HPW nvarchar(50), Deposito nvarchar(50), TotalNilai nvarchar(50),KodeBK  nvarchar(50), type int,KodeSaham nvarchar(50),MarketValue nvarchar(50),SID nvarchar(50)
)

DECLARE A CURSOR FOR 
select FundPK
from Fund
where [Status] = 2 and FundTypeInternal = 2
Open A
Fetch Next From A
Into @FundPK

While @@FETCH_STATUS = 0
Begin


Insert into #KPD (AUM,CashAmount,InstrumentTypePK,PK,KodeNasabah ,NamaNasabah ,NomorKontrak,TanggalKontrak,TanggalJatuhTempo,
NomorAdendum, TanggalAdendum,NilaiInvestasiAwalIDR, NilaiInvestasiAwalNonIDR,NilaiInvestasiAkhir,
NilaiInvestasiAkhirNonIDR, JenisEfek, DNatauLN,JumlahEfek,NilaiPembelian, NilaiNominal,
HPW, Deposito, TotalNilai,KodeBK,type,KodeSaham,MarketValue,SID)
select F.AUM,E.CashAmount,InstrumentTypePK,ROW_NUMBER() OVER(ORDER BY C.ID ASC) AS PK,H.InvestorType KodeNasabah ,H.Name NamaNasabah ,NKPDName NomorKontrak,isnull(CONVERT(VARCHAR(8), A.EffectiveDate, 112),0) TanggalKontrak,isnull(CONVERT(VARCHAR(8), A.MaturityDate, 112),0) TanggalJatuhTempo,
0 NomorAdendum,0 TanggalAdendum,cast(isnull(TotalUnits,CAST(TotalUnits AS DECIMAL(22, 0))) * isnull(A.Nav,CAST(A.Nav AS DECIMAL(22, 0)))as DECIMAL(22, 0)) NilaiInvestasiAwalIDR,0 NilaiInvestasiAwalNonIDR,case when C.InstrumentTypePK not in (1,5) then CAST(isnull(dbo.FGetTotalMarketValue(@Date,A.FundPK),0) AS DECIMAL(22, 0)) else case when C.InstrumentTypePK = 1 then CAST(F.AUM - isnull(E.CashAmount,0) AS DECIMAL(22, 0)) end end NilaiInvestasiAkhir,
0 NilaiInvestasiAkhirNonIDR, C.ID JenisEfek,1 DNatauLN,CAST (B.Balance AS DECIMAL(22, 0)) JumlahEfek,CAST(B.CostValue AS DECIMAL(22, 0)) NilaiPembelian,CAST(0 AS DECIMAL(22, 2)) NilaiNominal,
case when C.InstrumentTypePK not in (1,5) then   CAST(B.ClosePrice AS DECIMAL(22, 6))  else CAST(B.ClosePrice AS DECIMAL(22, 0)) end HPW,CAST(0 AS DECIMAL(22, 2)) Deposito,0 TotalNilai,isnull(D.ID,0) KodeBK,C.InstrumentTypePK type, '1' KodeSaham,CAST(B.MarketValue AS DECIMAL(22, 0)) MarketValue,isnull(H.SID,'') SID from Fund A
left join FundPosition B on A.FundPK = B.FundPK and B.Status = 2
left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2 
left join BankBranch D on A.BankBranchPK = D.BankBranchPK and D.status  = 2
left join DistributedIncome E on A.FundPK = E.FundPK and E.status  = 2 and E.ValueDate <= @Date and Posted = 1
left join CloseNAV F on A.FundPK = F.FundPK and F.Status = 2 and F.Date = @Date
left join FundClientposition G on A.FundPK = G.FundPK
left join FundClient H on G.FundClientPK = H.FundClientPK and H.status = 2
--left join ClosePrice I on B.InstrumentPK = I.instrumentPK and I.status = 2 and B.Date = @Date
where A.FundPK = @FundPK and B.Date = @Date and A.status = 2
Group By  F.AUM,E.CashAmount,C.ID,H.InvestorType,H.Name,NKPDName,A.EffectiveDate,A.MaturityDate,A.TotalUnits,A.Nav,E.CashAmount,B.Balance,B.CostValue,B.ClosePrice,D.ID,C.InstrumentTypePK,B.MarketValue,A.FundPK,H.SID
order By C.ID asc

Fetch next From A Into @FundPK
end
Close A
Deallocate A

update #KPD set 
NomorAdendum = 0, TanggalAdendum = 0, NilaiInvestasiAwalNonIDR = 0, --NilaiInvestasiAkhir = CAST(0 AS DECIMAL(22, 2)),
NilaiInvestasiAkhirNonIDR = 0 where PK <> 1

insert into #Text 

select isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeNasabah,'')))),'') + --1
'|' + isnull(RTRIM(LTRIM(isnull(NamaNasabah,''))),'')  +    --2
'|' + isnull(RTRIM(LTRIM(isnull(NomorKontrak,''))),'')  +  --3
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalKontrak,'')))),'')  +  --4
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalJatuhTempo,'')))),'')  +  --5
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NomorAdendum,'')))),'')  +  --6
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalAdendum,'')))),'')  +  --7
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAwalIDR,''))),'')  +  --8
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAwalNonIDR,'')))),'')  + --9
'|' + isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAkhir,''))),'')  + --10
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAkhirNonIDR,'')))),'')  +  --11
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JenisEfek,'')))),'')  +  --12
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(DNatauLN,'')))),'')  + --13
'|' + case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeSaham,'')))),'') else '' end end + --14
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'')  +  --14
'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(JumlahEfek,''))),'') else '' end end + --15
--'|' + isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'')  +  --15
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end + --16
'|' + isnull(RTRIM(LTRIM(isnull(0,''))),'')  +  --16
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(HPW,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(PriceBond,''))),'') else '' end end +
'|' + isnull(RTRIM(LTRIM(isnull(HPW,''))),'')  +  --17
'|' + isnull(RTRIM(LTRIM(isnull(Deposito,''))),'')  +  --18
'|' + case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(MarketValue,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end + --19
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TotalNilai,'')))),'')  +   --19
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeBK,'')))),'') + --20
'|' + '0' +--21
'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))),'') --22
from #KPD

select * from #text

                         ";
                                cmd.Parameters.AddWithValue("@Date", _OjkRpt.Date);
                                //cmd.Parameters.AddWithValue("@FundPK", _OjkRpt.Fund);

                                using (SqlDataReader dr = cmd.ExecuteReader())
                                {
                                    if (dr.HasRows)
                                    {


                                        string filePath = Tools.ARIATextPath + "AH002KPD.txt";
                                        FileInfo txtFile = new FileInfo(filePath);
                                        if (txtFile.Exists)
                                        {
                                            txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        }

                                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                        {
                                            while (dr.Read())
                                            {
                                                file.WriteLine(Convert.ToString(dr["ResultText"]));
                                            }
                                            //return Tools.HtmlARIATextPath + "AH002KPD.txt";
                                            return true;
                                        }

                                    }
                                    return false;
                                }

                            }
                        }
                    }
                    catch (Exception err)
                    {
                        throw err;
                    }

                }

                #endregion

                #region Excel

                if (_OjkRpt.DownloadMode == "Excel")
                {
                    try
                    {
                        using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                        {
                            DbCon.Open();
                            using (SqlCommand cmd = DbCon.CreateCommand())
                            {

                                cmd.CommandTimeout = 0;
                                cmd.CommandText =
                                @"
declare @FundPK int
create table #Text(      
[ResultText] [nvarchar](1000)  NULL          
)                        
        
        

--drop Table #KPD--
Create Table #KPD
(AUM nvarchar(50),CashAmount nvarchar(50),InstrumentTypePK int,PK int,KodeNasabah nvarchar(50),NamaNasabah nvarchar(50) ,NomorKontrak nvarchar(50),TanggalKontrak nvarchar(50),TanggalJatuhTempo nvarchar(50),
NomorAdendum nvarchar(50), TanggalAdendum nvarchar(50),NilaiInvestasiAwalIDR nvarchar(50), NilaiInvestasiAwalNonIDR nvarchar(50),NilaiInvestasiAkhir nvarchar(50),
NilaiInvestasiAkhirNonIDR nvarchar(50), JenisEfek nvarchar(50), DNatauLN int,JumlahEfek nvarchar(50),NilaiPembelian nvarchar(50), NilaiNominal nvarchar(50),
HPW nvarchar(50), Deposito nvarchar(50), TotalNilai nvarchar(50),KodeBK  nvarchar(50), type int,KodeSaham nvarchar(50),MarketValue nvarchar(50),SID nvarchar(50)
)

DECLARE A CURSOR FOR 
select FundPK
from Fund
where [Status] = 2 and FundTypeInternal = 2
Open A
Fetch Next From A
Into @FundPK

While @@FETCH_STATUS = 0
Begin


Insert into #KPD (AUM,CashAmount,InstrumentTypePK,PK,KodeNasabah ,NamaNasabah ,NomorKontrak,TanggalKontrak,TanggalJatuhTempo,
NomorAdendum, TanggalAdendum,NilaiInvestasiAwalIDR, NilaiInvestasiAwalNonIDR,NilaiInvestasiAkhir,
NilaiInvestasiAkhirNonIDR, JenisEfek, DNatauLN,JumlahEfek,NilaiPembelian, NilaiNominal,
HPW, Deposito, TotalNilai,KodeBK,type,KodeSaham,MarketValue,SID)
select F.AUM,E.CashAmount,InstrumentTypePK,ROW_NUMBER() OVER(ORDER BY C.ID ASC) AS PK,H.InvestorType KodeNasabah ,H.Name NamaNasabah ,NKPDName NomorKontrak,isnull(CONVERT(VARCHAR(8), A.EffectiveDate, 112),0) TanggalKontrak,isnull(CONVERT(VARCHAR(8), A.MaturityDate, 112),0) TanggalJatuhTempo,
0 NomorAdendum,0 TanggalAdendum,cast(isnull(TotalUnits,CAST(TotalUnits AS DECIMAL(22, 0))) * isnull(A.Nav,CAST(A.Nav AS DECIMAL(22, 0)))as DECIMAL(22, 0)) NilaiInvestasiAwalIDR,0 NilaiInvestasiAwalNonIDR,F.AUM NilaiInvestasiAkhir,
0 NilaiInvestasiAkhirNonIDR, C.ID JenisEfek,1 DNatauLN,CAST (B.Balance AS DECIMAL(22, 0)) JumlahEfek,CAST(B.CostValue AS DECIMAL(22, 0)) NilaiPembelian,CAST(0 AS DECIMAL(22, 2)) NilaiNominal,
case when C.InstrumentTypePK not in (1,5) then   CAST(B.ClosePrice AS DECIMAL(22, 6))  else CAST(B.ClosePrice AS DECIMAL(22, 0)) end HPW,CAST(0 AS DECIMAL(22, 2)) Deposito,0 TotalNilai,isnull(D.ID,0) KodeBK,C.InstrumentTypePK type, '1' KodeSaham,CAST(B.MarketValue AS DECIMAL(22, 0)) MarketValue,isnull(H.SID,'') SID from Fund A
left join FundPosition B on A.FundPK = B.FundPK and B.Status = 2
left join Instrument C on B.InstrumentPK = C.InstrumentPK and C.Status = 2 
left join BankBranch D on A.BankBranchPK = D.BankBranchPK and D.status  = 2
left join DistributedIncome E on A.FundPK = E.FundPK and E.status  = 2 and E.ValueDate <= @Date and Posted = 1
left join CloseNAV F on A.FundPK = F.FundPK and F.Status = 2 and F.Date = @Date
left join FundClientposition G on A.FundPK = G.FundPK
left join FundClient H on G.FundClientPK = H.FundClientPK and H.status = 2
--left join ClosePrice I on B.InstrumentPK = I.instrumentPK and I.status = 2 and B.Date = @Date
where A.FundPK = @FundPK and B.Date = @Date and A.status = 2
Group By  F.AUM,E.CashAmount,C.ID,H.InvestorType,H.Name,NKPDName,A.EffectiveDate,A.MaturityDate,A.TotalUnits,A.Nav,E.CashAmount,B.Balance,B.CostValue,B.ClosePrice,D.ID,C.InstrumentTypePK,B.MarketValue,A.FundPK,H.SID
order By C.ID asc

Fetch next From A Into @FundPK
end
Close A
Deallocate A

update #KPD set 
NomorAdendum = 0, TanggalAdendum = 0, NilaiInvestasiAwalNonIDR = 0, --NilaiInvestasiAkhir = CAST(0 AS DECIMAL(22, 2)),
NilaiInvestasiAkhirNonIDR = 0 where PK <> 1


select isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeNasabah,'')))),'') KodeNasabah --1
, isnull(RTRIM(LTRIM(isnull(NamaNasabah,''))),'') NamaNasabah     --2
, isnull(RTRIM(LTRIM(isnull(NomorKontrak,''))),'')  NomorKontrak  --3
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalKontrak,'')))),'')  TanggalKontrak  --4
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalJatuhTempo,'')))),'')  TanggalJatuhTempo  --5
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NomorAdendum,'')))),'')  NomorAdendum  --6
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TanggalAdendum,'')))),'')  TanggalAdendum  --7
, isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAwalIDR,''))),'') NilaiInvestasiAwalIDR   --8
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAwalNonIDR,'')))),'') NilaiInvestasiAwalNonIDR  --9
, isnull(RTRIM(LTRIM(isnull(NilaiInvestasiAkhir,''))),'') NilaiInvestasiAkhir  --10
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(NilaiInvestasiAkhirNonIDR,'')))),'') NilaiInvestasiAkhirNonIDR   --11
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JenisEfek,'')))),'')  JenisEfek  --12
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(DNatauLN,'')))),'') KodeKategoriEfek  --13
,case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeSaham,'')))),'') else '' end end JumlahEfek --14
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(JumlahEfek,'')))),'')  +  --14
, case when type = 1 then isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(JumlahEfek,''))),'') else '' end end NilaiPembelian --15
--'|' + isnull(RTRIM(LTRIM(isnull(NilaiPembelian,''))),'')  +  --15
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end + --16
, isnull(RTRIM(LTRIM(isnull(0,''))),'')  NilaiNominal  --16
--'|' + case when type = 1 then isnull(RTRIM(LTRIM(isnull(HPW,''))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(PriceBond,''))),'') else '' end end +
, isnull(RTRIM(LTRIM(isnull(HPW,''))),'') HPW   --17
, isnull(RTRIM(LTRIM(isnull(Deposito,''))),'')  Deposito  --18
, case when type = 1 then isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(MarketValue,'')))),'') else case when type not in (1,5) then isnull(RTRIM(LTRIM(isnull(MarketValue,''))),'') else '' end end TotalInvestasi --19
--'|' + isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(TotalNilai,'')))),'')    --19
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(KodeBK,'')))),'') KodeBK --20
, '0' Keterangan --21
, isnull(RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(SID,'')))),'') SID --22
from #KPD
                            ";


                                //cmd.Parameters.AddWithValue("@date", _sInvestRpt.ParamDate);

                                cmd.Parameters.AddWithValue("@Date", _OjkRpt.Date);
                                //cmd.Parameters.AddWithValue("@FundPK", _OjkRpt.FundFrom);

                                using (SqlDataReader dr0 = cmd.ExecuteReader())
                                {
                                    if (!dr0.HasRows)
                                    {
                                        return false;
                                    }
                                    else
                                    {
                                        string filePath = Tools.ReportsPath + "KPD" + "_" + _userID + ".xlsx";
                                        string pdfPath = Tools.ReportsPath + "KPD" + "_" + _userID + ".pdf";
                                        FileInfo excelFile = new FileInfo(filePath);
                                        if (excelFile.Exists)
                                        {
                                            excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                            excelFile = new FileInfo(filePath);
                                        }


                                        // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                        using (ExcelPackage package = new ExcelPackage(excelFile))
                                        {
                                            package.Workbook.Properties.Title = "KPDReport";
                                            package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                            package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                            package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                            package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                            package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                            ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("KPD Report");


                                            //ATUR DATA GROUPINGNYA DULU
                                            List<KPD> rList = new List<KPD>();
                                            while (dr0.Read())
                                            {
                                                KPD rSingle = new KPD();
                                                rSingle.KodeNasabah = Convert.ToString(dr0["KodeNasabah"]);
                                                rSingle.NamaNasabah = Convert.ToString(dr0["NamaNasabah"]);
                                                rSingle.NomorKontrak = Convert.ToString(dr0["NomorKontrak"]);
                                                rSingle.TanggalKontrak = Convert.ToString(dr0["TanggalKontrak"]);
                                                rSingle.TanggalJatuhTempo = Convert.ToString(dr0["TanggalJatuhTempo"]);
                                                rSingle.NomorAdendum = Convert.ToString(dr0["NomorAdendum"]);
                                                rSingle.TanggalAdendum = Convert.ToString(dr0["TanggalAdendum"]);
                                                rSingle.NilaiInvestasiAwalIDR = Convert.ToString(dr0["NilaiInvestasiAwalIDR"]);
                                                rSingle.NilaiInvestasiAwalNonIDR = Convert.ToString(dr0["NilaiInvestasiAwalNonIDR"]);
                                                rSingle.NilaiInvestasiAkhir = Convert.ToString(dr0["NilaiInvestasiAkhir"]);
                                                rSingle.NilaiInvestasiAkhirNonIDR = Convert.ToString(dr0["NilaiInvestasiAkhirNonIDR"]);
                                                rSingle.JenisEfek = Convert.ToString(dr0["JenisEfek"]);
                                                rSingle.KodeKategoriEfek = Convert.ToInt32(dr0["KodeKategoriEfek"]);
                                                rSingle.JumlahEfek = Convert.ToString(dr0["JumlahEfek"]);
                                                rSingle.NilaiPembelian = Convert.ToString(dr0["NilaiPembelian"]);
                                                rSingle.NilaiNominal = Convert.ToString(dr0["NilaiNominal"]);
                                                rSingle.HPW = Convert.ToString(dr0["HPW"]);
                                                rSingle.Deposito = Convert.ToString(dr0["Deposito"]);
                                                rSingle.TotalInvestasi = Convert.ToString(dr0["TotalInvestasi"]);
                                                rSingle.KodeBK = Convert.ToString(dr0["KodeBK"]);
                                                rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);
                                                rSingle.SID = Convert.ToString(dr0["SID"]);
                                                rList.Add(rSingle);

                                            }

                                            var QueryByClientID =
                                             from r in rList
                                             group r by new { } into rGroup
                                             select rGroup;

                                            int incRowExcel = 0;
                                            int _startRowDetail = 0;
                                            foreach (var rsHeader in QueryByClientID)
                                            {

                                                incRowExcel++;
                                                //Row A = 2
                                                int RowA = incRowExcel;
                                                int RowB = incRowExcel + 1;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Dotted;

                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.WrapText = true;

                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSteelBlue);

                                                worksheet.Cells[incRowExcel, 1].Value = "Kode Nasabah";
                                                worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                                worksheet.Cells[incRowExcel, 3].Value = "Nomer Kontrak";
                                                worksheet.Cells[incRowExcel, 4].Value = "Tanggal Kontrak";
                                                worksheet.Cells[incRowExcel, 5].Value = "Tanggal Jatuh Tempo";
                                                worksheet.Cells[incRowExcel, 6].Value = "Nomer Adendum";
                                                worksheet.Cells[incRowExcel, 7].Value = "Tanggal Adendum";
                                                worksheet.Cells[incRowExcel, 8].Value = "Nilai Investasi Awal IDR";
                                                worksheet.Cells[incRowExcel, 9].Value = "Nilai Investasi Awal Non IDR";
                                                worksheet.Cells[incRowExcel, 10].Value = "Nilai investtasi Akhir IDR";
                                                worksheet.Cells[incRowExcel, 11].Value = "Nilai investasi Akhir Non IDR";
                                                worksheet.Cells[incRowExcel, 12].Value = "Kode Efek";
                                                worksheet.Cells[incRowExcel, 13].Value = "Kode Kategori Efek";
                                                worksheet.Cells[incRowExcel, 14].Value = "Jumlah Efek";
                                                worksheet.Cells[incRowExcel, 15].Value = "Nilai Pembelian";
                                                worksheet.Cells[incRowExcel, 16].Value = "Nilai Nominal";
                                                worksheet.Cells[incRowExcel, 17].Value = "HPW";
                                                worksheet.Cells[incRowExcel, 18].Value = "Deposito";
                                                worksheet.Cells[incRowExcel, 19].Value = "Total Investtasi";
                                                worksheet.Cells[incRowExcel, 20].Value = "Kode BK";
                                                worksheet.Cells[incRowExcel, 21].Value = "Keterangan";
                                                worksheet.Cells[incRowExcel, 22].Value = "SID";

                                                //area header
                                                int _endRowDetail = 0;
                                                int _startRow = incRowExcel;
                                                incRowExcel++;
                                                _startRowDetail = incRowExcel;
                                                foreach (var rsDetail in rsHeader)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.KodeNasabah;
                                                    worksheet.Cells[incRowExcel, 1].Style.WrapText = true;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaNasabah;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.NomorKontrak;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.TanggalKontrak;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.TanggalJatuhTempo;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.NomorAdendum;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.TanggalAdendum;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NilaiInvestasiAwalIDR;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.NilaiInvestasiAwalNonIDR;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.NilaiInvestasiAkhir;
                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.NilaiInvestasiAkhirNonIDR;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.JenisEfek;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.KodeKategoriEfek;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.JumlahEfek;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.NilaiPembelian;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.NilaiNominal;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.HPW;
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.Deposito;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.TotalInvestasi;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.KodeBK;
                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.Keterangan;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.SID;

                                                    _endRowDetail = incRowExcel;

                                                    incRowExcel++;


                                                }

                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightSeaGreen);
                                                //worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 19].Formula = "SUM(S" + _startRowDetail + ":S" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 20].Formula = "SUM(T" + _startRowDetail + ":T" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 21].Formula = "SUM(U" + _startRowDetail + ":U" + _endRowDetail + ")";
                                                //worksheet.Cells[incRowExcel, 22].Formula = "SUM(V" + _startRowDetail + ":V" + _endRowDetail + ")";
                                                //worksheet.Cells["A" + incRowExcel + ":A" + incRowExcel].Calculate();
                                                //worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Calculate();
                                                //worksheet.Cells["C" + incRowExcel + ":C" + incRowExcel].Calculate();
                                                //worksheet.Cells["D" + incRowExcel + ":D" + incRowExcel].Calculate();
                                                //worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Calculate();
                                                //worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Calculate();
                                                //worksheet.Cells["G" + incRowExcel + ":G" + incRowExcel].Calculate();
                                                //worksheet.Cells["H" + incRowExcel + ":H" + incRowExcel].Calculate();
                                                //worksheet.Cells["I" + incRowExcel + ":J" + incRowExcel].Calculate();
                                                //worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Calculate();
                                                //worksheet.Cells["K" + incRowExcel + ":L" + incRowExcel].Calculate();
                                                //worksheet.Cells["L" + incRowExcel + ":M" + incRowExcel].Calculate();
                                                //worksheet.Cells["M" + incRowExcel + ":N" + incRowExcel].Calculate();
                                                //worksheet.Cells["N" + incRowExcel + ":O" + incRowExcel].Calculate();
                                                //worksheet.Cells["O" + incRowExcel + ":P" + incRowExcel].Calculate();
                                                //worksheet.Cells["P" + incRowExcel + ":Q" + incRowExcel].Calculate();
                                                //worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Calculate();
                                                //worksheet.Cells["R" + incRowExcel + ":S" + incRowExcel].Calculate();
                                                //worksheet.Cells["S" + incRowExcel + ":T" + incRowExcel].Calculate();
                                                //worksheet.Cells["T" + incRowExcel + ":U" + incRowExcel].Calculate();
                                                //worksheet.Cells["U" + incRowExcel + ":V" + incRowExcel].Calculate();
                                                //worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Numberformat.Format = "#,##0";
                                                //worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Font.Bold = true;

                                                worksheet.Cells["A" + _startRow + ":V" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _startRow + ":V" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + _startRow + ":V" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + incRowExcel + ":V" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                                incRowExcel++;
                                            }



                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 1;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 22];
                                            worksheet.Column(1).Width = 9;
                                            worksheet.Column(2).Width = 35;
                                            worksheet.Column(3).Width = 20;
                                            worksheet.Column(4).Width = 20;
                                            worksheet.Column(5).Width = 20;
                                            worksheet.Column(6).Width = 20;
                                            worksheet.Column(7).Width = 20;
                                            worksheet.Column(8).Width = 20;
                                            worksheet.Column(9).Width = 20;
                                            worksheet.Column(10).Width = 20;
                                            worksheet.Column(11).Width = 20;
                                            worksheet.Column(12).Width = 20;
                                            worksheet.Column(13).Width = 20;
                                            worksheet.Column(14).Width = 20;
                                            worksheet.Column(15).Width = 20;
                                            worksheet.Column(16).Width = 20;
                                            worksheet.Column(17).Width = 20;
                                            worksheet.Column(18).Width = 20;
                                            worksheet.Column(19).Width = 20;
                                            worksheet.Column(20).Width = 20;
                                            worksheet.Column(21).Width = 20;
                                            worksheet.Column(22).Width = 20;



                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells["A3:O14"].AutoFitColumns();  // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 KPD REPORT";

                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                            package.Save();
                                            return true;
                                        }
                                    }
                                }

                            }

                        }
                    }
                    catch (Exception err)
                    {
                        return false;
                        throw err;
                    }

                }



                #endregion

                return true;
            }//else if
            #endregion



            else
            {
                return false;
            }
        }


    }
}