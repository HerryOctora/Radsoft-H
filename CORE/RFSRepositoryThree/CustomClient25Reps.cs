using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Text;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;
using RFSRepository;
using OfficeOpenXml.Drawing.Chart;
using System.Xml;


namespace RFSRepositoryThree
{
    public class CustomClient25Reps
    {
        Host _host = new Host();

        public string ImportOmsEquityTemp(string _fileSource, string _userID, string _valueDate)
        {
            string _msg = string.Empty;
            DateTime _now = DateTime.Now;
            try
            {
                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        cmd2.CommandText = "truncate table dbo.ZTEMP_IMPORTEQUITYVALBURY";
                        cmd2.ExecuteNonQuery();
                    }
                }

                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                {
                    bulkCopy.DestinationTableName = "dbo.ZTEMP_IMPORTEQUITYVALBURY";
                    bulkCopy.WriteToServer(CreateDataTableFromOMSEquityTempExcelFile(_fileSource));
                }

                using (SqlConnection conn = new SqlConnection(Tools.conString))
                {
                    conn.Open();
                    using (SqlCommand cmd2 = conn.CreateCommand())
                    {
                        // logic Checks
                        // 1. Instrument sudah ada atau belum di investment sesuai valudate
                        // 2. instrument sudah ada atau belum di master instrument
                        // 3. check enddaytrails fund portfolio di hari itu uda ada apa belum
                        // 4. check available cash
                        // 5. check price exposure
                        // 6. 
                        cmd2.CommandTimeout = 0;
                        cmd2.CommandText =
                            @"
                              --declare @ValueDate		date,
--        @UsersID		nvarchar(100),
--        @LastUpdate		datetime

--set @ValueDate		= getdate()
--set @UsersID		= 'aming'
--set @LastUpdate		= getdate()


Declare @CurReference nvarchar(100)  
Declare @PK int    
Declare @CFundID nvarchar(100)
	
declare @RegDays int
select @RegDays = RegDays from SettlementSetup where status = 2
	           
declare @success	int,
@msg		nvarchar(max)

set @success	= 1
set @msg		= ''


if exists (select * from ZTEMP_IMPORTEQUITYVALBURY where BuySell <> 'B/S' and InstrumentID  <> '')
begin
-- Cek Data Import

--if not exists (
--select *
--from Investment
--where StatusInvestment in (1,2) and ValueDate = @ValueDate
--and InstrumentPK in (
--	select distinct b.InstrumentPK
--	from ZTEMP_IMPORTEQUITYVALBURY a
--		left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
--	where a.BuySell <> 'B/S' and a.InstrumentID <> ''
--)
--)
begin
-- Cek Master Instrument
if not exists (
select distinct InstrumentID
from ZTEMP_IMPORTEQUITYVALBURY 
where BuySell <> 'B/S' and InstrumentID not in (select distinct ID from Instrument where [Status] = 2) and InstrumentID <> ''
)
begin
	begin transaction

	declare @PeriodPK		int,
			@Type			nvarchar(100),
			@LastNo			int

	declare @MaxInvestmentPK		bigint,
			@MaxDealingPK			bigint,
			@CInstrumentPK			int,
			@CInstrumentTypePK		int,
			@CFundPK				int,
			@CMarketPK				int,
			@CLotInShare			numeric(18,4),
			@CBuySell				nvarchar(20),
			@CInstrumentID			nvarchar(100),
			@CPrice					numeric(22,6),
			@CLot					numeric(22,4),
			@CVolume					numeric(22,4),
			@CAmount				numeric(22,4),
			@CBitContinueSave		bit
		
	select @PeriodPK = PeriodPK 
	from Period 
	where @ValueDate between DateFrom and DateTo and [Status] = 2

		set @Type	= 'INV'
		set @LastNo	= 0

	declare @Cp1 nvarchar(100), @Cp2 nvarchar(100), @Cp3 nvarchar(100), @Cp4 nvarchar(100), @Cp5 nvarchar(100),
			@Cp6 nvarchar(100), @Cp7 nvarchar(100), @Cp8 nvarchar(100), @Cp9 nvarchar(100), @Cp10 nvarchar(100),
			@Cp11 nvarchar(100), @Cp12 nvarchar(100), @Cp13 nvarchar(100), @Cp14 nvarchar(100), @Cp15 nvarchar(100), @Cp16 nvarchar(100),
			@Cp17 nvarchar(100), @Cp18 nvarchar(100), @Cp19 nvarchar(100), @Cp20 nvarchar(100), @Cp21 nvarchar(100), @Cp22 nvarchar(100),
			@Cp23 nvarchar(100), @Cp24 nvarchar(100), @Cp25 nvarchar(100), @Cp26 nvarchar(100), @Cp27 nvarchar(100), @Cp28 nvarchar(100),
			@Cp29 nvarchar(100), @Notes nvarchar(500)
												
	declare @BitOMSEndDayTrailsFundPortfolio	bit,
			@BitAvailableCash					bit,
			@MinPrice							numeric(18,4),
			@MaxPrice							numeric(18,4),
			@Validate							bit,
			@ExposureType						nvarchar(100),
			@ExposureID							nvarchar(100),
			@AlertExposure						int,
			@ExposurePercent					numeric(18,4),
			@MaxExposurePercent					numeric(18,4),
			@MinExposurePercent					numeric(18,4),
			@TrxBuy								int,
			@TrxBuyType							nvarchar(50),
			@MethodType							int,
			@BitAvailableInstrument				bit

	declare @LastRow int
		set @LastRow = 0

	declare curImport cursor for
		select top 1 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29, Remarks
		from ZTEMP_IMPORTEQUITYVALBURY 
		where BuySell = 'B/S' and InstrumentID <> ''
	open curImport

	fetch next from curImport
	into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16, 
		@Cp17, @Cp18, @Cp19 , @Cp20 , @Cp21 , @Cp22 , @Cp23 , @Cp24 , @Cp25 , @Cp26 , @Cp27 , @Cp28 , @Cp29 , @Notes 

	while @@fetch_status = 0  

	begin  
		if @Cp1 <> 'Spare Fund' and isnull(@Cp1, '') <> '' and len(@Cp1) <> 0
		begin
			declare curCp1 Cursor For
											
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,6)) as CPrice, cast(isnull(a.F1, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F1, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F1, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,6)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp1 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F1 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp1

			fetch next from curCp1   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 11
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 12
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 13
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)
														
								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
									set @success	= 14
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end
														
								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
										
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 15
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 16
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 17
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
								--select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp1   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp1
			deallocate curCp1
		end
			
		if @Cp2 <> 'Spare Fund' and isnull(@Cp2, '') <> '' and len(@Cp2) <> 0
		
		begin
			declare curCp2 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F2, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F2, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F2, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp2 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F2 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp2

			fetch next from curCp2   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 21
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 22
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 23
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 24
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate
									
									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
								        --from CashierReference 
								        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 25
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 26
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 27
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment							
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment									
								--select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	
			
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp2   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp2
			deallocate curCp2
		end
					
		if @Cp3 <> 'Spare Fund' and isnull(@Cp3, '') <> '' and len(@Cp3) <> 0
		begin
			declare curCp3 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F3, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F3, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F3, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp3 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F3 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp3

			fetch next from curCp3   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 31
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 32
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 33
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								
									set @success	= 34
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
								        --from CashierReference 
								        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	
													
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 35
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 36
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 37
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
								--from CashierReference 
								--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END	
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp3   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp3
			deallocate curCp3
		end
					
		if @Cp4 <> 'Spare Fund' and isnull(@Cp4, '') <> '' and len(@Cp4) <> 0
		begin
			declare curCp4 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F4, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F4, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F4, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp4 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F4 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp4

			fetch next from curCp4   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 41
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 42
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 43
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 44
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END 

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END		

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 45
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 46
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 47
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp4   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp4
			deallocate curCp4
		end

		if @Cp5 <> 'Spare Fund' and isnull(@Cp5, '') <> '' and len(@Cp5) <> 0
		begin
			declare curCp5 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F5, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F5, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F5, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp5 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F5 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp5

			fetch next from curCp5   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 51
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 52
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 53
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 54
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 55
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 56
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 57
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
							    --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp5   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp5
			deallocate curCp5
		end

		if @Cp6 <> 'Spare Fund' and isnull(@Cp6, '') <> '' and len(@Cp6) <> 0
		begin
			declare curCp6 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F6, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F6, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F6, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp6 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F6 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp6

			fetch next from curCp6   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 61
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 62
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 63
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 64
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 65
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 66
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 67
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
								--select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
									
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp6   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp6
			deallocate curCp6
		end

		if @Cp7 <> 'Spare Fund' and isnull(@Cp7, '') <> '' and len(@Cp7) <> 0
		begin
			declare curCp7 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F7, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F7, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F7, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp7 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F7 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp7

			fetch next from curCp7   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 71
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 72
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 73
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 74
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
		                                --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
	
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 75
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 76
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 77
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									cast(@LastNo as nvarchar(10)) + '/' + @Type + '/' + replace(right(convert(nvarchar(8), @ValueDate, 3), 5), '/', '') as Reference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp7   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp7
			deallocate curCp7
		end

		if @Cp8 <> 'Spare Fund' and isnull(@Cp8, '') <> '' and len(@Cp8) <> 0
		begin
			declare curCp8 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F8, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F8, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F8, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp8 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F8 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp8

			fetch next from curCp8   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 81
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 82
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 83
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 84
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
				
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 85
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 86
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 87
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
				
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp8   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp8
			deallocate curCp8
		end

		if @Cp9 <> 'Spare Fund' and isnull(@Cp9, '') <> '' and len(@Cp9) <> 0
		begin
			declare curCp9 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F9, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F9, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F9, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp9 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F9 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp9

			fetch next from curCp9   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 91
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 92
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 93
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 94
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 95
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 96
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 97
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment							
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment									
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp9   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp9
			deallocate curCp9
		end

		if @Cp10 <> 'Spare Fund' and isnull(@Cp10, '') <> '' and len(@Cp10) <> 0
		begin
			declare curCp10 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F10, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F10, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F10, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp10 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F10 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp10

			fetch next from curCp10   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 101
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 102
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 103
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 104
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                 set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 105
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 106
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 107
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                          set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp10   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp10
			deallocate curCp10
		end

		if @Cp11 <> 'Spare Fund' and isnull(@Cp11, '') <> '' and len(@Cp11) <> 0
		begin
			declare curCp11 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F11, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F11, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F11, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp11 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F11 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp11

			fetch next from curCp11   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 111
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 112
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 113
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 114
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 115
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 116
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 117
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp11   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp11
			deallocate curCp11
		end

		if @Cp12 <> 'Spare Fund' and isnull(@Cp12, '') <> '' and len(@Cp12) <> 0
		begin
			declare curCp12 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F12, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F12, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F12, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp12 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F12 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp12

			fetch next from curCp12   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 121
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 122
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 123
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 124
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
										select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 125
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 126
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 127
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
													
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp12   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp12
			deallocate curCp12
		end

		if @Cp13 <> 'Spare Fund' and isnull(@Cp13, '') <> '' and len(@Cp13) <> 0
		begin
			declare curCp13 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F13, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F13, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F13, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp13 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F13 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp13

			fetch next from curCp13   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 131
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 132
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 133
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 134
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 135
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 136
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 137
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp13   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp13
			deallocate curCp13
		end

		if @Cp14 <> 'Spare Fund' and isnull(@Cp14, '') <> '' and len(@Cp14) <> 0
		begin
			declare curCp14 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F14, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F14, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F14, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp14 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F14 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp14

			fetch next from curCp14   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 141
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 142
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 143
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 144
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                        set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                       set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
			
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 145
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 146
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 147
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                          set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
				
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp14   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp14
			deallocate curCp14
		end

		if @Cp15 <> 'Spare Fund' and isnull(@Cp15, '') <> '' and len(@Cp15) <> 0
		begin
			declare curCp15 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F15, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F15, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F15, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp15 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F15 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp15

			fetch next from curCp15   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 151
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 152
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 153
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 154
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                                     set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                       set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 155
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 156
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 157
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                                set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
					
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp15   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp15
			deallocate curCp15
		end

		if @Cp16 <> 'Spare Fund' and isnull(@Cp16, '') <> '' and len(@Cp16) <> 0
		begin
			declare curCp16 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @Cp16 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCp16

			fetch next from curCp16   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 161
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 162
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 163
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 164
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 165
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 166
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 167
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCp16   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCp16
			deallocate curCp16
		end
		
		if @CP17 <> 'Spare Fund' and isnull(@CP17, '') <> '' and len(@CP17) <> 0
		begin
			declare curCP17 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP17 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP17

			fetch next from curCP17   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 168
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 169
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 170
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 171
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 172
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 173
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 174
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP17   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP17
			deallocate curCP17
		end

		if @CP18 <> 'Spare Fund' and isnull(@CP18, '') <> '' and len(@CP18) <> 0
		begin
			declare curCP18 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP18 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP18

			fetch next from curCP18   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 175
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 176
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 177
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 178
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 179
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 180
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 181
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP18   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP18
			deallocate curCP18
		end

		if @CP19 <> 'Spare Fund' and isnull(@CP19, '') <> '' and len(@CP19) <> 0
		begin
			declare curCP19 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP19 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP19

			fetch next from curCP19   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 192
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 193
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 194
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 195
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 196
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 197
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 198
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP19   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP19
			deallocate curCP19
		end

		if @CP20 <> 'Spare Fund' and isnull(@CP20, '') <> '' and len(@CP20) <> 0
		begin
			declare curCP20 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP20 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP20

			fetch next from curCP20   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 199
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 200
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 201
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 202
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 203
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 204
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 205
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP20   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP20
			deallocate curCP20
		end

		if @CP21 <> 'Spare Fund' and isnull(@CP21, '') <> '' and len(@CP21) <> 0
		begin
			declare curCP21 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP21 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP21

			fetch next from curCP21   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 206
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 207
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 208
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 209
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 210
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 211
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 212
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP21   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP21
			deallocate curCP21
		end

		if @CP22 <> 'Spare Fund' and isnull(@CP22, '') <> '' and len(@CP22) <> 0
		begin
			declare curCP22 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP22 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP22

			fetch next from curCP22   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 213
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 214
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 215
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 216
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 217
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 218
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 219
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP22   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP22
			deallocate curCP22
		end

		if @CP23 <> 'Spare Fund' and isnull(@CP23, '') <> '' and len(@CP23) <> 0
		begin
			declare curCP23 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP23 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP23

			fetch next from curCP23   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 220
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 221
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 222
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 223
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment			
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment													
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 224
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 225
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 226
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP23   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP23
			deallocate curCP23
		end

		if @CP24 <> 'Spare Fund' and isnull(@CP24, '') <> '' and len(@CP24) <> 0
		begin
			declare curCP24 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP24 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP24

			fetch next from curCP24   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 227
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 228
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 229
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 230
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 231
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 232
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 233
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP24   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP24
			deallocate curCP24
		end

		if @CP25 <> 'Spare Fund' and isnull(@CP25, '') <> '' and len(@CP25) <> 0
		begin
			declare curCP25 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP25 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP25

			fetch next from curCP25   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 234
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 235
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 236
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 237
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment					
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment											
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 238
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 239
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 240
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP25   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP25
			deallocate curCP25
		end

		if @CP26 <> 'Spare Fund' and isnull(@CP26, '') <> '' and len(@CP26) <> 0
		begin
			declare curCP26 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP26 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP26

			fetch next from curCP26   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 241
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 242
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 243
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 244
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 245
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 246
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 247
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP26   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP26
			deallocate curCP26
		end

		if @CP27 <> 'Spare Fund' and isnull(@CP27, '') <> '' and len(@CP27) <> 0
		begin
			declare curCP27 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP27 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP27

			fetch next from curCP27   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 248
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 249
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 250
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 251
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 252
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 253
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 254
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP27   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP27
			deallocate curCP27
		end

		if @CP28 <> 'Spare Fund' and isnull(@CP28, '') <> '' and len(@CP28) <> 0
		begin
			declare curCP28 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP28 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP28

			fetch next from curCP28   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 255
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 256
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 257
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 258
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 259
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 260
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 261
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP28   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP28
			deallocate curCP28
		end

		if @CP29 <> 'Spare Fund' and isnull(@CP29, '') <> '' and len(@CP29) <> 0
		begin
			declare curCP29 Cursor For
				select 
					a.BuySell as CBuySell, a.InstrumentID as CInstrumentID, 
					cast(isnull(a.Price, 0) as numeric(22,4)) as CPrice, cast(isnull(a.F16, 0) as numeric(22,4)) as CLot, 
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) as CVolume,
					cast(isnull(a.F16, 0) as numeric(22,4)) * isnull(b.LotInShare, 0) * cast(isnull(a.Price, 0) as numeric(22,4)) as CAmount,
					b.MarketPK, b.InstrumentPK, b.InstrumentTypePK, isnull(b.LotInShare, 0) as LotInShare, c.FundPK, 
					cast(1 as int) as MethodType, cast(1 as bit) as CBitContinueSave,a.Remarks
				from ZTEMP_IMPORTEQUITYVALBURY a
					left join Instrument b on a.InstrumentID = b.ID and b.[Status] = 2
					left join Fund c on c.ID = @CP29 and c.[Status] = 2
				where a.BuySell <> 'B/S' and cast(F16 as numeric(22,4)) > 0 and a.InstrumentID <> ''
			open curCP29

			fetch next from curCP29   
			into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes

			while @@fetch_status = 0  
			begin
				---- Cek Data
				--select @CBuySell as CBuySell, @CInstrumentID as CInstrumentID, @CPrice as CPrice, @CLot as CLot, @CVolume as Volume, @CAmount as CAmount,
				--@CMarketPK as MarketPK, @CInstrumentPK as InstrumentPK, @CInstrumentTypePK as InstrumentTypePK, @CLotInShare as LotInShare, 
				--@CFundPK as FundPK, @MethodType as MethodType, @CBitContinueSave as BitContinueSave
								
				if @CBuySell = 'B'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 262
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Available Cash
						select @BitAvailableCash = 0
									
						if isnull(@BitAvailableCash, 0) = 1
						begin
						 
							set @success	= 263
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Cash Not Available '
						end

						if isnull(@BitAvailableCash, 0) = 0 -- Cash Available
						begin
							-- Check Price Exposure
							select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
							from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
										
							if isnull(@Validate, 0) = 1
							begin
							 
								set @success	= 264
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
							end

							if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
							begin
								-- Check Exposure
								select @ExposureType = ExposureType, @ExposureID = ExposureID, @AlertExposure = AlertExposure,
									@ExposurePercent = ExposurePercent, @MaxExposurePercent = MaxExposurePercent, @MinExposurePercent = MinExposurePercent
								from [dbo].[FCheckExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CAmount,1)

								-- AlertExposure = 1 => AlertMaxExposure = 0 and WarningMaxExposure = 1
								-- AlertExposure = 2 => AlertMaxExposure = 1 and WarningMaxExposure = 1
								-- AlertExposure = 3 => AlertMinExposure = 0 and WarningMinExposure = 1
								-- AlertExposure = 4 => AlertMinExposure = 1 and WarningMinExposure = 1
											
								if  isnull(@AlertExposure,0)  in (2,4)
								begin
								 
									set @success	= 265
									if @AlertExposure = 2
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
									end
									if @AlertExposure = 4
									begin
										set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Exposure Percent : ' + cast(@MinExposurePercent as nvarchar(30))
									end
								end

								if  isnull(@AlertExposure,0) not in (2,4)
								begin
									if (@AlertExposure in (1,3) and @CBitContinueSave = 1)
									begin
											select @CFundID = ID From Fund where FundPK = @CFundPK
										set @msg		= 'Exposure Fund : ' + cast(@CFundID as nvarchar(30)) + ', Instrument : ' + cast(@CInstrumentID as nvarchar(30)) + ',Exposure Percent : ' + cast(@ExposurePercent as nvarchar(30)) + ', Max Exposure Percent : ' + cast(@MaxExposurePercent as nvarchar(30))
								

										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
										--select @LastNo = isnull(max([No]) , 0) + 1
										--from CashierReference 
										--where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
												
                   set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END

										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9
											, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									
									select @PK = Max(highRiskMonitoringPK) + 1 from HighRiskMonitoring
									set @PK = isnull(@PK,1)

									insert into HighRiskMonitoring(HighRiskMonitoringPK,HistoryPK,status,HighRiskType,FundClientPK,Date,Reason,EntryUsersID,EntryTime,LastUpdate)
									Select @PK,1,1,1,@MaxInvestmentPK,@valuedate,@msg,@UsersID,@LastUpdate,@LastUpdate

									end
									else
									begin
										select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment				
										select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment												
                                        --select @LastNo = isnull(max([No]) , 0) + 1
                                        --from CashierReference 
                                        --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                              set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
		
										insert into Investment (
											InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
											InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
											OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
											SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
											CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
											IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
											IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
											AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
											PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
											ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
											SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
											AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
											AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
										)
										select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
											2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
											@CurReference,
											@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
											0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
											cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
											0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
											cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
											0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
											0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
											0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
											0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
											0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
											0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
											@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
											@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
											0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
											0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
											0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
									end
								end
							end
						end
					end
				end
							
				if @CBuySell = 'S'
				begin
					-- Check OMS End Day Trails Fund Portfolio
					select @BitOMSEndDayTrailsFundPortfolio = 0
								
					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 1
					begin
					 
						set @success	= 266
						set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> End Day Trails Fund Portfolio Already Generated '
					end

					if isnull(@BitOMSEndDayTrailsFundPortfolio, 0) = 0 -- Belum Melakukan Generate End Day Trails FundPortfolio
					begin
						-- Check Price Exposure
						select @MinPrice = MinPrice, @MaxPrice = MaxPrice, @Validate = Validate
						from [dbo].[FCheckPriceExposure] (@ValueDate, @CInstrumentPK, @CFundPK, @CPrice)
									
						if isnull(@Validate, 0) = 1
						begin
						 
							set @success	= 267
							set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Exposure : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br> Min Price : ' + cast(@MinPrice as nvarchar(30)) + ' </br> and Max Price : ' + cast(@MaxPrice as nvarchar(30))
						end

						if isnull(@Validate, 0) = 0 -- Validate Completed, Price yg digunakan ada diantara Range Price (Min Price ...Price... Max Price)
						begin
							-- Check Available Instrument
							set @TrxBuy		= 0
							set @TrxBuyType	= ''
							select @BitAvailableInstrument = 0
										
							if isnull(@BitAvailableInstrument, 0) = 1
							begin
							 
								set @success	= 268
								set @msg		= 'Import OMS Equity Canceled, </br> Can Not Process This Data! ' + ' </br> Short Sell : ' + cast(@CInstrumentID as nvarchar(30)) + ' </br>'
							end

							if isnull(@BitAvailableInstrument, 0) = 0 -- Instrument Available 
							begin
								select @MaxInvestmentPK = isnull(max(InvestmentPK), 0) + 1 from Investment						
								select @MaxDealingPK = isnull(max(DealingPK), 0) + 1 from Investment										
                                --select @LastNo = isnull(max([No]) , 0) + 1
                                --from CashierReference 
                                --where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)   
								
                            set @CurReference = dbo.FGetFundJournalReference(@ValueDate,'INV')

Select @LastNo = max(No) + 1 From CashierReference where Type = 'INV' And PeriodPK = @periodPK and 
substring(right(reference,4),1,2) = month(@ValueDate) 

if exists(Select Top 1 * from cashierReference where Type = @type And PeriodPK = @PeriodPK 
and substring(right(reference,4),1,2) = month(@ValueDate)  )    
BEGIN
	Update CashierReference Set Reference = @CurReference, No = @LastNo where Type = 'INV' And PeriodPK = @periodPK 
	and substring(right(reference,4),1,2) = month(@ValueDate) 
END
ELSE
BEGIN
	Insert Into CashierReference(CashierReferencePK,PeriodPK,Type,Reference,No) 
	Select isnull(Max(CashierReferencePK),0) +  1,@periodPK,'INV',@CurReference,1 from CashierReference 
END
							
								insert into Investment (
									InvestmentPK, DealingPK, SettlementPK, HistoryPK, StatusInvestment, StatusDealing, StatusSettlement, ValueDate, MarketPK, PeriodPK, 
									InstructionDate, Reference, InstrumentTypePK, TrxType, TrxTypeID, CounterpartPK, InstrumentPK, FundPK, FundCashRefPK, 
									OrderPrice, Lot, LotInShare, RangePrice, AcqPrice, Volume, Amount, InterestPercent, BreakInterestPercent, AccruedInterest,
									SettlementDate, InvestmentNotes, DoneLot, DoneVolume, DonePrice, DoneAmount, Tenor, 
									CommissionPercent, LevyPercent, KPEIPercent, VATPercent, WHTPercent, OTCPercent, IncomeTaxSellPercent, 
									IncomeTaxInterestPercent, IncomeTaxGainPercent, CommissionAmount, LevyAmount, KPEIAmount, VATAmount, WHTAmount, OTCAmount, 
									IncomeTaxSellAmount, IncomeTaxInterestAmount, IncomeTaxGainAmount, TotalAmount, CurrencyRate, 
									AcqPrice1, AcqPrice2, AcqPrice3, AcqPrice4, AcqPrice5, SettlementMode, BoardType, InterestDaysType, InterestPaymentType, 
									PaymentModeOnMaturity, PriceMode, BitIsAmortized, Posted, Revised, EntryUsersID, EntryTime, LastUpdate, Notes,
									ApprovedUsersID,ApprovedTime,EntryDealingID,EntryDealingTime,
									SelectedInvestment, SelectedDealing, SelectedSettlement, BankBranchPK, BankPK, 
									AcqVolume, AcqVolume1, AcqVolume2, AcqVolume3, AcqVolume4, AcqVolume5, AcqPrice6,
									AcqVolume6, AcqPrice7, AcqVolume7, AcqPrice8, AcqVolume8, AcqPrice9, AcqVolume9, TaxExpensePercent,YieldPercent,DoneAccruedInterest
								)
								select @MaxInvestmentPK as InvestmentPK, @MaxDealingPK as DealingPK, 0 as SettlementPK, 1 as HistoryPK,
									2 as StatusInvestment, 1 as StatusDealing, 0 as StatusSettlement, @ValueDate as ValueDate, @CMarketPK as MarketPK, @PeriodPK as PeriodPK, @ValueDate as InstructionDate,
									@CurReference,
									@CInstrumentTypePK as InstrumentTypePK, case when @CBuySell = 'B' then 1 else 2 end as TrxType, case when @CBuySell = 'B' then 'BUY' else 'SELL' end as TrxTypeID, 
									0 as CounterpartPK, @CInstrumentPK, @CFundPK, 0 as FundCashRefPK, cast(@CPrice as numeric(22,6)) as OrderPrice, cast(@CLot as numeric(22,4)) as Lot, 
									cast(@CLotInShare as numeric(22,4)) as LotInShare, 0 as RangePrice, 0 as AcqPrice, @CVolume as Volume, cast(@CAmount as numeric(22,4)) as Amount, 
									0 as InterestPercent, 0 as BreakInterestPercent, 0 as AccruedInterest, dbo.FWorkingDay(@ValueDate,@RegDays) as SettlementDate, @Notes as InvestmentNotes, 
									cast(@CLot as numeric(22,4)) as DoneLot, cast(@CVolume as numeric(22,4)) as DoneVolume, cast(@CPrice as numeric(22,6)) as DonePrice, cast(@CAmount as numeric(22,4)) as DoneAmount, 
									0 as Tenor, 0 as CommissionPercent, 0 as LevyPercent, 0 as KPEIPercent, 0 as VATPercent, 0 as WHTPercent, 0 as OTCPercent, 0 as IncomeTaxSellPercent, 
									0 as IncomeTaxInterestPercent, 0 as IncomeTaxGainPercent, 0 as CommissionAmount, 0 as LevyAmount, 0 as KPEIAmount, 0 as VATAmount, 0 as WHTAmount, 0 as OTCAmount, 
									0 as IncomeTaxSellAmount, 0 as IncomeTaxInterestAmount, 0 as IncomeTaxGainAmount, cast(@CAmount as numeric(22,4)) as TotalAmount,
									0 as CurrencyRate, 0 as AcqPrice1, 0 as AcqPrice2, 0 as AcqPrice3, 0 as AcqPrice4, 0 as AcqPrice5, 
									0 as SettlementMode, 1 as BoardType, 0 as InterestDaysType, 0 as InterestPaymentType, 
									0 as PaymentModeOnMaturity, 0 as PriceMode, 0 as BitIsAmortized, 0 as Posted, 0 as Revised, 
									@UsersID as EntryUsersID, @LastUpdate as EntryTime, @LastUpdate as LastUpdate, '' as Notes,
									@UsersID as ApprovedUsersID,@LastUpdate as ApprovedTime,@UsersID as EntryDealingID,@LastUpdate as EntryDealingTime,
									0 as SelectedInvestment, 0 as SelectedDealing, 0 as SelectedSettlement, 0 as BankBranchPK, 0 as BankPK, 
									0 as AcqVolume, 0 as AcqVolume1, 0 as AcqVolume2, 0 as AcqVolume3, 0 as AcqVolume4, 0 as AcqVolume5, 0 as AcqPrice6, 
									0 as AcqVolume6, 0 as AcqPrice7, 0 as AcqVolume7, 0 as AcqPrice8, 0 as AcqVolume8, 0 as AcqPrice9, 0 as AcqVolume9, 0 as TaxExpensePercent, 0 as YieldPercent, 0 as DoneAccruedInterest
							end
						end									
					end
				end

				fetch next from curCP29   
				into @CBuySell, @CInstrumentID, @CPrice, @CLot, @CVolume, @CAmount, @CMarketPK, @CInstrumentPK, @CInstrumentTypePK, @CLotInShare, @CFundPK, @MethodType, @CBitContinueSave, @Notes
			end   
			close curCP29
			deallocate curCP29
		end

		set @LastRow = @MaxInvestmentPK

		fetch next from curImport 
		into @Cp1, @Cp2, @Cp3, @Cp4, @Cp5, @Cp6, @Cp7, @Cp8, @Cp9, @Cp10, @Cp11, @Cp12, @Cp13, @Cp14, @Cp15, @Cp16, 
		@Cp17, @Cp18, @Cp19 , @Cp20 , @Cp21 , @Cp22 , @Cp23 , @Cp24 , @Cp25 , @Cp26 , @Cp27 , @Cp28 , @Cp29 , @Notes 
	end   
	close curImport
	deallocate curImport

	--if @LastRow > 0
	--begin
	--	update CashierReference set 
	--		Reference = cast(@LastRow as nvarchar(10)) + '/' + @Type  + '/' + replace(right(convert(nvarchar(8), @ValueDate, 3), 5) ,'/',''), 
	--		[No] = @LastNo + @LastRow 
	--	where [Type] = @Type and PeriodPK = @PeriodPK and substring(right(Reference, 4), 1, 2) = month(@ValueDate)    
	--end
if(@success < 10)
begin
	commit transaction
	set @msg = 'Import OMS Equity Success'
end
Else
begin
	rollback transaction
end
end
else
begin
	set @msg = 'Check Master Instrument'
end
end
--else
--begin
--	set @msg = 'Already Has this investment for this day'
--end
end
select @msg as ResultMsg

                            ";
                        cmd2.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd2.Parameters.AddWithValue("@UsersID", _userID);
                        cmd2.Parameters.AddWithValue("@LastUpdate", _now);
                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                        {
                            if (!dr2.HasRows)
                            {
                                _msg = "Import OMS Equity Canceled, import data not found!";
                            }
                            else
                            {
                                dr2.Read();
                                _msg = Convert.ToString(dr2["ResultMsg"]);
                            }
                        }
                    }
                }

                return _msg;
            }
            catch (Exception err)
            {
                return "Import OMS Equity Error : " + err.Message.ToString();
                throw err;
            }
        }


        private DataTable CreateDataTableFromOMSEquityTempExcelFile(string _path)
        {
            try
            {
                using (DataTable dt = new DataTable())
                {
                    DataColumn dc;
                    DataRow dr;

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "ID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "BuySell";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "InstrumentID";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Price";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F1";
                    dc.Unique = false;
                    dt.Columns.Add(dc);


                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F2";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F3";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F4";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F5";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F6";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F7";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F8";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F9";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F10";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F11";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F12";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F13";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F14";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F15";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F16";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F17";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F18";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F19";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F20";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F21";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F22";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F23";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F24";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F25";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F26";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F27";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F28";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "F29";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    dc = new DataColumn();
                    dc.DataType = System.Type.GetType("System.String");
                    dc.ColumnName = "Remarks";
                    dc.Unique = false;
                    dt.Columns.Add(dc);

                    using (OleDbConnection odConnection = new OleDbConnection(Tools.ConStringExcel2007(_path)))
                    {
                        odConnection.Open();
                        using (OleDbCommand odCmd = odConnection.CreateCommand())
                        {
                            odCmd.CommandText = "SELECT * FROM [FormatLoad$]";
                            using (OleDbDataReader odRdr = odCmd.ExecuteReader())
                            {
                                if (odRdr.HasRows)
                                {
                                    odRdr.Read();

                                    int _no = 1;
                                    string _val = string.Empty;
                                    do
                                    {
                                        dr = dt.NewRow();
                                        if (_no == 1) { _val = "Spare Fund"; } else { _val = "0"; }

                                        dr["ID"] = Convert.ToString(odRdr[0]);
                                        dr["BuySell"] = Convert.ToString(odRdr[1]);
                                        dr["InstrumentID"] = Convert.ToString(odRdr[2]);
                                        dr["Price"] = Convert.ToString(odRdr[3]);
                                        dr["F1"] = odRdr[4].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[4]);
                                        dr["F2"] = odRdr[5].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[5]);
                                        dr["F3"] = odRdr[6].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[6]);
                                        dr["F4"] = odRdr[7].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[7]);
                                        dr["F5"] = odRdr[8].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[8]);
                                        dr["F6"] = odRdr[9].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[9]);
                                        dr["F7"] = odRdr[10].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[10]);
                                        dr["F8"] = odRdr[11].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[11]);
                                        dr["F9"] = odRdr[12].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[12]);
                                        dr["F10"] = odRdr[13].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[13]);
                                        dr["F11"] = odRdr[14].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[14]);
                                        dr["F12"] = odRdr[15].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[15]);
                                        dr["F13"] = odRdr[16].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[16]);
                                        dr["F14"] = odRdr[17].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[17]);
                                        dr["F15"] = odRdr[18].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[18]);
                                        dr["F16"] = odRdr[19].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[19]);
                                        dr["F17"] = odRdr[20].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[20]);
                                        dr["F18"] = odRdr[21].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[21]);
                                        dr["F19"] = odRdr[22].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[22]);
                                        dr["F20"] = odRdr[23].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[23]);
                                        dr["F21"] = odRdr[24].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[24]);
                                        dr["F22"] = odRdr[25].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[25]);
                                        dr["F23"] = odRdr[26].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[26]);
                                        dr["F24"] = odRdr[27].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[27]);
                                        dr["F25"] = odRdr[28].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[28]);
                                        dr["F26"] = odRdr[29].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[29]);
                                        dr["F27"] = odRdr[30].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[30]);
                                        dr["F28"] = odRdr[31].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[31]);
                                        dr["F29"] = odRdr[32].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[32]);
                                        dr["Remarks"] = odRdr[33].Equals(DBNull.Value) == true ? _val : Convert.ToString(odRdr[33]);

                                        if (
                                            dr["BuySell"].Equals(DBNull.Value) != true &&
                                            dr["InstrumentID"].Equals(DBNull.Value) != true &&
                                            dr["Price"].Equals(DBNull.Value) != true
                                        ) { dt.Rows.Add(dr); _no++; }
                                    } while (odRdr.Read());
                                }
                            }
                        }
                        odConnection.Close();
                    }

                    return dt;
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private class LaporanEDD
        {
            public string Nama { get; set; }
            public string Produk { get; set; }
            public string Transaksi { get; set; }
            public decimal Subscription { get; set; }
            public string IncomeLevel { get; set; }
            public string IdentifikasiTKM { get; set; }
            public string Keterangan { get; set; }

        }

        private class APUPPTByFund
        {
            public int TotalKYC { get; set; }
            public string Nama { get; set; }
            public string Pekerjaan { get; set; }
            public string Produk { get; set; }
            public string Domisili { get; set; }
            public string PenilaianRisikoProfil { get; set; }
            public string PenilaianRisikoProduk { get; set; }
            public string PenilaianRisikoGeografis { get; set; }
            public string PenilaianRisikoDistribusi { get; set; }
            public string Keterangan { get; set; }
            public DateTime RegistrationDate { get; set; }

        }
        public class RevenuePerSalesRpt
        {

            public string ClientName { get; set; }
            public string SalesName { get; set; }
            public string Department { get; set; }
            public string FundID { get; set; }
            public decimal AUM { get; set; }
            public decimal Fee { get; set; }
            public decimal Revenue { get; set; }
            public string AgentID { get; set; }
            public string AgentParent { get; set; }
            public decimal NetTransaction { get; set; }
            public decimal Subs { get; set; }
            public decimal Redemp { get; set; }
            public decimal SwitchIn { get; set; }
            public decimal SwitchOut { get; set; }

            public string NomorRekening { get; set; }
            public string NamaPemilikRekening { get; set; }

        }

        public class HistoryTransaction
        {
            public string TanggalTransaksi { get; set; }
            public string SettlementDate { get; set; }
            public string PlacementDate { get; set; }
            public string MaturityDate { get; set; }
            public string StockId { get; set; }
            public string StockName { get; set; }
            public string Fund { get; set; }
            public string Broker { get; set; }
            public string InvestmentNotes { get; set; }
            public string Type { get; set; }
            public string TrxTypeID { get; set; }
            public decimal DonePrice { get; set; }
            public decimal DoneLot { get; set; }
            public decimal DoneVolume { get; set; }
            public decimal InterestPercent { get; set; }
            public decimal Amount { get; set; }
            public decimal CommissionAmount { get; set; }
            public decimal LevyAmount { get; set; }
            public decimal VATAmount { get; set; }
            public decimal WHTAmount { get; set; }
            public decimal IncomeTaxSellAmount { get; set; }
            public decimal TotalAmount { get; set; }
        }



        public Boolean GenerateReportCommission(string _userID, CommissionRpt _commissionRpt)
        {

            #region Revenue Per Sales Detail
            if (_commissionRpt.ReportName.Equals("Revenue Per Sales Detail"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_commissionRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.FundFrom))
                            {
                                _paramFund = " and A.FundPK in ( " + _commissionRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_commissionRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_commissionRpt.AgentFrom))
                            {
                                _paramAgent = "And B.SellingAgentPK in ( " + _commissionRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }
                            cmd.CommandText =
                                @" 

                
Declare @DateToMinOne datetime
Declare @DateToMinTwo DATETIME
DECLARE @DateToMinThree DATETIME
DECLARE @UnitDate DATETIME
DECLARE @NAVDate datetime

Set @DateToMinOne = dbo.FWorkingDay(@DateTo,-1)
Set @DateToMinTwo = dbo.FWorkingDay(@DateTo,-2)
Set @DateToMinThree = dbo.FWorkingDay(@DateTo,-3)



SET @UnitDate = CASE WHEN dbo.CheckTodayIsHoliday(@DateTo) = 1 THEN 
					CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinTwo) = 1 THEN 
						@DateToMinThree ELSE @DateToMinTwo END ELSE CASE WHEN dbo.CheckTodayIsHoliday(@DateToMinOne) = 1 THEN
							@DateToMinTwo ELSE @DateToMinOne END END


SET @NAVDate = case when dbo.CheckTodayIsHoliday(@DateTo) = 1 
	then @DateToMinOne else @DateTo END 

DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)


DECLARE @NAVList TABLE
(
	LastDate DATETIME,
	FundPK INT
)



INSERT INTO @NAVList 
        ( LastDate, FundPK )
SELECT MAX(date),FundPK FROM dbo.CloseNAV WHERE status = 2 AND Date <= @DateTo
AND FundPK IN
(
	SELECT DISTINCT fundPK FROM fund WHERE status IN (1,2)
)
GROUP BY FundPK




CREATE TABLE #NAVLISTBYDate
(
	Date DATETIME,
	FundPK INT,
	NAV NUMERIC(22,8)
)
CREATE CLUSTERED INDEX indx_NAVLISTBYDate ON #NAVLISTBYDate (FundPK,Date);
INSERT INTO #NAVLISTBYDate
        ( Date, FundPK, NAV )
SELECT Date,FundPK,NAV FROM dbo.CloseNAV WHERE status = 2 AND Date IN(
		SELECT DISTINCT lastdate FROM @NAVList
	)


INSERT INTO @NAV
        ( LastDate, FundPK, NAV )
SELECT A.LastDate,A.FundPK,B.Nav FROM @NAVList A
LEFT JOIN #NAVLISTBYDate B ON A.LastDate = B.Date AND A.FundPK = B.FundPK

DECLARE @FCP TABLE
(
	FundCLientPK INT,
	FundPK INT,
	Unit NUMERIC(24,8)
)
INSERT INTO @FCP
        ( FundCLientPK, FundPK, Unit )
Select A.FundClientPK,FundPK,sum(isnull(UnitAmount,0)) Unit from FundclientPosition A 
    Left Join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2) 
	WHERE A.date = @UnitDate
	
	 " + _paramFund + _paramAgent + @"
	
	GROUP by A.FundClientPK,FundPK
	

Select 
isnull(B.name,'') FundClientName
,isnull(E.name,'') AgentName
,isnull(F.name,'') DepartmentName
,isnull(C.ID,'') FundID
,isnull(N.unit * O.NAV,0) AUM
,sum(isnull(A.MFee,0)) TotalMfeeWithHoliday
,isnull(A.MFeePercent,0) MfeePercent
, sum(isnull(A.SubsAmount,0))  Subs
, sum(isnull(A.RedempAmount,0))  Redemp
, sum(isnull(A.SwitchOutAmount,0))  SwitchOut
, sum(isnull(A.SwitchInAmount,0))  SwitchIn
,sum(isnull(A.SubsAmount,0) - isnull(A.RedempAmount,0) + isnull(A.SwitchInAmount,0) - isnull(A.SwitchOutAmount,0)) 	NetTransaction
,B.NomorRekening1 NomorRekening
,B.NamaNasabah1 NamaPemilikRekening
from [dbo].[DailyDataForCommissionRptNew] A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join Currency D on C.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2) 
left join Department F on E.DepartmentPK = F.DepartmentPK and F.status in (1,2)
left join @FCP N on A.FundClientPK = N.FundClientPK and A.FundPK = N.FundPK 
LEFT JOIN @NAV O ON A.FundPK = O.fundPK
Where A.MfeeDate between @DateFrom and @DateTo

" + _paramFund + _paramAgent + @"

group by B.name,E.name,F.name,C.ID,N.unit,A.FundPK,A.MFeePercent,O.nav,B.NomorRekening1,B.NamaNasabah1
                                  ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _commissionRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _commissionRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RevenuePerSalesDetail" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RevenuePerSalesDetail" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "CommissionReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Revenue Per Sales Detail");

                                        int incRowExcel = 1;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RevenuePerSalesRpt> rList = new List<RevenuePerSalesRpt>();
                                        while (dr0.Read())
                                        {
                                            RevenuePerSalesRpt rSingle = new RevenuePerSalesRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.SalesName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.Department = Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Revenue = Convert.ToDecimal(dr0["TotalMfeeWithHoliday"]);
                                            rSingle.Fee = Convert.ToDecimal(dr0["MfeePercent"]);
                                            rSingle.NetTransaction = Convert.ToDecimal(dr0["NetTransaction"]);
                                            rSingle.Subs = Convert.ToDecimal(dr0["Subs"]);
                                            rSingle.Redemp = Convert.ToDecimal(dr0["Redemp"]);
                                            rSingle.SwitchIn = Convert.ToDecimal(dr0["SwitchIn"]);
                                            rSingle.SwitchOut = Convert.ToDecimal(dr0["SwitchOut"]);
                                            rSingle.NetTransaction = Convert.ToDecimal(dr0["NetTransaction"]);
                                            rSingle.NomorRekening = Convert.ToString(dr0["NomorRekening"]);
                                            rSingle.NamaPemilikRekening = Convert.ToString(dr0["NamaPemilikRekening"]);
                                            rList.Add(rSingle);

                                        }

                                        var QueryBySales =
                                         from r in rList
                                         orderby r.SalesName ascending
                                         group r by new { r.SalesName, r.Department } into rGroup
                                         select rGroup;

                                        foreach (var rsHeader in QueryBySales)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Revenue Per Sales (Individual)";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 14;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 5].Value = "Reporting Date";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 6].Value = "from";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(_commissionRpt.ValueDateFrom).ToString("dd-MMM-yy");
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 6].Value = "to";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(_commissionRpt.ValueDateTo).ToString("dd-MMM-yy");
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Name";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.SalesName;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Department";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Merge = true;
                                            worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Department;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 2].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 3].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 4].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 5].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 6].Merge = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "Subscription";
                                            worksheet.Cells[incRowExcel, 8].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 9].Value = "Switch In";
                                            worksheet.Cells[incRowExcel, 10].Value = "Switch Out";
                                            worksheet.Cells[incRowExcel, 11].Value = "Net Transaction";
                                            worksheet.Cells[incRowExcel, 12].Value = "Revenue";
                                            worksheet.Cells[incRowExcel, 13].Value = "Nomor Rekening";
                                            worksheet.Cells[incRowExcel, 14].Value = "Nama Pemilik Rekening";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;

                                            int no = 1;

                                            var QueryByFundID =
                                                 from r2 in rsHeader
                                                 group r2 by new { r2.FundID, r2.Fee } into rGroup2
                                                 select rGroup2;

                                            int first = incRowExcel;

                                            foreach (var rsHeader2 in QueryByFundID)
                                            {
                                                decimal totalAUM = 0;
                                                decimal totalRevenue = 0;
                                                decimal totalNetTransaction = 0;
                                                decimal totalNetTransactionYTD = 0;
                                                decimal totalRevenueYTD = 0;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader2.Key.FundID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[incRowExcel, 3].Value = rsHeader2.Key.Fee + "%";
                                                worksheet.Cells[incRowExcel, 4].Value = "";
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[incRowExcel, 5].Value = "";

                                                int idx = incRowExcel;

                                                incRowExcel++;

                                                foreach (var rsDetail in rsHeader2)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = "";
                                                    worksheet.Cells[incRowExcel, 2].Value = "";
                                                    worksheet.Cells[incRowExcel, 3].Value = "";
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.ClientName;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 6].Value = "";
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.Subs;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##";
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.Redemp;
                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##";

                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.SwitchIn;
                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##";
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.SwitchOut;
                                                    worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##";

                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.NetTransaction;
                                                    worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##";

                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.Revenue;
                                                    worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##";

                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.NomorRekening;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.NamaPemilikRekening;


                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Size = 11;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                    totalAUM = totalAUM + rsDetail.AUM;
                                                    totalRevenue = totalRevenue + (rsDetail.Revenue);
                                                    totalNetTransaction = totalNetTransaction + rsDetail.NetTransaction;

                                                    incRowExcel++;
                                                }

                                                worksheet.Cells[idx, 6].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[idx, 6].Value = totalAUM;
                                                worksheet.Cells[idx, 7].Value = "";
                                                worksheet.Cells[idx, 11].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[idx, 11].Value = totalNetTransaction;

                                                worksheet.Cells[idx, 12].Style.Numberformat.Format = "#,##";
                                                worksheet.Cells[idx, 12].Value = totalRevenue;


                                                worksheet.Cells[idx, 1, idx, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[idx, 1, idx, 14].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                                incRowExcel++;
                                                no++;
                                            }

                                            int last = incRowExcel;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 2].Value = "Total";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + first.ToString() + ":F" + last.ToString() + ")";

                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + first.ToString() + ":G" + last.ToString() + ")";

                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + first.ToString() + ":H" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + first.ToString() + ":I" + last.ToString() + ")";

                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + first.ToString() + ":J" + last.ToString() + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + first.ToString() + ":K" + last.ToString() + ")";

                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + first.ToString() + ":L" + last.ToString() + ")";


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Size = 11;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Double;

                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _commissionRpt.PageBreak;
                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 15;
                                        worksheet.Column(3).Width = 15;
                                        worksheet.Column(4).Width = 65;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 15;
                                        worksheet.Column(13).Width = 21;
                                        worksheet.Column(14).Width = 21;

                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.HeaderFooter.OddHeader.RightAlignedText = "&12 REVENUE PER SALES DETAIL";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception err)
                {
                    throw err;
                }
            }

            #endregion
            else
            {
                return false;
            }
        }
        public Boolean GenerateReportCompliance(string _userID, OjkRpt _OjkRpt)
        {

            #region Laporan EDD
            if (_OjkRpt.ReportName.Equals("15"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            if object_id('tempdb..#tableTempSelect', 'u') is not null drop table #tableTempSelect 
                            create table #tableTempSelect
                            (
                            FundClientPK int,
                            TotalSubscription numeric(32,4),
                            IdentifikasiTKM nvarchar(20)
                            )
                            CREATE CLUSTERED INDEX indx_tableTempSelect ON #tableTempSelect (FundClientPK);

                            insert into #tableTempSelect(FundClientPK,TotalSubscription)
                            select FundClientPK,sum(isnull(CashAmount,0)) Subscription from ClientSubscription
                            where ValueDate between @datefrom and @dateto and posted = 1 and status <> 3 and revised = 0 and type not in (3,6)
                            group by FundClientPK



                            update A set A.IdentifikasiTKM = case when A.TotalSubscription >= 100000000 then 'YES' else 'NO' end from #tableTempSelect A


                            select isnull(B.Name,'') Nama,isnull(C.Name,'') Produk,'Subscription' Transaksi,isnull(A.CashAmount,0) Subscription, isnull(MV1.DescOne,'') IncomeLevel,D.IdentifikasiTKM, '-' Keterangan from ClientSubscription A
                            inner join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            inner join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
                            left join MasterValue MV1 on B.PenghasilanInd = MV1.Code and MV1.ID = 'IncomeIND' and MV1.status in (1,2)
                            left join MasterValue MV2 on B.PenghasilanInstitusi = MV2.Code and MV2.ID = 'IncomeINS' and MV2.status in (1,2)
                            left join #tableTempSelect D on A.FundClientPK = D.FundClientPK
                            where A.ValueDate between @datefrom and @dateto and A.posted = 1 and A.status = 2 and A.revised = 0 and B.InvestorType = 1 and A.type not in (3,6)
                            order by B.Name,C.Name
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _OjkRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _OjkRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanEDD" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanEDD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ComplianceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Laporan EDD");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<LaporanEDD> rList = new List<LaporanEDD>();
                                        while (dr0.Read())
                                        {

                                            LaporanEDD rSingle = new LaporanEDD();
                                            rSingle.Nama = Convert.ToString(dr0["Nama"]);
                                            rSingle.Produk = Convert.ToString(dr0["Produk"]);
                                            rSingle.Transaksi = Convert.ToString(dr0["Transaksi"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["Subscription"]);
                                            rSingle.IncomeLevel = Convert.ToString(dr0["IncomeLevel"]);
                                            rSingle.IdentifikasiTKM = Convert.ToString(dr0["IdentifikasiTKM"]);
                                            rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new {  } into rGroup
                                                select rGroup;

                                        int incRowExcel = 3;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Valbury Capital Management";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "TRANSAKSI KEUANGAN MENCURIGAKAN (TKM)";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Laporan Enchanced Due Diligence (EDD)";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 7].Value = "Tanggal:";
                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "Nama";
                                        worksheet.Cells[incRowExcel, 3].Value = "Produk";
                                        worksheet.Cells[incRowExcel, 4].Value = "Transaksi";
                                        worksheet.Cells[incRowExcel, 5].Value = "Subscription";
                                        worksheet.Cells[incRowExcel, 6].Value = "Income Level (IDR)";
                                        worksheet.Cells[incRowExcel, 7].Value = "Identifikasi TKM";
                                        worksheet.Cells[incRowExcel, 8].Value = "Keterangan";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);

                                        worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        int _no = 1;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nama;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Produk;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Transaksi;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Subscription;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.IncomeLevel;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.IdentifikasiTKM;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Keterangan;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                _no++;
                                                _endRowDetail = incRowExcel;

                                            }



                                        }



                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 2].Value = "APU PPT,";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Size = 10;

                                        worksheet.Cells[incRowExcel, 3].Value = "Complience,";
                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Size = 10;

                                        worksheet.Cells[incRowExcel, 8].Value = "Authorized by,";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Size = 10;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 21;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Laporan EDD";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Laporan CDD
            else if (_OjkRpt.ReportName.Equals("16"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
                          if object_id('tempdb..#tableFundPosition', 'u') is not null drop table #tableFundPosition 
                            create table #tableFundPosition
                            (
                            FundPK int,
                            FundClientPK int,
                            maxDate date
                            )
                            CREATE CLUSTERED INDEX indx_tableFundPosition ON #tableFundPosition (FundPK,FundClientPK);

                            if object_id('tempdb..#tableRiskDetail', 'u') is not null drop table #tableRiskDetail 
                            create table #tableRiskDetail
                            (
                            Code int,
                            Name nvarchar(100)
                            )

                            if object_id('tempdb..#tableSelect', 'u') is not null drop table #tableSelect 
                            create table #tableSelect
                            (
                            Nama nvarchar(500),
                            Pekerjaan nvarchar(500),
                            Produk nvarchar(500),
                            Domisili nvarchar(500),
                            ProfilRisk nvarchar(10),
                            ProdukRisk nvarchar(10),
                            GeoRisk nvarchar(10),
                            DistribusiRisk nvarchar(10),
                            Keterangan nvarchar(100),
                            RegistrationDate date,
                            TotalKYC int
                            )

                            insert into #tableFundPosition(FundPK,FundClientPK,maxDate)
                            select FundPK,FundClientPK,max(date) from FundClientPosition 
                            group by FundPK,FundClientPK

                            insert into #tableRiskDetail(Code,Name)
                            select Code,case when DescOne = 'L' then 'Nasabah Beresiko Rendah' when descone = 'M' then 'Nasabah Beresiko Sedang' else 'Nasabah Beresiko Tinggi' end from MasterValue where id = 'RiskCDD' and status in (1,2)

                            insert into #tableSelect(Nama,Pekerjaan,Produk,Domisili,ProfilRisk,ProdukRisk,GeoRisk,DistribusiRisk,Keterangan,RegistrationDate)
                            Select isnull(A.Name,'') ClientName,case when A.Pekerjaan = 3 then isnull(MV2.DescOne,'') else isnull(MV1.DescOne,'') end Pekerjaan,
                            isnull(D.Name,'') FundName,isnull(MV3.DescOne,'') Domisili,case when A.Pekerjaan = 3 then isnull(MV5.DescOne,'') else isnull(MV4.DescOne,'') end ProfilRisk,
                            isnull(MV7.DescOne,'') ProdukRisk,isnull(MV8.DescOne,'') GeoRisk,'M' DistribusiRisk, 
                            case when A.Pekerjaan = 3 then isnull(E.Name,'') else isnull(F.name,'') end Keterangan,A.EntryTime
                            From FundClient A
                            left join FundClientPosition B on A.FundClientPK = B.FundClientPK
                            left join #tableFundPosition C on A.FundClientPK = C.FundClientPK and B.FundPK = C.FundPK and B.Date = C.maxDate
                            left join Fund D on B.FundPk = D.FundPK and D.status in (1,2)
                            left join MasterValue MV1 on A.Pekerjaan = MV1.Code and MV1.ID = 'Occupation' and MV1.Status in (1,2)
                            left join MasterValue MV2 on A.NatureOfBusiness = MV2.Code and MV2.ID = 'HRBusiness' and MV2.Status in (1,2)
                            left join MasterValue MV3 on A.Propinsi = MV3.Code and MV3.ID = 'SDIProvince' and MV3.Status in (1,2)
                            left join MasterValue MV4 on MV1.RiskCDD = MV4.Code and MV4.ID = 'RiskCDD' and MV4.Status in (1,2)
                            left join MasterValue MV5 on MV2.RiskCDD = MV5.Code and MV5.ID = 'RiskCDD' and MV5.Status in (1,2)
                            left join MasterValue MV6 on D.Type = MV6.Code and MV6.ID = 'FundType' and MV6.Status in (1,2)
                            left join MasterValue MV7 on MV6.RiskCDD = MV7.Code and MV7.ID = 'RiskCDD' and MV7.Status in (1,2)
                            left join MasterValue MV8 on MV3.RiskCDD = MV8.Code and MV8.ID = 'RiskCDD' and MV8.Status in (1,2)
                            left join #tableRiskDetail E on MV5.Code = E.Code 
                            left join #tableRiskDetail F on MV4.Code = F.Code
                            where A.EntryTime between @dateFrom and @dateTo and A.status in (1,2) and A.InvestorType = 1
                            group by A.Name,A.Pekerjaan,MV1.DescOne,MV2.DescOne,D.Name,MV3.DescOne,MV5.DescOne,MV4.DescOne,MV7.DescOne,MV8.DescOne,E.Name,F.Name,A.EntryTime


                            order by A.Name

                            update A set A.TotalKYC = (select count(distinct Nama) from #tableSelect) from #tableSelect A

                            select * from #tableSelect
                            order by Nama,Produk
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _OjkRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _OjkRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "LaporanCDD" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "LaporanCDD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "ComplianceReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("APUPPT By Fund");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<APUPPTByFund> rList = new List<APUPPTByFund>();
                                        while (dr0.Read())
                                        {

                                            APUPPTByFund rSingle = new APUPPTByFund();

                                            rSingle.Nama = Convert.ToString(dr0["Nama"]);
                                            rSingle.Pekerjaan = Convert.ToString(dr0["Pekerjaan"]);
                                            rSingle.Produk = Convert.ToString(dr0["Produk"]);
                                            rSingle.Domisili = Convert.ToString(dr0["Domisili"]);
                                            rSingle.PenilaianRisikoProfil = Convert.ToString(dr0["ProfilRisk"]);
                                            rSingle.PenilaianRisikoProduk = Convert.ToString(dr0["ProdukRisk"]);
                                            rSingle.PenilaianRisikoGeografis = Convert.ToString(dr0["GeoRisk"]);
                                            rSingle.PenilaianRisikoDistribusi = Convert.ToString(dr0["DistribusiRisk"]);
                                            rSingle.Keterangan = Convert.ToString(dr0["Keterangan"]);
                                            rSingle.RegistrationDate = Convert.ToDateTime(dr0["RegistrationDate"]);
                                            rSingle.TotalKYC = Convert.ToInt32(dr0["TotalKYC"]);



                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.TotalKYC } into rGroup
                                                select rGroup;

                                        int incRowExcel = 3;
                                        int _no = 1;



                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "PT Valbury Capital Management";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "KNOW YOUR CUSTOMER (KYC)";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Laporan Customer Due Diligence (CDD)";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        worksheet.Cells[incRowExcel, 7].Value = "Date From:";
                                        worksheet.Cells[incRowExcel, 8].Value = Convert.ToDateTime(_OjkRpt.ValueDateFrom).ToString("dd-MMM-yyyy");

                                        worksheet.Cells[incRowExcel, 9].Value = "Date To:";
                                        worksheet.Cells[incRowExcel, 11].Value = Convert.ToDateTime(_OjkRpt.ValueDateTo).ToString("dd-MMM-yyyy");


                                        incRowExcel = incRowExcel + 3;
                                        int RowB = incRowExcel;
                                        int RowG = incRowExcel + 1;

                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 2].Value = "Nama";
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 3].Value = "Pekerjaan";
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 4].Value = "Produk";
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 5].Value = "Domisili";
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 6].Value = "Actual Fee (before tax)";
                                        worksheet.Cells["F" + RowB + ":I" + RowB].Merge = true;
                                        worksheet.Cells["F" + RowB + ":I" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowB + ":I" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[RowG, 6].Value = "Profil";
                                        worksheet.Cells["F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 7].Value = "Produk";
                                        worksheet.Cells["G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 8].Value = "Geografis";
                                        worksheet.Cells["H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[RowG, 9].Value = "Distribusi";
                                        worksheet.Cells["I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 11].Value = "Revenue";
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        worksheet.Cells[incRowExcel, 12].Value = "Registration Date";
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;





                                        worksheet.Cells[RowB, 1, RowG, 12].Style.Font.Bold = true;
                                        worksheet.Cells[RowB, 1, RowG, 12].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                                        worksheet.Cells[RowB, 1, RowG, 12].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGray);
                                        worksheet.Cells["A" + RowB + ":L" + RowB].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":L" + RowG].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells["A" + RowB + ":l" + RowG].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        incRowExcel++;


                                        incRowExcel++;
                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Nama;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Pekerjaan;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Produk;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Domisili;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.PenilaianRisikoProfil;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.PenilaianRisikoProduk;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.PenilaianRisikoGeografis;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PenilaianRisikoDistribusi;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Keterangan;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.RegistrationDate;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                incRowExcel++;
                                            }

                                            incRowExcel++;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total KYC :" + rsHeader.Key.TotalKYC + " Investor";

                                        }
                                        //worksheet.Cells[incRowExcel, 5].Value = "TOTAL ";
                                        //worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        //worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        

                                        incRowExcel++;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 3].Value = "APU PPT,";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Size = 10;

                                        worksheet.Cells[incRowExcel, 5].Value = "Complience,";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Size = 10;

                                        worksheet.Cells[incRowExcel, 8].Value = "Authorized by,";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Size = 10;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 8, 8];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 21;
                                        worksheet.Column(4).Width = 32;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 21;
                                        worksheet.Column(8).Width = 21;
                                        worksheet.Column(9).Width = 21;
                                        worksheet.Column(10).Width = 0;
                                        worksheet.Column(11).Width = 25;
                                        worksheet.Column(12).Width = 21;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 APUPPT By Fund";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_OjkRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion




            else
            {
                return false;
            }
        }

        public Boolean GenerateRptFundClientByInvestorType(string _userID, FundClientRpt _fundClientRpt)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();


                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @" 
                           select isnull(A.ID,'') FundClientID,isnull(A.Name,'') InternalName,isnull(B.Name,'') SellingAgent,isnull(A.TanggalLahir,'') TanggalLahir from fundclient A
left join Agent B on A.SellingAgentPK = B.AgentPK and B.Status in (1,2)
 where InvestorType = @InvestorType and A.status in (1,2)";
                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@InvestorType", _fundClientRpt.InvestorType);
                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "FundClientByIndividual" + "_" + _userID + ".xlsx";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "FundClientByIndividual";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("FundClientByIndividual");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<FundClientRptByInvestorType> rList = new List<FundClientRptByInvestorType>();
                                    while (dr0.Read())
                                    {
                                        FundClientRptByInvestorType rSingle = new FundClientRptByInvestorType();
                                        rSingle.FundClientID = dr0["FundClientID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["FundClientID"]);
                                        rSingle.InternalName = dr0["InternalName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["InternalName"]);
                                        rSingle.SellingAgent = dr0["SellingAgent"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["SellingAgent"]);
                                        rSingle.DOB = dr0["TanggalLahir"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr0["TanggalLahir"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByTitle =
                                        from r in rList
                                        group r by new {  } into rGroup
                                        select rGroup;

                                    int incRowExcel = 0;

                                    foreach (var rsHeader in GroupByTitle)
                                    {

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Client Category :";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Individual";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Client ID";
                                        worksheet.Cells[incRowExcel, 2].Value = "Internal Name";
                                        worksheet.Cells[incRowExcel, 3].Value = "Selling Agent";
                                        worksheet.Cells[incRowExcel, 4].Value = "DOB";

                                        string _range = "A" + incRowExcel + ":D" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        }
                                        incRowExcel++;


                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            //area detail
                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.FundClientID;
                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.InternalName;
                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.SellingAgent;
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.DOB).ToString("dd/MM/yyyy");


                                            _endRowDetail = incRowExcel;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            incRowExcel++;
                                        }

                                        //_endRowDetail = incRowExcel;
                                        //worksheet.Cells["A" + _endRowDetail + ":FY" + _endRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _endRowDetail + ":D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;


                                    }
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).AutoFit();
                                    worksheet.Column(3).AutoFit();
                                    worksheet.Column(4).AutoFit();
                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(0);
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Fund Client";
                                    worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    return true;
                                }

                            }
                        }

                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }

        }

        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Client Unit Position
            if (_unitRegistryRpt.ReportName.Equals("Client Unit Position"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";
                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPk in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }


                            cmd.CommandText =
                                    @" Select B.SID SID,B.IFUACode IFUA,isnull(D.Name,'') Marketing, isnull(E.Name,'') Branch,  B.Name ClientName,B.InvestorType InvestorType1,mv.DescOne InvestorType2, C.ID FundID,@Date Date ,isnull(CNA.Nav,0) NavAmount,A.UnitAmount,A.CashAmount, isnull(sum(CNA.NAv * A.UnitAmount),0) EndBalance ,
case when B.InvestorType = 2 then mv1.DescOne else 'INDIVIDUAL' end InvestorType
From FundClientPosition A   
                                     Left join FundClient B on A.FundClientPK = B.FundClientPK and B.Status = 2   
                                     Left join Fund C on A.FundPK = C.FundPK and C.Status = 2
									 left join MasterValue mv on b.InvestorType = mv.Code  and mv.ID = 'InvestorType'  
									  left join MasterValue mv1 on b.Tipe = mv1.Code  and mv1.ID = 'CompanyType' 
									  left join Agent D on B.SellingAgentPK = D.AgentFee and D.Status in (1,2)
									  left join Bank E on B.Namabank1 = E.BankPK and E.status in (1,2)
                                     left Join    
                                    (   
                                         select B.ID FundID, MAX(CN.Nav) NAV    
                                         from CloseNAV CN   
                                         Left join Fund B on B.FundPK = CN.FundPK and B.Status =2  
                                         where CN.Date = @Date   
                                         group by B.ID   
                                     ) CNA on CNA.FundID = C.ID   

                                     left Join    
                                     (   
                                         select B.ID FundID, MAX(A.Date) MaxDate    
                                         from FundClientPosition A   
                                         Left join Fund B on B.FundPK = A.FundPK and B.Status =2  
                                         where A.Date <= @Date  
                                         group by B.ID   
                                     ) MFCP on MFCP.FundID = C.ID   
                                     where MFCP.MaxDate = A.Date   and A.UnitAmount <> 0         
									  " + _paramFund + _paramFundClient + @"
                                     group by B.Name,B.InvestorType ,mv.DescOne , C.ID ,CNA.Nav,A.UnitAmount,A.CashAmount,mv1.DescOne,B.SID,B.IFUACode,D.Name,E.Name";

                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ClientUnitPosition" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ClientUnitPosition" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }


                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Client Unit Position");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.Date = Convert.ToDateTime(dr0["Date"]);
                                            rSingle.Nav = Convert.ToDecimal(dr0["NavAmount"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.InvestorType = Convert.ToString(dr0["InvestorType"]);
                                            rSingle.CashBalance = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.EndBalance = Convert.ToDecimal(dr0["EndBalance"]);
                                            rSingle.Marketing = Convert.ToString(dr0["Marketing"]);
                                            rSingle.Branch = Convert.ToString(dr0["Branch"]);

                                            rList.Add(rSingle);

                                        }
                                        //mekel
                                        var QueryByClientID =
                                         from r in rList
                                         group r by new { r.ClientName } into rGroup
                                         select rGroup;

                                        int incRowExcel = 6;

                                        worksheet.Cells[incRowExcel, 1].Value = "Date :";
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yy";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToShortDateString();
                                        incRowExcel++;
                                        foreach (var rsHeader in QueryByClientID)
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Client :";
                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.ClientName;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund";
                                            worksheet.Cells[incRowExcel, 3].Value = "SID";
                                            worksheet.Cells[incRowExcel, 4].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 5].Value = "Client Category";
                                            worksheet.Cells[incRowExcel, 6].Value = "NAV/Unit";
                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 8].Value = "Cash";
                                            worksheet.Cells[incRowExcel, 9].Value = "Marketing";
                                            worksheet.Cells[incRowExcel, 10].Value = "Branch";
                                            string _range = "A" + incRowExcel + ":J" + incRowExcel;

                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = 11;
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                                r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
                                            }

                                            _range = "A" + incRowExcel + ":J" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                                r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                                r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                                r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                                r.Style.Font.Size = Tools.DefaultReportColumnHeaderFontSize();
                                                r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                                r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            }

                                            incRowExcel++;
                                            int _no = 1;

                                            int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            //end area header

                                            foreach (var rsDetail in rsHeader)
                                            {

                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                    r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                                }
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IFUA;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.InvestorType;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Nav;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.000000";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Nav * rsDetail.UnitBalance;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Marketing;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Branch;

                                                incRowExcel++;
                                                _range = "A" + incRowExcel + ":J" + incRowExcel;
                                                using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                                {
                                                    r.Style.Font.Size = 11;
                                                }

                                                //_endRowDetail = incRowExcel;
                                                _no++;
                                                //incRowExcel++;

                                            }
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            incRowExcel = incRowExcel + 6;

                                        }




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN

                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA

                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 CLIENT UNIT POSITION";

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //Image thumb = img.GetThumbnailImage(175, 100, null, IntPtr.Zero);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(thumb, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();





                                        package.Save();
                                        //Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Historical Transaction
            else if (_unitRegistryRpt.ReportName.Equals("Historical Transaction"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundZ = "";
                            string _paramFundClient = "";
                            string _paramFundClientZ = "";
                            string _paramZeroBalance = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundZ = "And Z.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundZ = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClientZ = "And Z.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClientZ = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitchOut = "  A.Status = 1  ";
                                _statusSwitchIn = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitchOut = "  A.Status = 3  ";
                                _statusSwitchIn = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            if (_unitRegistryRpt.ZeroBalance == true)
                            {
                                _paramZeroBalance = "  B.UnitBalance >= 0 ";
                            }
                            else
                            {
                                _paramZeroBalance = "  B.UnitBalance > 0 ";
                            }
                            cmd.CommandText =
                           @"
                         
DECLARE @DateFromMinOne DATETIME

SET @DateFromMinOne = dbo.FWorkingDay(@ValueDateFrom,-1)

DECLARE @MaxDate datetime

select @MaxDate = Date from FundClientPosition where Date = (
	SELECT MAX(date) from FundClientPosition where Date <= @ValueDateTo
)

----------AREA GET NAV-----------------

DECLARE @NAV TABLE
(
	LastDate DATETIME,
	FundPK INT,
	NAV NUMERIC(18,4)
)


DECLARE @NAVLastDate TABLE
(
	FundPK INT,
	LastDate datetime
)

INSERT INTO @NAVLastDate
        ( FundPK, LastDate )

SELECT FundPK,MAX(Date) FROM CloseNAV WHERE status  = 2 AND Date <= @ValueDateTo
GROUP BY FundPK


INSERT INTO @NAV
        ( LastDate, FundPK, NAV )
SELECT A.LastDate,A.FundPK,B.Nav FROM @NAVLastDate A
LEFT JOIN dbo.CloseNAV B ON A.FundPK = B.FundPK AND A.LastDate = B.Date AND B.status = 2
WHERE B.Date IN(
	SELECT DISTINCT lastDate FROM @NAVLastDate
)


----------AREA GET NAV-----------------

--Drop table #FirstSubs

CREATE table #FirstSubs 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstSubs ON #FirstSubs (FundPK,FundClientPK);


INSERT INTO #FirstSubs
        ( FundPK, FundClientPK, ValueDate )

select FundPK,FundClientPK,MIN(ValueDate) from (
select FundPK,FundClientPK,MIN(ValueDate) ValueDate from ClientSubscription A where status = 2 AND posted = 1 and Revised = 0  " + _paramFundClient + @"
GROUP BY FundClientPK,FundPK
union all
select FundPKTo,FundClientPK,MIN(ValueDate) ValueDate from ClientSwitching A where status = 2 AND posted = 1 and Revised = 0 " + _paramFundClient + @"
GROUP BY FundClientPK,FundPKTo
) A
GROUP BY FundClientPK,FundPK

--Drop table #FirstPosition
CREATE table #FirstPosition 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstPosition ON #FirstPosition (FundPK,FundClientPK);

insert into #FirstPosition
	 ( FundPK, FundClientPK, ValueDate )

SELECT FundPk,FundClientPK,MIN(Date) FROM dbo.FundClientPosition A
WHERE A.UnitAmount > 0 " + _paramFundClient + @"
 GROUP BY FundClientPK,FundPK


 --Drop table #FirstPositionResult
CREATE Table #FirstPositionResult 
(
	FundPK INT,
	FundClientPK INT,
	ValueDate NVARCHAR(100)
)

CREATE CLUSTERED INDEX indx_firstPositionResult ON #FirstPositionResult (FundPK,FundClientPK);

INSERT INTO #FirstPositionResult
        ( FundPK ,
          FundClientPK ,
          ValueDate 
        )
SELECT  A.FundPK,A.FundClientPk,A.ValueDate FROM #FirstPosition A
LEFT JOIN #FirstSubs B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
WHERE B.FundPK IS NULL OR A.ValueDate < B.ValueDate


--Drop table #FCPUnit
CREATE table #FCPUnit 
(
	FundPK INT,
	FundClientPK INT,
	UnitAmount NUMERIC(22,4),
	Date DATETIME
)

CREATE CLUSTERED INDEX indx_FCPUnit ON #FCPUnit (FundPK,FundClientPK);

INSERT INTO #FCPUnit
        ( FundPK, FundClientPK, UnitAmount ,Date)
SELECT FundPK,FundClientPK,UnitAmount,Date FROM dbo.FundClientPosition A WHERE Date IN(
	SELECT DISTINCT ValueDate FROM #FirstPositionResult
) " + _paramFundClient + @"

--Drop table #Result
CREATE table #Result 
(
	FundPK INT,
	FundClientPK INT,
	UnitAmount NUMERIC(22,4),
	Date DATETIME
)

CREATE CLUSTERED INDEX indx_Result ON #Result (FundPK,FundClientPK);

INSERT INTO #Result
        ( FundPK ,
          FundClientPK ,
          UnitAmount ,
          Date
        )

SELECT A.FundPK,A.FundClientPK,B.UnitAmount,A.ValueDate FROM #FirstPositionResult A
LEFT JOIN #FCPUnit B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK AND A.ValueDate = B.Date
ORDER BY A.FundClientPK ASC


--Drop table #listFundAndClient
	CREATE TABLE #listFundAndClient 
    (
		FundPK INT,
		FundClientPK INT
	)

	CREATE CLUSTERED INDEX indx_listFundAndClient ON #listFundAndClient (FundPK,FundClientPK);

	INSERT INTO #listFundAndClient
Select distinct A.* From (
	    SELECT F.FUndPK,FC.FundClientPK
	    from ClientSubscription A 
	    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2) 
	    where 
	    " + _statusSubs + _paramFund + _paramFundClient + @" and 
	  
	    valuedate Between @ValueDateFrom and @ValueDateTo 
	    UNION ALL   
	    Select F.FundPK,FC.FundClientPK
	    from ClientRedemption A 
	    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
	    left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	    where 
	    " + _statusRedemp + _paramFund + _paramFundClient + @" and 
	
	    valuedate Between @ValueDateFrom and @ValueDateTo 
	    UNION ALL   

	    Select F.FundPK,FC.FundClientPK
	    from ClientSwitching A 
	    left join Fund F on A.FundPKTo = F.fundPK and f.Status in (1,2)    
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	    where 
	    " + _statusSwitchOut + _paramFund + _paramFundClient + @" and
	    valuedate Between @ValueDateFrom and @ValueDateTo 
	    UNION ALL   
	    Select F.FundPK,FC.FundClientPK
	    from ClientSwitching A 
	    left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)    
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	    left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	    left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	    where 
	    " + _statusSwitchIn + _paramFund + _paramFundClient + @"  and
	    valuedate Between @ValueDateFrom and @ValueDateTo 
) A

--Drop table #tempBegBalance
CREATE table #tempBegBalance 
(
	FundPK INT,
	FundClientPK INT,
	BegBalance NUMERIC(22,4)
)

CREATE CLUSTERED INDEX indx_tempBegBalance ON #tempBegBalance (FundPK,FundClientPK);

INSERT INTO #tempBegBalance
SELECT A.FundPK,A.FundClientPK
,Case when C.ValueDate < B.Date then 0 ELSE   CASE WHEN ISNULL(B.Date,'') <> '' 
	        THEN CASE WHEN @DateFromMinOne <= B.Date    THEN ISNULL(B.UnitAmount,0) 
		        ELSE ISNULL(D.UnitAmount,0) END ELSE ISNULL(D.UnitAmount,0) END END
FROM #listFundAndClient A
LEFT JOIN #Result B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
LEFT JOIN #FirstSubs C ON A.FundPK = C.FundPK AND A.FundClientPK = C.FundClientPK
left join FundClientPosition D on A.FundPK = D.FundPK and A.FundClientPK = D.FundClientPK and D.date = @DateFromMinOne


--Drop table #Temp

CREATE TABLE #Temp 
(
	FundPK INT,
	FundClientPK INT,
	Balance NUMERIC(32,4),
	UnRealized NUMERIC(32,4),
	NAV NUMERIC(32,8),
	AvgNAV NUMERIC(32,12),
	UnitBalance NUMERIC(32,4)
)

CREATE CLUSTERED INDEX indx_temp ON #Temp (FundPK,FundClientPK);

INSERT INTO #Temp
        ( 
			FundPK,
			FundClientPK,
			Balance, 
	        UnRealized ,
	        NAV ,
	        AvgNAV,
	        UnitBalance 
        )
SELECT ISNULL(A.FundPK,0),ISNULL(A.FundClientPK,0)
,CAST( ISNULL(A.UnitAmount,0) * ISNULL(B.NAV,0) AS NUMERIC(26,4))
,CASE WHEN A.AvgNAV = 0 THEN 0 else CAST((ISNULL(B.NAV,0) - ISNULL(A.AvgNAV,0)) * ISNULL(A.UnitAmount,0) AS NUMERIC(26,4)) END
,ISNULL(B.NAV,0)
,CASE WHEN ISNULL(A.AvgNAV,0) > 0 Then CAST(ISNULL(A.AvgNAV,0) AS NUMERIC(22,8)) ELSE 0 END 
,CAST(ISNULL(A.UnitAmount,0) AS NUMERIC(22,4))
FROM dbo.FundClientPosition A 
LEFT JOIN @NAV B ON A.FundPK = B.FundPK 
WHERE A.date = @MaxDate
" + _paramFundClient + @"


SELECT 
A.FundPK,A.FundClientPK,A.SettlementDate,ISNULL(A.Remark,'') Remark
,ISNULL(A.FeeAmount,0) FeeAmount
,ISNULL(A.DepartmentName,'') DepartmentName
,ISNULL(A.AgentName,'') AgentName
,ISNULL(A.FundID,'') FundID
,ISNULL(A.FundName,'') FundName
,ISNULL(A.NAVDate,'') NAVDate
,ISNULL(A.Type,'') Type
,ISNULL(A.ClientID,'') ClientID
,ISNULL(A.ClientName,'') ClientName
,ISNULL(A.CashAmount,0) CashAmount
,ISNULL(A.TotalUnitAmount,0) UnitAmount
,ISNULL(A.NetAmount,0) NetAmount
,0 EndBalance
,ISNULL(B.Balance,0) Balance
,ISNULL(B.UnRealized,0) UnRealized
,ISNULL(A.NAV,0) NAV
,ISNULL(B.NAV,0) CurrentNAV
,ISNULL(B.AvgNAV,0) AvgNAV
,ISNULL(B.UnitBalance,0) UnitBalance
,ISNULL(A.FeePercent,0) FeePercent
,CASE WHEN  ISNULL(C.BegBalance,0) = 0 THEN ISNULL(D.UnitAmount,0) ELSE ISNULL(C.BegBalance,0)END BegBalance
,ISNULL(A.Branch,'') Branch
FROM 
(
	SELECT F.FUndPK,FC.FundClientPK,A.NAVDate SettlementDate,A.Description Remark,A.SubscriptionFeeAmount FeeAmount,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Subscription' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, TotalUnitAmount ,A.Nav,TotalCashAmount NetAmount ,A.subscriptionFeePercent FeePercent,case when BankRecipientPK = 1 then B1.Name when BankRecipientPK = 2 then B2.Name when BankRecipientPK = 3 then B3.Name else isnull(B4.Name,'') end Branch
	from ClientSubscription A 
	left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2) 
	left join Bank B1 on FC.NamaBank1 = B1.BankPK and B1.Status in (1,2)
	left join Bank B2 on FC.NamaBank2 = B2.BankPK and B2.Status in (1,2)
	left join Bank B3 on FC.NamaBank3 = B3.BankPK and B3.Status in (1,2)
	left join FundClientBankList Z on A.BankRecipientPK = Z.NoBank and Z.Status in (1,2)
	left join Bank B4 on Z.BankPK = B4.BankPK and B4.Status in (1,2)
	where " + _statusSubs + _paramFund + _paramFundClient + @" and
	valuedate Between @ValueDateFrom and @ValueDateTo  
	UNION ALL   
	Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,A.RedemptionFeeAmount FeeAmount,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Redemption' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, A.UnitAmount TotalUnitAmount,A.Nav,TotalCashAmount NetAmount ,A.RedemptionFeePercent FeePercent,case when BankRecipientPK = 1 then B1.Name when BankRecipientPK = 2 then B2.Name when BankRecipientPK = 3 then B3.Name else isnull(B4.Name,'') end Branch
	from ClientRedemption A 
	left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)    
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2)   
	left join Agent AG on A.AgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	left join Bank B1 on FC.NamaBank1 = B1.BankPK and B1.Status in (1,2)
	left join Bank B2 on FC.NamaBank2 = B2.BankPK and B2.Status in (1,2)
	left join Bank B3 on FC.NamaBank3 = B3.BankPK and B3.Status in (1,2)
	left join FundClientBankList Z on A.BankRecipientPK = Z.NoBank and Z.Status in (1,2)
	left join Bank B4 on Z.BankPK = B4.BankPK and B4.Status in (1,2)
	where " + _statusRedemp + _paramFund + _paramFundClient + @"  and
	valuedate Between @ValueDateFrom and @ValueDateTo 
	UNION ALL   

	Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,
	CASE WHEN FeeType = 'IN' then A.SwitchingFeeAmount ELSE 0 END  FeeAmount
	,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Switching In' Type, Fc.ID ClientID,FC.Name ClientName, A.TotalCashAmountFundFrom CashAmount, A.TotalUnitAmountFundTo TotalUnitAmount,A.NAVFundTo Nav,A.TotalCashAmountFundTo NetAmount, 
	CASE WHEN FeeType = 'IN' then A.SwitchingFeePercent ELSE 0 END  FeePercent,'' Branch
	from ClientSwitching A 
	left join Fund F on A.FundPKTo = F.fundPK and f.Status in (1,2)    
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	where " + _statusSwitchOut + _paramFund + _paramFundClient + @"  and
	valuedate Between @ValueDateFrom and @ValueDateTo 
	UNION ALL   
	Select F.FundPK,FC.FundClientPK,A.PaymentDate SettlementDate,A.Description Remark,
	CASE WHEN FeeType = 'OUT' then A.SwitchingFeeAmount ELSE 0 END  FeeAmount
	,isnull(D.Name, '') DepartmentName,isnull(AG.Name,'') AgentName,F.ID FundID,F.Name FundName,NAVDate
	,'Switching Out' Type, Fc.ID ClientID,FC.Name ClientName, CashAmount, A.UnitAmount TotalUnitAmount,A.NAVFundFrom Nav,A.TotalCashAmountFundFrom NetAmount 
	,CASE WHEN FeeType = 'OUT' then A.SwitchingFeePercent ELSE 0 END  FeePercent,'' Branch
	from ClientSwitching A 
	left join Fund F on A.FundPKFrom = F.fundPK and f.Status in (1,2)    
	left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
	left join Agent AG on FC.SellingAgentPK = AG.AgentPK and AG.Status in (1,2) 
	left join Department D on D.DepartmentPK = AG.DepartmentPK and D.Status in (1,2)
	where " + _statusSwitchIn + _paramFund + _paramFundClient + @"  and
	valuedate Between @ValueDateFrom and @ValueDateTo 

UNION ALL

SELECT A.FundPK,A.FundClientPK,'01/01/1900' SettlementDate,'' Remark, 0 FeeAmount,'' DepartmentName,'' AgentName 
	,ISNULL(F.ID,'') FundID,ISNULL(F.Name,'') FundName,'' NAVDate
	,' ' Type ,ISNULL(C.ID,'') ClientID, ISNULL(C.Name,'') ClientName,0 cashAmount, 0 UnitAmount,0 NAV
	,0 NetAmount
	,0 FeePercent,'' Branch
 	FROM dbo.FundClientPosition A 
	LEFT JOIN Fund F ON A.FundPK = F.FundPK AND F.status IN (1,2)
	LEFT JOIN FundClient C ON A.FundClientPK = C.FundClientPK AND C.status IN (1,2)
	WHERE date = 
	(
		SELECT MAX(Date) FROM dbo.FundClientPosition A WHERE Date < @ValueDateFrom
	) and  C.fundclientPK is not null " + _paramFund + _paramFundClient + @"  


) A LEFT JOIN #Temp B ON A.FundPK = B.FundPK AND A.FundClientPK = B.FundClientPK
LEFT JOIN #tempBegBalance C ON A.FundPK = C.FundPK  AND A.FundClientPK = C.FundClientPK
LEFT JOIN dbo.FundClientPosition D ON A.fundPK = D.FundPK AND A.FundClientPK = D.FundClientPK AND D.date = @DateFromMinOne
WHERE " + _paramZeroBalance + @" 
Order By A.Settlementdate asc 

 ";
                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoricalTransaction" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoricalTransaction" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Historical Transaction");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<UnitRegistryRpt> rList = new List<UnitRegistryRpt>();
                                        while (dr0.Read())
                                        {
                                            UnitRegistryRpt rSingle = new UnitRegistryRpt();
                                            rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.SettlementDateForTrx = Convert.ToString(dr0["SettlementDate"]);
                                            rSingle.Remark = Convert.ToString(dr0["Remark"]);
                                            rSingle.Branch = Convert.ToString(dr0["Branch"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.DepartmentName = Convert.ToString(dr0["DepartmentName"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.NAVDateForTrx = Convert.ToString(dr0["NAVDate"]);
                                            rSingle.Type = Convert.ToString(dr0["Type"]);
                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.CashAmount = Convert.ToDecimal(dr0["CashAmount"]);
                                            rSingle.UnitAmount = Convert.ToDecimal(dr0["UnitAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.EndBalance = Convert.ToDecimal(dr0["EndBalance"]);
                                            rSingle.Balance = Convert.ToDecimal(dr0["Balance"]);
                                            rSingle.UnRealized = Convert.ToDecimal(dr0["UnRealized"]);
                                            rSingle.CurrentNAV = Convert.ToDecimal(dr0["CurrentNAV"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.AvgNAV = Convert.ToDecimal(dr0["AvgNAV"]);
                                            rSingle.UnitBalance = Convert.ToDecimal(dr0["UnitBalance"]);
                                            rSingle.FeePercent = Convert.ToDecimal(dr0["FeePercent"]);
                                            rSingle.BegBalance = Convert.ToDecimal(dr0["BegBalance"]);
                                            rList.Add(rSingle);
                                        }


                                        var QueryByFundID =
                                           from r in rList
                                               //orderby r.NAVDateForTrx ascending
                                            group r by new { r.FundName, r.ClientName, r.ClientID, r.Balance, r.UnitBalance, r.UnRealized, r.AvgNAV, r.BegBalance, r.CurrentNAV } into rGroup
                                           select rGroup;

                                        int incRowExcel = 1;

                                        foreach (var rsHeader in QueryByFundID)
                                        {

                                            incRowExcel = incRowExcel + 2;


                                            int RowZ = incRowExcel;
                                            incRowExcel = incRowExcel + 2;
                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Name ";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.FundName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name ";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ClientName;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells["D" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Period";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "CIF";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.ClientID;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Balance";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Balance;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "Current NAV  : ";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.CurrentNAV;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            decimal _unitBalance = rsHeader.Key.UnitBalance;
                                            worksheet.Cells[incRowExcel, 10].Value = "Unit Balance  : ";
                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.UnitBalance;
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 12].Value = "unit";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "R/Un realised";
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.UnRealized;
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            worksheet.Cells[incRowExcel, 7].Value = "AVG NAV  : ";
                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader.Key.AvgNAV;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "R/Un realised Percentage";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 3].Value = ": ";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Formula = "iferror(" + rsHeader.Key.UnRealized + "/" + rsHeader.Key.Balance + ",0)";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,0.0000%";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            incRowExcel++;

                                            incRowExcel = incRowExcel + 2;


                                            //Row B = 3
                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Cells[incRowExcel, 1].Value = "No";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //if (rsHeader.Key.Type == "")
                                            //{}
                                            //else
                                            //{}
                                            worksheet.Cells[incRowExcel, 2].Value = "Type";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "Trade Date";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Amount (IDR)";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Sales Charged";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":G" + RowB].Merge = true;
                                            worksheet.Cells["F" + RowB + ":G" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 6].Value = "%";
                                            worksheet.Cells[RowG, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 6].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 7].Value = "Amount";
                                            worksheet.Cells[RowG, 7].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Net Amount";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = "Net Unit";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Ending Balance";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 12].Value = "Remark";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Marketing";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Branch";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 2].Value = "BEGINNING BALANCE";


                                            worksheet.Cells[incRowExcel, 11].Value = rsHeader.Key.BegBalance;


                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            int _RowA = incRowExcel;

                                            incRowExcel++;
                                            // Row C = 4
                                            int RowC = incRowExcel;
                                            //area header

                                            int _no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _aaa = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //Row D = 5
                                                int RowD = incRowExcel;
                                                int RowE = incRowExcel + 1;
                                                int _RowB = 0;

                                                //ThickBox Border

                                                worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells["A" + RowB + ":N" + RowG].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                //worksheet.Cells["A" + RowD + ":L" + RowD].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                                //worksheet.Cells["A" + RowD + ":L" + RowD].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                                if (rsDetail.Type != "")
                                                {



                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1].Value = _no;
                                                    worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    if (rsDetail.Type == "Subscription")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "SUB";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else if (rsDetail.Type == "Redemption")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "RED";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                    }
                                                    else if (rsDetail.Type == "Switching In")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "SWITCH IN";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else if (rsDetail.Type == "Switching Out")
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "SWITCH OUT";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 2].Value = "";
                                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Color.SetColor(Color.Red);
                                                    }

                                                    if (rsDetail.SettlementDateForTrx == "01/01/1900 12:00:00 AM" || rsDetail.SettlementDateForTrx == "1/1/1900 12:00:00 AM")
                                                    {
                                                        //worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.NAVDateForTrx).ToString("dd-MMM-yyyy");
                                                        //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1].Value = "";

                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = "";
                                                        }
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Value = "";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Value = "";
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = "";
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Value = "";
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = "";
                                                        }
                                                        //int _A = incRowExcel + 1;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                        if (_no == 1)
                                                        {
                                                            _RowB = _RowA;
                                                        }
                                                        else
                                                        {
                                                            _RowB = incRowExcel - 1;
                                                        }

                                                        if (rsDetail.Type == "Subscription" || rsDetail.Type == "Switching In")
                                                        {

                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }
                                                        else if (rsDetail.Type == "Redemption" || rsDetail.Type == "Switching Out")
                                                        {

                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }


                                                        worksheet.Cells[incRowExcel, 12].Value = "";
                                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        _no = 0;
                                                    }
                                                    else
                                                    {

                                                        worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.NAVDateForTrx).ToString("dd-MMM-yyyy");
                                                        //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";
                                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount;
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount * -1;
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount;
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.CashAmount * -1;
                                                        }
                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail.FeePercent;
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeeAmount;
                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount;
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount * -1;
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount;
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount * -1;
                                                        }
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 9].Value = rsDetail.NAV;
                                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                        if (rsDetail.Type == "Subscription")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount;
                                                        }
                                                        else if (rsDetail.Type == "Redemption")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount * -1;
                                                        }
                                                        else if (rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount;
                                                        }
                                                        else
                                                        {
                                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.UnitAmount * -1;
                                                        }
                                                        //int _A = incRowExcel + 1;
                                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";

                                                        if (_no == 1)
                                                        {
                                                            _RowB = _RowA;
                                                        }
                                                        else
                                                        {
                                                            _RowB = incRowExcel - 1;
                                                        }



                                                        if (rsDetail.Type == "Subscription" || rsDetail.Type == "Switching In")
                                                        {
                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "+K" + _RowB + ")";
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }
                                                        else if (rsDetail.Type == "Redemption" || rsDetail.Type == "Switching Out")
                                                        {
                                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(J" + incRowExcel + "+K" + _RowB + ")";
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                                        }

                                                        worksheet.Cells[incRowExcel, 12].Value = rsDetail.Remark;
                                                        worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 13].Value = rsDetail.AgentName;
                                                        worksheet.Cells[incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                        worksheet.Cells[incRowExcel, 14].Value = rsDetail.Branch;
                                                        worksheet.Cells[incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                    }


                                                }
                                                _endRowDetail = incRowExcel;
                                                _no++;
                                                incRowExcel++;
                                                _aaa = incRowExcel;




                                            }



                                            worksheet.Cells["A" + _endRowDetail + ":N" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                            worksheet.Cells[incRowExcel, 4].Value = "Total :";
                                            worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                            //worksheet.Cells[_aaa, 11].Formula = "SUM(K" + _endRowDetail + ":J" + _aaa + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                            worksheet.Cells[incRowExcel, 5].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 10].Calculate();
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            incRowExcel++;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            incRowExcel++;
                                        }

                                        int _lastRow = incRowExcel;

                                        string _rangeA = "A5:L" + incRowExcel;
                                        using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            r.Style.Font.Size = 12;
                                        }

                                        worksheet.DeleteRow(_lastRow);

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 12];
                                        worksheet.Column(1).Width = 8;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 2;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 25;
                                        worksheet.Column(13).AutoFit();
                                        worksheet.Column(14).AutoFit();


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &14&B Transaction Report of Client Portfolio";


                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }
                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion


            else
            {
                return false;
            }
        }

        public int EndDayTrailsFundPortfolio_GenerateWithParamFund(string _usersID, DateTime _valueDate, EndDayTrailsFundPortfolio _edt)
        {
            try
            {
                DateTime _datetimeNow = DateTime.Now;
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";

                        if (!_host.findString(_edt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_edt.FundFrom))
                        {
                            _paramFund = "And FundPK in ( " + _edt.FundFrom + " ) ";
                        }
                        else
                        {
                            _paramFund = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
--testing dari sql
--declare @ValueDate date
--declare @UsersID nvarchar(20)
--declare @LastUpdate datetime

--set @ValueDate = '2019-09-04'
--set @UsersID = 'admin'
--set @lastupdate = getdate()


--drop table #ZFundPosition
--drop table #ZLogicFundPosition
--drop table #ZDividenSaham
--drop table #StaticClosePrice
--drop table #ZFundFrom

Declare @CFundPK int
declare @EndDayTrailsFundPortfolioPK int
Create Table #ZFundPosition                  
(                  
InstrumentPK int,     
InstrumentTypePK int,                  
InstrumentID nvarchar(100) COLLATE DATABASE_DEFAULT,                  
FundPK int,                  
FundID nvarchar(100) COLLATE DATABASE_DEFAULT,                  
AvgPrice numeric(38,12),                  
LastVolume numeric(38,4),                  
ClosePrice numeric(38,12),                  
TrxAmount numeric(38,6),              
AcqDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) COLLATE DATABASE_DEFAULT,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
BitBreakable bit
)                  

CREATE CLUSTERED INDEX indx_ZFundPosition ON #ZFundPosition (FundPK,InstrumentPK,InstrumentTypePK,BankPK,BankBranchPK);
    
Create Table #ZLogicFundPosition              
(              
BuyVolume numeric(38,4),              
SellVolume numeric(38,4),              
BuyAmount numeric(38,4),       
SellAmount numeric(38,4),            
FundPK int,              
InstrumentPK int,              
SettlementDate datetime,              
MaturityDate datetime,              
InterestPercent numeric(38,8),
CurrencyPK int,
Category nvarchar(200) COLLATE DATABASE_DEFAULT,
TaxExpensePercent numeric(19, 8),
MarketPK int,
InterestDaysType int,
InterestPaymentType int,
PaymentModeOnMaturity   int,
PaymentInterestSpecificDate datetime,
BankPK int,
BankBranchPK int,
PriceMode int,
BitIsAmortized bit,
AcqDate datetime,
BitBreakable bit
)      

CREATE CLUSTERED INDEX indx_ZLogicFundPosition ON #ZLogicFundPosition (FundPK,InstrumentPK,BankPK,BankBranchPK);

Create Table #ZDividenSaham                  
(                  
InstrumentPK int,     
FundPK int,                  
LastVolume numeric(18,4)     
)      

CREATE CLUSTERED INDEX indx_ZDividenSaham ON #ZDividenSaham (FundPK,InstrumentPK);

Create table #StaticClosePrice
(
	FundPK int,
	InstrumentPK int,
	maxDate datetime
)

CREATE CLUSTERED INDEX indx_StaticClosePrice ON #StaticClosePrice (FundPK,InstrumentPK);

Create Table #ZFundFrom                  
(                   
	FundPK int,
	EndDayTrailsFundPortfolioPK int
)      

CREATE CLUSTERED INDEX indx_ZFundFrom  ON #ZFundFrom (FundPK,EndDayTrailsFundPortfolioPK);


Declare @PeriodPK    int                  
Declare @maxEndDayTrailsFundPortfolioPK int       

                
Select @EndDayTrailsFundPortfolioPK = max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio    
set @EndDayTrailsFundPortfolioPK = isnull(@EndDayTrailsFundPortfolioPK,1)     


insert into #ZFundFrom(FundPK,EndDayTrailsFundPortfolioPK)
--select FundPK from Fund where status in (1,2)  " + _paramFund + @" and MaturityDate >= @ValueDate
--select FundPK,row_number() over (order by FundPK desc) + @EndDayTrailsFundPortfolioPK from Fund where status in (1,2) and MaturityDate >= @ValueDate
select FundPK,row_number() over (order by FundPK desc) + @EndDayTrailsFundPortfolioPK from Fund where status in (1,2) " + _paramFund + @" and (MaturityDate >= @ValueDate or MaturityDate = '01/01/1900')
--PARAM FUND



--DECLARE A CURSOR FOR     

----select FundPK from Fund where status in (1,2)  " + _paramFund + @" and MaturityDate >= @ValueDate
--select FundPK from Fund where status in (1,2)  and MaturityDate >= @ValueDate

--Open A
--Fetch Next From A
--Into @CFundPK

--While @@FETCH_STATUS = 0
--BEGIN    

update FundPosition set status = 3,LastUpdate=@lastUpdate where Date = @ValueDate and status = 2 and FundPK in (select FundPK from #ZFundFrom)
update EndDayTrailsFundPortfolio set status = 3,VoidUsersID = @UsersID,VoidTime = @lastUpdate,LastUpdate=@lastUpdate
where ValueDate = @ValueDate and status = 2 and FundPK in (select FundPK from #ZFundFrom)          

UPDATE Investment set PriceMode = 1 where InstrumentTypePK  in (1,4,16)  and ValueDate = @ValueDate
update Investment set MarketPK = 1  where ValueDate = @ValueDate
update Investment set Category = null where InstrumentTypePK  <> 5  and ValueDate = @ValueDate
        
Select @PeriodPK = PeriodPK From Period where @ValueDate Between DateFrom and DateTo  

Insert into EndDayTrailsFundPortfolio  (EndDayTrailsFundPortfolioPK,HistoryPK,Status,ValueDate,FundPK,BitValidate
,LogMessages,EntryUsersID,EntryTime,LastUpdate)                    
Select EndDayTrailsFundPortfolioPK,1,2,@ValueDate,FundPK,0
,'',@UsersID,@LastUpdate,@LastUpdate  
from #ZFundFrom A     

      
                             

-- TARIK JUAL BELI DARI INVESTMENT              
Insert into #ZLogicFundPosition	(BuyVolume,SellVolume,BuyAmount,SellAmount,FundPK,InstrumentPK,SettlementDate,MaturityDate,
InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate
,BankPK,BankBranchPK,PriceMode,BitIsAmortized,AcqDate,BitBreakable)               

Select SUM(BuyVolume) BuyVolume,SUM(SellVolume) SellVolume,SUM(BuyAmount) BuyAmount,SUM(SellAmount) SellAmount,B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,
B.InterestPercent,B.CurrencyPK,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate
,B.BankPK,B.BankBranchPK,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable
From               
(               
Select sum(isnull(A.BuyVolume,0)) BuyVolume, sum(isnull(A.SellVolume,0)) SellVolume,sum(isnull(A.BuyAmount,0)) BuyAmount
,sum(isnull(A.SellAmount,0)) SellAmount,A.FundPK,A.InstrumentPK,              
isnull(A.SettlementDate,'') SettlementDate,isnull(A.MaturityDate,'') MaturityDate,isnull(A.InterestPercent,0) InterestPercent,
isnull(A.CurrencyPK,'') CurrencyPK, A.Category, isnull(A.TaxExpensePercent,0) TaxExpensePercent,isnull(A.MarketPK,0) MarketPK,
isnull(A.InterestDaysType,0) InterestDaysType,isnull(A.InterestPaymentType,0) InterestPaymentType,isnull(A.PaymentModeOnMaturity,0) PaymentModeOnMaturity,isnull(A.PaymentInterestSpecificDate,0) PaymentInterestSpecificDate,isnull(A.BankPK,0) BankPK
,isnull(A.BankBranchPK,0) BankBranchPK,A.PriceMode,A.BitIsAmortized,
A.AcqDate,A.BitBreakable
from (                 
	
select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type in (1,2,5,14) then null else AcqDate end SettlementDate,              
Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.SettlementDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
from Investment A 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK <> 6 and A.FundPK in (select FundPK from #ZFundFrom)         
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
UNION ALL                  

select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
Case when C.Type in (1,2,5,14) then null else AcqDate end SettlementDate,              
Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,        
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK <> 6  and A.FundPK in (select FundPK from #ZFundFrom)                     
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
			
UNION ALL

select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type = 1 then null else SettlementDate end SettlementDate,              
Case when C.Type = 1 then null else A.MaturityDate end MaturityDate,              
Case when C.Type = 1 then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
	,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2  
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                       
where ValueDate <= @ValueDate and trxType = 3 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.FundPK in (select FundPK from #ZFundFrom)              
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK

-- REKSDANA--
UNION ALL
select A.InstrumentPK,sum(DoneVolume) BuyVolume,0 SellVolume,SUM(DoneAmount) BuyAmount,0 SellAmount, FundPK,               
Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable         
from Investment A 
Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2   
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2           
where ValueDate <= @ValueDate and trxType = 1 and StatusSettlement = 2 and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK = 6   and A.FundPK in (select FundPK from #ZFundFrom)           
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent
,ValueDate,A.InstrumentTypePK,B.CurrencyPK,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
  
UNION ALL                  

select A.InstrumentPK,0 BuyVolume,sum(DoneVolume) SellVolume,0 BuyAmount,SUM(DoneAmount) SellAmount, FundPK,               
Case when C.Type in (1,4) then null else AcqDate end SettlementDate,              
Case when C.Type in (1,4) then null else A.MaturityDate end MaturityDate,              
Case when C.Type in (1,4) then null else A.InterestPercent end InterestPercent,ValueDate,        
B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK
,case when B.InstrumentTypePK = 5 then A.InterestDaysType else B.InterestDaysType end InterestDaysType
,case when B.InstrumentTypePK = 5 then A.InterestPaymentType else B.InterestPaymentType end InterestPaymentType
,A.PaymentModeOnMaturity
,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK
,A.PriceMode,A.BitIsAmortized,Case when C.Type = 1 then null else A.AcqDate end AcqDate,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable       
from Investment A Left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2      
left join InstrumentType C on B.InstrumentTypePK = C.InstrumentTypePK and C.status = 2                   
where ValueDate <= @ValueDate and trxType = 2 and StatusSettlement = 2  and year(ValueDate) = year(@ValueDate)  and A.InstrumentTypePK = 6   and A.FundPK in (select FundPK from #ZFundFrom)                
Group By A.InstrumentPK,FundPK,SettlementDate,A.MaturityDate,A.InterestPercent,ValueDate
,A.InstrumentTypePK,B.CurrencyPK,A.Category,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,C.Type,A.AcqDate,B.InstrumentTypePK,B.InterestDaysType,B.InterestPaymentType,A.BitBreakable,C.InstrumentTypePK
	

)A                
Group By A.InstrumentPK,A.FundPK,A.SettlementDate,A.MaturityDate,A.InterestPercent
,A.ValueDate,A.CurrencyPK ,A.Category ,A.TaxExpensePercent,A.MarketPK,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate
,A.BankPK,A.BankBranchPK,A.PriceMode,A.BitIsAmortized,A.AcqDate,A.BitBreakable
)B     
Group By B.FundPK,B.InstrumentPK,B.SettlementDate,B.MaturityDate,B.InterestPercent,B.CurrencyPK
,B.Category,B.TaxExpensePercent,B.MarketPK,B.InterestDaysType,B.InterestPaymentType,B.PaymentModeOnMaturity,B.PaymentInterestSpecificDate,B.BankPK,B.BankBranchPK
,B.PriceMode,B.BitIsAmortized,B.AcqDate,B.BitBreakable



--INSERT INVESTMENT + BEG BALANCE SELAIN DEPOSITO ( INVESTMENT + BEG BALANCE )
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType
,PriceMode,BitIsAmortized)                  
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID,A.FundPK,C.ID,
isnull(dbo.[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,             
isnull(A.BuyAmount,0) - (isnull(dbo.[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),0) 
* isnull(A.SellVolume,0) / case when D.InstrumentTypePK in (2,3,8,14,13,9,15) then 100 else 1 end )  + isnull(B.TrxAmount,0)	TrxAmount
,A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK,D.InterestDaysType,D.InterestPaymentType
,A.PriceMode,A.BitIsAmortized
From #ZLogicFundPosition A              
Left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2                
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK  
and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')                
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (1,2,4,5,14,9)



-- INSERT INVESTMENT + BEG BALANCE DEPOSITO ONLY ( INVESTMENT + BEG BALANCE )              
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
select InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,avg(AvgPrice)
,sum(LastVolume),avg(ClosePrice),TrxAmount,AcqDate,MaturityDate,InterestPercent
,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable
from (
Select  A.InstrumentPK,D.InstrumentTypePK,D.ID InstrumentID,A.FundPK,C.ID FundID, 
1 AvgPrice,              
isnull(A.BuyVolume,0) - isnull(A.SellVolume,0) + isnull(B.Volume,0) LastVolume,                  
1 ClosePrice,                  
isnull(A.BuyAmount,0) - (1 * isnull(A.SellVolume,0))  + isnull		(B.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,D.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.PaymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when D.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From #ZLogicFundPosition A              
LEft join Instrument D on A.InstrumentPK = D.InstrumentPK and D.Status = 2     
Left join InstrumentType E on D.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
Left join Fund C on A.FundPK = c.FundPK and C.Status = 2                 
left Join FundEndYearPortfolio B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK 
and isnull(A.Maturitydate,'01/01/1900') = isnull(B.MaturityDate,'01/01/1900')    
and isnull(A.InterestPercent,0) = isnull(B.InterestPercent,0)
and isnull(A.MarketPK,0) = isnull(B.MarketPK,0)
and B.PeriodPK = @PeriodPK where E.Type in (3)
)A  
group by InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,TrxAmount,AcqDate
,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable




-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT SELAIN DEPOSITO
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,PriceMode,BitIsAmortized
,InterestDaysType,InterestPaymentType,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 
isnull(dbo.[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),0) AvgPrice,              
isnull(A.Volume,0) LastVolume,                  
dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK) ClosePrice,                  
isnull(A.TrxAmount,0) TrxAmount,              
isnull(A.AcqDate,'01/01/1900'),isnull(A.MaturityDate,'01/01/1900'),isnull(A.InterestPercent,0),C.CurrencyPK, A.Category,isnull(A.TaxExpensePercent,0),A.MarketPK
,A.PriceMode,A.BitIsAmortized,isnull(C.InterestDaysType,2),isnull(C.InterestPaymentType,1),Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2              
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2           
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZFundPosition B on A.InstrumentPK = B.InstrumentPK 
and A.FundPK = B.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900')              
where A.PeriodPK = @PeriodPK              
) and E.Type in (1,2,4,5,14,9) and A.periodPK = @PeriodPK   and A.FundPK in (select FundPK from #ZFundFrom)          

-- AMBIL BEG BALANCE DARI FUND END YEAR, YANG GA PERNAH ADA MUTASI SAMPAI HARI INI DI INVESTMENT DEPOSITO ONLY             
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK,BitBreakable)                  
Select A.InstrumentPK,C.InstrumentTypePK,C.ID,A.FundPK,D.ID, 1 AvgPrice,isnull(A.Volume,0) LastVolume,                  
1 ClosePrice, isnull(A.TrxAmount,0) TrxAmount,              
A.AcqDate,A.MaturityDate,A.InterestPercent,C.CurrencyPK, A.Category,A.TaxExpensePercent,A.MarketPK
,A.InterestDaysType,A.InterestPaymentType,A.paymentModeOnMaturity,A.PaymentInterestSpecificDate,A.BankPK,A.BankBranchPK,Case when C.InstrumentTypePK = 5 then A.BitBreakable else 0 end BitBreakable
From FundEndYearPortfolio A              
left join Instrument C on A.InstrumentPk = C.instrumentPK and C.status = 2     
Left join InstrumentType E on C.InstrumentTypePK = E.InstrumentTypePK and E.Status = 2             
left join Fund D on A.FundPK = D.FundPK and D.status = 2              
where FundEndYearPortfolioPK not in              
(              
Select FundEndYearPortfolioPK From FundEndYearPortfolio A              
inner join #ZLogicFundPosition B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK  and A.MaturityDate = B.MaturityDate         
where A.PeriodPK = @PeriodPK             
) and E.Type in (3) and A.periodPK = @PeriodPK   and A.FundPK in (select FundPK from #ZFundFrom)          


-- CORPORATE ACTION DIVIDEN SAHAM

-- CORPORATE ACTION STOCK SPLIT / REVERSE STOCK SPLIT
	                    
delete CorporateActionResult where Date = @ValueDate and FundPK in (select FundPK from #ZFundFrom)  


-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.ExDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.ExDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null and C.FundPK in (select FundPK from #ZFundFrom) 
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.ExDate,B.FundPK,A.InstrumentPK,isnull((B.LastVolume/A.Hold * A.Earn) - B.LastVolume,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 4 and A.Status = 2 and A.ExDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 



-- Tarik Balance Cum / Valuedate - 1 + movement dengan batas settleddate <= recordingDate and ValueDate >= CumDate 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null and C.FundPK in (select FundPK from #ZFundFrom) 
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.ValueDate,B.FundPK,A.InstrumentPK,B.LastVolume / A.Hold * A.Earn DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 2 and A.Status = 2 and A.ValueDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION DIVIDEN RIGHTS
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1 and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate and B.FundPK in (select FundPK from #ZFundFrom) 
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null  and C.FundPK in (select FundPK from #ZFundFrom) 

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-R' and D.status = 2
where A.Type = 3 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION DIVIDEN WARRANT
truncate table #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance + isnull(C.BalanceFromInv,0) LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
and C.ValueDate >= A.ValueDate
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
from CorporateAction A
Left join (
select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
, SettlementDate, ValueDate 
from Investment where statusSettlement = 2
and InstrumentTypePK = 1  and FundPK in (select FundPK from #ZFundFrom) 
Group by InstrumentPK,FundPK,SettlementDate,ValueDate
)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
and B.ValueDate >= A.ValueDate
left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate
and C.FundPK is null and C.InstrumentPK is null  and C.FundPK in (select FundPK from #ZFundFrom) 

Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,isnull(B.FundPK,0),isnull(D.InstrumentPK,0),isnull(B.LastVolume / A.Hold * A.Earn,0) DividenSaham,A.Price,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A 
left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status = 2
left join Instrument D on D.ID = C.ID + '-W' and D.status = 2
where A.Type = 5 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- PROSES EXERCISE YANG DAH DI DISTRIBUTION DATE
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select ExercisePK,2,@ValueDate,FundPK,InstrumentPK,BalanceExercise,Price,0 from Exercise 
where DistributionDate  = @ValueDate and status = 2  and FundPK in (select FundPK from #ZFundFrom) 


-- CORPORATE ACTION BOND AMORTIZEN
TRUNCATE TABLE #ZDividenSaham
Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
Select  B.FundPK,B.InstrumentPK,B.Balance  LastBalance
--B.Balance + C.BalanceFromInv LastBalance
From CorporateAction A 
left join FundPosition B on A.InstrumentPK = B.InstrumentPK 
and B.Date = dbo.fworkingday(A.ValueDate,-1) and B.status = 2
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK  in (2,3,9,15)
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)C on   C.SettlementDate <= A.RecordingDate and B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK
--and C.ValueDate >= A.ValueDate
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 

--Insert into #ZDividenSaham(FundPK,InstrumentPK,LastVolume)
--Select B.FundPK,B.InstrumentPK,B.BalanceFromInv
--from CorporateAction A
--Left join (
--	select sum(Case when TrxType = 1 then DoneVolume else DoneVolume * -1 end) BalanceFromInv,FundPK, InstrumentPK
--	, SettlementDate, ValueDate 
--	from Investment where statusSettlement = 2
--	and InstrumentTypePK = 1 
--	Group by InstrumentPK,FundPK,SettlementDate,ValueDate
--)B on  B.SettlementDate <= A.RecordingDate and  A.InstrumentPK = B.InstrumentPK
--and B.ValueDate >= A.ValueDate
--left join #ZDividenSaham C on B.FundPK = C.FundPK and B.InstrumentPK = C.InstrumentPK 
--where A.Type = 2 and A.Status = 2 and A.PaymentDate = @ValueDate
--and C.FundPK is null and C.InstrumentPK is null
	
Insert into CorporateActionResult(CorporateActionPK,Status,Date,FundPK,InstrumentPK,Balance,Price,PeriodPK)
Select A.CorporateActionPK,2,A.PaymentDate,B.FundPK,A.InstrumentPK,B.LastVolume * A.Earn / A.Hold * -1,0,dbo.FgetPeriod(A.ValueDate)
from CorporateAction A left join #ZDividenSaham B on A.InstrumentPK = B.InstrumentPK
where A.Type = 6 and A.Status = 2 and A.PaymentDate = @ValueDate  and B.FundPK in (select FundPK from #ZFundFrom) 


-- UPDATE POSISI ZFUNDPOSITION + CORPORATE ACTION	
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = [dbo].[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
select FundPK,A.InstrumentPK,Price, sum(Balance) Balance,A.status
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
and B.ID not like '%-W' and B.ID not like '%-R'
WHERE A.Date <= @ValueDate and PeriodPK = @PeriodPK  and A.FundPK in (select FundPK from #ZFundFrom) 

Group By FundPK,A.InstrumentPK,Price,A.status
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
left join instrumentType C on A.InstrumentTypePK = C.InstrumentTypePK and C.status = 2
where C.Type in (1,9,2,5,14)
--AND A.LastVolume > 0  
and A.FundPK = B.FundPK


                
-- EXERCISE BELUM ADA DI FUNDPOSITION, UNTUK RIGHTS/WARRANT
IF NOT EXISTS
(
Select * from #ZFundPosition A 
left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where Date >= @ValueDate and DistributionDate > @valuedate and status = 2
)
BEGIN
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice,
TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PriceMode,BitIsAmortized)
Select A.InstrumentRightsPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,A.Price,BalanceExercise,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
A.Price * BalanceExercise,null,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,0,0,1,0 from Exercise A
left join Instrument B on A.InstrumentRightsPK = B.InstrumentPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
where Date >= @ValueDate and DistributionDate > @valuedate and A.status = 2  and A.FundPK in (select FundPK from #ZFundFrom) 
END




---- EXERCISE BELUM ADA DI FUNDPOSITION, UNTUK DISTRIBUTED DATE
--IF NOT EXISTS
--(
--Select * from #ZFundPosition A 
--left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
--where DistributionDate  = @ValueDate and status = 2
--)
--BEGIN
--Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice,
--TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK,InterestDaysType,InterestPaymentType,PriceMode,BitIsAmortized)
--Select A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,A.Price,BalanceExercise,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
--A.Price * BalanceExercise,null,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK,0,0,1,0 from Exercise A
--left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status in (1,2)
--left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
--where DistributionDate  <= @ValueDate and A.status = 2
--END


--INSERT INSTRUMENT YANG ADA DI CORPORATE ACTION RESULT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2

where A.status = 2 and B.ID like '%-W' and PeriodPK = @PeriodPK  and A.FundPK = @CFundPK



Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  
Select A.InstrumentPK,16,B.ID,A.FundPK,C.ID, 
[dbo].[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),
A.Balance,dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
Balance*Price,Date,'01/01/1900',0,B.CurrencyPK,NULL,0,B.MarketPK
from CorporateActionResult A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
 
where A.status = 2 and B.ID like '%-R' and PeriodPK = @PeriodPK  and A.FundPK = @CFundPK



                       
-- UPDATE POSISI ZFUNDPOSITION + FUND POSITION ADJUSTMENT
update A set 
A.LastVolume = A.LastVolume + isnull(B.Balance,0),
A.AvgPrice = [dbo].[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),
A.TrxAmount = A.TrxAmount + isnull(B.Price * B.Balance,0)
from #ZFundPosition A
left join 
(
SELECT FundPK,A.InstrumentPK,case when sum(balance) = 0 then 0 else sum(Price*Balance) / SUM(balance) end Price, sum(Balance) Balance,A.status,
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  THEN A.AcqDate ELSE NULL END AcqDate
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
WHERE A.status = 2 AND A.Date <= @ValueDate and PeriodPK = @PeriodPK and A.FundPK in (select FundPK from #ZFundFrom) 
Group By FundPK,A.InstrumentPK,A.status,B.InstrumentTypePK,A.AcqDate
) B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and B.status = 2
AND isnull(A.AcqDate,'01/01/1900') = isnull(B.AcqDate,'01/01/1900') and A.FundPK in (select FundPK from #ZFundFrom) 




--INSERT INSTRUMENT YANG ADA DI FUND POSITION ADJUSTMENT TAPI GA ADA IN ZFUNDPOSITION
Insert into #ZFundPosition(InstrumentPK,InstrumentTypePK,InstrumentID,FundPK,FundID,AvgPrice,LastVolume,ClosePrice
,TrxAmount,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK)                  

SELECT A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID, 
[dbo].[FgetlastavgfrominvestmentByFundAvgPriority] (@ValueDate,A.InstrumentPK,A.FundPK),
SUM(A.Balance),dbo.FGetLastClosePriceForFundPosition(@ValueDate,A.InstrumentPK),
SUM(Balance*Price),
case when B.InstrumentTypePK in (2,3,8,14,13,9,15)  then  A.AcqDate else null End ,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,NULL,B.TaxExpensePercent,B.MarketPK
from dbo.FundPositionAdjustment A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Fund C on A.FundPK = C.FundPK and C.status = 2
where A.status = 2 AND A.AcqDate <= @ValueDate and PeriodPK = @PeriodPK and A.FundPK in (select FundPK from #ZFundFrom) 
and NOT EXISTS 
(SELECT * FROM #ZFundPosition C WHERE A.InstrumentPK = C.InstrumentPK AND A.FundPK = C.FundPK and isnull(A.AcqDate,'01/01/1900') = isnull(C.AcqDate,'01/01/1900'))
GROUP BY A.InstrumentPK,B.InstrumentTypePK,B.ID,A.FundPK,C.ID,
B.MaturityDate,B.InterestPercent,B.CurrencyPK,B.TaxExpensePercent,B.MarketPK,A.AcqDate



-- DELETE RIGHTS AND WARRANT YANG EXPIRED
Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-R' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 3
)B on A.InstrumentPK = B.InstrumentPK

Delete A From #ZFundPosition A
Inner join 
(
Select C.InstrumentPK from CorporateAction A
left join Instrument B on A.InstrumentPK = B.InstrumentPK and B.status = 2
left join Instrument C on C.ID = B.ID + '-W' and C.status = 2
where ExpiredDate = @ValueDate and A.Status = 2 and A.Type = 5
)B on A.InstrumentPK = B.InstrumentPK

-- KURANGIN BALANCE WARRANT AND RIGHTS YANG ADA DI EXERCISE


IF  EXISTS
(
Select * from #ZFundPosition A 
left join Exercise B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
where Date >= @ValueDate and DistributionDate > @valuedate and status = 2 and A.FundPK in (select FundPK from #ZFundFrom) 
)
BEGIN
Update A set A.LastVolume = A.LastVolume - isnull(B.BalanceExercise,0) from #ZFundPosition A
left join Exercise B on A.InstrumentPK = B.InstrumentRightsPK and B.status = 2
where Date = @ValueDate and A.FundPK in (select FundPK from #ZFundFrom) 
END


--select * from #ZLogicFundPosition where FundPK = 7 and InstrumentPK = 978
--select * from #ZFundPosition where FundPK = 7 and InstrumentPK = 978



--Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
--InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
--,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
--,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
--,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
--Select (select max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio),(select max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio),1,2,'',@ValueDate,A.FundPK, FundID,                  
--A.InstrumentPK,InstrumentID,CONVERT(decimal(18,12),AvgPrice),LastVolume
--,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume CostValue
--, ClosePrice,TrxAmount
--,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
--AcqDate,A.MaturityDate,InterestPercent,A.CurrencyPK, Category,TaxExpensePercent,A.MarketPK
--,isnull(InterestDaysType,0),isnull(InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(A.BankPK,0),isnull(A.BankBranchPK,0)
--,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
--From #ZFundPosition  A WITH (NOLOCK)
--left join Fund B on A.FundPK = B.FundPK
--where A.LastVolume > 0 and B.status in (1,2)  and A.FundPK in (select FundPK from #ZFundFrom) 
  

--Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
--Where FundPositionPK = (select max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio) and I.InstrumentTypePK not in (1,4,6,16)
--and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  and FP.FundPK in (select FundPK from #ZFundFrom)  

Insert into FundPosition(FundPositionPK,TrailsPK,HistoryPK,Status,Notes,Date,FundPK,FundID,                  
InstrumentPK,InstrumentID,AvgPrice,Balance,CostValue,ClosePrice,TrxAmount,MarketValue
,AcqDate,MaturityDate,InterestPercent,CurrencyPK,Category,TaxExpensePercent,MarketPK
,InterestDaysType,InterestPaymentType,PaymentModeOnMaturity,PaymentInterestSpecificDate,BankPK,BankBranchPK
,EntryUsersID,EntryTime,LastUpdate,PriceMode,BitIsAmortized,BitBreakable)                  
Select C.EndDayTrailsFundPortfolioPK,C.EndDayTrailsFundPortfolioPK,1,2,'',@ValueDate,A.FundPK, FundID,                  
A.InstrumentPK,InstrumentID,CONVERT(decimal(18,12),AvgPrice),LastVolume
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then CONVERT(decimal(18,12),AvgPrice)/100 else CONVERT(decimal(18,12),AvgPrice) End * LastVolume CostValue
, ClosePrice,TrxAmount
,case when InstrumentTypePK in (2,3,8,14,13,9,15)  then ClosePrice/100 else ClosePrice End * LastVolume MarketValue,                  
AcqDate,A.MaturityDate,InterestPercent,A.CurrencyPK, Category,TaxExpensePercent,A.MarketPK
,isnull(InterestDaysType,0),isnull(InterestPaymentType,0),isnull(PaymentModeOnMaturity,0),PaymentInterestSpecificDate,isnull(A.BankPK,0),isnull(A.BankBranchPK,0)
,@UsersID,@LastUpdate,@LastUpdate,isnull(PriceMode,0),isnull(BitIsAmortized,0),isnull(BitBreakable,0)
From #ZFundPosition  A WITH (NOLOCK)
left join Fund B on A.FundPK = B.FundPK
inner join #ZFundFrom C on A.FundPK = C.FundPK
where A.LastVolume > 0 and B.status in (1,2)  and A.FundPK in (select FundPK from #ZFundFrom) 
  

Delete FP From FundPosition FP Left Join Instrument I on FP.InstrumentPK = I.InstrumentPK
left join #ZFundFrom B on FP.FundPK = B.FundPK 
Where FundPositionPK = B.EndDayTrailsFundPortfolioPK and I.InstrumentTypePK not in (1,4,6,16)
and FP.MaturityDate <= @ValueDate and FP.MaturityDate Is Not Null  and FP.FundPK in (select FundPK from #ZFundFrom)  


---------PROSES AMORTIZED DAN PRICE MODE------------------------------
update A set A.ClosePrice =  Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			 
		end 
, A.MarketValue = A.Balance * Case when A.BitIsAmortized = 0 
then Case when A.PriceMode = 1 then ClosePriceValue 
			when A.PriceMode = 2 then LowPriceValue
				when A.PriceMode = 3 then HighPriceValue else isnull(ClosePriceValue,1) end
		else  
			dbo.FgetAmortize(@ValueDate,A.AcqDate,A.MaturityDate,A.AvgPrice)
			  
		end / Case when D.InstrumentTypePK in (2,3,8,14,13,9,15)  then 100 else 1 end
from FundPosition A 
left join 
(
	select InstrumentPK,LowPriceValue,ClosePriceValue,HighPriceValue From ClosePrice where Date =
	(
		Select max(Date) From ClosePrice where date <= @ValueDate and status = 2
	) and status = 2
)B on A.InstrumentPK = B.InstrumentPK 
left join instrument C on A.InstrumentPK = C.instrumentPK and C.Status = 2
left join InstrumentType D on C.InstrumentTypePK = D.InstrumentTypePK and D.status = 2
where A.FundPK in (select FundPK from #ZFundFrom)  and Date = @ValueDate and A.status = 2

-- STATIC CLOSEPRICE

insert into #StaticClosePrice
select distinct FundPK,instrumentPK,max(Date) maxDate from UpdateClosePrice 
where Date <= @ValueDate and status = 2 
and fundPK in
(
	Select FundPK from #ZFundFrom
)
group by FundPK,InstrumentPK
order by FundPK,InstrumentPK asc

--select * from #StaticClosePrice order by FundPK,instrumentPK,maxDate asc

	
--Select A.FundPK,A.InstrumentPK,B.ClosePriceValue ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
--left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
--left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
--where A.maxDate = @ValueDate

--order by fundPK,InstrumentPK

		--select A.FundPK,A.InstrumentPK,B.ClosePrice, A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		--INNER join (
		--	Select A.FundPK,A.InstrumentPK,case when (B.ClosePriceValue is not null ) then B.ClosePriceValue else D.ClosePriceValue end ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
		--	left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
		--	left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
		--	left join ClosePrice D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2)

		--)B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		--inner join #ZFundFrom C on A.FundPK = C.FundPK 
		--where A.Date = @ValueDate and A.TrailsPK = C.EndDayTrailsFundPortfolioPK
		--and A.Status = 2
		--order by A.FundPK,A.InstrumentPK


		Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) 
		then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		INNER join (
				
Select A.FundPK,A.InstrumentPK,B.ClosePriceValue ClosePrice,C.InstrumentTypePK from #StaticClosePrice A
left join UpdateClosePrice B on A.FundPK = B.FundPK and A.InstrumentPK = B.InstrumentPK and A.maxDate = B.Date and B.status = 2
left join Instrument C on A.InstrumentPK = C.InstrumentPK and C.status in (1,2)
where isnull(B.ClosePriceValue,0) > 0 and A.maxDate = @ValueDate

		)B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK 
		inner join #ZFundFrom C on A.FundPK = C.FundPK
		where A.Date = @ValueDate and A.TrailsPK = C.EndDayTrailsFundPortfolioPK
		and A.Status = 2

		--Update A set ClosePrice = B.ClosePrice, MarketValue = A.Balance * case when B.InstrumentTypePK not in (1,4,6,16) then B.ClosePrice/100 else B.ClosePrice end from FundPosition A
		--left join #StaticClosePrice B on A.InstrumentPK = B.InstrumentPK and A.FundPK = B.FundPK
		--where A.Date = @ValueDate and A.TrailsPK = @maxEndDayTrailsFundPortfolioPK
		--and A.InstrumentPK in(
		--	select instrumentPK From #StaticClosePrice where FundPK = @CFundPK
		--) and A.FundPK = @CFundPK and A.status = 2





-- update TrxBuy di Investment untuk Sell / Rollover

declare @DTrxBuy int
declare @DInvestmentPK int
declare @DInstrumentPK int
declare @DFundPK int
declare @DDate datetime
declare @DNewIdentity bigint
declare @DAcqDate datetime

DECLARE C CURSOR FOR 
select TrxBuy,InvestmentPK,B.InstrumentPK,B.FundPK,B.Date,B.AcqDate from Investment A
left join FundPosition B on A.TrxBuy = B.[Identity]
where B.Date = @valuedate and InstrumentTypePK not in (1,4,16) and StatusInvestment in (1,2) and TrxType in (2,3)
Open C
Fetch Next From C
Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate,@DAcqDate  
While @@FETCH_STATUS = 0
BEGIN   

set @DNewIdentity = 0
select @DNewIdentity = [Identity] from FundPosition where InstrumentPK = @DInstrumentPK and FundPK = @DFundPK and Date = @DDate and AcqDate = @DAcqDate and status in (1,2)

update Investment set TrxBuy = @DNewIdentity where InvestmentPK = @DInvestmentPK and StatusInvestment in (1,2)


Fetch next From C Into @DTrxBuy,@DInvestmentPK,@DInstrumentPK,@DFundPK,@DDate,@DAcqDate                  
END
Close C
Deallocate C  


	
Update A set BitValidate = 1, LogMessages = B.ID + ' - ' + B.Name from EndDayTrailsFundPortfolio A  
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
where A.FundPK in (select FundPK from #ZFundFrom)  and A.Status = 2 and ValueDate = @ValueDate       

--Fetch next From A Into @CFundPK
--END
--Close A
--Deallocate A


                        Select (select max(ISNULL(EndDayTrailsFundPortfolioPK,0)) + 1 from EndDayTrailsFundPortfolio) LastPK
                        ";
                        cmd.Parameters.AddWithValue("@ValueDate", _valueDate);
                        cmd.Parameters.AddWithValue("@UsersID", _usersID);
                        cmd.Parameters.AddWithValue("@LastUpdate", _datetimeNow);

                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                dr.Read();
                                return Convert.ToInt32(dr["LastPK"]);

                            }
                            return 0;
                        }

                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public Boolean Dealing_ListingRpt(string _userID, InvestmentListing _listing)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _paramFund = "";
                        string _bitIsMature = "";
                        string _paramDealingPK = "";
                        string _paramDealing = "";

                        if (!_host.findString(_listing.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_listing.stringInvestmentFrom))
                        {
                            _paramDealingPK = " And IV.DealingPK in (" + _listing.stringInvestmentFrom + ") ";
                            _paramDealing = " DealingPK in (" + _listing.stringInvestmentFrom + ") ";
                        }
                        else
                        {
                            _paramDealingPK = " And IV.DealingPK in (0) ";
                            _paramDealing = " DealingPK in (0) ";
                        }

                        if (_listing.ParamFundID != "All")
                        {
                            _paramFund = "and F.ID = left(@ParamFundIDFrom,charindex('-',@ParamFundIDFrom) - 1)";
                        }
                        else
                        {
                            _paramFund = "";
                        }

                        if (_listing.BitIsMature == true)
                        {
                            _bitIsMature = @" 
                            union all
                            Select Reference,RefNo,ValueDate,InstrumentID,InstrumentName,    
                            FundID,InstrumentType,InvestmentPK,Volume,OrderPrice,InterestPercent,TrxTypeID,DonePrice,   
                            Amount,Notes,RangePrice ,MaturityDate ,DoneVolume,DoneAmount,'',AcqDate,DealingPK,InvestmentPK,CounterpartID  
                            from InvestmentMature where " + _paramDealing;
                        }
                        else
                        {
                            _bitIsMature = "";
                        }
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                        Declare @TrailsPK int
                        Declare @MaxDateEndDayFP datetime

                        select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                        where ValueDate = 
                        (
                        select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ParamListDate
                        )
                        and status = 2

                        Select Reference, cast(substring(reference,1,charindex('/',reference,1) - 1) as integer) RefNo,IV.valueDate,I.ID InstrumentID, I.Name InstrumentName,    
                        F.ID FundID,IT.Name InstrumentType,IV.InvestmentPK,IV.Volume,IV.OrderPrice,IV.InterestPercent,IV.TrxTypeID,isnull(IV.DonePrice,0) DonePrice,    
                        isnull(IV.Amount,0) Amount,IV.Notes, IV.RangePrice,IV.MaturityDate,isnull(IV.DoneVolume,0) DoneVolume
                        ,isnull(IV.DoneAmount,0) DoneAmount,IV.Notes,IV.AcqDate,IV.DealingPK,IV.InvestmentPK,isnull(C.ID,'') CounterpartID, IV.InvestmentNotes,MV.Descone BoardTypeID
                        from Investment IV       
                        left join Fund F on IV.FundPK = F.FundPK and F.status = 2      
                        left join Instrument I on IV.InstrumentPK = I.InstrumentPK and I.status = 2      
                        left join InstrumentType IT on IV.InstrumentTypePK = IT.InstrumentTypePK and IT.status = 2 
                        left join Counterpart C on IV.CounterpartPK = C.CounterpartPK and C.status = 2         
						left join MasterValue MV on IV.BoardType = MV.Code and MV.ID = 'BoardType' and MV.Status in (1,2)       
                        Where  IV.ValueDate = @ParamListDate and IV.StatusInvestment = 2 and IV.StatusDealing <> 3 " + _paramDealingPK + _paramFund + _bitIsMature +
                        @"
                        order by FundID
                        ";


                        cmd.Parameters.AddWithValue("@ParamListDate", _listing.ParamListDate);
                        if (_listing.ParamFundID != "All")
                        {
                            cmd.Parameters.AddWithValue("@ParamFundIDFrom", _listing.ParamFundID);
                        }

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "DealingListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "DealingListing" + "_" + _listing.ParamListDate.ToString().Replace("/", "-") + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InvestmentReport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Dealing Listing");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InvestmentListing> rList = new List<InvestmentListing>();
                                    while (dr0.Read())
                                    {
                                        InvestmentListing rSingle = new InvestmentListing();
                                        rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
                                        rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                        rSingle.InstrumentType = Convert.ToString(dr0["InstrumentType"]);
                                        rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
                                        rSingle.InstrumentName = Convert.ToString(dr0["InstrumentName"]);
                                        rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                        rSingle.BoardTypeID = Convert.ToString(dr0["BoardTypeID"]);
                                        rSingle.InvestmentNotes = Convert.ToString(dr0["InvestmentNotes"]);
                                        rSingle.InvestmentPK = Convert.ToInt32(dr0["InvestmentPK"]);
                                        rSingle.DealingPK = Convert.ToInt32(dr0["DealingPK"]);
                                        if (rSingle.InstrumentType != "Deposito Money Market")
                                        {
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.OrderPrice = Convert.ToDecimal(dr0["OrderPrice"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);

                                        }
                                        else
                                        {
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.MaturityDate = Convert.ToDateTime(dr0["MaturityDate"]);
                                            if (rSingle.TrxTypeID != "PLACEMENT")
                                            {
                                                rSingle.AcqDateDeposito = Convert.ToDateTime(dr0["AcqDate"]);
                                            }
                                        }
                                        rSingle.DoneAmount = Convert.ToDecimal(dr0["DoneAmount"]);
                                        rSingle.Notes = Convert.ToString(dr0["Notes"]);
                                        rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);

                                        rList.Add(rSingle);

                                    }

                                    var GroupByFundID =
                                         from r in rList
                                         orderby r.FundID, r.InstrumentType
                                         group r by new { r.FundID, r.InstrumentType, r.TrxTypeID,r.BoardTypeID } into rGroup
                                         select rGroup;


                                    string _range;
                                    int incRowExcel = 1;
                                    worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 1].Value = "TRADE DATE :";
                                    worksheet.Cells["B" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dddd" + ",dd-MMM-yyyy";
                                    worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_listing.ParamListDate);
                                    worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                    foreach (var rsHeader in GroupByFundID)
                                    {

                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "FUND :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundID;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "INS. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentType;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "TRX. TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.TrxTypeID;
                                        incRowExcel = incRowExcel + 1;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "BOARD TYPE :";
                                        worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.BoardTypeID;
                                        incRowExcel = incRowExcel + 1;
                                        if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Quantity (Lot)";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Done Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 7].Value = "Counterpart";
                                            worksheet.Cells[incRowExcel, 8].Value = "Notes";

                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            _range = "A" + incRowExcel + ":H" + incRowExcel;
                                        }
                                        else if (rsHeader.Key.InstrumentType == "Corporate Bond" || rsHeader.Key.InstrumentType == "Government Bond")
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Stock ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Done Price";
                                            worksheet.Cells[incRowExcel, 6].Value = "Coupon %";
                                            worksheet.Cells[incRowExcel, 7].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Counterpart";
                                            worksheet.Cells[incRowExcel, 9].Value = "Notes";

                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            _range = "A" + incRowExcel + ":I" + incRowExcel;
                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 1].Value = "Ticket ID"; ;
                                            worksheet.Cells[incRowExcel, 2].Value = "Bank ID";
                                            worksheet.Cells[incRowExcel, 3].Value = "Nominal";
                                            worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Value Date";
                                            worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
                                            worksheet.Cells[incRowExcel, 7].Value = "Done Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Int.Percent";
                                            worksheet.Cells[incRowExcel, 9].Value = "Notes";

                                            //THICK BOX HEADER
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


                                            _range = "A" + incRowExcel + ":I" + incRowExcel;

                                        }

                                        
                                        using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            //NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
                                            r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
                                            r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
                                            r.Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
                                            r.Style.Font.Size = 14;
                                            r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                            //r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
                                            r.Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            r.Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        }
                                        incRowExcel++;
                                        int _no = 1;

                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        //end area header
                                        foreach (var rsDetail in rsHeader)
                                        {
                                            _range = "A" + incRowExcel + ":H" + incRowExcel;
                                            using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                            {
                                                r.Style.Font.Size = 14;
                                                r.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                            }
                                            //area detail
                                            if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InvestmentNotes;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            }
                                            else if (rsHeader.Key.InstrumentType == "Corporate Bond" || rsHeader.Key.InstrumentType == "Government Bond")
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.OrderPrice;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.CounterpartID;
                                                worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.InvestmentNotes;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                            }


                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.DealingPK;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.InstrumentID;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.DoneVolume;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                if (rsHeader.Key.TrxTypeID == "LIQUIDATE" || rsHeader.Key.TrxTypeID == "ROLLOVER")
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AcqDateDeposito;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MM/yyyy";
                                                }
                                                else
                                                {
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.ValueDate;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd/MM/yyyy";

                                                }
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd/MM/yyyy";
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.DoneAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.InvestmentNotes;
                                                worksheet.Cells[incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            }





                                            _endRowDetail = incRowExcel;
                                            _no++;
                                            incRowExcel++;





                                        }

                                        _range = "A" + incRowExcel + ":I" + incRowExcel;
                                        using (ExcelRange s = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
                                        {
                                            s.Style.Font.Size = 14;
                                            s.Style.Border.Bottom.Style = ExcelBorderStyle.Dashed;
                                        }

                                        //THICK BOX DETAIL
                                        _endRowDetail = incRowExcel - 1;
                                        worksheet.Cells["A" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["A" + _startRowDetail + ":A" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["A" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["B" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _startRowDetail + ":B" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["B" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["C" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _startRowDetail + ":C" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["C" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["D" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _startRowDetail + ":D" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["D" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["E" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _startRowDetail + ":E" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["E" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["F" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _startRowDetail + ":F" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["F" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["G" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _startRowDetail + ":G" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["G" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells["H" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                        worksheet.Cells["H" + _startRowDetail + ":H" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells["H" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 2].Value = "Total :";
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        if (rsHeader.Key.InstrumentType == "Equity Reguler")
                                        {
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                        }
                                        else
                                        {
                                            worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Calculate();

                                            worksheet.Cells["I" + _startRowDetail].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Left.Style = ExcelBorderStyle.Dashed;
                                            worksheet.Cells["I" + _startRowDetail + ":I" + _endRowDetail].Style.Border.Right.Style = ExcelBorderStyle.Medium;
                                            worksheet.Cells["I" + _endRowDetail].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        }
                                        
                                        

                                    }

                                    incRowExcel = incRowExcel + 8;
                                    worksheet.Row(incRowExcel).PageBreak = true;

                                    string _rangeA = "A1:I" + incRowExcel;
                                    using (ExcelRange r = worksheet.Cells[_rangeA]) // KALO  KOLOM 1 SAMPE 9 A-I
                                    {
                                        r.Style.Font.Size = 18;
                                        r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
                                    }

                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).Width = 20;
                                    worksheet.Column(3).Width = 25;
                                    worksheet.Column(4).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.Column(8).AutoFit();
                                    worksheet.Column(9).AutoFit();
                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    // worksheet.PrinterSettings.FitToPage = true;
                                    //worksheet.HeaderFooter.OddHeader.RightAlignedText = "&14 PAYMENT VOUCHER";
                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    //worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&34 DEALING TICKET";
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    Image img = Image.FromFile(Tools.ReportImage);
                                    worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);
                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    return true;
                                }

                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                return false;
                throw err;
            }



        }

		public Boolean GenerateExportJournal(string _userID, JournalExport _JournalExport)
		{

			#region ExportJournal

			try
			{
				using (SqlConnection DbCon = new SqlConnection(Tools.conString))
				{
					DbCon.Open();
					using (SqlCommand cmd = DbCon.CreateCommand())
					{

						//string _paramFundFrom = "";

						//if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
						//{
						//    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
						//}
						//else
						//{
						//    _paramFundFrom = "";
						//}



						cmd.CommandText = @"
--declare @Datefrom Date
--declare @dateto date

--set @Datefrom = '2019-09-30'
--set @Dateto = '2019-09-30'

select A.JournalPK,ValueDate,A.Description,A.Reference,isnull(C.ID,'') AccountID,isnull(C.Name,'') AccountName,isnull(D.ID,'') CurrencyID,isnull(O.ID,'') OfficeID,isnull(E.ID,'') DepartmentID,isnull(F.ID,'') AgentID,
isnull(G.ID,'') CounterpartID,isnull(I.InstrumentPK,'') InstrumentPK,isnull(I.ID,'') InstrumentID, isnull(H.ID,'') ConsigneeID,isnull(B.DetailDescription,'') DetailDescription,isnull(B.DocRef,'') DocRef,isnull(B.Debit,0) Debit,isnull(B.Credit,0) Credit,isnull(B.CurrencyRate,0) CurrencyRate from Journal A
left join JournalDetail B on A.JournalPK = B.JournalPK
left join Account C on B.AccountPK = C.AccountPK and C.status in (1,2)
left join Currency D on B.CurrencyPK = D.CurrencyPK and D.Status in (1,2)
left join Office O on B.OfficePK = O.OfficePK and O.status in (1,2)
left join Department E on B.DepartmentPK = E.DepartmentPK and E.Status in (1,2)
left join Agent F on B.AgentPK = F.AgentPK and F.Status in (1,2)
left join Counterpart G on B.CounterpartPK = G.CounterpartPK and G.Status in (1,2)
left join Consignee H on B.ConsigneePK = H.ConsigneePK and H.Status in (1,2)
left join Instrument I on B.InstrumentPK = I.InstrumentPK and I.Status in (1,2)
where ValueDate between @datefrom and @dateto and posted = 1 and A.status = 2
";

						cmd.CommandTimeout = 0;
						cmd.Parameters.AddWithValue("@Datefrom", _JournalExport.ValueDateFrom);
						cmd.Parameters.AddWithValue("@Dateto", _JournalExport.ValueDateTo);

						using (SqlDataReader dr0 = cmd.ExecuteReader())
						{
							if (!dr0.HasRows)
							{
								return false;
							}
							else
							{
								string filePath = Tools.ReportsPath + "Journal" + "_" + _userID + ".xlsx";
								string pdfPath = Tools.ReportsPath + "Journal" + "_" + _userID + ".pdf";
								FileInfo excelFile = new FileInfo(filePath);
								if (excelFile.Exists)
								{
									excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
									excelFile = new FileInfo(filePath);
								}

								// SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
								using (ExcelPackage package = new ExcelPackage(excelFile))
								{
									package.Workbook.Properties.Title = "JournalExport";
									package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
									package.Workbook.Properties.Comments = Tools.DefaultReportComments();
									package.Workbook.Properties.Company = Tools.DefaultReportCompany();
									package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
									package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

									ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Journal");


									//ATUR DATA GROUPINGNYA DULU
									List<JournalExport> rList = new List<JournalExport>();
									while (dr0.Read())
									{

										JournalExport rSingle = new JournalExport();
										rSingle.JournalPK = Convert.ToInt32(dr0["JournalPK"]);
										rSingle.ValueDate = Convert.ToDateTime(dr0["ValueDate"]);
										rSingle.Description = Convert.ToString(dr0["Description"]);
										rSingle.Reference = Convert.ToString(dr0["Reference"]);
										rSingle.AccountID = Convert.ToString(dr0["AccountID"]);
										rSingle.AccountName = Convert.ToString(dr0["AccountName"]);
										rSingle.CurrencyID = Convert.ToString(dr0["CurrencyID"]);
										rSingle.OfficeID = Convert.ToString(dr0["OfficeID"]);
										rSingle.DepartmentID = Convert.ToString(dr0["DepartmentID"]);
										rSingle.AgentID = Convert.ToString(dr0["AgentID"]);
										rSingle.CounterpartID = Convert.ToString(dr0["CounterpartID"]);
										rSingle.InstrumentPK = Convert.ToInt32(dr0["InstrumentPK"]);
										rSingle.InstrumentID = Convert.ToString(dr0["InstrumentID"]);
										rSingle.ConsigneeID = Convert.ToString(dr0["ConsigneeID"]);
										rSingle.DetailDescription = Convert.ToString(dr0["DetailDescription"]);
										rSingle.DocRef = Convert.ToString(dr0["DocRef"]);
										rSingle.Debit = Convert.ToDecimal(dr0["Debit"]);
										rSingle.Credit = Convert.ToDecimal(dr0["Credit"]);
										rSingle.CurrencyRate = Convert.ToDecimal(dr0["CurrencyRate"]);






										rList.Add(rSingle);

									}


									//rsHeader.Key.ValueDate
									var GroupByReference =
											from r in rList
												//orderby r ascending
											group r by new { r.JournalPK, r.ValueDate, r.Description, r.Reference } into rGroup
											select rGroup;

									int incRowExcel = 0;
									incRowExcel++;
									int RowG = incRowExcel + 1;




									worksheet.Cells[incRowExcel, 1].Value = "NO";
									worksheet.Cells[incRowExcel, 2].Value = "Value Date";
									worksheet.Cells[incRowExcel, 3].Value = "Description";
									worksheet.Cells[incRowExcel, 4].Value = "Reference";
									incRowExcel++;
									worksheet.Cells[incRowExcel, 3].Value = "Account ID";
									worksheet.Cells[incRowExcel, 4].Value = "Account Name";
									worksheet.Cells[incRowExcel, 5].Value = "Currency ID";
									worksheet.Cells[incRowExcel, 6].Value = "Office ID";
									worksheet.Cells[incRowExcel, 7].Value = "DepartmentID";
									worksheet.Cells[incRowExcel, 8].Value = "Agent ID";
									worksheet.Cells[incRowExcel, 9].Value = "Counterpart ID";
									worksheet.Cells[incRowExcel, 10].Value = "Instrument ID";
									worksheet.Cells[incRowExcel, 11].Value = "Consignee ID";
									worksheet.Cells[incRowExcel, 12].Value = "Detail Description";
									worksheet.Cells[incRowExcel, 13].Value = "Document Refefence";
									worksheet.Cells[incRowExcel, 14].Value = "Debit";
									worksheet.Cells[incRowExcel, 15].Value = "Credit";
									worksheet.Cells[incRowExcel, 16].Value = "Currency Rate";
									worksheet.Cells[incRowExcel, 17].Value = "Instrument PK";
									incRowExcel++;
									worksheet.Cells[incRowExcel, 1].Value = "NO";
									incRowExcel++;
									worksheet.Cells[incRowExcel, 1].Value = "Example";
									worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
									worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
									incRowExcel++;
									worksheet.Cells[incRowExcel, 1].Value = "1";
									worksheet.Cells[incRowExcel, 2].Value = "MM/DD/YYYY";
									worksheet.Cells[incRowExcel, 4].Value = "Header Description";
									incRowExcel++;
									worksheet.Cells[incRowExcel, 1].Value = "1";
									worksheet.Cells[incRowExcel, 3].Value = "Account A";
									worksheet.Cells[incRowExcel, 4].Value = "Name A";
									worksheet.Cells[incRowExcel, 5].Value = "IDR";
									worksheet.Cells[incRowExcel, 7].Value = "CCA";
									worksheet.Cells[incRowExcel, 12].Value = "Detail A";
									worksheet.Cells[incRowExcel, 16].Value = "1";
									incRowExcel++;
									worksheet.Cells[incRowExcel, 1].Value = "1";
									worksheet.Cells[incRowExcel, 3].Value = "Account B";
									worksheet.Cells[incRowExcel, 4].Value = "Name B";
									worksheet.Cells[incRowExcel, 5].Value = "IDR";
									worksheet.Cells[incRowExcel, 7].Value = "CCA";
									worksheet.Cells[incRowExcel, 12].Value = "Detail B";
									worksheet.Cells[incRowExcel, 16].Value = "1";
									incRowExcel++;
									worksheet.Cells[incRowExcel, 1].Value = "1";
									worksheet.Cells[incRowExcel, 3].Value = "Account C";
									worksheet.Cells[incRowExcel, 4].Value = "Name C";
									worksheet.Cells[incRowExcel, 5].Value = "IDR";
									worksheet.Cells[incRowExcel, 7].Value = "CCA";
									worksheet.Cells[incRowExcel, 12].Value = "Detail C";
									worksheet.Cells[incRowExcel, 16].Value = "1";



									incRowExcel++;
									incRowExcel++;
									incRowExcel++;
									foreach (var rsHeader in GroupByReference)
									{
										worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.JournalPK;
										worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.ValueDate.ToString("dd-MMM-yyyy");
										worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.Description;
										worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.Reference;

										worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Font.Size = 12;
										worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
										worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Fill.PatternType = ExcelFillStyle.Solid;
										worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

										worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["E" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["F" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["G" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["H" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["I" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["J" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["K" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["N" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["P" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
										worksheet.Cells["Q" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;




										incRowExcel = incRowExcel + 1;

										int first = incRowExcel;

										int _no = 1;
										int _startRowDetail = incRowExcel;
										int _endRowDetail = 0;



										foreach (var rsDetail in rsHeader)
										{
											worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
											worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
											worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
											worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

											worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.JournalPK;
											worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 3].Value = rsDetail.AccountID;
											worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
											worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 4].Value = rsDetail.AccountName;
											worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 5].Value = rsDetail.CurrencyID;
											worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 6].Value = rsDetail.OfficeID;
											worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 7].Value = rsDetail.DepartmentID;
											worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


											worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentID;
											worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 9].Value = rsDetail.CounterpartID;
											worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 10].Value = rsDetail.InstrumentID;
											worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 11].Value = rsDetail.ConsigneeID;
											worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 12].Value = rsDetail.DetailDescription;
											worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 13].Value = rsDetail.DocRef;
											worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 14].Value = rsDetail.Debit;
											worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
											worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
											worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 15].Value = rsDetail.Credit;
											worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
											worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
											worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

											worksheet.Cells[incRowExcel, 16].Value = rsDetail.CurrencyRate;
											worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
											worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
											worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


											worksheet.Cells[incRowExcel, 17].Value = rsDetail.InstrumentPK;
											worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
											worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




											_no++;
											_endRowDetail = incRowExcel;
											incRowExcel++;
										}



										//worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
										//worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
										//worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
										//worksheet.Cells[incRowExcel, 5].Calculate();
										//int last = incRowExcel - 1;
										//worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

										//worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
										//worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
										//worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




										//foreach (var rsHeader in GroupByReference)
										//{

									}




									//worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Font.Size = 12;
									//worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
									//worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

									//incRowExcel++;

									//incRowExcel++;



									worksheet.PrinterSettings.FitToPage = true;
									worksheet.PrinterSettings.FitToWidth = 1;
									worksheet.PrinterSettings.FitToHeight = 0;
									worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 17];
									worksheet.Column(1).Width = 10;
									worksheet.Column(2).Width = 21;
									worksheet.Column(3).Width = 21;
									worksheet.Column(4).Width = 21;
									worksheet.Column(5).Width = 21;
									worksheet.Column(6).Width = 21;
									worksheet.Column(7).Width = 21;
									worksheet.Column(8).Width = 21;
									worksheet.Column(9).Width = 21;
									worksheet.Column(10).Width = 21;
									worksheet.Column(11).Width = 21;
									worksheet.Column(12).Width = 21;
									worksheet.Column(13).Width = 21;
									worksheet.Column(14).Width = 21;
									worksheet.Column(15).Width = 21;
									worksheet.Column(16).Width = 21;
									worksheet.Column(17).Width = 21;




									// BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
									//worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
									//worksheet.PrinterSettings.FitToPage = true;
									worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
									worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
									worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Journal";


									//Image img = Image.FromFile(Tools.ReportImage);
									//worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

									// BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
									//ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

									worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
									worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
									worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

									worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
									worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
									worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
									worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

									//Image img = Image.FromFile(Tools.ReportImage);
									//worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

									//worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
									//worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

									worksheet.HeaderFooter.OddFooter.RightAlignedText =
									string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

									//worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
									worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

									package.Save();
									if (_JournalExport.DownloadMode == "PDF")
									{
										Tools.ExportFromExcelToPDF(filePath, pdfPath);
									}

									return true;
								}

							}
						}
					}
				}
			}

			catch (Exception err)
			{
				return false;
				throw err;
			}
			#endregion
		}

		public string JournalImport(string _userID, string _fileSource)
		{
			string _msg = "";
			try
			{
				DateTime _now = DateTime.Now;
				// delete data yang lama
				using (SqlConnection conn = new SqlConnection(Tools.conString))
				{
					conn.Open();
					using (SqlCommand cmd = conn.CreateCommand())
					{
						cmd.CommandText = "truncate table JournalImportTemp";
						cmd.ExecuteNonQuery();
					}
				}

				// import data ke temp dulu
				using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
				{
					bulkCopy.DestinationTableName = "dbo.JournalImportTemp";
					bulkCopy.WriteToServer(CreateDataTableFromJournalExcelFile(_fileSource));
				}

				// logic kalo import success
				using (SqlConnection conn = new SqlConnection(Tools.conString))
				{
					conn.Open();
					using (SqlCommand cmd = conn.CreateCommand())
					{
						cmd.CommandText = @"Declare @Msg nvarchar(1000) Declare @Balance numeric(19,0)  Declare @No	nvarchar(1000)  
                    Declare @TempTableBalance Table (tmpNo int, tmpBalance numeric(19,4))  
                    Declare @TempTableAccount Table (tmpAccountID nvarchar(100))  
                    Declare @TempTableCurrency Table (tmpCurrencyID nvarchar(100))  
                    Declare @TempTableOffice Table (tmpOfficeID nvarchar(100))  
                    Declare @TempTableDepartment Table (tmpDepartmentID nvarchar(100))  
                    Declare @TempTableAgent Table (tmpAgentID nvarchar(100))  
                    Declare @TempTableCounterPart Table (tmpCounterPartID nvarchar(100))  
                    Declare @TempTableInstrument Table (tmpInstrumentID nvarchar(100))  
                    Declare @TempTableConsignee Table (tmpConsigneeID nvarchar(100))   

                    set @No = ''   

                    INSERT into @TempTableBalance  
                    Select A,Sum(isnull(N,0)*isnull(P,0)) - Sum(isnull(O,0)*isnull(P,0)) Balance  from JournalImportTemp   
                    Group By A having Sum(isnull(N,0)*isnull(P,0)) - Sum(isnull(O,0)*isnull(P,0)) <> 0  

                    INSERT into @TempTableAccount  
                    Select C From JournalImportTemp Where (Len(B) = 0 or B is null) and C not in  (  
                    Select ID from Account where status = 2 and Groups = 0 )  

                    Insert into @TempTableCurrency Select E From JournalImportTemp  
                    Where (Len(B) = 0 or B is null) and (Len(E) > 0 and E is Not null  and E not in ( Select ID from Currency where status = 2  ))  

                    Insert into @TempTableOffice  
                    Select F From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(F) > 0 and F is Not null and F not in (  
                    Select ID from Office where status = 2  ))  

                    INSERT into @TempTableDepartment Select G From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(G) > 0 and G is Not null and G not in  
                    (Select ID from Department where status = 2 ))  

                    INSERT into @TempTableAgent Select H From JournalImportTemp  Where (Len(B) = 0 or B is null) and (Len(H) > 0 and H is Not null and H not in  
                    (Select ID from Agent where status = 2 ))  

                    INSERT into @TempTableCounterPart Select I From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(I) > 0 and I is Not null and I not in  
                    (Select ID from CounterPart where status = 2 ))  

                    INSERT into @TempTableInstrument Select J From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(J) > 0 and J is Not null and J not in  
                    (Select ID from Instrument where status = 2 ))  

                    INSERT into @TempTableConsignee Select K From JournalImportTemp Where (Len(B) = 0 or B is null) and (Len(K) > 0 and K is Not null and K not in  
                    (Select ID from Consignee where status = 2 ))  
 
                    IF Exists(Select * from @TempTableBalance)BEGIN   
                    Select @No = @No +  Cast(tmpNo as Nvarchar(10)) + ',' from @TempTableBalance  
                    set @Msg = 'Debit Credit Not Balance in No : ' + @No  

                    INSERT into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID  Return END  
                     ELSE IF EXISTS(Select * From @TempTableAccount ) BEGIN  
                     Select @No = @No + tmpAccountID + ' , ' from @TempTableAccount set @Msg = 'Please Check This Account : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID  RETURN END  
                     ELSE IF Exists( Select * From @TempTableCurrency  ) BEGIN Select @No = @No + tmpCurrencyID +  ' , ' from @TempTableCurrency set @Msg = 'Please Check This Currency : ' + @No   Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   Return END  
                     ELSE IF Exists( Select * From @TempTableOffice   ) BEGIN Select @No = @No + tmpOfficeID  + ' , ' from @TempTableOffice  set @Msg = 'Please Check This Office : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableDepartment ) BEGIN Select @No = @No + tmpDepartmentID + ' , ' from @TempTableDepartment  set @Msg = 'Please Check This Department : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableAgent ) BEGIN Select @No = @No + tmpAgentID  + ' , ' from @TempTableAgent set @Msg = 'Please Check This Agent : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableCounterPart  ) BEGIN Select @No = @No + tmpCounterPartID +  ' , ' from @TempTableCounterPart set @Msg = 'Please Check This CounterPart : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableInstrument  ) BEGIN Select @No = @No + tmpInstrumentID +  ' , ' from @TempTableInstrument set @Msg = 'Please Check This Instrument : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE IF Exists( Select * From @TempTableConsignee  ) BEGIN Select @No = @No + tmpConsigneeID  + ' , ' from @TempTableConsignee set @Msg = 'Please Check This Consignee : ' + @No  Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,0,@TimeNow,@UserID   RETURN END  
                     ELSE BEGIN  
                     set @Msg = 'Debit Credit Balance'  
                     Declare @CountHeader nvarchar(10)  
                     Declare @CountDetail nvarchar(10)  
                     Declare @TotalRow nvarchar(10)  
                     Select @TotalRow = Max(PK) From JournalImportTemp  
                     Select @CountHeader = Count(PK) From JournalImportTemp  
                     Where A is not null and isDate(B) = 1 and dbo.IsInteger(A) = 1  
                     Select @CountDetail = Count(PK) From JournalImportTemp Where len(B)= 0 or B is null  
                     Set @Msg = @Msg + ' <br> Total Row : ' + @TotalRow + ' <br> Total Header Voucher : ' + @CountHeader + ' <br> Total Detail : ' + @CountDetail  
                     END  
                     declare @MaxJournalPK int  
                     select @MaxJournalPK = max(JournalPK) from Journal set @MaxJournalPK = isnull(@MaxJournalPK,0)  
                     declare @Bridge table  
                     (  
                     JournalImportPK int,  
                     JournalPK int  
                     )  
                     insert into @Bridge  
                     select A, row_number() over (order by A) + @MaxJournalPK from ( Select distinct A from JournalImportTemp ) a  
                     INSERT INTO [dbo].[Journal]  
                     ([JournalPK],[HistoryPK],[Status],[Notes],[PeriodPK],[ValueDate],[Reference],[Type],[Description],[EntryUsersID],[EntryTime],[LastUpdate])  
                     select b.JournalPK, 1, 1, isnull(C,''), c.PeriodPK,B,  Case when len(D) > 0 or D is not null then D else '' end,2,isnull(C,''),@UserID,@TimeNow,@TimeNow from JournalImportTemp t  
                     left join @Bridge b on t.A = b.JournalImportPK left join Period c on t.b between c.datefrom and c.dateto and c.status = 2 where isdate(t.b) = 1  
                     INSERT INTO [dbo].[JournalDetail]  
                     ([JournalPK],[AutoNo],[HistoryPK],[Status],[AccountPK],[CurrencyPK],[OfficePK],[DepartmentPK],[AgentPK],[CounterpartPK],[InstrumentPK],[ConsigneePK],  
                     [DetailDescription],[DocRef],[DebitCredit],[Amount],[Debit],[Credit],[CurrencyRate],[BaseDebit],[BaseCredit],[LastUsersID])  
                     select B.JournalPK,row_number() over (order by A),1,2,Ac.AccountPK, isnull(Ac.CurrencyPK,1),isnull(O.OfficePK,1),isnull(De.DepartmentPK,0),isnull(Ag.AgentPK,0),isnull(Co.CounterpartPK,0),isnull(Ins.InstrumentPK,0), isnull(Con.ConsigneePK,0),T.L,T.M,Case when N is null or N = 0 then 'C' else 'D' end, case when N is Null or N = 0  then isnull(O,0) else isnull(N,0) End,  
                     case when N is Null or N = 0 then 0 else N End,case when O is Null or O = 0 then 0 else O end,T.P, case when N is Null or N = 0 then 0 else N * P end,case when O is Null Or O = 0 then 0 else O * P end,@UserID  
                     from JournalImportTemp t  
                     left join @Bridge b on T.A = b.JournalImportPK left join Account Ac on T.C = Ac.ID and Ac.Status = 2 left join Currency Cu on T.E = Cu.ID and Cu.status = 2 left join Office O on T.F = O.ID and O.status = 2  
                     left join Department De on T.G = De.ID  and De.Status = 2 left join Agent Ag on T.H = Ag.ID and Ag.Status = 2 left join Counterpart Co on T.I = Co.ID And Co.Status = 2 left join Instrument Ins on T.J = Ins.ID and Ins.Status = 2  
                     left join Consignee Con on T.K = Con.ID and Con.status = 2 where isdate(t.b) <> 1  
                     Declare @CurJournalPK int  
                     Declare @CurReference nvarchar(100)  
                     Declare @CurValueDate datetime  
                     Declare A Cursor For  
                     select JournalPK from @Bridge  
                     Open A  
                     Fetch Next From A  
                     Into @CurJournalPK  
                     WHILE @@FETCH_STATUS = 0  
                     BEGIN  
                     if Exists ( Select * from journal Where JournalPK = @CurJournalPK and len(Reference) = 0 or reference is null )  
                     Begin  
                     select @CurValueDate = valueDate from Journal where JournalPK = @CurJournalPK  
                     exec getJournalReference @CurValueDate,'ADJ',@CurReference out  
                     Update journal Set Reference = @CurReference where JournalPK = @CurJournalPK  
                     end  
                     FETCH NEXT FROM A INTO @CurJournalPK  
                     END  
                     Close A  
                     Deallocate A  
                     Insert into ImportLogEvent(Description,BitStatus,LastUpdate,UserID) Select @Msg,1,@TimeNow,@UserID  ";
						cmd.Parameters.AddWithValue("@Userid", _userID);
						cmd.Parameters.AddWithValue("@TimeNow", _now);
						cmd.ExecuteNonQuery();

					}
				}
				using (SqlConnection conn = new SqlConnection(Tools.conString))
				{
					conn.Open();
					using (SqlCommand cmd = conn.CreateCommand())
					{
						cmd.CommandText = "Select Description From ImportLogEvent where ImportLogEventPK = (select Max(ImportLogEventPK) From ImportLogEvent where UserID = @UserID)";
						cmd.Parameters.AddWithValue("@Userid", _userID);
						using (SqlDataReader dr = cmd.ExecuteReader())
						{
							if (dr.HasRows)
							{
								dr.Read();
								_msg = Convert.ToString(dr["Description"]);
							}
						}
					}
				}
				return _msg;
			}
			catch (Exception err)
			{
				throw err;
			}
		}

		private DataTable CreateDataTableFromJournalExcelFile(string _path)
		{
			try
			{
				using (DataTable dt = new DataTable())
				{
					DataColumn dc;
					DataRow dr;

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.Int32");
					dc.ColumnName = "AutoNo";
					dc.Unique = false;
					dc.AutoIncrement = true;
					dc.AutoIncrementSeed = 1;
					dc.AutoIncrementStep = 1;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.Int32");
					dc.ColumnName = "NID";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Date";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Description";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Reference";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "CurrencyID";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "OfficeID";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "DepartmentID";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "AgentID";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "CounterpartID";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "InstrumentID";
					dc.Unique = false;
					dt.Columns.Add(dc);



					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Consigne";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "DetailDescription";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "DocRef";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					//dc.DataType = System.Type.GetType("System.Decimal");
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Debit";
					dc.Unique = false;
					dt.Columns.Add(dc);


					dc = new DataColumn();
					//dc.DataType = System.Type.GetType("System.Decimal");
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Credit";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					//dc.DataType = System.Type.GetType("System.Decimal");
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "Rate";
					dc.Unique = false;
					dt.Columns.Add(dc);

					dc = new DataColumn();
					dc.DataType = System.Type.GetType("System.String");
					dc.ColumnName = "InstrumentPK";
					dc.Unique = false;
					dt.Columns.Add(dc);

					FileInfo excelFile = new FileInfo(_path);
					using (ExcelPackage package = new ExcelPackage(excelFile))
					{
						int i = 11;
						int a;
						ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
						var end = worksheet.Dimension.End;
						a = end.Row;
						while (i <= end.Row)
						{
							dr = dt.NewRow();
							if (worksheet.Cells[i, 1].Value == null)
								dr["NID"] = "";
							else
								dr["NID"] = worksheet.Cells[i, 1].Value.ToString();

							if (worksheet.Cells[i, 2].Value == null)
								dr["Date"] = "";
							else
								dr["Date"] = worksheet.Cells[i, 2].Value.ToString();

							if ((worksheet.Cells[i, 2].Value == null || worksheet.Cells[i, 2].Value.ToString() == "") && (worksheet.Cells[i, 4].Value == null || worksheet.Cells[i, 4].Value.ToString() == ""))
							{
								if (worksheet.Cells[i, 3].Value == null)
								{
									dr["Description"] = "";
									dr["Reference"] = "";
								}
								else
								{
									dr["Description"] = worksheet.Cells[i, 3].Value.ToString().Substring(0, worksheet.Cells[i, 3].Value.ToString().IndexOf("-"));
									dr["Reference"] = worksheet.Cells[i, 3].Value.ToString().Substring(worksheet.Cells[i, 3].Value.ToString().IndexOf("-") + 1, worksheet.Cells[i, 3].Value.ToString().Length - worksheet.Cells[i, 3].Value.ToString().IndexOf("-") - 1);
								}

							}
							else
							{
								if (worksheet.Cells[i, 3].Value == null)
									dr["Description"] = "";
								else
									dr["Description"] = worksheet.Cells[i, 3].Value.ToString();

								if (worksheet.Cells[i, 4].Value == null)
									dr["Reference"] = "";
								else
									dr["Reference"] = worksheet.Cells[i, 4].Value.ToString();
							}



							if (worksheet.Cells[i, 5].Value == null)
								dr["CurrencyID"] = "";
							else
								dr["CurrencyID"] = worksheet.Cells[i, 5].Value.ToString();

							if (worksheet.Cells[i, 6].Value == null)
								dr["OfficeID"] = "";
							else
								dr["OfficeID"] = worksheet.Cells[i, 6].Value.ToString();

							if (worksheet.Cells[i, 7].Value == null)
								dr["DepartmentID"] = "";
							else
								dr["DepartmentID"] = worksheet.Cells[i, 7].Value.ToString();

							if (worksheet.Cells[i, 8].Value == null)
								dr["AgentID"] = "";
							else
								dr["AgentID"] = worksheet.Cells[i, 8].Value.ToString();

							if (worksheet.Cells[i, 9].Value == null)
								dr["CounterpartID"] = "";
							else
								dr["CounterpartID"] = worksheet.Cells[i, 9].Value.ToString();

							if (worksheet.Cells[i, 10].Value == null)
								dr["InstrumentID"] = "";
							else
								dr["InstrumentID"] = worksheet.Cells[i, 10].Value.ToString();


							if (worksheet.Cells[i, 11].Value == null)
								dr["Consigne"] = "";
							else
								dr["Consigne"] = worksheet.Cells[i, 11].Value.ToString();

							if (worksheet.Cells[i, 12].Value == null)
								dr["DetailDescription"] = "";
							else
								dr["DetailDescription"] = worksheet.Cells[i, 12].Value.ToString();

							if (worksheet.Cells[i, 13].Value == null)
								dr["DocRef"] = "";
							else
								dr["DocRef"] = worksheet.Cells[i, 13].Value.ToString();

							if (worksheet.Cells[i, 14].Value == null)
								dr["Debit"] = 0;
							else
								dr["Debit"] = worksheet.Cells[i, 14].Value.ToString();

							if (worksheet.Cells[i, 15].Value == null)
								dr["Credit"] = 0;
							else
								dr["Credit"] = worksheet.Cells[i, 15].Value.ToString();

							if (worksheet.Cells[i, 16].Value == null)
								dr["Rate"] = 0;
							else
								dr["Rate"] = worksheet.Cells[i, 16].Value.ToString();

							if (worksheet.Cells[i, 17].Value == null)
								dr["InstrumentPK"] = "";
							else
								dr["InstrumentPK"] = worksheet.Cells[i, 17].Value.ToString();


							//dr["ClosePriceValue"] = worksheet.Cells[i, 2].Value.Equals(null) == true ? "" : worksheet.Cells[i, 2].Value.ToString();

							if (dr["NID"].Equals(null) != true ||
								dr["Date"].Equals(null) != true ||
								dr["Description"].Equals(null) != true ||
								dr["Reference"].Equals(null) != true ||
								dr["CurrencyID"].Equals(null) != true ||
								dr["OfficeID"].Equals(null) != true ||
								dr["DepartmentID"].Equals(null) != true ||
								dr["AgentID"].Equals(null) != true ||
								dr["CounterpartID"].Equals(null) != true ||
								dr["InstrumentID"].Equals(null) != true ||
								dr["Consigne"].Equals(null) != true ||
								dr["DetailDescription"].Equals(null) != true ||
								dr["DocRef"].Equals(null) != true ||
								dr["Debit"].Equals(null) != true ||
								dr["Credit"].Equals(null) != true ||
								dr["Rate"].Equals(null) != true ||
								dr["InstrumentPK"].Equals(null) != true) { dt.Rows.Add(dr); }
							i++;

						}
					}

					return dt;
				}
			}
			catch (Exception err)
			{
				throw err;
			}
		}

		public Boolean GenerateExportInstrument(string _userID, InstrumentExport _InstrumentExport)
        {

            #region ExportInstrument

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        //string _paramFundFrom = "";

                        //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                        //{
                        //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                        //}
                        //else
                        //{
                        //    _paramFundFrom = "";
                        //}



                        cmd.CommandText = @"
select * from Instrument
where status = 2 
order by instrumentpk
";

                        cmd.CommandTimeout = 0;
                        //cmd.Parameters.AddWithValue("@Datefrom", _InstrumentExport.ValueDateFrom);
                        //cmd.Parameters.AddWithValue("@Dateto", _InstrumentExport.ValueDateTo);

                        using (SqlDataReader dr0 = cmd.ExecuteReader())
                        {
                            if (!dr0.HasRows)
                            {
                                return false;
                            }
                            else
                            {
                                string filePath = Tools.ReportsPath + "Instrument" + "_" + _userID + ".xlsx";
                                string pdfPath = Tools.ReportsPath + "Instrument" + "_" + _userID + ".pdf";
                                FileInfo excelFile = new FileInfo(filePath);
                                if (excelFile.Exists)
                                {
                                    excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                    excelFile = new FileInfo(filePath);
                                }

                                // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                using (ExcelPackage package = new ExcelPackage(excelFile))
                                {
                                    package.Workbook.Properties.Title = "InstrumentExport";
                                    package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                    package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                    package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                    package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                    package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                    ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Instrument");


                                    //ATUR DATA GROUPINGNYA DULU
                                    List<InstrumentExport> rList = new List<InstrumentExport>();
                                    while (dr0.Read())
                                    {

                                        InstrumentExport rSingle = new InstrumentExport();
                                        rSingle.InstrumentPK = Convert.ToInt32(dr0["InstrumentPK"]);
                                        rSingle.ID = Convert.ToString(dr0["ID"]);
                                        rSingle.Name = Convert.ToString(dr0["Name"]);
                                        rSingle.Category = Convert.ToString(dr0["Category"]);

                                        rSingle.Affiliated = dr0["Affiliated"].ToString();
                                        rSingle.InstrumentTypePK = Convert.ToInt32(dr0["InstrumentTypePK"]);
                                        rSingle.ReksadanaTypePK = Convert.ToInt32(dr0["ReksadanaTypePK"]);
                                        rSingle.DepositoTypePK = Convert.ToInt32(dr0["DepositoTypePK"]);
                                        rSingle.BankPK = Convert.ToInt32(dr0["BankPK"]);
                                        rSingle.IssuerPK = Convert.ToInt32(dr0["IssuerPK"]);
                                        rSingle.SectorPK = Convert.ToInt32(dr0["SectorPK"]);
                                        rSingle.HoldingPK = Convert.ToInt32(dr0["HoldingPK"]);
                                        rSingle.MarketPK = Convert.ToInt32(dr0["MarketPK"]);


                                        rSingle.ISIN = Convert.ToString(dr0["ISIN"]);
                                        rSingle.IssueDate = Convert.ToString(dr0["IssueDate"]);
                                        rSingle.MaturityDate = Convert.ToString(dr0["MaturityDate"]);
                                        rSingle.FirstCouponDate = Convert.ToString(dr0["FirstCouponDate"]);
                                        rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                        rSingle.BitIsSuspend = Convert.ToString(dr0["BitIsSuspend"]);
                                        rSingle.CurrencyPK = Convert.ToInt32(dr0["CurrencyPK"]);



                                        rSingle.LotInShare = Convert.ToDecimal(dr0["LotInShare"]);
                                        rSingle.RegulatorHaircut = Convert.ToDecimal(dr0["RegulatorHaircut"]);
                                        rSingle.Liquidity = Convert.ToDecimal(dr0["Liquidity"]);
                                        rSingle.NAWCHaircut = Convert.ToDecimal(dr0["NAWCHairCut"]);
                                        rSingle.CompanyHaircut = Convert.ToDecimal(dr0["CompanyHaircut"]);
                                        rSingle.BondRating = Convert.ToString(dr0["BondRating"]);
                                        rSingle.BitIsShortSell = Convert.ToString(dr0["BitIsShortSell"]);
                                        rSingle.BitIsMargin = Convert.ToString(dr0["BitIsMargin"]);
                                        rSingle.BitIsScriptless = Convert.ToString(dr0["BitIsScriptless"]);


                                        rSingle.TaxExpensePercent = Convert.ToDecimal(dr0["TaxExpensePercent"]);
                                        rSingle.InterestDaysType = Convert.ToInt32(dr0["InterestDaysType"]);
                                        rSingle.InterestType = Convert.ToInt32(dr0["InterestDaysType"]);
                                        rSingle.InterestPaymentType = Convert.ToInt32(dr0["InterestDaysType"]);



                                        rSingle.BloombergCode = Convert.ToString(dr0["BloombergCode"]);
                                        rSingle.BankAccountNo = Convert.ToString(dr0["BankAccountNo"]);
                                        rSingle.SAPCustID = Convert.ToString(dr0["SAPCustID"]);
                                        rSingle.InstrumentCompanyTypePK = Convert.ToInt32(dr0["InstrumentCompanyTypePK"]);

                                        rSingle.AnotherRating = Convert.ToString(dr0["AnotherRating"]);









                                        rList.Add(rSingle);

                                    }


                                    //rsHeader.Key.ValueDate
                                    var GroupByReference =
                                            from r in rList
                                                //orderby r ascending
                                            group r by new { r } into rGroup
                                            select rGroup;

                                    int incRowExcel = 0;
                                    incRowExcel++;

                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.Font.Size = 12;
                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.Font.Bold = true;
                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                    worksheet.Cells[incRowExcel, 1].Value = "InstrumentPK";
                                    worksheet.Cells[incRowExcel, 2].Value = "ID";
                                    worksheet.Cells[incRowExcel, 3].Value = "Name";
                                    worksheet.Cells[incRowExcel, 4].Value = "Category";

                                    worksheet.Cells[incRowExcel, 5].Value = "Affiliated";
                                    worksheet.Cells[incRowExcel, 6].Value = "Instrument Type PK";
                                    worksheet.Cells[incRowExcel, 7].Value = "Reksadana Type PK";
                                    worksheet.Cells[incRowExcel, 8].Value = "Deposito Type Pk";

                                    worksheet.Cells[incRowExcel, 9].Value = "ISIN";

                                    worksheet.Cells[incRowExcel, 10].Value = "Bank PK";
                                    worksheet.Cells[incRowExcel, 11].Value = "Issuer PK";
                                    worksheet.Cells[incRowExcel, 12].Value = "Sector PK";
                                    worksheet.Cells[incRowExcel, 13].Value = "Holding PK";
                                    worksheet.Cells[incRowExcel, 14].Value = "Market PK";



                                    worksheet.Cells[incRowExcel, 15].Value = "Issue Date";
                                    worksheet.Cells[incRowExcel, 16].Value = "Maturity Date";
                                    worksheet.Cells[incRowExcel, 17].Value = "First Coupon Date";
                                    worksheet.Cells[incRowExcel, 18].Value = "Interest Percent";
                                    worksheet.Cells[incRowExcel, 19].Value = "LotInShare";

                                    worksheet.Cells[incRowExcel, 20].Value = "Bit Is Suspend";
                                    worksheet.Cells[incRowExcel, 21].Value = "Currency PK";


                                    worksheet.Cells[incRowExcel, 22].Value = "Regulator Haircut";
                                    worksheet.Cells[incRowExcel, 23].Value = "Liquidity";
                                    worksheet.Cells[incRowExcel, 24].Value = "NAWC Haircut";
                                    worksheet.Cells[incRowExcel, 25].Value = "Company Haircut";
                                    worksheet.Cells[incRowExcel, 26].Value = "Bond Rating";

                                    worksheet.Cells[incRowExcel, 27].Value = "Bit Is Short Sell";
                                    worksheet.Cells[incRowExcel, 28].Value = "Bit Is Margin";
                                    worksheet.Cells[incRowExcel, 29].Value = "Bit Is Scriptless";

                                    worksheet.Cells[incRowExcel, 30].Value = "TaxExpensePercent";
                                    worksheet.Cells[incRowExcel, 31].Value = "Interet Days Type";
                                    worksheet.Cells[incRowExcel, 32].Value = "Interest Type";
                                    worksheet.Cells[incRowExcel, 33].Value = "Interest Payment Type";
                                    worksheet.Cells[incRowExcel, 34].Value = "Bloomberg Code";

                                    worksheet.Cells[incRowExcel, 35].Value = "Bit Is Foreign";
                                    worksheet.Cells[incRowExcel, 36].Value = "CounterpartPK";

                                    worksheet.Cells[incRowExcel, 37].Value = "Bank Account No";
                                    worksheet.Cells[incRowExcel, 38].Value = "SAPCustID";

                                    worksheet.Cells[incRowExcel, 39].Value = "Instrument Company Type PK";

                                    worksheet.Cells[incRowExcel, 40].Value = "Another Rating";

                                    foreach (var rsHeader in GroupByReference)
                                    {




                                        incRowExcel = incRowExcel + 1;

                                        int first = incRowExcel;

                                        int _no = 1;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;



                                        foreach (var rsDetail in rsHeader)
                                        {
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 40].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 40].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 40].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 40].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsDetail.InstrumentPK;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail.ID;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail.Name;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = rsDetail.Category;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = rsDetail.Affiliated;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail.InstrumentTypePK;
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = rsDetail.ReksadanaTypePK;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail.DepositoTypePK;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 9].Value = rsDetail.ISIN;
                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 10].Value = rsDetail.BankPK;
                                            worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail.IssuerPK;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = rsDetail.SectorPK;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 13].Value = rsDetail.HoldingPK;
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = rsDetail.MarketPK;
                                            worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = rsDetail.IssueDate;
                                            worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = rsDetail.MaturityDate;
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 17].Value = rsDetail.FirstCouponDate;
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "dd/MMM/yyyy";
                                            worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 18].Value = rsDetail.InterestPercent;
                                            worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0%";
                                            worksheet.Cells[incRowExcel, 18, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 18, incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 19].Value = rsDetail.LotInShare;
                                            worksheet.Cells[incRowExcel, 19].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 19, incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 19, incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 20].Value = rsDetail.BitIsSuspend;
                                            worksheet.Cells[incRowExcel, 20, incRowExcel, 20].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 20, incRowExcel, 20].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 21].Value = rsDetail.CurrencyPK;
                                            worksheet.Cells[incRowExcel, 21, incRowExcel, 21].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 21, incRowExcel, 21].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 22].Value = rsDetail.RegulatorHaircut;
                                            worksheet.Cells[incRowExcel, 22].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 22, incRowExcel, 22].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 22, incRowExcel, 22].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 23].Value = rsDetail.Liquidity;
                                            worksheet.Cells[incRowExcel, 23].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 23, incRowExcel, 23].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 23, incRowExcel, 23].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 24].Value = rsDetail.NAWCHaircut;
                                            worksheet.Cells[incRowExcel, 24].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 24, incRowExcel, 24].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 24, incRowExcel, 24].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 25].Value = rsDetail.CompanyHaircut;
                                            worksheet.Cells[incRowExcel, 25].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 25, incRowExcel, 25].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 25, incRowExcel, 25].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 26].Value = rsDetail.BondRating;
                                            worksheet.Cells[incRowExcel, 26, incRowExcel, 26].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 26, incRowExcel, 26].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 27].Value = rsDetail.BitIsShortSell;
                                            worksheet.Cells[incRowExcel, 27, incRowExcel, 27].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 27, incRowExcel, 27].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 28].Value = rsDetail.BitIsMargin;
                                            worksheet.Cells[incRowExcel, 28, incRowExcel, 28].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 28, incRowExcel, 28].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 29].Value = rsDetail.BitIsScriptless;
                                            worksheet.Cells[incRowExcel, 29, incRowExcel, 29].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 29, incRowExcel, 29].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 30].Value = rsDetail.TaxExpensePercent;
                                            worksheet.Cells[incRowExcel, 30].Style.Numberformat.Format = "#,##0%";
                                            worksheet.Cells[incRowExcel, 30, incRowExcel, 30].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 30, incRowExcel, 30].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 31].Value = rsDetail.InterestDaysType;
                                            worksheet.Cells[incRowExcel, 31, incRowExcel, 31].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 31, incRowExcel, 31].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 32].Value = rsDetail.InterestType;
                                            worksheet.Cells[incRowExcel, 32, incRowExcel, 32].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 32, incRowExcel, 32].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 33].Value = rsDetail.InterestPaymentType;
                                            worksheet.Cells[incRowExcel, 33, incRowExcel, 33].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 33, incRowExcel, 33].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 34].Value = rsDetail.BloombergCode;
                                            worksheet.Cells[incRowExcel, 34, incRowExcel, 34].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 34, incRowExcel, 34].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 35].Value = rsDetail.BitIsForeign;
                                            worksheet.Cells[incRowExcel, 35, incRowExcel, 35].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 35, incRowExcel, 35].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 36].Value = rsDetail.CounterpartPK;
                                            worksheet.Cells[incRowExcel, 36, incRowExcel, 36].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 36, incRowExcel, 36].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 37].Value = rsDetail.BankAccountNo;
                                            worksheet.Cells[incRowExcel, 37, incRowExcel, 37].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 37, incRowExcel, 37].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 38].Value = rsDetail.SAPCustID;
                                            worksheet.Cells[incRowExcel, 38, incRowExcel, 38].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 38, incRowExcel, 38].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 39].Value = rsDetail.InstrumentCompanyTypePK;
                                            worksheet.Cells[incRowExcel, 39, incRowExcel, 39].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 39, incRowExcel, 39].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 40].Value = rsDetail.AnotherRating;
                                            worksheet.Cells[incRowExcel, 40, incRowExcel, 40].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 40, incRowExcel, 40].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            _no++;
                                            _endRowDetail = incRowExcel;
                                        }



                                        //worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
                                        //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 5].Calculate();
                                        //int last = incRowExcel - 1;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                        //foreach (var rsHeader in GroupByReference)
                                        //{

                                    }




                                    //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Font.Size = 12;
                                    //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                    //worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                    //incRowExcel++;

                                    //incRowExcel++;



                                    worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.FitToWidth = 1;
                                    worksheet.PrinterSettings.FitToHeight = 0;
                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 22];
                                    worksheet.Column(1).AutoFit();
                                    worksheet.Column(2).AutoFit();
                                    worksheet.Column(3).AutoFit();
                                    worksheet.Column(4).AutoFit();
                                    worksheet.Column(5).AutoFit();
                                    worksheet.Column(6).AutoFit();
                                    worksheet.Column(7).AutoFit();
                                    worksheet.Column(8).AutoFit();
                                    worksheet.Column(9).AutoFit();
                                    worksheet.Column(10).AutoFit();
                                    worksheet.Column(11).AutoFit();
                                    worksheet.Column(12).AutoFit();
                                    worksheet.Column(13).AutoFit();
                                    worksheet.Column(14).AutoFit();
                                    worksheet.Column(15).AutoFit();
                                    worksheet.Column(16).AutoFit();
                                    worksheet.Column(17).AutoFit();
                                    worksheet.Column(18).AutoFit();
                                    worksheet.Column(19).AutoFit();
                                    worksheet.Column(20).AutoFit();
                                    worksheet.Column(21).AutoFit();
                                    worksheet.Column(22).AutoFit();
                                    worksheet.Column(23).AutoFit();
                                    worksheet.Column(24).AutoFit();
                                    worksheet.Column(25).AutoFit();
                                    worksheet.Column(26).AutoFit();
                                    worksheet.Column(27).AutoFit();
                                    worksheet.Column(28).AutoFit();
                                    worksheet.Column(29).AutoFit();
                                    worksheet.Column(30).AutoFit();
                                    worksheet.Column(31).AutoFit();
                                    worksheet.Column(32).AutoFit();
                                    worksheet.Column(33).AutoFit();
                                    worksheet.Column(34).AutoFit();
                                    worksheet.Column(35).AutoFit();
                                    worksheet.Column(36).AutoFit();
                                    worksheet.Column(37).AutoFit();
                                    worksheet.Column(38).AutoFit();
                                    worksheet.Column(39).AutoFit();
                                    worksheet.Column(40).AutoFit();


                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                    //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                    //worksheet.PrinterSettings.FitToPage = true;
                                    worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                    worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Instrument";


                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                    //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                    worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                    worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                    worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                    worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                    //Image img = Image.FromFile(Tools.ReportImage);
                                    //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                    //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                    //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                    package.Save();
                                    //if (_InstrumentExport.DownloadMode == "PDF")
                                    //{
                                    //    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                    //}

                                    return true;
                                }

                            }
                        }
                    }
                }
            }

            catch (Exception err)
            {
                return false;
                throw err;
            }
            #endregion


        }


        public string ImportInstrument(string _fileName, string _userID)
        {

            using (SqlConnection conn = new SqlConnection(Tools.conString))
            {
                conn.Open();
                using (SqlCommand cmd2 = conn.CreateCommand())
                {
                    cmd2.CommandText = "truncate table Custom25InstrumentTemp";
                    cmd2.ExecuteNonQuery();
                }
            }

            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
            {
                bulkCopy.DestinationTableName = "dbo.Custom25InstrumentTemp";
                bulkCopy.WriteToServer(CreateDataTableFromFileInstrument(_fileName));
            }

            try
            {
                DateTime _dateTimeNow = DateTime.Now;

                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                        insert into Instrument(InstrumentPK,HistoryPK,Status,Notes,ID,Name,Category,Affiliated,InstrumentTypePK,ReksadanaTypePK,DepositoTypePK,ISIN,BankPK,IssuerPK,SectorPK,HoldingPK,MarketPK,IssueDate,
                        MaturityDate,FirstCouponDate,InterestPercent,LotInShare,BitIsSuspend,CurrencyPK,RegulatorHaircut,Liquidity,NAWCHairCut,CompanyHaircut,BondRating,BitIsShortSell,BitIsMargin,BitIsScriptless,
                        TaxExpensePercent,InterestDaysType,InterestType,InterestPaymentType,BloombergCode,BitIsForeign,CounterpartPK,BankAccountNo,SAPCustID,InstrumentCompanyTypePK,AnotherRating,
                        EntryUsersID,EntryTime,UpdateUsersID,UpdateTime,ApprovedUsersID,ApprovedTime,VoidUsersID,VoidTime,DBUserID,LastUpdate,LastUpdateDB)

                        select InstrumentPK,1,2,'',ID,Name,Category,Affiliated,InstrumentTypePK,ReksadanaTypePK,DepositoTypePK,ISIN,BankPK,IssuerPK,SectorPK,HoldingPK,MarketPK,case when IssueDate = '' then null else IssueDate end,
                        case when MaturityDate = '' then null else MaturityDate end,case when FirstCouponDate = '' then null else FirstCouponDate end,cast(InterestPercent as numeric(22,8)),LotInShare,BitIsSuspend,CurrencyPK,cast(RegulatorHaircut as numeric(22,8)),
                        cast(Liquidity as numeric(22,8)),cast(NAWCHairCut as numeric(22,8)),cast(CompanyHaircut as numeric(22,8)),BondRating,BitIsShortSell,BitIsMargin,BitIsScriptless,cast(TaxExpensePercent as numeric(22,8)),InterestDaysType,InterestType,InterestPaymentType,
                        BloombergCode,BitIsForeign,CounterpartPK,BankAccountNo,SAPCustID,InstrumentCompanyTypePK,AnotherRating,@UserID,@Datetime,null,null,@UserID,@Datetime,null,null,@UserID,@Datetime,@Datetime
                        from Custom25InstrumentTemp
                        ";
                        cmd.Parameters.AddWithValue("@UserID", _userID);
                        cmd.Parameters.AddWithValue("@Datetime", DateTime.Now);
                        cmd.ExecuteNonQuery();
                        return "Import Instrument Success";
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromFileInstrument(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InstrumentPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Name";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Category";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Affiliated";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InstrumentTypePK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ReksadanaTypePK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "DepositoTypePk";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ISIN";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BankPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IssuerPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SectorPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "HoldingPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "MarketPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IssueDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "MaturityDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "FirstCouponDate";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestPercent";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "LotInShare";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BitIsSuspend";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CurrencyPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "RegulatorHaircut";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "Liquidity";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "NAWCHaircut";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CompanyHaircut";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BondRating";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BitIsShortSell";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BitIsMargin";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BitIsScriptless";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "TaxExpensePercent";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestDaysType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InterestPaymentType";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BloombergCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BitIsForeign";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "CounterpartPK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "BankAccountNo";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SAPCustID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "InstrumentCompanyTypePK";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "AnotherRating";
            dc.Unique = false;
            dt.Columns.Add(dc);


            FileInfo excelFile = new System.IO.FileInfo(_fileName);
            using (ExcelPackage package = new ExcelPackage(excelFile))
            {
                int i = 2;
                ExcelWorksheet worksheet = package.Workbook.Worksheets[1];
                var end = worksheet.Dimension.End;
                while (i <= end.Row)
                {
                    dr = dt.NewRow();
                    if (worksheet.Cells[i, 1].Value == null)
                        dr["InstrumentPK"] = "";
                    else
                        dr["InstrumentPK"] = worksheet.Cells[i, 1].Value.ToString();

                    if (worksheet.Cells[i, 2].Value == null)
                        dr["ID"] = "";
                    else
                        dr["ID"] = worksheet.Cells[i, 2].Value.ToString();

                    if (worksheet.Cells[i, 3].Value == null)
                        dr["Name"] = "";
                    else
                        dr["Name"] = worksheet.Cells[i, 3].Value.ToString();

                    if (worksheet.Cells[i, 4].Value == null)
                        dr["Category"] = "";
                    else
                        dr["Category"] = worksheet.Cells[i, 4].Value.ToString();

                    if (worksheet.Cells[i, 5].Value == null)
                        dr["Affiliated"] = "";
                    else
                        dr["Affiliated"] = worksheet.Cells[i, 5].Value.ToString() == "False" ? 0 : 1;

                    if (worksheet.Cells[i, 6].Value == null)
                        dr["InstrumentTypePK"] = "";
                    else
                        dr["InstrumentTypePK"] = worksheet.Cells[i, 6].Value.ToString();

                    if (worksheet.Cells[i, 7].Value == null)
                        dr["ReksadanaTypePK"] = "";
                    else
                        dr["ReksadanaTypePK"] = worksheet.Cells[i, 7].Value.ToString();

                    if (worksheet.Cells[i, 8].Value == null)
                        dr["DepositoTypePk"] = "";
                    else
                        dr["DepositoTypePk"] = worksheet.Cells[i, 8].Value.ToString();

                    if (worksheet.Cells[i, 9].Value == null)
                        dr["ISIN"] = "";
                    else
                        dr["ISIN"] = worksheet.Cells[i, 9].Value.ToString();

                    if (worksheet.Cells[i, 10].Value == null)
                        dr["BankPK"] = "";
                    else
                        dr["BankPK"] = worksheet.Cells[i, 10].Value.ToString();

                    if (worksheet.Cells[i, 11].Value == null)
                        dr["IssuerPK"] = "";
                    else
                        dr["IssuerPK"] = worksheet.Cells[i, 11].Value.ToString();

                    if (worksheet.Cells[i, 12].Value == null)
                        dr["SectorPK"] = "";
                    else
                        dr["SectorPK"] = worksheet.Cells[i, 12].Value.ToString();

                    if (worksheet.Cells[i, 13].Value == null)
                        dr["HoldingPK"] = 0;
                    else
                        dr["HoldingPK"] = worksheet.Cells[i, 13].Value.ToString();

                    if (worksheet.Cells[i, 14].Value == null)
                        dr["MarketPK"] = 0;
                    else
                        dr["MarketPK"] = worksheet.Cells[i, 14].Value.ToString();

                    if (worksheet.Cells[i, 15].Value == null)
                        dr["IssueDate"] = 0;
                    else
                        dr["IssueDate"] = worksheet.Cells[i, 15].Value.ToString();

                    if (worksheet.Cells[i, 16].Value == null)
                        dr["MaturityDate"] = 0;
                    else
                        dr["MaturityDate"] = worksheet.Cells[i, 16].Value.ToString();

                    if (worksheet.Cells[i, 17].Value == null)
                        dr["FirstCouponDate"] = 0;
                    else
                        dr["FirstCouponDate"] = worksheet.Cells[i, 17].Value.ToString();

                    if (worksheet.Cells[i, 18].Value == null)
                        dr["InterestPercent"] = 0;
                    else
                        dr["InterestPercent"] = worksheet.Cells[i, 18].Value.ToString();

                    if (worksheet.Cells[i, 19].Value == null)
                        dr["LotInShare"] = 0;
                    else
                        dr["LotInShare"] = worksheet.Cells[i, 19].Value.ToString();

                    if (worksheet.Cells[i, 20].Value == null)
                        dr["BitIsSuspend"] = 0;
                    else
                        dr["BitIsSuspend"] = worksheet.Cells[i, 20].Value.ToString() == "False" ? 0 : 1;

                    if (worksheet.Cells[i, 21].Value == null)
                        dr["CurrencyPK"] = 0;
                    else
                        dr["CurrencyPK"] = worksheet.Cells[i, 21].Value.ToString();

                    if (worksheet.Cells[i, 22].Value == null)
                        dr["RegulatorHaircut"] = 0;
                    else
                        dr["RegulatorHaircut"] = worksheet.Cells[i, 22].Value.ToString();

                    if (worksheet.Cells[i, 23].Value == null)
                        dr["Liquidity"] = 0;
                    else
                        dr["Liquidity"] = worksheet.Cells[i, 23].Value.ToString();

                    if (worksheet.Cells[i, 24].Value == null)
                        dr["NAWCHaircut"] = 0;
                    else
                        dr["NAWCHaircut"] = worksheet.Cells[i, 24].Value.ToString();

                    if (worksheet.Cells[i, 25].Value == null)
                        dr["CompanyHaircut"] = 0;
                    else
                        dr["CompanyHaircut"] = worksheet.Cells[i, 25].Value.ToString();

                    if (worksheet.Cells[i, 26].Value == null)
                        dr["BondRating"] = "";
                    else
                        dr["BondRating"] = worksheet.Cells[i, 26].Value.ToString();

                    if (worksheet.Cells[i, 27].Value == null)
                        dr["BitIsShortSell"] = 0;
                    else
                        dr["BitIsShortSell"] = worksheet.Cells[i, 27].Value.ToString() == "False" ? 0 : 1;

                    if (worksheet.Cells[i, 28].Value == null)
                        dr["BitIsMargin"] = 0;
                    else
                        dr["BitIsMargin"] = worksheet.Cells[i, 28].Value.ToString() == "False" ? 0 : 1;

                    if (worksheet.Cells[i, 29].Value == null)
                        dr["BitIsScriptless"] = 0;
                    else
                        dr["BitIsScriptless"] = worksheet.Cells[i, 29].Value.ToString() == "False" ? 0 : 1;

                    if (worksheet.Cells[i, 30].Value == null)
                        dr["TaxExpensePercent"] = 0;
                    else
                        dr["TaxExpensePercent"] = worksheet.Cells[i, 30].Value.ToString();

                    if (worksheet.Cells[i, 31].Value == null)
                        dr["InterestDaysType"] = 0;
                    else
                        dr["InterestDaysType"] = worksheet.Cells[i, 31].Value.ToString();

                    if (worksheet.Cells[i, 32].Value == null)
                        dr["InterestType"] = 0;
                    else
                        dr["InterestType"] = worksheet.Cells[i, 32].Value.ToString();

                    if (worksheet.Cells[i, 33].Value == null)
                        dr["InterestPaymentType"] = 0;
                    else
                        dr["InterestPaymentType"] = worksheet.Cells[i, 33].Value.ToString();

                    if (worksheet.Cells[i, 34].Value == null)
                        dr["BloombergCode"] = "";
                    else
                        dr["BloombergCode"] = worksheet.Cells[i, 34].Value.ToString();

                    if (worksheet.Cells[i, 35].Value == null)
                        dr["BitIsForeign"] = 0;
                    else
                        dr["BitIsForeign"] = worksheet.Cells[i, 35].Value.ToString() == "False" ? 0 : 1;

                    if (worksheet.Cells[i, 36].Value == null)
                        dr["CounterpartPK"] = 0;
                    else
                        dr["CounterpartPK"] = worksheet.Cells[i, 36].Value.ToString();

                    if (worksheet.Cells[i, 37].Value == null)
                        dr["BankAccountNo"] = "";
                    else
                        dr["BankAccountNo"] = worksheet.Cells[i, 37].Value.ToString();

                    if (worksheet.Cells[i, 38].Value == null)
                        dr["SAPCustID"] = "";
                    else
                        dr["SAPCustID"] = worksheet.Cells[i, 38].Value.ToString();

                    if (worksheet.Cells[i, 39].Value == null)
                        dr["InstrumentCompanyTypePK"] = 0;
                    else
                        dr["InstrumentCompanyTypePK"] = worksheet.Cells[i, 39].Value.ToString();

                    if (worksheet.Cells[i, 40].Value == null)
                        dr["AnotherRating"] = "";
                    else
                        dr["AnotherRating"] = worksheet.Cells[i, 40].Value.ToString();


                    //dr["ClosePriceValue"] = worksheet.Cells[i, 2].Value.Equals(null) == true ? "" : worksheet.Cells[i, 2].Value.ToString();

                    if (dr["InstrumentPK"].Equals(null) != true ||
                        dr["ID"].Equals(null) != true ||
                        dr["Name"].Equals(null) != true ||
                        dr["Category"].Equals(null) != true ||
                        dr["Affiliated"].Equals(null) != true ||
                        dr["InstrumentTypePK"].Equals(null) != true ||
                        dr["ReksadanaTypePK"].Equals(null) != true ||
                        dr["DepositoTypePk"].Equals(null) != true ||
                        dr["ISIN"].Equals(null) != true ||
                        dr["BankPK"].Equals(null) != true ||
                        dr["IssuerPK"].Equals(null) != true ||
                        dr["SectorPK"].Equals(null) != true ||
                        dr["HoldingPK"].Equals(null) != true ||
                        dr["MarketPK"].Equals(null) != true ||
                        dr["IssueDate"].Equals(null) != true ||

                        dr["MaturityDate"].Equals(null) != true ||
                        dr["FirstCouponDate"].Equals(null) != true ||
                        dr["InterestPercent"].Equals(null) != true ||
                        dr["LotInShare"].Equals(null) != true ||
                        dr["BitIsSuspend"].Equals(null) != true ||
                        dr["CurrencyPK"].Equals(null) != true ||
                        dr["RegulatorHaircut"].Equals(null) != true ||
                        dr["Liquidity"].Equals(null) != true ||
                        dr["NAWCHaircut"].Equals(null) != true ||
                        dr["CompanyHaircut"].Equals(null) != true ||
                        dr["BondRating"].Equals(null) != true ||
                        dr["BitIsShortSell"].Equals(null) != true ||
                        dr["BitIsMargin"].Equals(null) != true ||
                        dr["BitIsScriptless"].Equals(null) != true ||
                        dr["TaxExpensePercent"].Equals(null) != true ||

                        dr["InterestDaysType"].Equals(null) != true ||
                        dr["InterestType"].Equals(null) != true ||
                        dr["InterestPaymentType"].Equals(null) != true ||
                        dr["BloombergCode"].Equals(null) != true ||
                        dr["BitIsForeign"].Equals(null) != true ||
                        dr["CounterpartPK"].Equals(null) != true ||
                        dr["BankAccountNo"].Equals(null) != true ||
                        dr["SAPCustID"].Equals(null) != true ||
                        dr["InstrumentCompanyTypePK"].Equals(null) != true ||
                        dr["AnotherRating"].Equals(null) != true) { dt.Rows.Add(dr); }
                    i++;

                }
            }

            return dt;
        }


        public string PTPEquity_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"
                         BEGIN  
                         SET NOCOUNT ON         
          
                               create table #Text(      
                              [ResultText] [nvarchar](1000)  NULL ,
							  TrxType int      ,
							  ValueDate date   
                              )                        
        
                              truncate table #Text      
                              insert into #Text     
                              select '' ,0,null
                              insert into #Text 
                                    Select  
                                    'NEWM'
                                    + '|' + ''
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
                                    + '|' + @CompanyID
                                    + '|' + isnull(A.BrokerCode,'')
                                    + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
                                    + '|' + RTRIM(LTRIM(isnull(A.Instrument,'')))
                                    + '|' + cast(isnull(A.TrxType,'') as nvarchar)
                                    + '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
                                    + '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
                                    + '|' + case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)), '')as nvarchar) end
                                    + '|' + case when A.CommissionAmount = 0 then '0' else cast(isnull(cast(A.CommissionAmount as decimal(30,2)), '')as nvarchar) end
                                    + '|' + case when A.TrxType = 1 then '0' else cast(isnull(cast(A.IncomeTaxSellAmount as decimal(30,2)), '')as nvarchar) end
                                    + '|' + case when A.LevyAmount = 0 then '0' else cast(isnull(cast(A.LevyAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.VATAmount = 0 then '0' else cast(isnull(cast(A.VATAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.OtherCharges = 0 then '0' else cast(isnull(cast(A.OtherCharges as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.TrxType = 1 then cast(isnull(cast((A.TradeAmount + A.CommissionAmount + A.VATAmount + A.LevyAmount + A.OtherCharges) as decimal (30,2)), '') as nvarchar) else cast(isnull(cast((A.TradeAmount - A.CommissionAmount - A.VATAmount - A.LevyAmount - A.OtherCharges - A.IncomeTaxSellAmount) as decimal (30,2)), '') as nvarchar) end
                                    + '|' + case when A.WHTAmount = 0 then '0' else cast(isnull(cast(A.WHTAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(A.TotalAmount as decimal(30,2)), '')as nvarchar) end 
                                    + '|' + case when A.TrxType = 1 then '2' else '1' end         
                                    --+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
                                    + '|' + ''
                                    + '|' + '' , A.TrxType, A.valuedate
                                    from (      
                              	    select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                    A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                    A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,InvestmentPK from investment A
                                    left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                    left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                    left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                    left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                                    where    
                                    A.ValueDate =  @ValueDate " + _paramSettlementPK + @" 
				    and A.statusdealing = 2 and A.InstrumentTypePK in (1,4,16)
                                    )A    
                                    Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                    A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.InvestmentPK
                                    order by A.valuedate asc

                        select ResultText from #text order by ValueDate,TrxType asc
                        END

                        ";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Equity.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Equity.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPBond_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {

                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {



                        cmd.CommandTimeout = 0;
                        cmd.CommandText = @"

create table #Text(      
[ResultText] [nvarchar](1000)  NULL  ,
InvestmentPK int,
ValueDate date        
)                        
        
truncate table #Text

insert into #Text     
select 'Transaction Status|TA Reference ID|Data Type|TA Reference No.|Trade Date|Settlement Date|IM Code|BR Code|Fund Code|Security Code|Buy/Sell|Price|Face Value|Proceeds|Last Coupon Date|Next Coupon Date|Accrued Days|Accrued Interest Amount|Other Fee|Capital Gain Tax|Interest Income Tax|Withholding Tax|Net Proceeds|Settlement Type|Sellers Tax ID|Purpose of Transaction|Statutory Type|Remarks|Cancellation Reason|Data Type|TA Reference No.|Face Value|Acquisition Date|Acquisition Price(%)|Acquisition Amount|Capital Gain|Days of Holding Interest|Holding Interest Amount|Total Taxable Income|Tax Rate in %|Tax Amount'   ,0,null   
        

insert into #Text
Select  
'NEWM' --1
+ '|' + ''
+ '|' + '1'
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), settlementdate, 112),''))))
+ '|' + @CompanyID
+ '|' + isnull(A.BrokerCode,'')
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Instrument,''))))
+ '|' + cast(isnull(A.TrxType,'') as nvarchar)
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(A.DonePrice as decimal(30,6)),'')as nvarchar) end 
+ '|' + case when A.Quantity = 0 then '0' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end
+ '|' + case when A.DonePrice = 0 then '0' else cast(isnull(cast(sum(A.DonePrice * A.Quantity)/100 as decimal(30,2)), '')as nvarchar) end
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), LastCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), NextCouponDate, 112),''))))
+ '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.AccruedDays,'')))) 
+ '|' + case when A.InterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.InterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + ''
+ '|' + case when A.CapitalGainAmount = 0 then '0' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TaxInterestAmount = 0 then '0' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' +  cast(cast(isnull(sum(A.CapitalGainAmount + A.TaxInterestAmount),0) as decimal (30,2)) as nvarchar)
+ '|' + case when A.TotalAmount = 0 then '0' else cast(isnull(cast(isnull(A.TotalAmount,0) as decimal(30,2)),'')as nvarchar) end 
+ '|' + case when A.TrxType = 1 then '2' else case when A.TrxType = 2  then '1' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.SettlementMode,'')))) end  end             
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankAccountNo,'')))) end              
+ '|' + case when A.InvestmentTrType = 0 then '3' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentTrType,'3'))) ) end 
+ '|' + case when A.StatutoryType = 0 then '2' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.StatutoryType,'2')))) end
-- + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,''))))
+ '|' + ''
+ '|' + '' 
+ case when A.TrxType = 1 then '' else 
+ '|' + case when A.TrxType = 1 then '' else '2' end  
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) end 
+ '|' + case when A.TrxType = 1 then '' else case when A.Quantity = 0 then '' else cast(isnull(cast(A.Quantity as decimal(30,0)), '')as nvarchar) end end  
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), AcqDate, 112),'')))) end    
+ '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(A.AcqPrice as decimal(30,6)), '')as nvarchar) end end     
+ '|' + case when A.TrxType = 1 then '' else case when A.AcqPrice = 0 then '' else cast(isnull(cast(sum(A.AcqPrice * A.AcqVolume)/100 as decimal(30,2)), '')as nvarchar) end end     
+ '|' + case when A.TrxType = 1 then '' else case when A.CapitalGainAmount = 0 then '' else cast(isnull(cast(isnull(A.CapitalGainAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), datediff(day,SettlementDate,@valuedate) , 112),'')))) end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(isnull(A.TaxInterestAmount,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxExpensePercent = 0 then '' else cast(isnull(cast(isnull(A.TaxExpensePercent,0) as decimal(30,2)),'')as nvarchar) end  end 
+ '|' + case when A.TrxType = 1 then '' else case when A.TaxInterestAmount = 0 then '' else cast(isnull(cast(sum(A.CapitalGainAmount + A.TaxInterestAmount) as decimal(30,2)),'')as nvarchar) end  end 
End
,A.InvestmentPK, A.ValueDate
from (      
select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
round(A.DoneAmount,0) TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
round(A.TotalAmount,0) TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,case when A.InstrumentTypePK in (3,8,9,15) then dbo.FgetDateDiffCorporateBond(A.LastCouponDate,A.SettlementDate) else datediff(day,A.LastCouponDate,A.SettlementDate) end AccruedDays,
round(A.DoneAccruedInterest,0) InterestAmount,round(A.IncomeTaxGainAmount,0) CapitalGainAmount,round(A.IncomeTaxInterestAmount,0) TaxInterestAmount,A.AcqDate,isnull(A.AcqPrice,0) AcqPrice,isnull(A.AcqVolume,0) AcqVolume,A.TaxExpensePercent,F.BankAccountNo ,A.PurposeOfTransaction,A.StatutoryType,D.CurrencyPK,A.InvestmentPK,A.InvestmentTrType from investment A
left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
left join Fund C on A.fundpk = C.fundpk and C.status = 2
left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'
left join FundCashRef F on A.fundcashrefpk = F.fundcashrefpk and F.status = 2 and F.Type = 3
where    
A.ValueDate = @valuedate and A.InstrumentTypePK in (2,3,9,13,15) " + _paramSettlementPK + @"
and A.statusdealing = 2  and D.CurrencyPk = 1

)A    
Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,AcqDate,AcqPrice,AcqVolume,TaxExpensePercent,BankAccountNo,A.PurposeOfTransaction,A.StatutoryType,A.InvestmentPK,A.InvestmentTrType
order by A.ValueDate Asc

select ResultText from #Text
";
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "\\" + "PTP_Bond.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Bond.txt";
                                }


                            }
                            return null;
                        }

                    }

                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public string PTPDeposito_BySelectedData(string _userID, DateTime _dateFrom, DateTime _dateTo, bool _param5, Investment _investment)
        {

            try
            {
                string _paramSettlementPK = "";

                if (!_host.findString(_investment.stringInvestmentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_investment.stringInvestmentFrom))
                {
                    _paramSettlementPK = " And A.SettlementPK in (" + _investment.stringInvestmentFrom + ") ";
                }
                else
                {
                    _paramSettlementPK = " And A.SettlementPK in (0) ";
                }
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        string _mature = "";
                        if (_param5 == true)
                        {
                            if (Tools.ClientCode == "01")
                            {
                                _mature = @"union all

                                select CONVERT(varchar(15), [identity]) + '/FP/'  
                                + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference,A.MaturityDate valuedate, A.MaturityDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.Balance Quantity, 
                                A.Balance TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.Balance TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.Balance OldTradeAmount,A.InterestPercent OldInterestPercent,A.OldMaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.Balance * 1 AmountTrf, A.InterestPercent BreakInterestPercent,AcqDate, 
                                round(A.Balance * (A.InterestPercent/100)/365 * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,0 BitRollOverInterest
                                from FundPosition A
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where A.MaturityDate = @ValueDate and A.TrailsPK = @TrailsPK ";
                            }
                            else if (Tools.ClientCode == "02")
                            {
                                _mature = @"
                                union all

                                select A.Reference,A.MaturityDate valuedate valuedate, A.valuedate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneVolume Quantity, 
                                A.DoneVolume TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneVolume OldTradeAmount,A.InterestPercent OldInterestPercent,A.OldMaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneVolume * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate,A.AcqDate , 
                                round(A.DoneVolume * (A.InterestPercent/100)/case when I.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,0 BitRollOverInterest
                                from InvestmentMature A
                                left join Investment I on A.InvestmentPK = I.InvestmentPK and I.statusDealing = 2
                                left join Fund C on I.FundPK = C.FundPK and C.status in (1,2)
                                left join instrument D on I.instrumentpk = D.instrumentpk and D.status in (1,2)
                                left join Bank F on I.BankPK = F.BankPK and F.status in (1,2)
                                left join BankBranch G on I.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where Selected = 1 ";
                            }
                            else if (Tools.ClientCode == "03")
                            {
                                _mature = @"union all
                                select A.Reference,A.MaturityDate valuedate, A.valuedate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneAmount Quantity, 
                                A.DoneAmount TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneAmount OldTradeAmount,A.InterestPercent OldInterestPercent,A.OldMaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneAmount * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate, 
                                round(A.DoneAmount * (A.InterestPercent/100)/case when B.InterestDaysType in (2) then DATEDIFF(DAY, J.DateFrom, J.DateTo) + 1 else case when B.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,A.Reference ParentReference,B.InterestDaysType,0 BitRollOverInterest
                                from InvestmentMature A
                                left join Investment B on A.InvestmentPK = B.InvestmentPK and B.StatusSettlement = 2 and B.InvestmentPK <> 0 
                                left join Fund C on A.FundID = C.ID and C.status = 2
                                left join instrument D on B.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on B.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on B.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join Period J on B.PeriodPK = J.PeriodPK and J.status = 2
                                where Selected = 1";
                            }
                            else if (Tools.ClientCode == "05")
                            {
                                _mature = "";
                            }
                            else if (Tools.ClientCode == "19")
                            {
                                _mature = @"
                                union all

                                select CONVERT(varchar(15), [identity]) + '/FP/'  
                                + REPLACE(RIGHT(CONVERT(VARCHAR(8), A.MaturityDate, 3), 5) ,'/','') Reference,A.MaturityDate valuedate, A.MaturityDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.Balance Quantity, 
                                A.Balance TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.Balance TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.Balance OldTradeAmount,A.InterestPercent OldInterestPercent,A.OldMaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.Balance * 1 AmountTrf, A.InterestPercent BreakInterestPercent,AcqDate,AcqDate , 
                                round(A.Balance * (A.InterestPercent/100)/365 * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,0 BitRollOverInterest
                                from FundPosition A
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where A.MaturityDate = @ValueDate and A.TrailsPK = @TrailsPK  ";
                            }
                            else if (Tools.ClientCode == "25")
                            {
                                _mature = @"
                                union all

                                select A.Reference,A.MaturityDate valuedate, A.valuedate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneVolume Quantity, 
                                A.DoneVolume TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneVolume OldTradeAmount,A.InterestPercent OldInterestPercent,A.OldMaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneVolume * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate,A.AcqDate , 
                                round(A.DoneVolume * (A.InterestPercent/100)/case when I.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.MaturityDate),0) * 0.8 InterestAmount
                                from InvestmentMature A
                                left join Investment I on A.InvestmentPK = I.InvestmentPK and I.statusDealing = 2
                                left join Fund C on I.FundPK = C.FundPK and C.status in (1,2)
                                left join instrument D on I.instrumentpk = D.instrumentpk and D.status in (1,2)
                                left join Bank F on I.BankPK = F.BankPK and F.status in (1,2)
                                left join BankBranch G on I.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                where Selected = 1 ";
                            }
                            else
                            {
                                _mature = @"union all
						        select A.Reference,A.MaturityDate valuedate, A.ValueDate settlementdate, '' BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, 1 DonePrice, A.DoneAmount Quantity, 
                                A.DoneAmount TradeAmount,0 CommissionAmount, 0 IncomeTaxSellAmount, 0 LevyAmount, 0 VatAmount, 0 OtherCharges, 2 TransactionType,
                                A.DoneAmount TotalAmount, 0 WHTAmount, '' InvestmentNotes, 2 TrxType,2 SettlementMode,'' LastCouponDate,'' NextCouponDate,0 AccruedDays,
                                0 CapitalGainAmount,0 TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,A.DoneAmount OldTradeAmount,A.InterestPercent OldInterestPercent,A.OldMaturityDate OldMaturityDate,H.ID CurrencyID,'' InterestPaymentType,A.DoneAmount * 1 AmountTrf, A.InterestPercent BreakInterestPercent,A.AcqDate, 
                                round(A.DoneAmount * (A.InterestPercent/100)/case when B.InterestDaysType in (2) then DATEDIFF(DAY, J.DateFrom, J.DateTo) + 1 else case when B.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.MaturityDate),0) InterestAmount,1 Mature,A.Reference ParentReference,0 BitRollOverInterest
                                from InvestmentMature A
                                left join Investment B on A.InvestmentPK = B.InvestmentPK and B.StatusSettlement = 2 and B.InvestmentPK <> 0 
                                left join Fund C on A.FundID = C.ID and C.status = 2
                                left join instrument D on B.instrumentpk = D.instrumentpk and D.status = 2  
                                left join Bank F on B.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on B.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join Period J on B.PeriodPK = J.PeriodPK and J.status = 2
                                where A.MaturityDate = @ValueDate and Selected = 1 ";
                            }
                        }
                        else
                        {
                            _mature = "";
                        }

                        if (Tools.ClientCode == "01")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                            )
                            and status = 2

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),'')as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),'')as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + '' -- 20.Withdrawal Interest
                            + '|' + '' -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else cast(isnull(A.AmountTrf,0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                            -- + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode


                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "02")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                            )
                            and status = 2

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                             + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else case when A.TrxType = 1 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), PrevDate, 112),'')))) end end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '0' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),'')as nvarchar) end else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),'')as nvarchar) else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 1  then cast(isnull(A.AmountTrf,0) as nvarchar) else '0' end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                            -- + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + ''
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then cast(isnull(A.DoneAmount,0) as decimal(30,2)) else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,I.AcqDate PrevDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,I.AcqDate,A.InterestDaysType,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.PrevDate,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "03")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                            )
                            and status = 2   --and FundPK = @FundPK

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType              
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(SUM(ISNULL(A.TradeAmount * BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) as decimal(30,2)),'')as nvarchar)  else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(SUM(ISNULL(A.TradeAmount * BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) + A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((SUM(ISNULL(A.TradeAmount * BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) + A.TradeAmount )* -1 as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((SUM(ISNULL(A.TradeAmount * A.BreakInterestPercent / 100 / CASE WHEN InterestDaysType = 4 then 365 ELSE 360 END,0)) * 0.8  * DATEDIFF(day,A.AcqDate,A.SettlementDate) + A.TradeAmount )* -1 as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.InterestDaysType,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                            and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                            and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                            and J.StatusSettlement = 2
                            left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,A.BitRolloverInterest,D.CurrencyPK,F.USDPTPCode


                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference ,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "05")
                        {
                            cmd.CommandText = @"
                            BEGIN  
                            SET NOCOUNT ON         

                            create table #Text(      
                            [ResultText] [nvarchar](1000)  NULL          
                            )                        
        
                                
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType in (2,3)  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.InvestmentNotes = 'MATURE'  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) else case when A.InvestmentNotes = 'LIQUIDATE'  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),0)as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),0)as nvarchar) end else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),0)as nvarchar) else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.TrxType = 3  then case when A.CurrencyPK = 1  then '1' else '2' end  else '' end -- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(((A.TradeAmount + A.InterestAmount) * -1) as decimal(30,2)),'')as nvarchar) else case when A.TrxType in (1)  then cast(isnull(A.AmountTrf,0) as nvarchar) else cast(isnull(cast(A.InterestAmount * -1 as decimal(30,2)),0)as nvarchar) end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,'')))) else '' end end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                                select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, Z.TrxType TransactionType,
                                A.TotalAmount, A.WHTAmount, Z.TrxTypeID InvestmentNotes, Z.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                                A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                                case when A.TrxType = 3 then cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) else cast(isnull(A.DoneAmount,0) as decimal(30,2)) end AmountTrf,case when Z.TrxTypeID = 'MATURE' then A.InterestPercent else A.BreakInterestPercent end BreakInterestPercent,Z.AcqDate,
                                case when Z.TrxTypeID = 'MATURE' then (round(A.DoneAmount * (A.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.MaturityDate),0)*0.8) 
                                else case when Z.TrxTypeID = 'LIQUIDATE' then (round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) 
                                else case when Z.TrxTypeID = 'ROLLOVER' then (round(A.DoneAmount * (I.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) 
                                else (round(A.DoneAmount * (A.InterestPercent/100)/365 * datediff(day,Z.AcqDate,A.SettlementDate),0)*0.8) end end end InterestAmount,Z.OldReference ParentReference,C.CurrencyPK
                                from InvestmentMature Z
                                left join investment A on Z.InvestmentPK = A.InvestmentPK and A.StatusSettlement in (1,2)
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                                where selected = 1 and A.InvestmentPK in (select InvestmentPK from Investment where StatusSettlement in (1,2))

                                Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                                A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, Z.TrxType,
                                A.TotalAmount, A.WHTAmount ,Z.TrxTypeID, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                                A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,Z.AcqDate,Z.OldReference,C.CurrencyPK,Z.TransactionType,D.CurrencyPK,F.USDPTPCode


                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.ParentReference,A.CurrencyPK 
                            order by A.ValueDate Asc
                            select * from #text 
                            END



                                    ";
                        }
                        else if (Tools.ClientCode == "19")
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                            )
                            and status = 2

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                             + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else case when A.TrxType = 1 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), PrevDate, 112),'')))) end end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '0' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),'')as nvarchar) end else '' end -- 20.Withdrawal Interest
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),'')as nvarchar) else '' end -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 1  then cast(isnull(A.AmountTrf,0) as nvarchar) else '0' end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then cast(isnull(A.DoneAmount,0) as decimal(30,2)) else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,I.AcqDate PrevDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/365 * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,I.AcqDate,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.PrevDate ,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }
                        else if (Tools.ClientCode == "25")
                        {
                            cmd.CommandText = @"
                                Declare @TrailsPK int
                                Declare @MaxDateEndDayFP datetime

                                select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                                where ValueDate = 
                                (
                                select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate
                                )
                                and status = 2

                                BEGIN  
                                        SET NOCOUNT ON         
          
                                    create table #Text(      
                                    [ResultText] [nvarchar](1000)  NULL          
                                    )                        
        
                                truncate table #Text  
                                insert into #Text     
                                select ''     
                                insert into #Text
                                Select  
                                'NEWM' -- 1.Transaction Status
                                + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                                + '|' + @CompanyID -- 3.IM Code
                                 + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                                + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                                + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                                + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                                else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                                 + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                                else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                                + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else case when A.TrxType = 1 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), PrevDate, 112),'')))) end end -- 12.Investment.ValueDate
                                + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                                else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                                + '|' + case when A.TrxType = 1  then cast(isnull(A.InterestPaymentType,'') as nvarchar) else case when A.TrxType = 3 then '1' else '' end  end -- 14.Investment.InterestPaymentType           
                                + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                                + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                                + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),''))))   else ''  end -- 17.WithdrawalDate
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                                + '|' + case when A.TrxType = 2  then case when A.InterestAmount = 0 then '' else cast(isnull(cast(A.InterestAmount as decimal(30,2)),'')as nvarchar) end else '' end -- 20.Withdrawal Interest
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount + A.InterestAmount as decimal(30,2)),'')as nvarchar) else '' end -- 21.Total Withdrawal Amount
                                + '|' + -- 22.Rollover Type
                                + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                                + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                                + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                                + '|' + case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount + A.InterestAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 1  then cast(isnull(A.AmountTrf,0) as nvarchar) else '0' end end-- 26.Amount to be Transfer
                                + '|' + -- 27.Statutory Type
                                + '|' + isnull(A.ContactPerson,'') -- 28.BankBranch.ContactPerson
                                + '|' + isnull(A.Phone1,'') -- 29.BankBranch.Phone1
                                + '|' + isnull(A.Fax1,'') -- 30.BankBranch.Fax1
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                                + '|' + case when A.TrxType = 2 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) else '' end end -- 32.Investment.Reference
                                + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                                + '|' + ''  
                                from (      
                                select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                                A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                                A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                                A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                                A.AmountToTransfer AmountTrf,A.BreakInterestPercent,A.AcqDate,I.AcqDate PrevDate,
                                round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2,4) then 365 else 360 end * datediff(day,A.AcqDate,A.Valuedate),0) * 0.8 InterestAmount
                                from investment A
                                left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                                left join Fund C on A.fundpk = C.fundpk and C.status = 2
                                left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                                left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                                left join Bank F on A.BankPK = F.BankPK and F.status = 2
                                left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                                left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                                left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                                where    
                                A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                                " + _paramSettlementPK + @"
                                and A.statusdealing = 2

                                Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                                A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                                A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                                A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                                A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,I.AcqDate,A.InterestDaysType,G.Email1,A.AmountToTransfer,D.CurrencyPK,F.USDPTPCode

                                    " + _mature + @"

                                )A    
                                Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                                A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                                A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                                A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.PrevDate
                                order by A.ValueDate Asc
                                select * from #text 
                                END


                                            ";
                        }
                        else
                        {
                            cmd.CommandText = @"
                            Declare @TrailsPK int
                            Declare @MaxDateEndDayFP datetime

                            select @TrailsPK = EndDayTrailsFundPortfolioPK, @MaxDateEndDayFP = ValueDate from EndDayTrailsFundPortfolio 
                            where ValueDate = 
                            (
                            select max(valueDate) from EndDayTrailsFundPortfolio where status = 2 and valueDate < @ValueDate   --and FundPK = @FundPK
                            )
                            and status = 2   --and FundPK = @FundPK

                            BEGIN  
                                    SET NOCOUNT ON         
          
                                create table #Text(      
                                [ResultText] [nvarchar](1000)  NULL          
                                )                        
        
                            truncate table #Text  
                            insert into #Text     
                            select ''     
                            insert into #Text
                            Select  
                            'NEWM' -- 1.Transaction Status
                            + '|' + cast(isnull(A.TrxType,'') as nvarchar) -- 2.Investment.TrxType
                            + '|' + @CompanyID -- 3.IM Code
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.FundCode,'')))) -- 4.Fund.SInvestCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankCode,'')))) -- 5.Bank.PTPCode
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.BankBranchCode,'')))) -- 6.BankBranch.PTPCode
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountName,'')))) -- 7.BankBranch.BankAccountName
                            + '|' + RTRIM(LTRIM((isnull(A.BankAccountNo,'')))) -- 8.BankBranch.BankAccountNo
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.CurrencyID,'')))) -- 9.Instrument.CurrencyPK
                            + '|' + case when A.TrxType = 1  then case when A.TradeAmount = 0 then '0' else cast(isnull(cast(A.TradeAmount as decimal(30,2)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldTradeAmount = 0 then '0' else cast(isnull(cast(A.OldTradeAmount as decimal(30,2)),0)as nvarchar) end else cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) end  end -- 10.Investment.DoneAmount
                            + '|' + case when A.TrxType = 1  then case when A.InterestPercent = 0 then '0' else cast(isnull(cast(A.InterestPercent as decimal(6,4)),0)as nvarchar) end 
                            else case when A.TrxType = 3 then case when A.OldInterestPercent = 0 then '0' else cast(isnull(cast(A.OldInterestPercent as decimal(6,4)),0)as nvarchar) end else cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) end  end -- 11.Investment.InterestPercent
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.AcqDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), ValueDate, 112),'')))) end -- 12.Investment.ValueDate
                            + '|' + case when A.TrxType = 1  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.MaturityDate, 112),'')))) 
                            else case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) else RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.OldMaturityDate, 112),'')))) end  end  -- 13.Investment.MaturityDate
                            + '|' + case when A.TrxType in (1,3)  then case when isnull(A.InterestPaymentType,'') in (1,4) then '1' 
                            else case when isnull(A.InterestPaymentType,'') = 7 then '4'
                            else case when isnull(A.InterestPaymentType,'') in (10,13) then '5'
                            else case when isnull(A.InterestPaymentType,'') = 16 then '6'
                            else case when isnull(A.InterestPaymentType,'') = 19 then '7' end end end end end
                            else '' end -- 14.Investment.InterestPaymentType              
                            + '|' + case when A.TrxType = 1  then '1' else  '' end  -- 15. Hardcode InterestType
                            + '|' + case when A.TrxType = 1  then case when A.BitSyariah = 1  then 'Y' else 'N' end  else '' end -- 16.Bank.BitSyariah
                            + '|' + case when A.TrxType = 2  then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), A.ValueDate, 112),'')))) else '' end -- 17.WithdrawalDate
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.BreakInterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 18.Investment.BreakInteresPercent
                            + '|' + case when A.TrxType = 2  then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar)  else '' end -- 19.Withdrawal Principle
                            + '|' + '' -- 20.Withdrawal Interest
                            + '|' + '' -- 21.Total Withdrawal Amount
                            + '|' + case when A.BitRolloverInterest = 1 then '2' else '' end-- 22.Rollover Type
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.TradeAmount as decimal(30,2)),'')as nvarchar) else '' end -- 23.Investment.DoneAmount 
                            + '|' + case when A.TrxType = 3 then cast(isnull(cast(A.InterestPercent as decimal(6,4)),'')as nvarchar) else '' end -- 24.Investment.InterestPercent 
                            + '|' + case when A.TrxType = 3 then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(CONVERT(VARCHAR(10), MaturityDate, 112),'')))) else '' end -- 25.Investment.MaturityDate
                            + '|' + case when A.BitRolloverInterest = 1 then '0' else case when A.Mature = 1 then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else case when A.TrxType = 2  then cast(isnull(cast((A.TradeAmount) as decimal(30,2)),'')as nvarchar) else cast(isnull(cast(A.AmountTrf as decimal(30,2)),0) as nvarchar) end end end-- 26.Amount to be Transfer
                            + '|' + -- 27.Statutory Type
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ContactPerson,'')))) -- 28.BankBranch.ContactPerson
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Phone1,'')))) -- 29.BankBranch.Phone1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Fax1,'')))) -- 30.BankBranch.Fax1
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.Reference,'')))) -- 31.Investment.Reference
                            + '|' + case when A.TrxType in (2,3) then RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.ParentReference,''))))  else '' end -- 32.Investment.Reference
                            + '|' + RTRIM(LTRIM(dbo.AlphaRemoveExceptLetter(isnull(A.InvestmentNotes,'')))) -- 33.Investment.InvestmentNotes
                            + '|' + '' 
                            from (      
                            select A.Reference,A.valuedate valuedate, A.settlementdate settlementdate, B.SInvestCode BrokerCode, C.Sinvestcode FundCode, D.ID Instrument, A.DonePrice, A.DoneVolume Quantity, 
                            A.DoneAmount TradeAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount OtherCharges, A.TrxType TransactionType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,datediff(day,A.LastCouponDate,A.SettlementDate) AccruedDays,
                            A.IncomeTaxGainAmount CapitalGainAmount,A.IncomeTaxInterestAmount TaxInterestAmount,case when D.CurrencyPK = 1 then F.PTPCode else F.USDPTPCode end BankCode,G.PTPCode BankBranchCode,F.Name BankName,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,case when G.Email1 = '' then G.ContactPerson else G.ContactPerson + '-' + G.Email1 end ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance OldTradeAmount,I.InterestPercent OldInterestPercent,I.MaturityDate OldMaturityDate,H.ID CurrencyID,A.InterestPaymentType,
                            case when A.DoneAmount = I.Balance then 0 else cast(sum(isnull(A.DoneAmount,0) - isnull(I.Balance,0)) as decimal(30,2)) end AmountTrf,A.BreakInterestPercent,A.AcqDate,
                            round(A.DoneAmount * (A.BreakInterestPercent/100)/case when A.InterestDaysType in (2) then DATEDIFF(DAY, K.DateFrom, K.DateTo) + 1 else case when A.InterestDaysType in (4) then 365 else 360 end end  * datediff(day,A.AcqDate,A.SettlementDate),0) InterestAmount,0 Mature,J.Reference ParentReference,A.BitRolloverInterest
                            from investment A
                            left join counterpart B on A.counterpartpk = B.counterpartpk and b.status = 2
                            left join Fund C on A.fundpk = C.fundpk and C.status = 2
                            left join instrument D on A.instrumentpk = D.instrumentpk and D.status = 2
                            left join MasterValue E on E.Code = A.SettlementMode and E.status =2  and E.ID ='SettlementMode'   
                            left join Bank F on A.BankPK = F.BankPK and F.status = 2
                            left join BankBranch G on A.BankBranchPK = G.BankBranchPK and G.status = 2
                            left join Currency H on D.CurrencyPK = H.CurrencyPK and H.status = 2
                            left join FundPosition I on A.TrxBuy = I.[Identity] and I.status = 2
                            left join Investment J on case when A.TrxType = 3 then I.InstrumentPK  else A.InstrumentPK end = J.InstrumentPK
                            and case when A.TrxType = 3 then I.FundPK  else A.FundPK end = J.FundPK 
                            and case when A.TrxType = 3 then I.AcqDate  else A.AcqDate end = J.ValueDate 
                            and J.StatusSettlement = 2
                            left join Period K on A.PeriodPK = K.PeriodPK and K.status = 2
                            where    
                            A.ValueDate =  @ValueDate and A.InstrumentTypePK in (5)
                            " + _paramSettlementPK + @"
                            and A.statusdealing = 2

                            Group by A.Reference,A.valuedate, A.settlementdate, B.SInvestCode, C.Sinvestcode, D.ID, A.DonePrice, A.DoneVolume, 
                            A.DoneAmount,A.CommissionAmount, A.IncomeTaxSellAmount, A.LevyAmount, A.VatAmount, A.OTCamount, A.TrxType,
                            A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,
                            A.DoneAccruedInterest,A.IncomeTaxGainAmount,A.IncomeTaxInterestAmount,F.PTPCode,G.PTPCode,F.Name,G.BankAccountNo,
                            A.InterestPercent,A.MaturityDate,F.BitSyariah,G.ContactPerson,G.Phone1,G.Fax1,G.BankAccountName,I.Balance,I.InterestPercent,I.MaturityDate,H.ID,A.InterestPaymentType,A.BreakInterestPercent,A.AcqDate,J.Reference,A.InterestDaysType,K.DateFrom,K.DateTo,A.BitRolloverInterest,G.Email1,D.CurrencyPK,F.USDPTPCode

                                " + _mature + @"

                            )A    
                            Group by A.Reference,A.ValueDate,A.settlementdate,A.BrokerCode,A.FundCode,A.Instrument,A.DonePrice,A.Quantity,A.TradeAmount,A.CommissionAmount,A.IncomeTaxSellAmount,
                            A.TransactionType, A.LevyAmount, A.VatAmount, A.OtherCharges,A.TotalAmount, A.WHTAmount, A.InvestmentNotes, A.TrxType,A.SettlementMode,A.LastCouponDate,A.NextCouponDate,A.AccruedDays,
                            A.InterestAmount,A.CapitalGainAmount,A.TaxInterestAmount,A.BankCode,A.BankBranchCode,A.BankName,A.BankAccountNo,A.InterestPercent,A.MaturityDate,A.BitSyariah,A.ContactPerson,A.Phone1,A.Fax1,
                            A.BankAccountName,A.OldTradeAmount,A.OldInterestPercent,A.OldMaturityDate,A.CurrencyID,A.InterestPaymentType,A.AmountTrf,A.BreakInterestPercent,A.AcqDate,A.Mature ,A.ParentReference,A.BitRolloverInterest
                            order by A.ValueDate Asc
                            select * from #text 
                            END


                                        ";
                        }

                        cmd.CommandTimeout = 0;
                        cmd.Parameters.AddWithValue("@CompanyID", _host.Get_CompanyID());
                        cmd.Parameters.AddWithValue("@ValueDate", _dateFrom);



                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                string filePath = Tools.SInvestTextPath + "PTP_Deposito.txt";
                                FileInfo txtFile = new FileInfo(filePath);
                                if (txtFile.Exists)
                                {
                                    txtFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                }

                                using (System.IO.StreamWriter file = new System.IO.StreamWriter(filePath))
                                {
                                    while (dr.Read())
                                    {
                                        file.WriteLine(Convert.ToString(dr["ResultText"]));
                                    }
                                    return Tools.HtmlSinvestTextPath + "PTP_Deposito.txt";
                                }

                            }
                            return null;
                        }

                    }
                }
            }

            catch (Exception err)
            {
                throw err;
            }

        }

        public Boolean GenerateReportFundAccounting(string _userID, FundAccountingRpt _FundAccountingRpt)
        {

            #region History Transaction Equity
            if (_FundAccountingRpt.ReportName.Equals("History Transaction Equity"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            select A.ValueDate TanggalTransaksi,A.SettlementDate,D.ID StockID,D.Name StockName,B.ID Fund,C.ID Broker,MV.DescOne Type,A.TrxTypeID,A.DonePrice,A.DoneLot,A.Amount,A.CommissionAmount,A.LevyAmount,A.VATAmount,A.WHTAmount,A.IncomeTaxSellAmount,A.TotalAmount, * from Investment A
                            Left join Fund B ON A.FundPK = B.Fundpk  and  B.Status in (1,2)
                            left join Counterpart C on A.CounterpartPK = C.CounterpartPK and C.status in (1,2)
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2)
                            left join MasterValue MV on A.BoardType = MV.Code and MV.Status=2 and MV.ID ='BoardType' 
                             where A.ValueDate Between  @ValueDateFrom and @valueDateTo and A.InstrumentTypePK = 1 and A.StatusSettlement = 2 
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@valueDateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoryTransactionEquity" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoryTransactionEquity" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "HistoryTransactionEquity";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("History Transaction Equity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoryTransaction> rList = new List<HistoryTransaction>();
                                        while (dr0.Read())
                                        {

                                            HistoryTransaction rSingle = new HistoryTransaction();

                                            rSingle.TanggalTransaksi = dr0["TanggalTransaksi"].ToString();
                                            rSingle.SettlementDate = dr0["SettlementDate"].ToString();
                                            rSingle.StockId = dr0["StockId"].ToString();
                                            rSingle.StockName = dr0["StockName"].ToString();
                                            rSingle.Fund = dr0["Fund"].ToString();
                                            rSingle.Broker = dr0["Broker"].ToString();
                                            rSingle.InvestmentNotes = dr0["InvestmentNotes"].ToString();
                                            rSingle.Type = dr0["Type"].ToString();
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.DoneLot = Convert.ToDecimal(dr0["DoneLot"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.CommissionAmount = Convert.ToDecimal(dr0["CommissionAmount"]);
                                            rSingle.LevyAmount = Convert.ToDecimal(dr0["LevyAmount"]);
                                            rSingle.VATAmount = Convert.ToDecimal(dr0["VATAmount"]);
                                            rSingle.WHTAmount = Convert.ToDecimal(dr0["WHTAmount"]);
                                            rSingle.IncomeTaxSellAmount = Convert.ToDecimal(dr0["IncomeTaxSellAmount"]);
                                            rSingle.TotalAmount = Convert.ToDecimal(dr0["TotalAmount"]);







                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT REKAP OMS EQUITY";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                        incRowExcel++;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";


                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Tanggal Transaksi";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Settlement Date";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Stock Id";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Stock Name";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Fund";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "Broker";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Type";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "TrxType ID";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "Done Price";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Done Lot";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Value = "Amount";
                                        worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 13].Value = "Commission Amount";
                                        worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 14].Value = "Levy Amount";
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 15].Value = "VAT Amount";
                                        worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 16].Value = "WHT Amount";
                                        worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 17].Value = "Income Tax Sell Amount";
                                        worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 18].Value = "Total Amount";
                                        worksheet.Cells[incRowExcel, 19].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 19].Value = "Investment Notes";



                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["A" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["B" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["C" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["D" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["E" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                        //worksheet.Cells["F" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["G" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["H" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["I" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["J" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                        //worksheet.Cells["K" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["N" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                        //worksheet.Cells["P" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["Q" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["R" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells["S" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        int first = incRowExcel;


                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        int no = 1;
                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 1;



                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.TanggalTransaksi;
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.TanggalTransaksi).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.StockId;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.StockName;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Broker;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Type; ;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TrxTypeID;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.DoneLot;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.CommissionAmount;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.LevyAmount;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.VATAmount;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.WHTAmount;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.IncomeTaxSellAmount;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.TotalAmount;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 18, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 18, incRowExcel, 18].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.InvestmentNotes;
                                                worksheet.Cells[incRowExcel, 19, incRowExcel, 19].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 19, incRowExcel, 19].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                no++;



                                            }








                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }
                                        _endRowDetail = incRowExcel;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 10].Calculate();
                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 12].Calculate();
                                        worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 13].Calculate();
                                        worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 14].Calculate();
                                        worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 15].Calculate();
                                        worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 16].Calculate();
                                        worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 17].Calculate();
                                        worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 18].Calculate();
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 19, 19];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 13;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.Column(12).Width = 18;
                                        worksheet.Column(13).Width = 26;
                                        worksheet.Column(14).Width = 23;
                                        worksheet.Column(15).Width = 23;
                                        worksheet.Column(16).Width = 23;
                                        worksheet.Column(17).Width = 30;
                                        worksheet.Column(18).Width = 26;
                                        worksheet.Column(19).Width = 20;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 History Transaction Equity";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region History Transaction Bond
            if (_FundAccountingRpt.ReportName.Equals("History Transaction Bond"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            select A.ValueDate TanggalTransaksi,A.SettlementDate,D.ID StockID,D.Name StockName,B.ID Fund,C.ID Broker,MV.DescOne Type,A.TrxTypeID,A.DonePrice,A.DoneVolume,A.Amount
                            from Investment A
                            Left join Fund B ON A.FundPK = B.Fundpk  and  B.Status in (1,2)
                            left join Counterpart C on A.CounterpartPK = C.CounterpartPK and C.status in (1,2)
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2)
                            left join MasterValue MV on A.BoardType = MV.Code and MV.Status=2 and MV.ID ='BoardType' 
                             where A.ValueDate Between  @ValueDateFrom and @valueDateTo and A.InstrumentTypePK in (2,3,8,9,13,14,15) and A.StatusSettlement = 2 
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@valueDateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoryTransactionBond" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoryTransactionBond" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "HistoryTransactionBond";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("History Transaction Bond");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoryTransaction> rList = new List<HistoryTransaction>();
                                        while (dr0.Read())
                                        {

                                            HistoryTransaction rSingle = new HistoryTransaction();

                                            rSingle.TanggalTransaksi = dr0["TanggalTransaksi"].ToString();
                                            rSingle.SettlementDate = dr0["SettlementDate"].ToString();
                                            rSingle.StockId = dr0["StockId"].ToString();
                                            rSingle.StockName = dr0["StockName"].ToString();
                                            rSingle.Fund = dr0["Fund"].ToString();
                                            rSingle.Broker = dr0["Broker"].ToString();
                                            rSingle.Type = dr0["Type"].ToString();
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.DonePrice = Convert.ToDecimal(dr0["DonePrice"]);
                                            rSingle.DoneVolume = Convert.ToDecimal(dr0["DoneVolume"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT REKAP OMS Bond";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                        incRowExcel++;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";


                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Tanggal Transaksi";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Settlement Date";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Stock Id";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Stock Name";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Fund";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "Broker";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Type";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "TrxType ID";
                                        worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "Done Price";
                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "Done Volume";
                                        worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 12].Value = "Amount";



                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        int first = incRowExcel;


                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        int no = 1;
                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 1;



                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.TanggalTransaksi;
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.TanggalTransaksi).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SettlementDate;
                                                worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.SettlementDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.StockId;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.StockName;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Broker;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Type; ;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.TrxTypeID;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.DonePrice;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.DoneVolume;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                no++;



                                            }








                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }
                                        _endRowDetail = incRowExcel;
                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 10].Calculate();
                                        //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                        //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 12].Calculate();
                                        //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 13].Calculate();
                                        //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 14].Calculate();
                                        //worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 15].Calculate();
                                        //worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 16].Calculate();
                                        //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 17].Calculate();
                                        //worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 18].Calculate();
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 12, 12];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 13;
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.Column(12).Width = 18;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 History Transaction Bond";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region History Transaction Deposito
            if (_FundAccountingRpt.ReportName.Equals("History Transaction Deposito"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
                            select A.ValueDate PlacementDate,A.MaturityDate MaturityDate,D.ID StockID,D.Name StockName,B.ID Fund,A.TrxTypeID,A.InterestPercent,A.Amount
                            from Investment A
                            Left join Fund B ON A.FundPK = B.Fundpk  and  B.Status in (1,2)
                            left join Counterpart C on A.CounterpartPK = C.CounterpartPK and C.status in (1,2)
                            left join Instrument D on A.InstrumentPK = D.InstrumentPK and D.status in (1,2)
                            left join MasterValue MV on A.BoardType = MV.Code and MV.Status=2 and MV.ID ='BoardType' 
                             where A.ValueDate Between  @ValueDateFrom and @valueDateTo and A.InstrumentTypePK in (5,10) and A.StatusSettlement = 2 
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _FundAccountingRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@valueDateTo", _FundAccountingRpt.ValueDateTo);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "HistoryTransactionDeposito" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "HistoryTransactionDeposito" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "HistoryTransactionDeposito";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("History Transaction Deposito");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<HistoryTransaction> rList = new List<HistoryTransaction>();
                                        while (dr0.Read())
                                        {

                                            HistoryTransaction rSingle = new HistoryTransaction();

                                            rSingle.PlacementDate = dr0["PlacementDate"].ToString();
                                            rSingle.MaturityDate = dr0["MaturityDate"].ToString();
                                            rSingle.StockId = dr0["StockId"].ToString();
                                            rSingle.StockName = dr0["StockName"].ToString();
                                            rSingle.Fund = dr0["Fund"].ToString();
                                            rSingle.TrxTypeID = Convert.ToString(dr0["TrxTypeID"]);
                                            rSingle.InterestPercent = Convert.ToDecimal(dr0["InterestPercent"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "REPORT REKAP OMS Time Deposito";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 15;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;


                                        incRowExcel++;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateFrom;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To : ";
                                        worksheet.Cells[incRowExcel, 2].Value = _FundAccountingRpt.ValueDateTo;
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";


                                        incRowExcel = incRowExcel + 2; ;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Medium;

                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "No";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Placement Date";
                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Maturity Date";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Stock Id";
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Stock Name";
                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Fund";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "TrxType ID";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Interest Percent";
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "Amount";



                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                        int first = incRowExcel;


                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail = 0;
                                        int no = 1;
                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 1;



                                            foreach (var rsDetail in rsHeader)
                                            {
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Medium;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.PlacementDate;
                                                worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(rsDetail.PlacementDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 2].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.MaturityDate;
                                                worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd/MMM/yyyy");
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.StockId;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.StockName;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.TrxTypeID;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.InterestPercent;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                no++;



                                            }








                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;




                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }
                                        _endRowDetail = incRowExcel;
                                        incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 10].Calculate();
                                        //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 11].Calculate();
                                        //worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 12].Calculate();
                                        //worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 13].Calculate();
                                        //worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 14].Calculate();
                                        //worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 15].Calculate();
                                        //worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 16].Calculate();
                                        //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 17].Calculate();
                                        //worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "#,##0.00";
                                        //worksheet.Cells[incRowExcel, 18].Formula = "SUM(R" + _startRowDetail + ":R" + _endRowDetail + ")";
                                        //worksheet.Cells[incRowExcel, 18].Calculate();
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 19].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Merge = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                        //worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;



                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel + 9, 9];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 40;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 20;
                                        worksheet.Column(9).Width = 20;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 History Transaction Deposito";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_FundAccountingRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
			#endregion

			#region Fund Portfolio
			else if (_FundAccountingRpt.ReportName.Equals("Fund Portfolio"))
			{
				try
				{
					DateTime _dateTimeNow = DateTime.Now;
					using (SqlConnection DbCon = new SqlConnection(Tools.conString))
					{
						DbCon.Open();
						using (SqlCommand cmd = DbCon.CreateCommand())
						{
							string _nameSheet = "";
							string _paramFund = "";

							if (!_host.findString(_FundAccountingRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_FundAccountingRpt.FundFrom))
							{
								_paramFund = "And A.FundPK in ( " + _FundAccountingRpt.FundFrom + " ) ";
							}
							else
							{
								_paramFund = "";
							}

							cmd.CommandText =
							@"
                           
                           select distinct A.FundPK FundPK,B.Name NameSheet from FundPosition A
                            left join Fund B on A.FundPK = B.FundPK and B.status  = 2 
                            where A.status in (1,2) and Date = @ValueDate
							order by FundPK
                                              ";


							cmd.CommandTimeout = 0;
							//cmd.Parameters.AddWithValue("@DateFrom", _FundAccountingRpt.ValueDateFrom);
							cmd.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);


							using (SqlDataReader dr0 = cmd.ExecuteReader())
							{
								if (!dr0.HasRows)
								{
									return false;
								}
								else
								{
									string filePath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".xlsx";
									string pdfPath = Tools.ReportsPath + "FundPortfolio" + "_" + _userID + ".pdf";
									FileInfo excelFile = new FileInfo(filePath);
									if (excelFile.Exists)
									{
										excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
										excelFile = new FileInfo(filePath);
									}




									// SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
									using (ExcelPackage package = new ExcelPackage(excelFile))
									{
										package.Workbook.Properties.Title = "PortfolioValuationReport";
										package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
										package.Workbook.Properties.Comments = Tools.DefaultReportComments();
										package.Workbook.Properties.Company = Tools.DefaultReportCompany();
										package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
										package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

										ExcelWorksheet worksheet = null;

										int incRowExcel = 1;



										//ATUR DATA GROUPINGNYA DULU
										List<PortfolioValuationReport> rList = new List<PortfolioValuationReport>();
										while (dr0.Read())
										{
											PortfolioValuationReport rSingle = new PortfolioValuationReport();

											rSingle.NameSheet = Convert.ToString(dr0["NameSheet"]);
											rSingle.FundPK = Convert.ToInt32(dr0["FundPK"]);


											rList.Add(rSingle);

										}

										var GroupByReference =
														from r in rList
														orderby r.FundPK ascending
														group r by new { r.FundPK, r.NameSheet } into rGroup
														select rGroup;


										//int incRowExcel = 0;

										foreach (var rsHeader in GroupByReference)
										{
											worksheet = package.Workbook.Worksheets.Add(rsHeader.Key.NameSheet);

											//query select detail
											incRowExcel = 1;

											using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
											{

												DbCon1.Close();
												DbCon1.Open();
												using (SqlCommand cmd1 = DbCon1.CreateCommand())
												{

													_nameSheet = rsHeader.Key.NameSheet;


													cmd1.CommandText = @" declare @InterestDays int
	   
	   
	   SELECT  
                                @InterestDays = DATEDIFF(DAY, valuedate, @valuedate)  
                                FROM enddaytrails  
                                WHERE enddaytrailspk = (SELECT  
                                MAX(enddaytrailspk)  
                                FROM enddaytrails  
                                WHERE valuedate < @valuedate  
                                AND status = 2)  

                                select FP.FundPK , FP.AvgPrice AvgPrice,FP.Date Date,I.InstrumentTypePK InstrumentTypePK,IT.Name InstrumentTypeName,
                                F.ID FundID,F.Name FundName,I.ID InstrumentID,I.Name InstrumentName,FP.MaturityDate MaturityDate,FP.Balance Balance,FP.CostValue CostValue,  
                                FP.ClosePrice ClosePrice
                                ,Case when IT.Type =3 then M.DescOne else '' end PeriodeActual
                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) / case when @InterestDays = 0 then 1 else  @InterestDays end 
                                else 0 end AccrualHarian
                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) / case when @InterestDays = 0 then 1 else  @InterestDays end 
                                * datediff(day,FP.AcqDate,@ValueDate )
                                else FP.InterestPercent end Accrual
                                ,FP.InterestPercent 
                                ,FP.MarketValue MarketValue,
                                sum(FP.MarketValue - FP.CostValue)Unrealised,case when isnull(CN.AUM,0) = 0 then 0 else isnull(sum((FP.MarketValue / 
                                case when CN.AUM = 0 then 1 else isnull(CN.AUM,1) End) * 100),0) End PercentOfNav , sum(FP.Balance/100) Lot ,case when I.InstrumentTypePK not in (5,6) then  sum((FP.MarketValue - FP.CostValue))/FP.CostValue * 100 else 0 end PercentFR 

                                ,Case when IT.Type =3 then  dbo.[FGetDepositoInterestAccrued](@ValueDate,FP.InstrumentPK,Balance,Fp.InterestDaysType,Fp.InterestPercent,AcqDate) * I.TaxExpensePercent/100
                                else 0 end TaxAccInterest
                                ,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance)
                                else 0 end AccInterestBond
                                ,Case when IT.Type not in (1,3,4,12) then  dbo.[FGetBondInterestAccrued](@ValueDate,FP.InstrumentPK,Balance) * I.TaxExpensePercent/100
                                else 0 end TaxAccInterestBond


                                ,O.SInvestID,O.Name BankName,N.ID BranchID,FP.AcqDate,case when I.InstrumentTypePK in (1,4,16) then I.BloombergIsin when I.InstrumentTypePK in (2,3,8,9,11,13,14,15) then I.ISIN else '' end ISINCode
                                from fundposition FP   
                                left join Instrument I on FP.InstrumentPK = I.InstrumentPK and I.status in (1,2)   
                                left join Fund F on FP.FundPK = F.FundPK and F.status in (1,2)   
                                left join InstrumentType IT on I.InstrumentTypePK = IT.InstrumentTypePK and IT.status in (1,2)  
                                left join CloseNav CN on CN.Date = dbo.FWorkingDay(@ValueDate ,-1) and FP.FundPK = CN.FundPK and CN.status in (1,2)  
                                left join MasterValue  M on FP.InterestPaymentType = M.Code and M.ID = 'InterestPaymentType'
                                left join BankBranch N on FP.BankBranchPK = N.BankBranchPK and N.status in (1,2)
                                left join Bank O on N.BankPK = O.BankPK and O.status in (1,2)
                                where FP.status in (1,2)  and FP.Date = @ValueDate   and F.Name = @NameSheet 
                                group by FP.FundPK,Fp.AvgPrice,FP.Date,I.InstrumentTypePK, FP.AcqDate,I.ID ,I.InstrumentPK,IT.Name,F.ID,F.Name,I.Name ,FP.MaturityDate ,FP.Balance ,FP.CostValue ,  
                                FP.ClosePrice ,FP.InterestPercent ,FP.MarketValue,CN.AUM,IT.Type,FP.InstrumentPK,Fp.InterestDaysType,Fp.InterestPaymentType,Fp.MaturityDate,M.DescOne,O.SInvestID,O.Name,N.ID,FP.AcqDate,I.TaxExpensePercent,
	                            I.BloombergIsin,I.ISIN
                                order by I.ID ";


													cmd1.CommandTimeout = 0;
													cmd1.Parameters.AddWithValue("@ValueDate", _FundAccountingRpt.ValueDateTo);
													cmd1.Parameters.AddWithValue("@NameSheet", rsHeader.Key.NameSheet);


													//set data detail

													using (SqlDataReader dr01 = cmd1.ExecuteReader())
													{
														if (!dr01.HasRows)
														{
															return false;
														}
														else
														{

															//ATUR DATA GROUPINGNYA DULU
															List<PortfolioValuationReport> rList1 = new List<PortfolioValuationReport>();
															while (dr01.Read())
															{
																PortfolioValuationReport rSingle1 = new PortfolioValuationReport();


																rSingle1.SecurityCode = Convert.ToString(dr01["InstrumentID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["InstrumentID"]));
																rSingle1.SecurityDescription = Convert.ToString(dr01["InstrumentName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["InstrumentName"]));
																rSingle1.InstrumentTypeName = Convert.ToString(dr01["InstrumentTypeName"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["InstrumentTypeName"]));
																rSingle1.QtyOfUnit = Convert.ToDecimal(dr01["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["Balance"]));
																rSingle1.Lot = Convert.ToDecimal(dr01["Lot"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["Lot"]));
																rSingle1.AverageCost = Convert.ToDecimal(dr01["AvgPrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["AvgPrice"]));
																rSingle1.BookValue = Convert.ToDecimal(dr01["CostValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["CostValue"]));
																rSingle1.MarketPrice = Convert.ToDecimal(dr01["ClosePrice"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["ClosePrice"]));
																rSingle1.MarketValue = Convert.ToDecimal(dr01["MarketValue"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["MarketValue"]));
																rSingle1.UnrealizedProfitLoss = Convert.ToDecimal(dr01["Unrealised"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["Unrealised"]));
																rSingle1.PercentFR = Convert.ToDecimal(dr01["PercentFR"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["PercentFR"]));
																rSingle1.BICode = Convert.ToString(dr01["SInvestID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["SInvestID"]));
																rSingle1.Branch = Convert.ToString(dr01["BranchID"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["BranchID"]));
																rSingle1.Nominal = Convert.ToDecimal(dr01["Balance"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["Balance"]));
																rSingle1.TradeDate = Convert.ToString(dr01["AcqDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["AcqDate"]));
																rSingle1.MaturityDate = Convert.ToString(dr01["MaturityDate"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["MaturityDate"]));
																rSingle1.RateGross = Convert.ToDecimal(dr01["InterestPercent"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["InterestPercent"]));
																rSingle1.AccIntTD = Convert.ToDecimal(dr01["AccrualHarian"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["AccrualHarian"]));
																rSingle1.FundID = Convert.ToString(dr01["FundID"]);
																rSingle1.FundName = Convert.ToString(dr01["FundName"]);
																rSingle1.InstrumentTypePK = Convert.ToInt32(dr01["InstrumentTypePK"]);
																rSingle1.Date = Convert.ToString(dr01["Date"].Equals(DBNull.Value) == true ? "" : Convert.ToString(dr01["Date"]));
																rSingle1.Fund = Convert.ToString(dr01["FundPK"]);
																rSingle1.ISINCode = Convert.ToString(dr01["ISINCode"]);
																rSingle1.TaxExpensePercent = Convert.ToDecimal(dr01["TaxAccInterest"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["TaxAccInterest"]));
																rSingle1.AccInterestBond = Convert.ToDecimal(dr01["AccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["AccInterestBond"]));
																rSingle1.TaxAccInterestBond = Convert.ToDecimal(dr01["TaxAccInterestBond"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["TaxAccInterestBond"]));
																rSingle1.PercentOfNav = Convert.ToDecimal(dr01["PercentOfNav"].Equals(DBNull.Value) == true ? 0 : Convert.ToDecimal(dr01["PercentOfNav"]));
																rList1.Add(rSingle1);

															}

															var GroupByReference1 =
																			from r1 in rList1
																			orderby r1.FundName ascending
																			group r1 by new { r1.Fund, r1.FundName, r1.InstrumentTypeName, r1.Date, r1.InstrumentTypePK } into r1Group
																			select r1Group;
															//var _fundName = "";
															//int incRowExcel = 0;

															//incRowExcel = incRowExcel + 3;


															int _cash = 0;
															int _endCash = 0;

															foreach (var rsHeader1 in GroupByReference1)
															{



																incRowExcel++;

																worksheet.Column(1).Width = 5;
																worksheet.Column(2).Width = 20;
																worksheet.Column(3).Width = 20;
																worksheet.Column(4).Width = 50;
																worksheet.Column(5).Width = 25;
																worksheet.Column(6).Width = 25;
																worksheet.Column(7).Width = 30;
																worksheet.Column(8).Width = 21;
																worksheet.Column(9).Width = 21;
																worksheet.Column(10).Width = 22;
																worksheet.Column(11).Width = 22;
																worksheet.Column(12).Width = 25;
																worksheet.Column(13).Width = 25;
																worksheet.Column(14).Width = 25;
																string _range = "A" + incRowExcel + ":O" + incRowExcel;

																using (ExcelRange r = worksheet.Cells[_range]) // KALO  KOLOM 1 SAMPE 9 A-I
																{
																	//NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
																	r.Style.Font.Color.SetColor(Tools.DefaultReportColumnHeaderFontColor());
																	//r.Style.HorizontalAlignment = Tools.DefaultReportColumnHeaderHorizontalAlignment();
																	r.Style.Fill.PatternType = ExcelFillStyle.Solid;
																	r.Style.Fill.BackgroundColor.SetColor(Tools.DefaultReportColumnHeaderBackgroundColor());
																	r.Style.Font.Size = 11;
																	//r.Style.Font.Bold = Tools.DefaultReportColumnHeaderFontBold();
																	r.Style.Border.Top.Style = Tools.DefaultReportColumnHeaderBorderTop();
																	r.Style.Border.Bottom.Style = Tools.DefaultReportColumnHeaderBorderBottom();
																}

																incRowExcel++;
																worksheet.Cells[incRowExcel, 1].Value = "FUND : ";
																worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
																worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
																worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundName(rsHeader1.Key.Fund);
																worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
																worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


																_cash = incRowExcel;
																worksheet.Cells[incRowExcel, 5].Value = "CASH AT BANK :";
																worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
																worksheet.Cells[incRowExcel, 6].Value = _host.Get_TotalAccountBalanceByFundPK(rsHeader1.Key.Fund, 2, _FundAccountingRpt.ValueDateFrom);
																worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
																worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

																incRowExcel++;
																worksheet.Cells[incRowExcel, 1].Value = "SINVEST CODE :";
																worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
																worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
																worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundSinvestCode(rsHeader1.Key.Fund);
																worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
																worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


																worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING PAYMENT :";
																worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
																worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingPaymentByFundPKByDate(rsHeader1.Key.Fund, _FundAccountingRpt.ValueDateFrom);
																worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
																worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

																incRowExcel++;
																worksheet.Cells[incRowExcel, 1].Value = "FUND TYPE :";
																worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
																worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
																worksheet.Cells[incRowExcel, 3].Value = _host.Get_FundType(rsHeader1.Key.Fund);
																worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
																worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

																_endCash = incRowExcel;
																worksheet.Cells[incRowExcel, 5].Value = "OUSTANDING RECEIVABLE :";
																worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
																worksheet.Cells[incRowExcel, 6].Value = _host.Get_OutstandingReceivableByFundPKByDate(rsHeader1.Key.Fund, _FundAccountingRpt.ValueDateFrom);
																worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
																worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;



																incRowExcel++;
																worksheet.Cells[incRowExcel, 1].Value = "DATE :";
																worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
																worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
																worksheet.Cells[incRowExcel, 3].Value = Convert.ToDateTime(_FundAccountingRpt.ValueDateFrom).ToString("dd/MMM/yyyy");
																worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd/MMM/yyyy";
																worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
																worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;


																worksheet.Cells[incRowExcel, 5].Value = "CASH PROJECTION :";
																worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
																worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _cash + ":F" + _endCash + ")";
																worksheet.Cells[incRowExcel, 6].Calculate();
																worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
																worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;




																incRowExcel++;

																worksheet.Cells[incRowExcel, 1].Value = "INSTRUMENT TYPE :";
																worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
																worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
																worksheet.Cells[incRowExcel, 3].Value = rsHeader1.Key.InstrumentTypeName;
																worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
																worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

																worksheet.Cells[incRowExcel, 5].Value = "NAV :";
																worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
																worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastNav(rsHeader1.Key.Fund, _FundAccountingRpt.ValueDateFrom);
																worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
																worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

																incRowExcel++;


																worksheet.Cells[incRowExcel, 5].Value = "AUM :";
																worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
																worksheet.Cells[incRowExcel, 6].Value = _host.Get_LastAUMFromCloseNav(rsHeader1.Key.Fund, _FundAccountingRpt.ValueDateFrom);
																worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.0000";
																worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;

																incRowExcel = incRowExcel + 2;

																if (rsHeader1.Key.InstrumentTypePK == 1 || rsHeader1.Key.InstrumentTypePK == 4 || rsHeader1.Key.InstrumentTypePK == 16) //Equity
																{
																	worksheet.Cells[incRowExcel, 1].Value = "No.";
																	worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
																	worksheet.Cells[incRowExcel, 3].Value = "Bloomberg Name";
																	worksheet.Cells[incRowExcel, 4].Value = "Securities Description";
																	worksheet.Cells[incRowExcel, 5].Value = "Qty Of Unit";
																	worksheet.Cells[incRowExcel, 6].Value = "Lot";
																	worksheet.Cells[incRowExcel, 7].Value = "Average Cost";
																	worksheet.Cells[incRowExcel, 8].Value = "Book Value";
																	worksheet.Cells[incRowExcel, 9].Value = "Market Price";
																	worksheet.Cells[incRowExcel, 10].Value = "Market Value";
																	worksheet.Cells[incRowExcel, 11].Value = "Unrealized Profit/(Loss)";
																	worksheet.Cells[incRowExcel, 12].Value = "%fr P/L";
																	worksheet.Cells[incRowExcel, 13].Value = "% of Nav";



																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;

																}

																else if (rsHeader1.Key.InstrumentTypePK == 5) //Deposito
																{
																	worksheet.Cells["A" + incRowExcel + ":J" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

																	worksheet.Cells[incRowExcel, 1].Value = "No";
																	worksheet.Cells[incRowExcel, 2].Value = "TIME DEPOSIT";
																	worksheet.Cells[incRowExcel, 3].Value = "BI CODE";
																	worksheet.Cells[incRowExcel, 4].Value = "BRANCH";
																	worksheet.Cells[incRowExcel, 5].Value = "Nominal";
																	worksheet.Cells[incRowExcel, 6].Value = "Trade Date";
																	worksheet.Cells[incRowExcel, 7].Value = "Maturity Date";
																	worksheet.Cells[incRowExcel, 8].Value = "Tax Accrued Interest";
																	worksheet.Cells[incRowExcel, 9].Value = "Rate (Gross)";
																	worksheet.Cells[incRowExcel, 10].Value = "Acc Int.TD";
																	worksheet.Cells[incRowExcel, 11].Value = "% fr TA";
																	worksheet.Cells[incRowExcel, 12].Value = "% of NAV";

																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;


																}

																else
																{

																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
																	worksheet.Cells[incRowExcel, 1].Value = "No.";
																	worksheet.Cells[incRowExcel, 2].Value = "Securities CODE";
																	worksheet.Cells[incRowExcel, 3].Value = "ISIN";
																	worksheet.Cells[incRowExcel, 4].Value = "Securities Description";
																	worksheet.Cells[incRowExcel, 5].Value = "Qty Of Unit";
																	worksheet.Cells[incRowExcel, 6].Value = "Maturity Date";
																	worksheet.Cells[incRowExcel, 7].Value = "Tax Accrued Interest";
																	worksheet.Cells[incRowExcel, 8].Value = "Accrued Interest";
																	worksheet.Cells[incRowExcel, 9].Value = "Average Cost";
																	worksheet.Cells[incRowExcel, 10].Value = "Book Value";
																	worksheet.Cells[incRowExcel, 11].Value = "Market Price";
																	worksheet.Cells[incRowExcel, 12].Value = "Market Value";
																	worksheet.Cells[incRowExcel, 13].Value = "Unrealized Profit/(Loss)";
																	worksheet.Cells[incRowExcel, 14].Value = "%fr P/L";
																	worksheet.Cells[incRowExcel, 15].Value = "% of NAV";


																	worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
																	worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
																	worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;




																}

																//incRowExcel++;
																//int _startRowDetail = incRowExcel;
																//int _endRowDetail = 0;

																//int _no = 1;

																incRowExcel++;
																int _no = 1;
																int _totalRowDetail = 0;
																int _startRowDetail = incRowExcel;
																int _endRowDetail = 0;




																//end area header
																foreach (var rsDetail in rsHeader1)
																{

																	if (rsHeader1.Key.InstrumentTypePK == 1 || rsHeader1.Key.InstrumentTypePK == 4 || rsHeader1.Key.InstrumentTypePK == 16)
																	{
																		worksheet.Cells[incRowExcel, 1].Value = _no;
																		worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
																		worksheet.Cells[incRowExcel, 3].Value = rsDetail.ISINCode;
																		worksheet.Cells[incRowExcel, 4].Value = rsDetail.SecurityDescription;
																		worksheet.Cells[incRowExcel, 5].Value = rsDetail.QtyOfUnit;
																		worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
																		worksheet.Cells[incRowExcel, 6].Value = rsDetail.Lot;
																		worksheet.Cells[incRowExcel, 7].Value = rsDetail.AverageCost;
																		worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0";
																		worksheet.Cells[incRowExcel, 8].Value = rsDetail.BookValue;
																		worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 9].Value = rsDetail.MarketPrice;
																		worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0";
																		worksheet.Cells[incRowExcel, 10].Value = rsDetail.MarketValue;
																		worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 11].Value = rsDetail.UnrealizedProfitLoss;
																		worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0";
																		worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentFR;
																		worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 13].Value = rsDetail.PercentOfNav;
																		worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";


																		worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;



																	}

																	else if (rsHeader1.Key.InstrumentTypePK == 5)
																	{

																		worksheet.Cells[incRowExcel, 1].Value = _no;
																		worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
																		worksheet.Cells[incRowExcel, 3].Value = rsDetail.BICode;
																		worksheet.Cells[incRowExcel, 4].Value = rsDetail.Branch;
																		worksheet.Cells[incRowExcel, 4].Style.WrapText = true;
																		worksheet.Cells[incRowExcel, 5].Value = rsDetail.Nominal;
																		worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.TradeDate).ToString("dd-MMM-yyyy");
																		worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
																		worksheet.Cells[incRowExcel, 7].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
																		worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

																		worksheet.Cells[incRowExcel, 8].Value = rsDetail.TaxExpensePercent;
																		worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 9].Value = rsDetail.RateGross;
																		worksheet.Cells[incRowExcel, 10].Value = rsDetail.AccIntTD;
																		worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 11].Value = rsDetail.PercentFR;
																		worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 12].Value = rsDetail.PercentOfNav;
																		worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

																		worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
																	}
																	else
																	{
																		worksheet.Cells[incRowExcel, 1].Value = _no;
																		worksheet.Cells[incRowExcel, 2].Value = rsDetail.SecurityCode;
																		worksheet.Cells[incRowExcel, 3].Value = rsDetail.ISINCode;
																		worksheet.Cells[incRowExcel, 4].Value = rsDetail.SecurityDescription;
																		worksheet.Cells[incRowExcel, 5].Value = rsDetail.QtyOfUnit;
																		worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
																		worksheet.Cells[incRowExcel, 6].Value = Convert.ToDateTime(rsDetail.MaturityDate).ToString("dd-MMM-yyyy");
																		worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

																		worksheet.Cells[incRowExcel, 7].Value = rsDetail.TaxAccInterestBond;
																		worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

																		worksheet.Cells[incRowExcel, 8].Value = rsDetail.AccInterestBond;
																		worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

																		worksheet.Cells[incRowExcel, 9].Value = rsDetail.AverageCost;
																		worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
																		worksheet.Cells[incRowExcel, 10].Value = rsDetail.BookValue;
																		worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 11].Value = rsDetail.MarketPrice;
																		worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
																		worksheet.Cells[incRowExcel, 12].Value = rsDetail.MarketValue;
																		worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 13].Value = rsDetail.UnrealizedProfitLoss;
																		worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0";
																		worksheet.Cells[incRowExcel, 14].Value = rsDetail.PercentFR;
																		worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";
																		worksheet.Cells[incRowExcel, 15].Value = rsDetail.PercentOfNav;
																		worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";


																		worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Top.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Bottom.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Left.Style = ExcelBorderStyle.Medium;
																		worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Border.Right.Style = ExcelBorderStyle.Medium;
																	}



																	_endRowDetail = incRowExcel;
																	_no++;
																	incRowExcel++;

																}

																if (rsHeader1.Key.InstrumentTypePK == 1 || rsHeader1.Key.InstrumentTypePK == 4 || rsHeader1.Key.InstrumentTypePK == 16)
																{

																	worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.Font.Bold = true;
																	worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
																	worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
																	worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
																	//worksheet.Cells[incRowExcel, 12].Formula = "K" + _endRowDetail + "/H" + _endRowDetail;
																	worksheet.Cells[incRowExcel, 12].Formula = "=(K" + _totalRowDetail + "/H" + _totalRowDetail + ")" + "*" + 100;
																	worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 5].Calculate();
																	worksheet.Cells[incRowExcel, 8].Calculate();
																	worksheet.Cells[incRowExcel, 10].Calculate();
																	worksheet.Cells[incRowExcel, 11].Calculate();
																	worksheet.Cells[incRowExcel, 12].Calculate();
																	worksheet.Cells[incRowExcel, 13].Calculate();


																}
																else if (rsHeader1.Key.InstrumentTypePK == 5)
																{
																	worksheet.Cells["A" + incRowExcel + ":L" + incRowExcel].Style.Font.Bold = true;
																	worksheet.Cells[incRowExcel, 2].Value = "TOTAL";
																	worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
																	worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 5].Calculate();
																	worksheet.Cells[incRowExcel, 10].Calculate();
																	worksheet.Cells[incRowExcel, 12].Calculate();


																}
																else
																{


																	worksheet.Cells["A" + incRowExcel + ":O" + incRowExcel].Style.Font.Bold = true;
																	worksheet.Cells[incRowExcel, 4].Value = "TOTAL";
																	worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0";
																	worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.00";
																	worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
																	//worksheet.Cells[incRowExcel, 14].Formula = "M" + _endRowDetail + "/J" + _endRowDetail;
																	worksheet.Cells[incRowExcel, 14].Formula = "=(M" + _totalRowDetail + "/J" + _totalRowDetail + ")" + "*" + 100;
																	worksheet.Cells[incRowExcel, 15].Formula = "SUM(O" + _startRowDetail + ":O" + _endRowDetail + ")";
																	worksheet.Cells[incRowExcel, 5].Calculate();
																	worksheet.Cells[incRowExcel, 10].Calculate();
																	worksheet.Cells[incRowExcel, 12].Calculate();
																	worksheet.Cells[incRowExcel, 13].Calculate();
																	worksheet.Cells[incRowExcel, 14].Calculate();
																	worksheet.Cells[incRowExcel, 15].Calculate();



																	//incRowExcel++;
																	//worksheet.Cells[incRowExcel, 1].Value = "KETEK";

																}



																incRowExcel = incRowExcel + 2;




															}
														}
													}
												}
											}
											//---------

											worksheet.Cells[incRowExcel, 1].Value = "TOTAL % OF NAV :";
											worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
											worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
											worksheet.Cells[incRowExcel, 3].Value = _host.Get_TotalPercentOfNAV(_FundAccountingRpt.ValueDateFrom, rsHeader.Key.FundPK);
											worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
											worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;







										}



										worksheet.Row(incRowExcel).PageBreak = true;

										string _rangeDetail = "A1:K";

										using (ExcelRange r = worksheet.Cells[_rangeDetail]) // KALO  KOLOM 1 SAMPE 9 A-I
										{
											//NILAINYA NGAMBIL DARI DEFAULT DI TOOLS, KLO MAU BEDA SENDIRI BOLEH2 AJA.
											r.Style.Font.Size = 11;
											//r.Style.VerticalAlignment = ExcelVerticalAlignment.Center;

										}

										// BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
										worksheet.PrinterSettings.FitToPage = true;
										worksheet.PrinterSettings.FitToWidth = 1;
										worksheet.PrinterSettings.FitToHeight = 0;
										worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 15];

										//worksheet.Column(1).Width = 5;
										//worksheet.Column(2).AutoFit();
										//worksheet.Column(3).Width = 30;
										//worksheet.Column(4).Width = 30;
										//worksheet.Column(5).Width = 20;
										//worksheet.Column(6).AutoFit();
										//worksheet.Column(7).AutoFit();
										//worksheet.Column(8).AutoFit();
										//worksheet.Column(9).AutoFit();
										//worksheet.Column(10).AutoFit();
										//worksheet.Column(11).AutoFit();
										//worksheet.Column(12).AutoFit();
										//worksheet.Column(13).AutoFit();
										//worksheet.Column(14).AutoFit();


										//worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
										//															   // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
										//worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
										//worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
										//worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
										//worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Report Rincian Porfolio Investasi";



										worksheet.HeaderFooter.OddFooter.RightAlignedText =
										string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

										//worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
										worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

										package.Save();
										return true;
									}
								}
							}

						}
					}
				}
				catch (Exception err)
				{
					return false;
					throw err;
				}
			}
			#endregion


			else
			{
                return false;
            }
        }


    }
}