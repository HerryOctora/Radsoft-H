using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data;
using System.Text;
using RFSModel;
using RFSUtility;
using System.Data.SqlClient;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.IO;
using System.Drawing;
using OfficeOpenXml.Drawing;
using System.Data.OleDb;
using RFSRepository;
using OfficeOpenXml.Drawing.Chart;
using System.Xml;

namespace RFSRepositoryThree
{
    public class CustomClient29Reps
    {
        Host _host = new Host();


        public class ReportSummaryAUMbyDistributorJWDSimple
        {
            public string AgentName2 { get; set; }
            public string FundName { get; set; }
            public decimal AUMIDR { get; set; }
            public int Count { get; set; }
        }

        public class ReportNetsubsmonthlyJWDBODRange
        {
            public string ProductCategory { get; set; }
            public string FundName { get; set; }
            public decimal TotalSUB { get; set; }
            public decimal TotalRED { get; set; }
            public decimal TotalNetSubs { get; set; }
        }

        public class ReportNetSubsMonthlybydistributorJWDSimpleRange
        {
            public string ProductCategory { get; set; }
            public string FundName { get; set; }
            public decimal TotalSUB { get; set; }
            public decimal TotalRED { get; set; }
            public decimal TotalNetSubs { get; set; }
        }

        public class SwitchingList
        {
            public string NamaInvestor { get; set; }
            public string SID { get; set; }
            public string IFUA { get; set; }
            public string FundNameFrom { get; set; }
            public string FundNameTo { get; set; }
            public DateTime Tanggal { get; set; }
            public decimal AmountOut { get; set; }
            public decimal AmountIn { get; set; }
            public decimal NAVOut { get; set; }
            public decimal NAVIn { get; set; }
            public decimal UnitOut { get; set; }
            public decimal UnitIn { get; set; }
            public decimal FeePercentOut { get; set; }
            public decimal FeePercentIn { get; set; }
            public decimal FeeAmountOut { get; set; }
            public decimal FeeAmountIn { get; set; }

        }


        public class ReportSummaryAUMbyDistributorJWDNOC
        {
            public string AgentName1 { get; set; }
            public string AgentName2 { get; set; }
            public string FundClientName { get; set; }
            public decimal AUMIDR { get; set; }
            public int Count { get; set; }
        }

        public class ReportSummaryAUMbyDistributorJWD
        {

            public string AgentName1 { get; set; }
            public string AgentName2 { get; set; }
            public string FundClientName { get; set; }
            public string FundName { get; set; }
            public decimal AUMIDR { get; set; }
            public int Count { get; set; }

        }


        public class ReportNetsubsmonthlybydistributorjwdrange
        {
            public string ParentAgentName { get; set; }
            public string AgentName { get; set; }
            public string ClientName { get; set; }
            public string FundName { get; set; }

            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal NetSubscription { get; set; }
        }


        public class InvestorActivity
        {
            public string ClientName { get; set; }
            public string SID { get; set; }
            public string IFUANo { get; set; }
            public string Address { get; set; }
            public string ProductName { get; set; }
            public string TrxCode { get; set; }
            public DateTime TrxDate { get; set; }
            public DateTime SettleDate { get; set; }
            public decimal GrossAmount { get; set; }
            public decimal FeeAmount { get; set; }
            public decimal NetAmount { get; set; }
            public decimal ApproveUnits { get; set; }
            public decimal NAVValue { get; set; }
            public string Remarks { get; set; }
            public int CurrencyPK { get; set; }
            public decimal CurrencyRate { get; set; }
        }

        public class NetMGTFeeByProduct
        {
            public string ProductName { get; set; }
            public decimal OriMgtFee { get; set; }
            public decimal IDRMgtFee { get; set; }
            public decimal ShrFee { get; set; }
            public decimal ShrIDR { get; set; }
            public decimal NetMgtFee { get; set; }
            public decimal MgtFeeContribution { get; set; }
        }

        public class ReportNetMgtFeebyProductDetail
        {
            public string ProductName { get; set; }
            public decimal OriMgtFee { get; set; }
            public decimal IDRMgtFee { get; set; }
            public decimal ShrFee { get; set; }
            public decimal ShrIDR { get; set; }
            public decimal NetMgtFee { get; set; }
            public decimal MgtFeeContribution { get; set; }
        }

        public class ReportWeeklyReportsSubsRedeem
        {
            public string ClientName { get; set; }
            public string ProductCat { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal NetSubscription { get; set; }
        }

        public class ReportNettSubsbyProduct
        {
            public string ClientName { get; set; }
            public string ProductCategory { get; set; }
            public string ProductName { get; set; }
            public decimal Subscription { get; set; }
            public decimal Redemption { get; set; }
            public decimal NetSubscription { get; set; }

            public decimal TotalSUB { get; set; }
            public decimal TotalRED { get; set; }
            public decimal TotalNetSubs { get; set; }
        }


        public class ReportBirthdayInvestor
        {
            public string Name { get; set; }
            public string Company { get; set; }
            public string Jabatan { get; set; }
            public DateTime TanggalUltah { get; set; }
            public string TanggalPengiriman { get; set; }
            public decimal AUM { get; set; }
            public string Cake { get; set; }
            public string AlamatPengiriman { get; set; }
            public string PICSales { get; set; }
        }

        public class AUMBalanceBreakdown
        {
            //public string IDCustomer { get; set; }
            public string Name { get; set; }
            public DateTime RecDate { get; set; }
            public string TypeNasabah { get; set; }
            public decimal NAV { get; set; }
            public decimal Unit { get; set; }
            public string BranchName { get; set; }
            public string NamaAgent { get; set; }
            public string Fund { get; set; }
            public decimal Amount { get; set; }
            public string SInvestFundCode { get; set; }
            public string IFUA { get; set; }
            public string SID { get; set; }
        }

        public class NetAdd
        {
            public string BranchName { get; set; }
            public decimal SubsAndSwitchIn { get; set; }
            public decimal RedAndSwitchOut { get; set; }
            public decimal NetAddTotal { get; set; }
            public decimal Percentage { get; set; }

        }
        public class RedemptionList
        {
            public string NamaInvestor { get; set; }
            public DateTime Tanggal { get; set; }
            public string IFUA { get; set; }
            public string SID { get; set; }
            public string Produk { get; set; }
            public string SInvestFundCode { get; set; }
            public decimal Unit { get; set; }
            public decimal NAV { get; set; }
            public decimal OriginalCurr { get; set; }
            public decimal Kurs { get; set; }
            public decimal NominalIDR { get; set; }
            public string KodeSales { get; set; }
            public string NamaSales { get; set; }
            public string KodeCabang { get; set; }
            public string NamaCabang { get; set; }
            public decimal RedeemFeePercent { get; set; }
            public decimal RedeemFeeAmount { get; set; }
            public DateTime TanggalBayar { get; set; }

        }

        public class SubscriptionList
        {
            public string NamaInvestor { get; set; }
            public DateTime Tanggal { get; set; }
            public string SID { get; set; }
            public string IFUA { get; set; }
            public string Produk { get; set; }
            public string SInvestFundCode { get; set; }
            public decimal Unit { get; set; }
            public decimal NAV { get; set; }
            public decimal OriginalCurr { get; set; }
            public decimal Kurs { get; set; }
            public decimal NominalIDR { get; set; }
            public string KodeSales { get; set; }
            public string NamaSales { get; set; }
            public string KodeCabang { get; set; }
            public string NamaCabang { get; set; }
            public decimal SubsFeePercent { get; set; }
            public decimal SubsFeeAmount { get; set; }
        }

        public class InquiryDataProfileIndividual
        {

            public string SIDNumber { get; set; }
            public string NamaNasabah { get; set; }
            public string StatusNasabah { get; set; }
            public string IFUA { get; set; }
            public string KodeBroker { get; set; }
            public string NamaBroker { get; set; }
            public string ParentAgent { get; set; }
            public string JenisKelamin { get; set; }
            public string StatusPerkawinan { get; set; }
            public string KodeKewarganegaraan { get; set; }
            public string NoID { get; set; }
            public string TglExpiredID { get; set; }
            public string NPWP { get; set; }
            public string JenisNasabah { get; set; }
            public string TipeInvestor { get; set; }
            public string AlamatByID { get; set; }
            public string RTRWByID { get; set; }
            public string KecamatanByID { get; set; }
            public string KotaMadyaByID { get; set; }
            public string ProvinsiByID { get; set; }

            public string KodePosByID { get; set; }
            public string AlamatStay { get; set; }
            public string RTRWStay { get; set; }
            public string KecamatanStay { get; set; }
            public string KotaMadyaStay { get; set; }
            public string ProvinsiStay { get; set; }
            public string NoTelpRumah { get; set; }
            public string KodePosStay { get; set; }
            public string JenisAlamatKorespondensi { get; set; }
            public string AlamatKorespondensi { get; set; }

            public string RTRWKorespondensi { get; set; }
            public string KecamatanKorespondensi { get; set; }
            public string KotaMadyaKorespondensi { get; set; }
            public string ProvinsiKorespondensi { get; set; }
            public string KodePosKorespondensi { get; set; }
            public string NamaKantor { get; set; }
            public string AlamatKantor { get; set; }
            public string RTRWKantor { get; set; }
            public string KecamatanKantor { get; set; }
            public string KotaMadyaKantor { get; set; }

            public string ProvinsiKantor { get; set; }
            public string KodePosKantor { get; set; }
            public string NoTelpKantor { get; set; }
            public string FaxKantor { get; set; }
            public string NoHP { get; set; }
            public string EmailPribadi { get; set; }
            public string EmailKantor { get; set; }
            public string PekerjaanBidangUsaha { get; set; }
            public string Jabatan { get; set; }
            public string Penghasilan { get; set; }

            public string SumberDana { get; set; }
            public string TujuanInvestasi { get; set; }
            public string TglLahir { get; set; }
            public string TempatLahir { get; set; }
            public string Nationality { get; set; }
            public string Pendidikan { get; set; }
            public string Agama { get; set; }
            public string Bank { get; set; }
            public string NoAccountBank { get; set; }
            public string NamaPadaRekening { get; set; }

            public string NamaPasangan { get; set; }
            public string PekerjaanPasangan { get; set; }
            public string PenghasilanPasangan { get; set; }
            public string PerusahaanPasangan { get; set; }
            public string TglPembukaanRekeningInvestasi { get; set; }
            public string ClosingDate { get; set; }
            public string EntryDate { get; set; }
            public string EntryUser { get; set; }
            public string EditDate { get; set; }
            public string EditUser { get; set; }

            public string ApprovedDate { get; set; }
            public string ApprovedUser { get; set; }
        }

        public class ProfileNasabah
        {
            public string InvestorType { get; set; }
            public string InvestorTypeDesc { get; set; }
            public string ClientID { get; set; }
            public string NamaNasabah { get; set; }
            public string JenisKelamin { get; set; }
            public string StatusNasabah { get; set; }
            public string UnitHolderID { get; set; }
            public string SID { get; set; }
            public string KodeBroker { get; set; }
            public string NamaBroker { get; set; }
            public string ParentAgent { get; set; }
            public string NoID { get; set; }

            public string TglExpiredID { get; set; }
            public string NPWP { get; set; }
            public string JenisNasabah { get; set; }
            public string TipeInvestor  { get; set; }
            public string AlamatbyID { get; set; }
            public string KotamadyaByID { get; set; }
            public string ProvinsiByID { get; set; }
            public string KodePosByID { get; set; }
            public string AlamatStay { get; set; }
            public string KotamadyaStay  { get; set; }

            public string ProvinsiStay { get; set; }
            public string NoTelp { get; set; }
            public string KodePosStay { get; set; }
            public string JenisAlamatKorespondensi { get; set; }
            public string AlamatKorespondensi { get; set; }
            public string RTRWKorespondensi { get; set; }
            public string KotamadyaKorespondensi { get; set; }
            public string ProvinsiKorespondensi { get; set; }
            public string KodePosKorespondensi { get; set; }
            public string NamaKantor { get; set; }

            public string AlamatKantor { get; set; }
            public string KotamadyaKantor { get; set; }
            public string ProvinsiKantor { get; set; }
            public string KodePosKantor { get; set; }
            public string NoTelpKantor { get; set; }
            public string FaxKantor { get; set; }
            public string NoHP { get; set; }
            public string EmailPribadi { get; set; }
            public string EmailKantor { get; set; }
            public string PekerjaanBidangUsaha { get; set; }

            public string Jabatan { get; set; }
            public string Penghasilan { get; set; }
            public string SumberDana { get; set; }
            public string TglLahir { get; set; }
            public string TempatLahir { get; set; }
            public string Nationality { get; set; }
            public string Pendidikan { get; set; }
            public string Agama { get; set; }
            public string Bank { get; set; }
            public string NoAccountBank { get; set; }

            public string NamapadaRekening  { get; set; }
            public string TglPembukaanRekeningInvestasi { get; set; }
            public string ClosingDate { get; set; }
            public string EntryDate { get; set; }
            public string EntryUser { get; set; }
            public string EditDate { get; set; }
            public string EditUser { get; set; }
            public string ApproveDate { get; set; }
            public string ApproveUser { get; set; }
            public string NamaPasangan { get; set; }
    
            public string PekerjaanPasangan { get; set; }
            public string PenghasilanPasangan { get; set; }
            public string PerusahaanPasangan { get; set; }
        }

        public class CustomerSaldo
        {
            public string IFUA { get; set; }
            public string InvestorName { get; set; }
            public string ProductName { get; set; }
            public string AgentName { get; set; }
            public decimal Unit { get; set; }
            public decimal NAVperUnit { get; set; }
            public decimal AUMOri { get; set; }
            public decimal AUMIDR { get; set; }
            public string SID { get; set; }
            public string FundID { get; set; }
            public string SInvestFundCode { get; set; }
            
        }

        public class TransactionHistory
        {

            public string SID { get; set; }
            public string IFUA { get; set; }
            public string Name { get; set; }

            public string Product { get; set; }
            public DateTime NAVDate { get; set; }
            public string Transaksi { get; set; }
            public decimal Amount { get; set; }
            public decimal NAV { get; set; }
            public decimal Units { get; set; }
            public decimal Fee { get; set; }
            public decimal BalanceUnit { get; set; }
        }


        public class ReportNetSubsbyProduct
        {
            public string ProductCategory { get; set; }
            public string Product { get; set; }
            public string AgentName { get; set; }
            public decimal Subs { get; set; }
            public decimal Redeem { get; set; }
            public decimal NetSubs { get; set; }
        }

        public class ReportCustomerDetail
        {
            public int FundClientPK { get; set; }
            public string CustomerType { get; set; }
            public string CIF { get; set; }
            public string FirstName { get; set; }
            public string MidleName { get; set; }
            public string LastName { get; set; }
            public string DateofOpeningAccount { get; set; }
            public string IdentificationType { get; set; }
            public string IdentificationNumber { get; set; }
            public string ExpiredID { get; set; }
            public string NPWP { get; set; }
            public string PlaceOfBirth { get; set; }
            public string BirthDate { get; set; }
            public string Gender { get; set; }
            public string MaritalStatus { get; set; }
            public string Citizenship { get; set; }
            public string Nationality { get; set; }
            public string Occupation { get; set; }
            public string EducationLevel { get; set; }
            public string Religion { get; set; }
            public string SourceOfFund { get; set; }
            public string InvestmentPurposes { get; set; }
            public string Income { get; set; }
            public string AddressID { get; set; }
            public string City { get; set; }
            public string PostalCode { get; set; }
            public string CorrespondenceAddress { get; set; }
            public string CorrespondenceCity { get; set; }
            public string CorrespondencePostalCode { get; set; }
            public string SID { get; set; }
            public string NoTelp { get; set; }
            public string NoHP { get; set; }
            public string NoFax { get; set; }
            public string Email { get; set; }
            public string MothersName { get; set; }
            public string SpouseName { get; set; }
            public string HeirsName { get; set; }
            public string BankName { get; set; }
            public string BranchName { get; set; }
            public string BankCurrency { get; set; }
            public string BankType { get; set; }
            public string BankAccNo { get; set; }
            public string BankAccName { get; set; }
        }

        public class MonthlyStatementPeriodik
        {
            public int FundClientPK { get; set; }
            public string FundClientName { get; set; }
            public string ReksaDanaNiaga { get; set; }
            public decimal NABPerUnitNiaga { get; set; }
            public decimal UnitPenyertaanNiaga { get; set; }
            public decimal NABNiaga { get; set; }

            public string ReksaDanaCIMB { get; set; }
            public string IFUA { get; set; }
            public decimal NABPerUnitCIMB { get; set; }
            public decimal UnitPenyertaanCIMB { get; set; }
            public decimal NABCIMB { get; set; }

            public DateTime Tanggal { get; set; }
            public string Referensi { get; set; }
            public string Keterangan { get; set; }
            public decimal JumlahTransaksi { get; set; }
            public decimal JumlahTransaksiBersih { get; set; }
            public decimal NABPerUnitReksa { get; set; }
            public decimal UnitPenyertaanReksaA { get; set; }
            public decimal UnitPenyertaanReksaB { get; set; }
            public decimal NABReksa { get; set; }
            public string Product { get; set; }


            public string ClientName { get; set; }
            public string ReksadanaName { get; set; }
            public decimal UnitPenyertaan { get; set; }
            public decimal NABPerUnit { get; set; }
            public decimal NABRp { get; set; }
            public decimal BegBalance { get; set; }
            public string Alamat { get; set; }


        }


        public class ReportSummaryAUM
        {
            public string FundType { get; set; }
            public string FundName { get; set; }
            public string AgentLevelOne { get; set; }
            public string AgentSubSales { get; set; }
            public string FundClient { get; set; }
            public decimal Unit { get; set; }
            public decimal AUM { get; set; }
        }

        public class NAVList
        {
            public string ProductName { get; set; }
            public string Code { get; set; }
            public DateTime NAVDate { get; set; }
            public decimal AUM { get; set; }
            public decimal Units { get; set; }
            public decimal NAVperUnit { get; set; }
            public decimal Dividend { get; set; }

        }

        public class DailyNCFPerAssetClass
        {
            public string AssetClass { get; set; }
            public decimal NumberOfFunds { get; set; }
            public decimal AUMBeforeAmount { get; set; }
            public decimal AUMBeforePercent { get; set; }
            public decimal Sales { get; set; }
            public decimal Redemption { get; set; }
            public decimal NCF { get; set; }
            public decimal AUMAfterAmount { get; set; }
            public decimal AUMAfterPercent { get; set; }

        }

        public class DailyNCFReport
        {
            public DateTime Date { get; set; }
            public decimal AUMBefore { get; set; }
            public decimal Sales { get; set; }
            public decimal Redemption { get; set; }
            public decimal AUMAfter { get; set; }
        }

        public Boolean GenerateReportUnitRegistry(string _userID, UnitRegistryRpt _unitRegistryRpt)
        {
            #region Report Investor Activity
            if (_unitRegistryRpt.ReportName.Equals("Investor Activity"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            decimal TotalSubsNetAmountIDR, TotalRedNetAmountIDR, TotalSubsNetAmountUSD, TotalRedNetAmountUSD;

                            TotalSubsNetAmountIDR = 0;
                            TotalRedNetAmountIDR = 0;
                            TotalSubsNetAmountUSD = 0;
                            TotalRedNetAmountUSD = 0;

                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";
                            string _paramFundZ = "";
                            string _paramFundClient = "";
                            string _paramFundClientZ = "";
                            string _paramZeroBalance = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And F.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundZ = "And Z.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundZ = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClientZ = "And Z.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClientZ = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchOut = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                                _statusSwitchIn = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                                _statusRedemp = "  A.Status = 1  ";
                                _statusSwitchOut = "  A.Status = 1  ";
                                _statusSwitchIn = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                                _statusRedemp = "  A.Status = 3  ";
                                _statusSwitchOut = "  A.Status = 3  ";
                                _statusSwitchIn = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                                _statusSwitchOut = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                                _statusSwitchIn = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            if (_unitRegistryRpt.ZeroBalance == true)
                            {
                                //_paramZeroBalance = "  B.UnitBalance >= 0 ";
                                _paramZeroBalance = "  1 = 1 ";
                            }
                            else
                            {
                                _paramZeroBalance = "  B.UnitBalance > 0 ";
                            }



                            cmd.CommandText = @"
	     SELECT A.CurrencyPK,isnull(D.Rate,1) CurrencyRate, FC.Name ClientName, isnull(FC.SID,'') SID, FC.IFUACode IFUANo,FC.AlamatInd1 Address,F.Name ProductName,'SUB' TrxCode,A.ValueDate TrxDate,A.ValueDate SettleDate,A.CashAmount GrossAmount,A.SubscriptionFeeAmount FeeAmount,A.TotalCashAmount NetAmount,A.UnitAmount ApproveUnits,A.NAV NAVValue,A.Description Remarks
	    from ClientSubscription A 
	    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
		left join CurrencyRate D on A.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
        (
	        select max(date) from CurrencyRate where CurrencyPK = A.CurrencyPK and date <= A.ValueDate and status = 2
        )
	    where 
	   " + _statusSubs + _paramFund + _paramFundClient + @" and 
	    valuedate Between @ValueDateFrom and @ValueDateTo and A.Type <> 3


	    UNION ALL   
	            SELECT A.CurrencyPK,isnull(D.Rate,1) CurrencyRate, FC.Name ClientName, isnull(FC.SID,'') SID, FC.IFUACode IFUANo,FC.AlamatInd1 Address,F.Name ProductName,'RED' TrxCode,A.ValueDate TrxDate,A.ValueDate SettleDate,A.CashAmount GrossAmount,A.RedemptionFeeAmount FeeAmount,A.TotalCashAmount NetAmount,A.UnitAmount ApproveUnits,A.NAV NAVValue,A.Description Remarks
	    from ClientRedemption A 
	    left join Fund F on A.FundPK = F.fundPK and f.Status in (1,2)  
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
		left join CurrencyRate D on A.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
        (
	        select max(date) from CurrencyRate where CurrencyPK = A.CurrencyPK and date <= A.ValueDate and status = 2
        )
	    where 
	    " + _statusRedemp + _paramFund + _paramFundClient + @" and 
	    valuedate Between @ValueDateFrom and @ValueDateTo and A.Type <> 3


	    UNION ALL   
	   	            SELECT A.CurrencyPK,isnull(D.Rate,1) CurrencyRate, FC.Name ClientName, isnull(FC.SID,'') SID, FC.IFUACode IFUANo,FC.AlamatInd1 Address,F.Name ProductName,'SWI-IN' TrxCode,A.ValueDate TrxDate,A.ValueDate SettleDate,A.CashAmount GrossAmount,A.SwitchingFeeAmount FeeAmount,A.TotalCashAmountFundFrom NetAmount,A.UnitAmount ApproveUnits,A.NAVFundFrom  NAVValue,A.Description Remarks
	    from ClientSwitching A 
	    left join Fund F on A.FundPKTo  = F.fundPK and f.Status in (1,2)  
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
		left join CurrencyRate D on A.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
        (
	        select max(date) from CurrencyRate where CurrencyPK = A.CurrencyPK and date <= A.ValueDate and status = 2
        )
	    where  
	   " + _statusSwitchOut + _paramFund + _paramFundClient + @" and
	    valuedate Between @ValueDateFrom and @ValueDateTo and A.Type <> 3


	    UNION ALL   
	    SELECT A.CurrencyPK,isnull(D.Rate,1) CurrencyRate, FC.Name ClientName, isnull(FC.SID,'') SID, FC.IFUACode IFUANo,FC.AlamatInd1 Address,F.Name ProductName,'SWI-OUT' TrxCode,A.ValueDate TrxDate,A.ValueDate SettleDate,A.CashAmount GrossAmount,A.SwitchingFeeAmount FeeAmount,A.TotalCashAmountFundTo  NetAmount,A.UnitAmount ApproveUnits,A.NAVFundTo  NAVValue,A.Description Remarks
	    from ClientSwitching A 
	    left join Fund F on A.FundPKFrom  = F.fundPK and f.Status in (1,2)  
	    left join FundClient FC on A.FundClientPK = FC.FundClientPK and fc.Status in (1,2) 
		left join CurrencyRate D on A.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
        (
	        select max(date) from CurrencyRate where CurrencyPK = A.CurrencyPK and date <= A.ValueDate and status = 2
        )
	    where  
	    " + _statusSwitchIn + _paramFund + _paramFundClient + @"  and
	    valuedate Between @ValueDateFrom and @ValueDateTo and A.Type <> 3


";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "InvestorActivity" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "InvestorActivity" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Investor Activity");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InvestorActivity> rList = new List<InvestorActivity>();
                                        while (dr0.Read())
                                        {

                                            InvestorActivity rSingle = new InvestorActivity();
                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUANo = Convert.ToString(dr0["IFUANo"]);
                                            rSingle.Address = Convert.ToString(dr0["Address"]);
                                            rSingle.ProductName = Convert.ToString(dr0["ProductName"]);
                                            rSingle.TrxCode = Convert.ToString(dr0["TrxCode"]);
                                            rSingle.TrxDate = Convert.ToDateTime(dr0["TrxDate"]);
                                            rSingle.SettleDate = Convert.ToDateTime(dr0["SettleDate"]);
                                            rSingle.GrossAmount = Convert.ToDecimal(dr0["GrossAmount"]);
                                            rSingle.FeeAmount = Convert.ToDecimal(dr0["FeeAmount"]);
                                            rSingle.NetAmount = Convert.ToDecimal(dr0["NetAmount"]);
                                            rSingle.ApproveUnits = Convert.ToDecimal(dr0["ApproveUnits"]);
                                            rSingle.NAVValue = Convert.ToDecimal(dr0["NAVValue"]);
                                            rSingle.Remarks = Convert.ToString(dr0["Remarks"]);
                                            rSingle.CurrencyPK = Convert.ToInt32(dr0["CurrencyPK"]);
                                            rSingle.CurrencyRate = Convert.ToDecimal(dr0["CurrencyRate"]);



                                            rList.Add(rSingle);

                                        }




                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ClientName, r.SID, r.IFUANo, r.Address } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Investor Activity";
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " TO " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel++;








                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Client Name";
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.ClientName;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "CIF No";
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.SID;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "IFUA No";
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.IFUANo;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Address";
                                            worksheet.Cells[incRowExcel, 3].Value = " : " + rsHeader.Key.Address;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "NO";
                                            worksheet.Cells[incRowExcel, 2].Value = "Product Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Trx Code";
                                            worksheet.Cells[incRowExcel, 4].Value = "Trx Date";
                                            worksheet.Cells[incRowExcel, 5].Value = "Settle Date";
                                            worksheet.Cells[incRowExcel, 6].Value = "Gross Amount";
                                            worksheet.Cells[incRowExcel, 7].Value = "Fee Amount";
                                            worksheet.Cells[incRowExcel, 8].Value = "Net Amount";
                                            worksheet.Cells[incRowExcel, 9].Value = "Approve Units";
                                            worksheet.Cells[incRowExcel, 10].Value = "NAV Value";
                                            worksheet.Cells[incRowExcel, 11].Value = "Remarks";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ProductName;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TrxCode;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TrxDate;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SettleDate;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.GrossAmount;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.FeeAmount;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                if (rsDetail.TrxCode == "SUB" && rsDetail.CurrencyPK == 1)
                                                {
                                                    TotalSubsNetAmountIDR = TotalSubsNetAmountIDR + rsDetail.NetAmount;
                                                }
                                                else if (rsDetail.TrxCode == "SUB" && rsDetail.CurrencyPK == 2)
                                                {
                                                    TotalSubsNetAmountUSD = TotalSubsNetAmountUSD + (rsDetail.NetAmount * rsDetail.CurrencyRate);
                                                }
                                                else if (rsDetail.TrxCode == "RED" && rsDetail.CurrencyPK == 1)
                                                {
                                                    TotalRedNetAmountIDR = TotalRedNetAmountIDR + rsDetail.NetAmount;
                                                }
                                                else
                                                {
                                                    TotalRedNetAmountUSD = TotalRedNetAmountUSD + (rsDetail.NetAmount * rsDetail.CurrencyRate);
                                                }



                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.ApproveUnits;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NAVValue;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Remarks;
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total Amount Subscription IDR";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 3].Value = TotalSubsNetAmountIDR;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 6].Value = "Total Amount Subscription USD";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = TotalSubsNetAmountUSD;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total Amount Redemption IDR";
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 3].Value = TotalRedNetAmountIDR;
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 6].Value = "Total Amount Redemption USD";
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Value = TotalRedNetAmountUSD;
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 5].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 55;
                                        worksheet.Column(3).Width = 18;
                                        worksheet.Column(4).Width = 12;
                                        worksheet.Column(5).Width = 12;
                                        worksheet.Column(6).Width = 18;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 18;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 30;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Investor Activity";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Net MGT Fee By Product
            if (_unitRegistryRpt.ReportName.Equals("Net MGT Fee By Product"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            



                            cmd.CommandText = @"
                        select 'Product Name' ProductName, 0 OriMgtFee, 0 IDRMgtFee, 0 ShrFee,0 ShrIDR, 0 NetMgtFee, 0 MgtFeeContribution
union all
select 'Product Name' ProductName, 0 OriMgtFee, 0 IDRMgtFee, 0 ShrFee,0 ShrIDR, 0 NetMgtFee, 0 MgtFeeContribution
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NetMGTFeeByProduct" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NetMGTFeeByProduct" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Net MGT Fee By Product");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NetMGTFeeByProduct> rList = new List<NetMGTFeeByProduct>();
                                        while (dr0.Read())
                                        {

                                            NetMGTFeeByProduct rSingle = new NetMGTFeeByProduct();
                                            rSingle.ProductName = Convert.ToString(dr0["ProductName"]);
                                            rSingle.OriMgtFee = Convert.ToDecimal(dr0["OriMgtFee"]);
                                            rSingle.IDRMgtFee = Convert.ToDecimal(dr0["IDRMgtFee"]);
                                            rSingle.ShrFee = Convert.ToDecimal(dr0["ShrFee"]);
                                            rSingle.ShrIDR = Convert.ToDecimal(dr0["ShrIDR"]);
                                            rSingle.NetMgtFee = Convert.ToDecimal(dr0["NetMgtFee"]);
                                            rSingle.MgtFeeContribution = Convert.ToDecimal(dr0["MgtFeeContribution"]);





                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Report Net MGT Fee By Product";
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 20;
                                        
                                        incRowExcel = incRowExcel + 2;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "MgtFeePeriod : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " TO " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["I" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells["I" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 9].Value = "ShrFeePeriod : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " TO " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["I" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells["I" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                        incRowExcel = incRowExcel + 2;

                                       
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Product Name";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Ori Mgt Fee";
                                        worksheet.Cells[incRowExcel, 5].Value = "IDR Mgt Fee";
                                        worksheet.Cells[incRowExcel, 6].Value = "Shr Fee";
                                        worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Shr IDR";
                                        worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 10].Value = "Net Mgt Fee";
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 12].Value = "(%) MgtFee Contribution";

                                        worksheet.Row(incRowExcel).Height = 24;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGray);









                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ProductName;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                             

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.OriMgtFee;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.IDRMgtFee;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.ShrFee;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                           


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.ShrIDR;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;


                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NetMgtFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.MgtFeeContribution;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0%";

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4 , incRowExcel, 12].Calculate();
                                            //int last = incRowExcel - 1;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 10;
                                        worksheet.Column(3).Width = 10;
                                        worksheet.Column(4).Width = 12;
                                        worksheet.Column(5).Width = 12;
                                        worksheet.Column(6).Width = 8;
                                        worksheet.Column(7).Width = 8;
                                        worksheet.Column(8).Width = 8;
                                        worksheet.Column(9).Width = 8;
                                        worksheet.Column(10).Width = 8;
                                        worksheet.Column(11).Width = 8;
                                        worksheet.Column(12).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Net MGT Fee By Product";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report NetMgtFee by Product Detail
            if (_unitRegistryRpt.ReportName.Equals("Report NetMgtFee by Product Detail"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
                            select 'Sample' ProductName, 2000000 OriMgtFee,1000000 IDRMgtFee,900000 ShrFee, 800000 ShrIDR,700000 NetMgtFee,0.0800 MgtFeeContribution
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNetMgtFeebyProductDetail" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNetMgtFeebyProductDetail" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Net Management Fee by Product Detail");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNetMgtFeebyProductDetail> rList = new List<ReportNetMgtFeebyProductDetail>();
                                        while (dr0.Read())
                                        {

                                            ReportNetMgtFeebyProductDetail rSingle = new ReportNetMgtFeebyProductDetail();

                                            rSingle.ProductName = Convert.ToString(dr0["ProductName"]);
                                            rSingle.OriMgtFee = Convert.ToDecimal(dr0["OriMgtFee"]);
                                            rSingle.IDRMgtFee = Convert.ToDecimal(dr0["IDRMgtFee"]);
                                            rSingle.ShrFee = Convert.ToDecimal(dr0["ShrFee"]);
                                            rSingle.ShrIDR = Convert.ToDecimal(dr0["ShrIDR"]);
                                            rSingle.NetMgtFee = Convert.ToDecimal(dr0["NetMgtFee"]);
                                            rSingle.MgtFeeContribution = Convert.ToDecimal(dr0["MgtFeeContribution"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "rpt_NetMgtFee_byProduct_Detail";
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":M" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 5].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " TO " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        //worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        //worksheet.Cells["E" + incRowExcel + ":G" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel++;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 2;



                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Product Name";
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 9].Value = "Ori Mgt Fee";
                                            worksheet.Cells[incRowExcel, 10].Value = "IDR Mgt Fee";
                                            worksheet.Cells[incRowExcel, 11].Value = "Shr Fee";
                                            worksheet.Cells[incRowExcel, 12].Value = "Shr IDR";
                                            worksheet.Cells[incRowExcel, 13].Value = "Net Mgt Fee";
                                            worksheet.Cells[incRowExcel, 14].Value = "MgtFee Contribution";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 14].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 14].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ProductName;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.OriMgtFee;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.IDRMgtFee;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.ShrFee;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.ShrIDR;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.NetMgtFee;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.MgtFeeContribution;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "0.00%";
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 14].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 10].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 10].Calculate();

                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Calculate();

                                            worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 13].Formula = "SUM(M" + _startRowDetail + ":M" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 13].Calculate();


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 14];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).Width = 20;
                                        worksheet.Column(10).Width = 20;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 20;
                                        worksheet.Column(13).Width = 20;
                                        worksheet.Column(14).Width = 20;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Net Management Fee by Product Detail";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Weekly Reports SubsRedeem
            if (_unitRegistryRpt.ReportName.Equals("Report Weekly Reports SubsRedeem"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
create table #TempNetSubs
(
	FundClientPK int,
	AgentPK int, 
	SUB numeric (18,2),
	RED numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,AgentPK)
select distinct A.FundClientPK,B.SellingAgentPK From (
Select distinct FundClientPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
Left Join FundClient B on A.FundClientPK = B.FundClientPK where Status in(1,2)





Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

select C.Name ProductCat,B.Name ClientName,SUB Subscription, RED Redemption, RED-SUB NetSubscription From #TempNetSubs A
Left Join  FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
Left Join  Agent C on A.AgentPK = C.AgentPK and C.Status in (1,2)
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportWeeklyReportsSubsRedeem" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportWeeklyReportsSubsRedeem" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Weekly Reports SubsRedeem");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportWeeklyReportsSubsRedeem> rList = new List<ReportWeeklyReportsSubsRedeem>();
                                        while (dr0.Read())
                                        {

                                            ReportWeeklyReportsSubsRedeem rSingle = new ReportWeeklyReportsSubsRedeem();

                                            rSingle.ClientName = Convert.ToString(dr0["ClientName"]);
                                            rSingle.ProductCat = Convert.ToString(dr0["ProductCat"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["Subscription"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["Redemption"]);
                                            rSingle.NetSubscription = Convert.ToDecimal(dr0["NetSubscription"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ProductCat } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        int rowstart = 0;
                                        int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "rpt_NetSbs_Weekly_Detail";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Product Cat";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "SUBS";
                                        worksheet.Cells[incRowExcel, 4].Value = "REDEEM";
                                        worksheet.Cells[incRowExcel, 5].Value = "Net Subs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ProductCat;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);


                                            //int first = incRowExcel;

                                            //int no = 1;
                                            //int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            rowstart = incRowExcel + 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.ClientName;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Subscription;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalsubs = totalsubs + rsDetail.Subscription;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalredemp = totalredemp + rsDetail.Redemption;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NetSubscription;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalnetsubs = totalnetsubs + rsDetail.NetSubscription;



                                                //no++;
                                                //_endRowDetail = incRowExcel;
                                                rowend = incRowExcel;
                                            }


                                            worksheet.Cells[rowheader, 3].Formula = "SUM(C" + rowstart + ":C" + rowend + ")";
                                            worksheet.Cells[rowheader, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 3].Calculate();

                                            worksheet.Cells[rowheader, 4].Formula = "SUM(D" + rowstart + ":D" + rowend + ")";
                                            worksheet.Cells[rowheader, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 4].Calculate();

                                            worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                            worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 5].Calculate();
                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 2].Calculate();

                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 3].Calculate();

                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();


                                            //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 4].Value = totalredemp;
                                        worksheet.Cells[incRowExcel, 5].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Weekly Reports SubsRedeem";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Birthday Investor
            if (_unitRegistryRpt.ReportName.Equals("Report Birthday Investor"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
                            select 'Sample - Bp. Rakhmat Nugroho' Name, 'Dana Pensiun BTN' Company,'Direktur' Jabatan,'5/5/2020' TanggalUltah, 'Tanggal Ultah' TanggalPengiriman,
                            700000 AUM,'Cookies' Cake,'Apartement Marbela Kemang, Jl. Bangka Raya No. 45 A - Jakarta Selatan, 12730' AlamatPengiriman, 'Pipit'PICSales
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportBirthdayInvestor" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportBirthdayInvestor" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Birthday Investor");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportBirthdayInvestor> rList = new List<ReportBirthdayInvestor>();
                                        while (dr0.Read())
                                        {

                                            ReportBirthdayInvestor rSingle = new ReportBirthdayInvestor();

                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.Company = Convert.ToString(dr0["Company"]);
                                            rSingle.Jabatan = Convert.ToString(dr0["Jabatan"]);
                                            rSingle.TanggalUltah = Convert.ToDateTime(dr0["TanggalUltah"]);
                                            rSingle.TanggalPengiriman = Convert.ToString(dr0["TanggalPengiriman"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Cake = Convert.ToString(dr0["Cake"]);
                                            rSingle.AlamatPengiriman = Convert.ToString(dr0["AlamatPengiriman"]);
                                            rSingle.PICSales = Convert.ToString(dr0["PICSales"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Insti Client Birthday List";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 2].Value = "Date From : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " - Date TO " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells["B" + incRowExcel + ":B" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel++;


                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel = incRowExcel + 2;


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;


                                            worksheet.Row(RowB).Height = 30;
                                            worksheet.Row(RowG).Height = 60;

                                            worksheet.Cells[RowB, 1, RowB, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowG, 1, RowG, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "NAMA";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "COMPANY";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "JABATAN";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "TANGGAL ULTAH";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "TANGGAL PENGIRIMAN";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowB].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowB].Style.WrapText = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;


                                            worksheet.Cells[RowG, 5].Value = "*jika tanggal pengiriman cake/tumpeng berbeda dari tanggal ultah";
                                            worksheet.Cells[RowG, 5].Style.Font.Italic = true;
                                            worksheet.Cells["E" + RowG + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowG + ":E" + RowG].Style.WrapText = true;
                                            worksheet.Cells["E" + RowG + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowG + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "CAKE/TUMPENG";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "ALAMAT PENGIRIMAN";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowB].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowB].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowB].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[RowG, 8].Value = "*jika dikirim ke kantor, cukup tulis (Wisma GKBI)";
                                            worksheet.Cells[RowG, 8].Style.Font.Italic = true;
                                            worksheet.Cells["H" + RowG + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowG + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowG + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "PIC Sales";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            incRowExcel++;


                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Name;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Company;
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Jabatan;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = Convert.ToDateTime(rsDetail.TanggalUltah).ToString("dd-MMM-yyyy");
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TanggalPengiriman;
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Cake;
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AlamatPengiriman;
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.PICSales;
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 30;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 15;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 30;
                                        worksheet.Column(9).Width = 15;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Birthday Investor";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report AUM Balance Breakdown
            if (_unitRegistryRpt.ReportName.Equals("AUM Balance Breakdown"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {




                            cmd.CommandText = @"
--Declare @Date datetime
--set @Date = '05/20/2020'

--DROP TABLE #FCP
--DROP TABLE #CloseNAV

-----------------------------------------------------------


Declare @DateMinOne datetime
set @DateMinOne = dbo.FWorkingDay(@Date,-1)

CREATE TABLE #FCP
(
	Date datetime,
	FundPK int,
	FundClientPK int,
	UnitAmount numeric(22,8)
)
CREATE CLUSTERED INDEX indx_FCP ON #FCP (FundPK,FundClientPK,UnitAmount);


CREATE TABLE #CloseNAV
(
	Date datetime,
	FundPK int,
	Nav numeric(22,8)
)
CREATE CLUSTERED INDEX indx_CloseNAV ON #CloseNAV (Date,FundPK,Nav);

Insert into #FCP
select Date,FundPK,FundClientPK,UnitAmount from FundClientPosition 
where Date = @DateMinOne and UnitAmount > 0


Insert into #CloseNAV
select Date,FundPK,Nav from CloseNAV 
where Date = @Date and status in (1,2)



select C.Name Name,@Date RecDate,case when C.InvestorType = 1 then 'Individual' else 'Corporate' end TypeNasabah,isnull(F.Nav,0) NAV,
isnull(A.UnitAmount,0) Unit,isnull(E.Name,'') BranchName,D.Name NamaAgent,B.Name Fund,isnull(A.UnitAmount,0) * isnull(F.Nav,0) Amount,
isnull(B.SInvestCode,'') SInvestFundCode, isnull(C.IFUACode,'') IFUA ,isnull(C.SID,'') SID from #FCP A
left join Fund B on A.FundPK = B.FundPK and B.Status in (1,2)
left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
left join Agent D on C.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join Agent E on D.ParentPK = E.AgentPK and E.Status in (1,2)
left join #CloseNAV F on A.FundPK = F.FundPK

                        ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "AUMBalanceBreakdown" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "AUMBalanceBreakdown" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("AUM Balance Breakdown");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<AUMBalanceBreakdown> rList = new List<AUMBalanceBreakdown>();
                                        while (dr0.Read())
                                        {

                                            AUMBalanceBreakdown rSingle = new AUMBalanceBreakdown();
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.RecDate = Convert.ToDateTime(dr0["RecDate"]);
                                            rSingle.TypeNasabah = Convert.ToString(dr0["TypeNasabah"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.BranchName = Convert.ToString(dr0["BranchName"]);
                                            rSingle.NamaAgent = Convert.ToString(dr0["NamaAgent"]);
                                            rSingle.Fund = Convert.ToString(dr0["Fund"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.SInvestFundCode = Convert.ToString(dr0["SInvestFundCode"]);







                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "AUM BALANCE";
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":P" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 3;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "SID";
                                        worksheet.Cells[incRowExcel, 2].Value = "IFUA";
                                        worksheet.Cells[incRowExcel, 3].Value = "Name";
                                        worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 5].Value = "Rec Date";
                                        worksheet.Cells[incRowExcel, 6].Value = "Type Nasabah";
                                        worksheet.Cells[incRowExcel, 7].Value = "NAV";
                                        worksheet.Cells[incRowExcel, 8].Value = "Unit";
                                        worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 10].Value = "Branch Name";
                                        worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;

                                        worksheet.Cells[incRowExcel, 12].Value = "Nama Agent";
                                        worksheet.Cells[incRowExcel, 13].Value = "Fund";
                                        worksheet.Cells[incRowExcel, 14].Value = "Amount";
                                        worksheet.Cells[incRowExcel, 15].Value = "SInvestFundCode";



                                        worksheet.Row(incRowExcel).Height = 24;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Fill.BackgroundColor.SetColor(Color.LightGray);









                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.IFUA;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Name;
                                                worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 3].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.RecDate;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "dd MMM yyyy";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.TypeNasabah;
                                                worksheet.Cells[incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.BranchName;
                                                worksheet.Cells["J" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.NamaAgent;
                                                worksheet.Cells[incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.Fund;
                                                worksheet.Cells[incRowExcel, 13].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.SInvestFundCode;
                                                worksheet.Cells[incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;




                                                //worksheet.Cells[incRowExcel, 14, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 15].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 7].Value = "Total Unit";


                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";


                                            worksheet.Cells[incRowExcel, 13].Value = "Total Unit";
                                            worksheet.Cells[incRowExcel, 14].Formula = "SUM(N" + _startRowDetail + ":N" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 14].Calculate();
                                            worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.00";

                                            worksheet.Cells[incRowExcel, 8, incRowExcel, 14].Style.Font.Bold = true;


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;


                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).Width = 28;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 9;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 13;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 10;
                                        worksheet.Column(8).Width = 11;
                                        worksheet.Column(9).Width = 12;
                                        worksheet.Column(10).Width = 12;
                                        worksheet.Column(11).Width = 14;
                                        worksheet.Column(12).Width = 34;
                                        worksheet.Column(13).Width = 25;
                                        worksheet.Column(14).Width = 17;
                                        worksheet.Column(15).Width = 21;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 AUM Balance Breakdown";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Net Add
            if (_unitRegistryRpt.ReportName.Equals("Net Add"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _paramFundFrom = "";

                            //if (!_host.findString(_CustodianRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_CustodianRpt.FundFrom))
                            //{
                            //    _paramFundFrom = "And A.FundPK  in ( " + _CustodianRpt.FundFrom + " ) ";
                            //}
                            //else
                            //{
                            //    _paramFundFrom = "";
                            //}



                            cmd.CommandText = @"
select 'Branch' BranchName,0 SubsAndSwitchIn,0 RedAndSwitchOut,0 NetAddTotal, 0.1 Percentage
union all
select 'Branch' BranchName,0 SubsAndSwitchIn,0 RedAndSwitchOut,0 NetAddTotal, 0.1 Percentage
 ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NetAdd" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NetAdd" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Net Add");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NetAdd> rList = new List<NetAdd>();
                                        while (dr0.Read())
                                        {

                                            NetAdd rSingle = new NetAdd();
                                            rSingle.BranchName = Convert.ToString(dr0["BranchName"]);
                                            rSingle.SubsAndSwitchIn = Convert.ToDecimal(dr0["SubsAndSwitchIn"]);
                                            rSingle.RedAndSwitchOut = Convert.ToDecimal(dr0["RedAndSwitchOut"]);
                                            rSingle.NetAddTotal = Convert.ToDecimal(dr0["NetAddTotal"]);
                                            rSingle.Percentage = Convert.ToDecimal(dr0["Percentage"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        incRowExcel++;
                                        worksheet.Cells["E" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "NET ADD(PERIODE " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("MM/dd/yyyy")+" s/d "+ Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("MM/dd/yyyy");
                                        worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells["E" + incRowExcel + ":I" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "NO";
                                        worksheet.Cells[incRowExcel, 2].Value = "Branch Name";
                                        worksheet.Cells[incRowExcel, 3].Value = "Subscription & Switch In";
                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 6].Value = "Redemption & Switch Out";
                                        worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Net Add Total";
                                        worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 11].Value = "%";
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Bold = true;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "By Asset Class (Cateogry Product)";
                                        worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;
                                            int _no = 1;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = _no;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.BranchName;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SubsAndSwitchIn;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.RedAndSwitchOut;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NetAddTotal;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;


                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.Percentage;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";
                                                _no++;
                                                _endRowDetail = incRowExcel;
                                                

                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 2].Value = "Total AUM Investor Retail";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                            worksheet.Cells[incRowExcel, 3].Calculate();
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                            
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 6].Calculate();
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 8].Calculate();
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        DbCon.Close();
                                        DbCon.Open();
                                        using (SqlCommand cmd4 = DbCon.CreateCommand())
                                        {


                                            cmd4.CommandText = @"
                                      select 'Branch' BranchName,0 SubsAndSwitchIn,0 RedAndSwitchOut,0 NetAddTotal, 0.1 Percentage
union all
select 'Branch' BranchName,0 SubsAndSwitchIn,0 RedAndSwitchOut,0 NetAddTotal, 0.1 Percentage
                                        ";

                                            cmd4.CommandTimeout = 0;
                                            cmd4.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                            cmd4.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateFrom);

                                            using (SqlDataReader dr1 = cmd4.ExecuteReader())
                                            {
                                                if (!dr1.HasRows)
                                                {
                                                    return false;
                                                }
                                                else
                                                {

                                                    //ATUR DATA GROUPINGNYA DULU
                                                    List<NetAdd> rList1 = new List<NetAdd>();
                                                    while (dr1.Read())
                                                    {

                                                        NetAdd rSingle1 = new NetAdd();
                                                        rSingle1.BranchName = Convert.ToString(dr1["BranchName"]);
                                                        rSingle1.SubsAndSwitchIn = Convert.ToDecimal(dr1["SubsAndSwitchIn"]);
                                                        rSingle1.RedAndSwitchOut = Convert.ToDecimal(dr1["RedAndSwitchOut"]);
                                                        rSingle1.NetAddTotal = Convert.ToDecimal(dr1["NetAddTotal"]);
                                                        rSingle1.Percentage = Convert.ToDecimal(dr1["Percentage"]);


                                                        rList1.Add(rSingle1);

                                                    }



                                                    var GroupByReference1 =
                                                    from r in rList1
                                                    //orderby r.FundName ascending
                                                    group r by new { } into rGroup
                                                    select rGroup;

                                                    incRowExcel = incRowExcel + 3;
                                                    worksheet.Cells[incRowExcel, 1].Value = "By Distribution Channel (Branch)";
                                                    worksheet.Cells["A" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                    foreach (var rsHeader1 in GroupByReference1)
                                                    {



                                                        int _startRowDetail = incRowExcel;
                                                        int _endRowDetail = 0;
                                                        int _no = 1;


                                                        //end area header
                                                        foreach (var rsDetail1 in rsHeader1)
                                                        {

                                                            
                                                            incRowExcel++;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                            worksheet.Cells[incRowExcel, 1].Value = _no;
                                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                            worksheet.Cells[incRowExcel, 2].Value = rsDetail1.BranchName;

                                                            worksheet.Cells[incRowExcel, 3].Value = rsDetail1.SubsAndSwitchIn;
                                                            worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 6].Value = rsDetail1.RedAndSwitchOut;
                                                            worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                            worksheet.Cells[incRowExcel, 8].Value = rsDetail1.NetAddTotal;
                                                            worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                            worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;


                                                            worksheet.Cells[incRowExcel, 11].Value = rsDetail1.Percentage;
                                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";
                                                            _no++;
                                                            _endRowDetail = incRowExcel;



                                                        }

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 2].Value = "Total AUM Investor Retail";
                                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;

                                                        worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0";
                                                        worksheet.Cells[incRowExcel, 3].Calculate();
                                                        worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                                        worksheet.Cells["C" + incRowExcel + ":E" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 6].Calculate();
                                                        worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                                        worksheet.Cells["F" + incRowExcel + ":G" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                                        worksheet.Cells[incRowExcel, 8].Calculate();
                                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                                        worksheet.Cells["H" + incRowExcel + ":J" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                                        worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00%";
                                                        worksheet.Cells[incRowExcel, 11].Calculate();
                                                        worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 11].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                                    }



                                                   


                                                   

                                                    // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                                    worksheet.PrinterSettings.FitToPage = true;
                                                    worksheet.PrinterSettings.FitToWidth = 1;
                                                    worksheet.PrinterSettings.FitToHeight = 0;
                                                    worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                                    worksheet.Column(1).Width = 5;
                                                    worksheet.Column(2).Width = 22;
                                                    worksheet.Column(3).Width = 10;
                                                    worksheet.Column(4).Width = 5;
                                                    worksheet.Column(5).Width = 10;
                                                    worksheet.Column(6).Width = 5;
                                                    worksheet.Column(7).Width = 20;
                                                    worksheet.Column(8).Width = 7;
                                                    worksheet.Column(9).Width = 12;
                                                    worksheet.Column(10).Width = 6;
                                                    worksheet.Column(11).Width = 14;
                                                    //worksheet.Column(10).AutoFit();
                                                    worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                                    // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                                    worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                                    worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                                    worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                                    worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Net Add";



                                                    worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                                    string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                                    //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                                    worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                                }

                                            }
                                        }

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Redemption List
            if (_unitRegistryRpt.ReportName.Equals("Redemption List"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _statusSwitchOut = "";
                            string _statusSwitchIn = "";
                            string _statusRedemp = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And C.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusRedemp = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusRedemp = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusRedemp = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusRedemp = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusRedemp = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusRedemp = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }

                            cmd.CommandText = @"



select B.SellingAgentPK,E.DepartmentPK, C.CurrencyPK, B.Name NamaInvestor,ValueDate Tanggal,isnull(B.SID,'') SID, isnull(B.IFUACode,'') IFUA,C.ID Produk,C.SInvestCode SInvestFundCode ,cast(A.UnitAmount as numeric(18,4)) Unit,A.NAV,
cast(CashAmount as numeric(18,2)) OriginalCurr,isnull(D.Rate,0) Kurs, cast(CashAmount * isnull(D.Rate,1) as numeric(18,2)) NominalIDR, 
isnull(E.ID,'') KodeSales,isnull(E.Name,'') NamaSales,isnull(F.ID,'') KodeCabang,isnull(F.Name,'') NamaCabang,
isnull(A.RedemptionFeePercent,0) RedeemFeePercent, isnull(A.RedemptionFeeAmount,0) RedeemFeeAmount,A.PaymentDate TanggalBayar
 from ClientRedemption A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join CurrencyRate D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
(
	select max(date) from CurrencyRate where CurrencyPK = C.CurrencyPK and date <= A.ValueDate and status = 2
)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2)
left join Department F on E.DepartmentPK = F.DepartmentPK and F.status in (1,2)
where A.Type <> 3 and  A.ValueDate between @Datefrom and @Dateto


union all

select B.SellingAgentPK,E.DepartmentPK, C.CurrencyPK, B.Name NamaInvestor,ValueDate Tanggal,isnull(B.SID,'') SID, isnull(B.IFUACode,'') IFUA,C.ID Produk,C.SInvestCode SInvestFundCode ,cast(A.UnitAmount as numeric(18,4)) Unit,A.NAVFundFrom,
cast(CashAmount as numeric(18,2)) OriginalCurr,isnull(D.Rate,0) Kurs, cast(CashAmount * isnull(D.Rate,1) as numeric(18,2)) NominalIDR, 
isnull(E.ID,'') KodeSales,isnull(E.Name,'') NamaSales,isnull(F.ID,'') KodeCabang,isnull(F.Name,'') NamaCabang,
isnull(A.SwitchingFeePercent,0) RedeemFeePercent, isnull(A.SwitchingFeeAmount,0) RedeemFeeAmount,A.PaymentDate TanggalBayar
 from ClientSwitching A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPKFrom = C.FundPK and C.status in (1,2)
left join CurrencyRate D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
(
	select max(date) from CurrencyRate where CurrencyPK = C.CurrencyPK and date <= A.ValueDate and status = 2
)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2)
left join Department F on E.DepartmentPK = F.DepartmentPK and F.status in (1,2)
where A.Type <> 3 and  A.ValueDate between @Datefrom and @Dateto
and " + _statusRedemp + _paramFund + @"
order by A.ValueDate,B.Name,C.ID


                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Datefrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@Dateto", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "RedemptionList" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "RedemptionList" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("RedemptionList");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<RedemptionList> rList = new List<RedemptionList>();
                                        while (dr0.Read())
                                        {

                                            RedemptionList rSingle = new RedemptionList();

                                            rSingle.NamaInvestor = Convert.ToString(dr0["NamaInvestor"]);
                                            rSingle.Tanggal = Convert.ToDateTime(dr0["Tanggal"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.Produk = Convert.ToString(dr0["Produk"]);
                                            rSingle.SInvestFundCode = Convert.ToString(dr0["SInvestFundCode"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.OriginalCurr = Convert.ToDecimal(dr0["OriginalCurr"]);
                                            rSingle.Kurs = Convert.ToDecimal(dr0["Kurs"]);
                                            rSingle.NominalIDR = Convert.ToDecimal(dr0["NominalIDR"]);
                                            rSingle.KodeSales = Convert.ToString(dr0["KodeSales"]);
                                            rSingle.NamaSales = Convert.ToString(dr0["NamaSales"]);
                                            rSingle.KodeCabang = Convert.ToString(dr0["KodeCabang"]);
                                            rSingle.NamaCabang = Convert.ToString(dr0["NamaCabang"]);
                                            rSingle.RedeemFeePercent = Convert.ToDecimal(dr0["RedeemFeePercent"]);
                                            rSingle.RedeemFeeAmount = Convert.ToDecimal(dr0["RedeemFeeAmount"]);
                                            rSingle.TanggalBayar = Convert.ToDateTime(dr0["TanggalBayar"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Redemption List";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                        worksheet.Cells["A" + incRowExcel + ":R" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 17].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Merge = true;
                                        worksheet.Cells["Q" + incRowExcel + ":R" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                        incRowExcel = incRowExcel + 2;


                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;



                                            worksheet.Cells[RowB, 1, RowG, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Investor";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Tanggal";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "SID";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 5].Value = "Produk";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 6].Value = "SInvestFundCode";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 8].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 9].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":K" + RowB].Merge = true;
                                            worksheet.Cells["I" + RowB + ":K" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 9].Value = "Original Curr";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 10].Value = "Kurs";
                                            worksheet.Cells[RowG, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 11].Value = "Nominal IDR";
                                            worksheet.Cells[RowG, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Sales";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":M" + RowB].Merge = true;
                                            worksheet.Cells["L" + RowB + ":M" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 12].Value = "Kode";
                                            worksheet.Cells[RowG, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 13].Value = "Nama";
                                            worksheet.Cells[RowG, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Cabang";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":O" + RowB].Merge = true;
                                            worksheet.Cells["N" + RowB + ":O" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 14].Value = "Kode";
                                            worksheet.Cells[RowG, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 15].Value = "Nama";
                                            worksheet.Cells[RowG, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = "Redeem Fee";
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                            worksheet.Cells["P" + RowB + ":Q" + RowB].Merge = true;
                                            worksheet.Cells["P" + RowB + ":Q" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 16].Value = "%";
                                            worksheet.Cells[RowG, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 17].Value = "Amount";
                                            worksheet.Cells[RowG, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 18].Value = "Tanggal Bayar";
                                            worksheet.Cells[incRowExcel, 18].Style.Font.Bold = true;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Merge = true;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["R" + RowB + ":R" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            incRowExcel++;


                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 18].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.NamaInvestor;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Tanggal;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SID;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IFUA;
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Produk;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.SInvestFundCode;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.OriginalCurr;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Kurs;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NominalIDR;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.KodeSales;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.NamaSales;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.KodeCabang;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.NamaCabang;
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.RedeemFeePercent / 100;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.RedeemFeeAmount;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.TanggalBayar;
                                                worksheet.Cells[incRowExcel, 18].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 18, incRowExcel, 18].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;




                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 17].Calculate();
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 18];
                                        worksheet.Column(1).Width = 30;
                                        worksheet.Column(2).Width = 12;
                                        worksheet.Column(3).Width = 20;
                                        worksheet.Column(4).Width = 20;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 17;
                                        worksheet.Column(10).Width = 12;
                                        worksheet.Column(11).Width = 21;
                                        worksheet.Column(12).Width = 30;
                                        worksheet.Column(13).Width = 30;
                                        worksheet.Column(14).Width = 12;
                                        worksheet.Column(15).Width = 24;
                                        worksheet.Column(16).Width = 12;
                                        worksheet.Column(17).Width = 16;
                                        worksheet.Column(18).Width = 22;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Redemption List";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Subscription List
            if (_unitRegistryRpt.ReportName.Equals("Subscription List"))
            {
                try
                {

                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And C.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            }

                            cmd.CommandText = @"
select B.SellingAgentPK,E.DepartmentPK, C.CurrencyPK,B.Name NamaInvestor,ValueDate Tanggal,isnull(B.SID,'') SID, isnull(B.IFUACode,'') IFUA,C.ID Produk,C.SInvestCode SInvestFundCode , cast(A.UnitAmount as numeric(18,4)) Unit,A.NAV,
cast(CashAmount as numeric(18,2)) OriginalCurr,isnull(D.Rate,0) Kurs, cast(CashAmount * isnull(D.Rate,1) as numeric(18,2)) NominalIDR, 
isnull(E.ID,'') KodeSales,isnull(E.Name,'') NamaSales,isnull(F.ID,'') KodeCabang,isnull(F.Name,'') NamaCabang,
isnull(A.SubscriptionFeePercent,0) SubsFeePercent, isnull(A.SubscriptionFeeAmount,0) SubsFeeAmount
 from ClientSubscription A 
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)
left join CurrencyRate D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
(
	select max(date) from CurrencyRate where CurrencyPK = C.CurrencyPK and date <= A.ValueDate and status = 2
)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2)
left join Department F on E.DepartmentPK = F.DepartmentPK and F.status in (1,2)
where A.Type <> 3 and  A.ValueDate between @Datefrom and @Dateto    and " + _statusSubs + _paramFund +
@"
  


union all

select B.SellingAgentPK,E.DepartmentPK, C.CurrencyPK,B.Name NamaInvestor,ValueDate Tanggal,isnull(B.SID,'') SID, isnull(B.IFUACode,'') IFUA,C.ID Produk,C.SInvestCode SInvestFundCode , cast(A.UnitAmount as numeric(18,4)) Unit,A.NAVFundTo ,
cast(CashAmount as numeric(18,2)) OriginalCurr,isnull(D.Rate,0) Kurs, cast(CashAmount * isnull(D.Rate,1) as numeric(18,2)) NominalIDR, 
isnull(E.ID,'') KodeSales,isnull(E.Name,'') NamaSales,isnull(F.ID,'') KodeCabang,isnull(F.Name,'') NamaCabang,
isnull(A.SwitchingFeePercent,0) SubsFeePercent, isnull(A.SwitchingFeeAmount,0) SubsFeeAmount
 from ClientSwitching A 
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPKTo  = C.FundPK and C.status in (1,2)
left join CurrencyRate D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
(
	select max(date) from CurrencyRate where CurrencyPK = C.CurrencyPK and date <= A.ValueDate and status = 2
)
left join Agent E on B.SellingAgentPK = E.AgentPK and E.status in (1,2)
left join Department F on E.DepartmentPK = F.DepartmentPK and F.status in (1,2)
where A.Type <> 3 and  A.ValueDate between @Datefrom and @Dateto  
 
   and " + _statusSubs + _paramFund +
@"
order by A.ValueDate,B.Name,C.ID 

";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Datefrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@Dateto", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SubscriptionList" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SubscriptionList" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SubscriptionList");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SubscriptionList> rList = new List<SubscriptionList>();
                                        while (dr0.Read())
                                        {

                                            SubscriptionList rSingle = new SubscriptionList();

                                            rSingle.NamaInvestor = Convert.ToString(dr0["NamaInvestor"]);
                                            rSingle.Tanggal = Convert.ToDateTime(dr0["Tanggal"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.Produk = Convert.ToString(dr0["Produk"]);
                                            rSingle.SInvestFundCode = Convert.ToString(dr0["SInvestFundCode"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.OriginalCurr = Convert.ToDecimal(dr0["OriginalCurr"]);
                                            rSingle.Kurs = Convert.ToDecimal(dr0["Kurs"]);
                                            rSingle.NominalIDR = Convert.ToDecimal(dr0["NominalIDR"]);
                                            rSingle.KodeSales = Convert.ToString(dr0["KodeSales"]);
                                            rSingle.NamaSales = Convert.ToString(dr0["NamaSales"]);
                                            rSingle.KodeCabang = Convert.ToString(dr0["KodeCabang"]);
                                            rSingle.NamaCabang = Convert.ToString(dr0["NamaCabang"]);
                                            rSingle.SubsFeePercent = Convert.ToDecimal(dr0["SubsFeePercent"]);
                                            rSingle.SubsFeeAmount = Convert.ToDecimal(dr0["SubsFeeAmount"]);

                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Subscription List";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Italic = true;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel = incRowExcel + 3;
                                        worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 15].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["O" + incRowExcel + ":Q" + incRowExcel].Merge = true;
                                        worksheet.Cells["O" + incRowExcel + ":Q" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;



                                        incRowExcel = incRowExcel + 2;


                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;



                                            worksheet.Cells[RowB, 1, RowG, 17].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 17].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 17].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 17].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Investor";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "Tanggal";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "SID";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Produk";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "SInvestFundCode";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 9].Value = "Nominal";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":K" + RowB].Merge = true;
                                            worksheet.Cells["I" + RowB + ":K" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 9].Value = "Original Curr";
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 10].Value = "Kurs";
                                            worksheet.Cells[RowG, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 11].Value = "Nominal IDR";
                                            worksheet.Cells[RowG, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Sales";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":M" + RowB].Merge = true;
                                            worksheet.Cells["L" + RowB + ":M" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 12].Value = "Kode";
                                            worksheet.Cells[RowG, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 13].Value = "Nama";
                                            worksheet.Cells[RowG, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Cabang";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":O" + RowB].Merge = true;
                                            worksheet.Cells["N" + RowB + ":O" + RowB].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 14].Value = "Kode";
                                            worksheet.Cells[RowG, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 15].Value = "Nama";
                                            worksheet.Cells[RowG, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = "Subs Fee (%)";
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Merge = true;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 17].Value = "Subs Fee (Amount)";
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Merge = true;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["Q" + RowB + ":Q" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            incRowExcel++;


                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 17].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.NamaInvestor;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Tanggal;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 2, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.SID;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IFUA;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Produk;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.SInvestFundCode;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00000000";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.OriginalCurr;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.Kurs;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NominalIDR;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.KodeSales;
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.NamaSales;
                                                worksheet.Cells[incRowExcel, 13].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.KodeCabang;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.NamaCabang;
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.SubsFeePercent / 100;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.SubsFeeAmount;
                                                worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 17, incRowExcel, 17].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;



                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 11].Calculate();
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 16].Calculate();
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                            worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 17].Calculate();
                                            worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 15];
                                        worksheet.Column(1).Width = 40;
                                        worksheet.Column(2).Width = 12;
                                        worksheet.Column(3).Width = 18;
                                        worksheet.Column(4).Width = 18;
                                        worksheet.Column(5).Width = 21;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;
                                        worksheet.Column(9).Width = 17;
                                        worksheet.Column(10).Width = 12;
                                        worksheet.Column(11).Width = 15;
                                        worksheet.Column(12).Width = 30;
                                        worksheet.Column(13).Width = 30;
                                        worksheet.Column(14).Width = 12;
                                        worksheet.Column(15).Width = 30;
                                        worksheet.Column(16).Width = 14;
                                        worksheet.Column(17).Width = 20;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Subscription List";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Inquiry Data Profile Individual
            if (_unitRegistryRpt.ReportName.Equals("Inquiry Data Profile Individual"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"
                        select		isnull(A.SID,'') SIDNumber ,
            isnull(A.Name,'') NamaNasabah ,
            Case When A.Status = 2 then 'Active' else 'Non Active'end StatusNasabah ,
            isnull(A.IFUACode,'') IFUA ,
            isnull(B.ID,'') KodeBroker ,
            isnull(B.Name,'') NamaBroker ,
            '' ParentAgent ,
            isnull(MV1.DescOne,'') JenisKelamin ,
            isnull(MV2.DescOne,'') StatusPerkawinan ,
            isnull(MV3.DescOne,'') KodeKewarganegaraan ,
            ISNULL(A.NoIdentitasInd1,'')NoID ,
            ISNULL(A.ExpiredDateIdentitasInd1,'') TglExpiredID ,
            ISNULL(A.NPWP,'') NPWP ,
            'INDIVIDU' JenisNasabah ,
            'INDIVIDU' TipeInvestor ,
            ISNULL(A.OtherAlamatInd1,'') AlamatByID ,
            '' RTRWByID ,
            '' KecamatanByID ,
            ISNULL(MV11.DescOne,'') KotaMadyaByID ,
            ISNULL(MV12.DescOne,'') ProvinsiByID ,
    
            ISNULL(A.KodePosInd1,'') KodePosByID ,
            ISNULL(A.AlamatInd2,'') AlamatStay ,
            '' RTRWStay ,
            '' KecamatanStay ,
            ISNULL(MV13.DescOne,'')KotaMadyaStay ,
            ISNULL(MV14.DescOne,'')ProvinsiStay ,
            ISNULL(A.TeleponRumah,'') NoTelpRumah ,
            ISNULL(A.KodePosInd2,'') KodePosStay ,
            'Korespondensi' JenisAlamatKorespondensi ,
            ISNULL(A.AlamatInd1,'')AlamatKorespondensi ,

            '' RTRWKorespondensi ,
            '' KecamatanKorespondensi ,
            ISNULL(MV15.DescOne,'') KotaMadyaKorespondensi ,
            ISNULL(MV16.DescOne,'') ProvinsiKorespondensi ,
            ISNULL(A.KodePosInd1,'') KodePosKorespondensi ,
            '' NamaKantor ,
            ISNULL(A.KodeKotaKantorInd,'') AlamatKantor ,
            '' RTRWKantor ,
            '' KecamatanKantor ,
            ISNULL(A.KodeKotaKantorInd,'') KotaMadyaKantor ,

            ISNULL(A.KodePropinsiKantorInd,'')ProvinsiKantor ,
            ISNULL(A.KodePosKantorInd,'') KodePosKantor ,
            ISNULL(A.TeleponKantor,'') NoTelpKantor ,
            '' FaxKantor ,
            ISNULL(A.TeleponSelular,'') NoHP ,
            ISNULL(A.Email,'') EmailPribadi ,
            ISNULL(A.OtherEmail,'') EmailKantor ,
            ISNULL(MV4.DescOne,'')PekerjaanBidangUsaha ,
            ISNULL(A.JabatanKantor,'') Jabatan ,
            ISNULL(MV5.DescOne,'') Penghasilan ,

            ISNULL(MV6.DescOne,'') SumberDana ,
            ISNULL(MV7.DescOne,'') TujuanInvestasi ,
            ISNULL(A.TanggalLahir,'') TglLahir ,
            ISNULL(A.TempatLahir,'') TempatLahir ,
            ISNULL(MV8.DescOne,'') Nationality ,
            ISNULL(MV9.DescOne,'') Pendidikan ,
            ISNULL(MV10.DescOne,'') Agama ,
            ISNULL(C.Name,'') Bank ,
            ISNULL(A.NomorRekening1,'') NoAccountBank ,
            ISNULL(A.NamaNasabah1,'') NamaPadaRekening ,

            ISNULL(A.Heir,'') NamaPasangan ,
            '' PekerjaanPasangan ,
            '' PenghasilanPasangan ,
            '' PerusahaanPasangan ,
            ISNULL(A.OpeningDateSinvest,'') TglPembukaanRekeningInvestasi ,
            '' ClosingDate ,
            ISNULL(A.EntryTime,'') EntryDate ,
            ISNULL(A.EntryUsersID,'') EntryUser ,
            ISNULL(A.UpdateTime,'') EditDate ,
            ISNULL(A.UpdateUsersID,'') EditUser ,

            ISNULL(A.ApprovedTime,'')ApprovedDate ,
            ISNULL(A.ApprovedUsersID,'') ApprovedUser
From FundClient A
left join MasterValue MV1 on A.JenisKelamin = MV1.Code and MV1.ID = 'Sex' and MV1.status in (1,2)
left join MasterValue MV2 on A.StatusPerkawinan = MV2.Code and MV2.ID = 'MaritalStatus' and MV2.status in (1,2)
left join MasterValue MV3 on A.Negara = MV3.Code and MV3.ID = 'SDICountry' and MV3.status in (1,2)
left join MasterValue MV4 on A.Pekerjaan = MV4.Code and MV4.ID = 'Occupation' and MV4.status in (1,2)
left join MasterValue MV5 on A.PenghasilanInd = MV5.Code and MV5.ID = 'IncomeIND' and MV5.status in (1,2)
left join MasterValue MV6 on A.SumberDanaInd = MV6.Code and MV6.ID = 'IncomeSourIND' and MV6.status in (1,2)
left join MasterValue MV7 on A.MaksudTujuanInd = MV7.Code and MV7.ID = 'InvestmentObjectiveIND' and MV7.status in (1,2)
left join MasterValue MV8 on A.Nationality = MV8.Code and MV8.ID = 'SDICountry' and MV8.status in (1,2)
left join MasterValue MV9 on A.Pendidikan = MV9.Code and MV9.ID = 'EducationalBackground' and MV9.status in (1,2)
left join MasterValue MV10 on A.Agama = MV10.Code and MV10.ID = 'Religion' and MV10.status in (1,2)
left join MasterValue MV11 on A.OtherKodeKotaInd1 = MV11.Code and MV11.ID = 'CityRHB' and MV11.status in (1,2)
left join MasterValue MV12 on A.OtherPropinsiInd1 = MV12.Code and MV12.ID = 'SDIProvince' and MV12.status in (1,2)
left join MasterValue MV13 on A.KodeKotaInd2 = MV13.Code and MV13.ID = 'CityRHB' and MV13.status in (1,2)
left join MasterValue MV14 on A.KodeDomisiliPropinsi = MV14.Code and MV14.ID = 'SDIProvince' and MV14.status in (1,2)
left join MasterValue MV15 on A.KodeKotaInd1 = MV15.Code and MV15.ID = 'CityRHB' and MV15.status in (1,2)
left join MasterValue MV16 on A.Propinsi = MV16.Code and MV16.ID = 'SDIProvince' and MV16.status in (1,2)


left join Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
left join Bank C on A.NamaBank1 = C.BankPK and C.status in (1,2)
where A.status in (2) and A.InvestorType  = 1
order by A.Name 
";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "InquiryDataProfileIndividual" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "InquiryDataProfileIndividual" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Inquiry Data Profile Individual");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<InquiryDataProfileIndividual> rList = new List<InquiryDataProfileIndividual>();
                                        while (dr0.Read())
                                        {

                                            InquiryDataProfileIndividual rSingle = new InquiryDataProfileIndividual();
                                            rSingle.SIDNumber = Convert.ToString(dr0["SIDNumber"]);
                                            rSingle.NamaNasabah = Convert.ToString(dr0["NamaNasabah"]);
                                            rSingle.StatusNasabah = Convert.ToString(dr0["StatusNasabah"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.KodeBroker = Convert.ToString(dr0["KodeBroker"]);
                                            rSingle.NamaBroker = Convert.ToString(dr0["NamaBroker"]);
                                            rSingle.ParentAgent = Convert.ToString(dr0["ParentAgent"]);
                                            rSingle.JenisKelamin = Convert.ToString(dr0["JenisKelamin"]);
                                            rSingle.StatusPerkawinan = Convert.ToString(dr0["StatusPerkawinan"]);
                                            rSingle.KodeKewarganegaraan = Convert.ToString(dr0["KodeKewarganegaraan"]);

                                            rSingle.NoID = Convert.ToString(dr0["NoID"]);
                                            rSingle.TglExpiredID = Convert.ToString(dr0["TglExpiredID"]);
                                            rSingle.NPWP = Convert.ToString(dr0["NPWP"]);
                                            rSingle.JenisNasabah = Convert.ToString(dr0["JenisNasabah"]);
                                            rSingle.TipeInvestor = Convert.ToString(dr0["TipeInvestor"]);
                                            rSingle.AlamatByID = Convert.ToString(dr0["AlamatByID"]);
                                            rSingle.RTRWByID = Convert.ToString(dr0["RTRWByID"]);
                                            rSingle.KecamatanByID = Convert.ToString(dr0["KecamatanByID"]);
                                            rSingle.KotaMadyaByID = Convert.ToString(dr0["KotaMadyaByID"]);
                                            rSingle.ProvinsiByID = Convert.ToString(dr0["ProvinsiByID"]);

                                            rSingle.KodePosByID = Convert.ToString(dr0["KodePosByID"]);
                                            rSingle.AlamatStay = Convert.ToString(dr0["AlamatStay"]);
                                            rSingle.RTRWStay = Convert.ToString(dr0["RTRWStay"]);
                                            rSingle.KecamatanStay = Convert.ToString(dr0["KecamatanStay"]);
                                            rSingle.KotaMadyaStay = Convert.ToString(dr0["KotaMadyaStay"]);
                                            rSingle.ProvinsiStay = Convert.ToString(dr0["ProvinsiStay"]);
                                            rSingle.NoTelpRumah = Convert.ToString(dr0["NoTelpRumah"]);
                                            rSingle.KodePosStay = Convert.ToString(dr0["KodePosStay"]);
                                            rSingle.JenisAlamatKorespondensi = Convert.ToString(dr0["JenisAlamatKorespondensi"]);
                                            rSingle.AlamatKorespondensi = Convert.ToString(dr0["AlamatKorespondensi"]);

                                            rSingle.RTRWKorespondensi = Convert.ToString(dr0["RTRWKorespondensi"]);
                                            rSingle.KecamatanKorespondensi = Convert.ToString(dr0["KecamatanKorespondensi"]);
                                            rSingle.KotaMadyaKorespondensi = Convert.ToString(dr0["KotaMadyaKorespondensi"]);
                                            rSingle.ProvinsiKorespondensi = Convert.ToString(dr0["ProvinsiKorespondensi"]);
                                            rSingle.KodePosKorespondensi = Convert.ToString(dr0["KodePosKorespondensi"]);
                                            rSingle.NamaKantor = Convert.ToString(dr0["NamaKantor"]);
                                            rSingle.AlamatKantor = Convert.ToString(dr0["AlamatKantor"]);
                                            rSingle.RTRWKantor = Convert.ToString(dr0["RTRWKantor"]);
                                            rSingle.KecamatanKantor = Convert.ToString(dr0["KecamatanKantor"]);
                                            rSingle.KotaMadyaKantor = Convert.ToString(dr0["KotaMadyaKantor"]);

                                            rSingle.ProvinsiKantor = Convert.ToString(dr0["ProvinsiKantor"]);
                                            rSingle.KodePosKantor = Convert.ToString(dr0["KodePosKantor"]);
                                            rSingle.NoTelpKantor = Convert.ToString(dr0["NoTelpKantor"]);
                                            rSingle.FaxKantor = Convert.ToString(dr0["FaxKantor"]);
                                            rSingle.NoHP = Convert.ToString(dr0["NoHP"]);
                                            rSingle.EmailPribadi = Convert.ToString(dr0["EmailPribadi"]);
                                            rSingle.EmailKantor = Convert.ToString(dr0["EmailKantor"]);
                                            rSingle.PekerjaanBidangUsaha = Convert.ToString(dr0["PekerjaanBidangUsaha"]);
                                            rSingle.Jabatan = Convert.ToString(dr0["Jabatan"]);
                                            rSingle.Penghasilan = Convert.ToString(dr0["Penghasilan"]);

                                            rSingle.SumberDana = Convert.ToString(dr0["SumberDana"]);
                                            rSingle.TujuanInvestasi = Convert.ToString(dr0["TujuanInvestasi"]);
                                            rSingle.TglLahir = Convert.ToString(dr0["TglLahir"]);
                                            rSingle.TempatLahir = Convert.ToString(dr0["TempatLahir"]);
                                            rSingle.Nationality = Convert.ToString(dr0["Nationality"]);
                                            rSingle.Pendidikan = Convert.ToString(dr0["Pendidikan"]);
                                            rSingle.Agama = Convert.ToString(dr0["Agama"]);
                                            rSingle.Bank = Convert.ToString(dr0["Bank"]);
                                            rSingle.NoAccountBank = Convert.ToString(dr0["NoAccountBank"]);
                                            rSingle.NamaPadaRekening = Convert.ToString(dr0["NamaPadaRekening"]);

                                            rSingle.NamaPasangan = Convert.ToString(dr0["NamaPasangan"]);
                                            rSingle.PekerjaanPasangan = Convert.ToString(dr0["PekerjaanPasangan"]);
                                            rSingle.PenghasilanPasangan = Convert.ToString(dr0["PenghasilanPasangan"]);
                                            rSingle.PerusahaanPasangan = Convert.ToString(dr0["PerusahaanPasangan"]);
                                            rSingle.TglPembukaanRekeningInvestasi = Convert.ToString(dr0["TglPembukaanRekeningInvestasi"]);
                                            rSingle.ClosingDate = Convert.ToString(dr0["ClosingDate"]);
                                            rSingle.EntryDate = Convert.ToString(dr0["EntryDate"]);
                                            rSingle.EntryUser = Convert.ToString(dr0["EntryUser"]);
                                            rSingle.EditDate = Convert.ToString(dr0["EditDate"]);
                                            rSingle.EditUser = Convert.ToString(dr0["EditUser"]);

                                            rSingle.ApprovedDate = Convert.ToString(dr0["ApprovedDate"]);
                                            rSingle.ApprovedUser = Convert.ToString(dr0["ApprovedUser"]);



                                            rList.Add(rSingle);

                                        }




                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;









                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "SID";
                                            worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                            worksheet.Cells[incRowExcel, 3].Value = "Status Nasabah";
                                            worksheet.Cells[incRowExcel, 4].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 5].Value = "Kode Broker";
                                            worksheet.Cells[incRowExcel, 6].Value = "Nama Broker";
                                            worksheet.Cells[incRowExcel, 7].Value = "Parent Agent";
                                            worksheet.Cells[incRowExcel, 8].Value = "Jenis Kelamin";
                                            worksheet.Cells[incRowExcel, 9].Value = "Status Perkawinan";
                                            worksheet.Cells[incRowExcel, 10].Value = "Kode Kewarganegaraan";

                                            worksheet.Cells[incRowExcel, 11].Value = "No ID";
                                            worksheet.Cells[incRowExcel, 12].Value = "Tgl Expired ID";
                                            worksheet.Cells[incRowExcel, 13].Value = "NPWP";
                                            worksheet.Cells[incRowExcel, 14].Value = "Jenis Nasabah";
                                            worksheet.Cells[incRowExcel, 15].Value = "Tipe Investor";
                                            worksheet.Cells[incRowExcel, 16].Value = "Alamat By ID";
                                            worksheet.Cells[incRowExcel, 17].Value = "RT_RWBy ID";
                                            worksheet.Cells[incRowExcel, 18].Value = "Kecamatan By ID";
                                            worksheet.Cells[incRowExcel, 19].Value = "Kota Madya By ID";
                                            worksheet.Cells[incRowExcel, 20].Value = "Privinsi By ID";

                                            worksheet.Cells[incRowExcel, 21].Value = "Kode Pos By ID";
                                            worksheet.Cells[incRowExcel, 22].Value = "Alamat Stay";
                                            worksheet.Cells[incRowExcel, 23].Value = "RT_RW Stay";
                                            worksheet.Cells[incRowExcel, 24].Value = "Kecamatan Stay";
                                            worksheet.Cells[incRowExcel, 25].Value = "Kota Madya Stay";
                                            worksheet.Cells[incRowExcel, 26].Value = "Privinsi Stay";
                                            worksheet.Cells[incRowExcel, 27].Value = "No Telp Rumah";
                                            worksheet.Cells[incRowExcel, 28].Value = "Kode Pos Stay";
                                            worksheet.Cells[incRowExcel, 29].Value = "Jenis Alamat Korespondensi";
                                            worksheet.Cells[incRowExcel, 30].Value = "Alamat Korespondensi";

                                            worksheet.Cells[incRowExcel, 31].Value = "RT_RW Korespondensi";
                                            worksheet.Cells[incRowExcel, 32].Value = "Kecamatan Korespondensi";
                                            worksheet.Cells[incRowExcel, 33].Value = "Kota Madya Korespondensi";
                                            worksheet.Cells[incRowExcel, 34].Value = "Privinsi Korespondensi";
                                            worksheet.Cells[incRowExcel, 35].Value = "Kode Pos Korespondensi";
                                            worksheet.Cells[incRowExcel, 36].Value = "Nama Kantor";
                                            worksheet.Cells[incRowExcel, 37].Value = "Alamat Kantor";
                                            worksheet.Cells[incRowExcel, 38].Value = "RT_RW Kantor";
                                            worksheet.Cells[incRowExcel, 39].Value = "Kecamatan Kantor";
                                            worksheet.Cells[incRowExcel, 40].Value = "Kota Madya Kantor";

                                            worksheet.Cells[incRowExcel, 41].Value = "Provinsi Kantor";
                                            worksheet.Cells[incRowExcel, 42].Value = "Kode Pos Kantor";
                                            worksheet.Cells[incRowExcel, 43].Value = "No Telp Kantor";
                                            worksheet.Cells[incRowExcel, 44].Value = "Fax Kantor";
                                            worksheet.Cells[incRowExcel, 45].Value = "No Hp";
                                            worksheet.Cells[incRowExcel, 46].Value = "Email Pribadi";
                                            worksheet.Cells[incRowExcel, 47].Value = "Email Kantor";
                                            worksheet.Cells[incRowExcel, 48].Value = "Pekerjaan_Bidang Usaha";
                                            worksheet.Cells[incRowExcel, 49].Value = "Jabatan";
                                            worksheet.Cells[incRowExcel, 50].Value = "Penghasilan";

                                            worksheet.Cells[incRowExcel, 51].Value = "Sumber Dana";
                                            worksheet.Cells[incRowExcel, 52].Value = "Tujuan Investasi";
                                            worksheet.Cells[incRowExcel, 53].Value = "Tgl Lahir";
                                            worksheet.Cells[incRowExcel, 54].Value = "Tempat Lahir";
                                            worksheet.Cells[incRowExcel, 55].Value = "Nationality";
                                            worksheet.Cells[incRowExcel, 56].Value = "Pendidikan";
                                            worksheet.Cells[incRowExcel, 57].Value = "Agama";
                                            worksheet.Cells[incRowExcel, 58].Value = "Bank";
                                            worksheet.Cells[incRowExcel, 59].Value = "No Account Bank";
                                            worksheet.Cells[incRowExcel, 60].Value = "Nama Pada Rekening";

                                            worksheet.Cells[incRowExcel, 61].Value = "Nama Pasangan";
                                            worksheet.Cells[incRowExcel, 62].Value = "Pekerjaan Pasangan";
                                            worksheet.Cells[incRowExcel, 63].Value = "Penghasilan Pasangan";
                                            worksheet.Cells[incRowExcel, 64].Value = "Perusahaan Pasangan";
                                            worksheet.Cells[incRowExcel, 65].Value = "Tgl Pembukaan Rekening Investasi";
                                            worksheet.Cells[incRowExcel, 66].Value = "Closing Date";
                                            worksheet.Cells[incRowExcel, 67].Value = "Entry Date";
                                            worksheet.Cells[incRowExcel, 68].Value = "Entry User";
                                            worksheet.Cells[incRowExcel, 69].Value = "Edit Date";
                                            worksheet.Cells[incRowExcel, 70].Value = "Edit User";

                                            worksheet.Cells[incRowExcel, 71].Value = "Approved Date";
                                            worksheet.Cells[incRowExcel, 72].Value = "Approved User";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Fill.BackgroundColor.SetColor(Color.LightGray);



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.SIDNumber;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaNasabah;
                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.StatusNasabah;
                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.IFUA;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.KodeBroker;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NamaBroker;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.ParentAgent;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.JenisKelamin;
                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.StatusPerkawinan;
                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.KodeKewarganegaraan;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.NoID;
                                                worksheet.Cells[incRowExcel, 12].Value = Convert.ToDateTime(rsDetail.TglExpiredID).ToString("dd MMM yyy");


                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.NPWP;
                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.JenisNasabah;
                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.TipeInvestor;
                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.AlamatByID;
                                                worksheet.Cells[incRowExcel, 17].Value = rsDetail.RTRWByID;
                                                worksheet.Cells[incRowExcel, 18].Value = rsDetail.KecamatanByID;
                                                worksheet.Cells[incRowExcel, 19].Value = rsDetail.KotaMadyaByID;
                                                worksheet.Cells[incRowExcel, 20].Value = rsDetail.ProvinsiByID;

                                                worksheet.Cells[incRowExcel, 21].Value = rsDetail.KodePosByID;
                                                worksheet.Cells[incRowExcel, 22].Value = rsDetail.AlamatStay;
                                                worksheet.Cells[incRowExcel, 23].Value = rsDetail.RTRWStay;
                                                worksheet.Cells[incRowExcel, 24].Value = rsDetail.KecamatanStay;
                                                worksheet.Cells[incRowExcel, 25].Value = rsDetail.KotaMadyaStay;
                                                worksheet.Cells[incRowExcel, 26].Value = rsDetail.ProvinsiStay;
                                                worksheet.Cells[incRowExcel, 27].Value = rsDetail.NoTelpRumah;
                                                worksheet.Cells[incRowExcel, 28].Value = rsDetail.KodePosStay;
                                                worksheet.Cells[incRowExcel, 29].Value = rsDetail.JenisAlamatKorespondensi;
                                                worksheet.Cells[incRowExcel, 30].Value = rsDetail.AlamatKorespondensi;

                                                worksheet.Cells[incRowExcel, 31].Value = rsDetail.RTRWKorespondensi;
                                                worksheet.Cells[incRowExcel, 32].Value = rsDetail.KecamatanKorespondensi;
                                                worksheet.Cells[incRowExcel, 33].Value = rsDetail.KotaMadyaKorespondensi;
                                                worksheet.Cells[incRowExcel, 34].Value = rsDetail.ProvinsiKorespondensi;
                                                worksheet.Cells[incRowExcel, 35].Value = rsDetail.KodePosKorespondensi;
                                                worksheet.Cells[incRowExcel, 36].Value = rsDetail.NamaKantor;
                                                worksheet.Cells[incRowExcel, 37].Value = rsDetail.AlamatKantor;
                                                worksheet.Cells[incRowExcel, 38].Value = rsDetail.RTRWKantor;
                                                worksheet.Cells[incRowExcel, 39].Value = rsDetail.KecamatanKantor;
                                                worksheet.Cells[incRowExcel, 40].Value = rsDetail.KotaMadyaKantor;

                                                worksheet.Cells[incRowExcel, 41].Value = rsDetail.ProvinsiKantor;
                                                worksheet.Cells[incRowExcel, 42].Value = rsDetail.KodePosKantor;
                                                worksheet.Cells[incRowExcel, 43].Value = rsDetail.NoTelpKantor;
                                                worksheet.Cells[incRowExcel, 44].Value = rsDetail.FaxKantor;
                                                worksheet.Cells[incRowExcel, 45].Value = rsDetail.NoHP;
                                                worksheet.Cells[incRowExcel, 46].Value = rsDetail.EmailPribadi;
                                                worksheet.Cells[incRowExcel, 47].Value = rsDetail.EmailKantor;
                                                worksheet.Cells[incRowExcel, 48].Value = rsDetail.PekerjaanBidangUsaha;
                                                worksheet.Cells[incRowExcel, 49].Value = rsDetail.Jabatan;
                                                worksheet.Cells[incRowExcel, 50].Value = rsDetail.Penghasilan;

                                                worksheet.Cells[incRowExcel, 51].Value = rsDetail.SumberDana;
                                                worksheet.Cells[incRowExcel, 52].Value = rsDetail.TujuanInvestasi;
                                                worksheet.Cells[incRowExcel, 53].Value = Convert.ToDateTime(rsDetail.TglLahir).ToString("dd MMM yyy");
                                                worksheet.Cells[incRowExcel, 54].Value = rsDetail.TempatLahir;
                                                worksheet.Cells[incRowExcel, 55].Value = rsDetail.Nationality;
                                                worksheet.Cells[incRowExcel, 56].Value = rsDetail.Pendidikan;
                                                worksheet.Cells[incRowExcel, 57].Value = rsDetail.Agama;
                                                worksheet.Cells[incRowExcel, 58].Value = rsDetail.Bank;
                                                worksheet.Cells[incRowExcel, 59].Value = rsDetail.NoAccountBank;
                                                worksheet.Cells[incRowExcel, 60].Value = rsDetail.NamaPadaRekening;

                                                worksheet.Cells[incRowExcel, 61].Value = rsDetail.NamaPasangan;
                                                worksheet.Cells[incRowExcel, 62].Value = rsDetail.PekerjaanPasangan;
                                                worksheet.Cells[incRowExcel, 63].Value = rsDetail.PenghasilanPasangan;
                                                worksheet.Cells[incRowExcel, 64].Value = rsDetail.PerusahaanPasangan;
                                                worksheet.Cells[incRowExcel, 65].Value = Convert.ToDateTime(rsDetail.TglPembukaanRekeningInvestasi).ToString("dd MMM yyy");
                                                worksheet.Cells[incRowExcel, 66].Value = rsDetail.ClosingDate;
                                                worksheet.Cells[incRowExcel, 67].Value = rsDetail.EntryDate;
                                                worksheet.Cells[incRowExcel, 68].Value = rsDetail.EntryUser;
                                                worksheet.Cells[incRowExcel, 69].Value = rsDetail.EditDate;
                                                worksheet.Cells[incRowExcel, 70].Value = rsDetail.EditUser;

                                                worksheet.Cells[incRowExcel, 71].Value = rsDetail.ApprovedDate;
                                                worksheet.Cells[incRowExcel, 72].Value = rsDetail.ApprovedUser;





                                                //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 72].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 11];
                                        //worksheet.Column(1).Width = 5;
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();
                                        worksheet.Column(7).AutoFit();
                                        worksheet.Column(8).AutoFit();
                                        worksheet.Column(9).AutoFit();
                                        worksheet.Column(10).AutoFit();

                                        worksheet.Column(11).AutoFit();
                                        worksheet.Column(12).AutoFit();
                                        worksheet.Column(13).AutoFit();
                                        worksheet.Column(14).AutoFit();
                                        worksheet.Column(15).AutoFit();
                                        worksheet.Column(16).AutoFit();
                                        worksheet.Column(17).AutoFit();
                                        worksheet.Column(18).AutoFit();
                                        worksheet.Column(19).AutoFit();
                                        worksheet.Column(20).AutoFit();

                                        worksheet.Column(21).AutoFit();
                                        worksheet.Column(22).AutoFit();
                                        worksheet.Column(23).AutoFit();
                                        worksheet.Column(24).AutoFit();
                                        worksheet.Column(25).AutoFit();
                                        worksheet.Column(26).AutoFit();
                                        worksheet.Column(27).AutoFit();
                                        worksheet.Column(28).AutoFit();
                                        worksheet.Column(29).AutoFit();
                                        worksheet.Column(30).AutoFit();

                                        worksheet.Column(31).AutoFit();
                                        worksheet.Column(32).AutoFit();
                                        worksheet.Column(33).AutoFit();
                                        worksheet.Column(34).AutoFit();
                                        worksheet.Column(35).AutoFit();
                                        worksheet.Column(36).AutoFit();
                                        worksheet.Column(37).AutoFit();
                                        worksheet.Column(38).AutoFit();
                                        worksheet.Column(39).AutoFit();
                                        worksheet.Column(40).AutoFit();

                                        worksheet.Column(41).AutoFit();
                                        worksheet.Column(42).AutoFit();
                                        worksheet.Column(43).AutoFit();
                                        worksheet.Column(44).AutoFit();
                                        worksheet.Column(45).AutoFit();
                                        worksheet.Column(46).AutoFit();
                                        worksheet.Column(47).AutoFit();
                                        worksheet.Column(48).AutoFit();
                                        worksheet.Column(49).AutoFit();
                                        worksheet.Column(50).AutoFit();

                                        worksheet.Column(51).AutoFit();
                                        worksheet.Column(52).AutoFit();
                                        worksheet.Column(53).AutoFit();
                                        worksheet.Column(54).AutoFit();
                                        worksheet.Column(55).AutoFit();
                                        worksheet.Column(56).AutoFit();
                                        worksheet.Column(57).AutoFit();
                                        worksheet.Column(58).AutoFit();
                                        worksheet.Column(59).AutoFit();
                                        worksheet.Column(60).AutoFit();

                                        worksheet.Column(61).AutoFit();
                                        worksheet.Column(62).AutoFit();
                                        worksheet.Column(63).AutoFit();
                                        worksheet.Column(64).AutoFit();
                                        worksheet.Column(65).AutoFit();
                                        worksheet.Column(66).AutoFit();
                                        worksheet.Column(67).AutoFit();
                                        worksheet.Column(68).AutoFit();
                                        worksheet.Column(69).AutoFit();
                                        worksheet.Column(70).AutoFit();

                                        worksheet.Column(71).AutoFit();
                                        worksheet.Column(72).AutoFit();


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Inquiry Data Profile Individual";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Profile Nasabah
            if (_unitRegistryRpt.ReportName.Equals("Profile Nasabah"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClient = "";


                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }




                            cmd.CommandText = @"
select      ISNULL(A.InvestorType,'') InvestorType ,case when ISNULL(A.InvestorType,'') = '1' then 'Individu' else 'Institusi' end  InvestorTypeDesc,
            ISNULL(A.ID,'') ClientID ,
            ISNULL(A.Name,'') NamaNasabah ,
            ISNULL(MV1.DescOne,'') JenisKelamin ,
             Case When A.Status = 2 then 'Active' else 'Non Active'end StatusNasabah ,
            '' UnitHolderID ,
            ISNULL(A.SID,'') SID ,
            ISNULL(B.ID,'') KodeBroker ,
            ISNULL(B.Name,'') NamaBroker ,
            ISNULL(D.Name,'') ParentAgent ,
            ISNULL(A.NoIdentitasInd1,'') NoID ,

            case when A.IdentitasInd1 = 7 then '12/31/2099' else ISNULL(A.ExpiredDateIdentitasInd1,'1900-01-01') end TglExpiredID ,
            ISNULL(A.NPWP,'') NPWP ,
            'INDIVIDU' JenisNasabah ,
            'INDIVIDU' TipeInvestor  ,
            ISNULL(A.OtherAlamatInd1,'') AlamatbyID ,
            ISNULL(MV11.DescOne,'') KotamadyaByID ,
            ISNULL(MV12.DescOne,'') ProvinsiByID ,
            ISNULL(A.KodePosInd1,'') KodePosByID ,
            ISNULL(A.AlamatInd2,'') AlamatStay ,
            ISNULL(MV13.DescOne,'') KotamadyaStay  ,

            ISNULL(MV14.DescOne,'') ProvinsiStay ,
            ISNULL(A.TeleponRumah,'') NoTelp ,
            ISNULL(A.KodePosInd2,'') KodePosStay ,
            'Korespondensi' JenisAlamatKorespondensi ,
            ISNULL(A.AlamatInd1,'') AlamatKorespondensi ,
            '' RTRWKorespondensi ,
            ISNULL(MV15.DescOne,'') KotamadyaKorespondensi ,
            ISNULL(MV16.DescOne,'') ProvinsiKorespondensi ,
            ISNULL(A.KodePosInd1,'') KodePosKorespondensi ,
            '' NamaKantor ,

            ISNULL(A.KodeKotaKantorInd,'') AlamatKantor ,
            '' KotamadyaKantor ,
            ISNULL(A.KodePropinsiKantorInd,'') ProvinsiKantor ,
            ISNULL(A.KodePosKantorInd,'') KodePosKantor ,
            ISNULL(A.TeleponKantor,'') NoTelpKantor ,
            '' FaxKantor ,
            ISNULL(A.TeleponSelular,'') NoHP ,
            ISNULL(A.Email,'') EmailPribadi ,
            ISNULL(A.OtherEmail,'') EmailKantor ,
            ISNULL(MV4.DescOne,'') PekerjaanBidangUsaha ,

            ISNULL(A.JabatanKantor,'') Jabatan ,
            ISNULL(MV5.DescOne,'') Penghasilan ,
            ISNULL(MV6.DescOne,'') SumberDana ,
            ISNULL(A.TanggalLahir,'1900-01-01') TglLahir ,
            ISNULL(A.TempatLahir,'') TempatLahir ,
            ISNULL(MV8.DescOne,'') Nationality ,
            ISNULL(MV9.DescOne,'') Pendidikan ,
            ISNULL(MV10.DescOne,'') Agama ,
            ISNULL(C.Name,'') Bank ,
            ISNULL(A.NomorRekening1,'') NoAccountBank ,

            ISNULL(A.NamaNasabah1,'') NamapadaRekening  ,
            ISNULL(A.EntryTime,'1900-01-01') TglPembukaanRekeningInvestasi ,
            '' ClosingDate ,
            ISNULL(A.EntryTime,'') EntryDate ,
            ISNULL(A.EntryUsersID,'') EntryUser ,
            ISNULL(A.UpdateTime,'') EditDate ,
            ISNULL(A.UpdateUsersID,'') EditUser ,
            ISNULL(A.ApprovedTime,'') ApproveDate ,
            ISNULL(A.ApprovedUsersID,'') ApproveUser ,
            ISNULL(A.Heir,'') NamaPasangan ,
    
            '' PekerjaanPasangan ,
            '' PenghasilanPasangan ,
            '' PerusahaanPasangan 

From FundClient A
left join Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
left join Bank C on A.NamaBank1 = C.BankPK and C.status in (1,2)
left join Agent D on B.ParentPK = D.AgentPK and D.status in (1,2) 
left join MasterValue MV1 on A.JenisKelamin = MV1.Code and MV1.ID = 'Sex' and MV1.status in (1,2)
left join MasterValue MV4 on A.Pekerjaan = MV4.Code and MV4.ID = 'Occupation' and MV4.status in (1,2)
left join MasterValue MV5 on A.PenghasilanInd = MV5.Code and MV5.ID = 'IncomeIND' and MV5.status in (1,2)
left join MasterValue MV6 on A.SumberDanaInd = MV6.Code and MV6.ID = 'IncomeSourIND' and MV6.status in (1,2)
left join MasterValue MV7 on A.MaksudTujuanInd = MV7.Code and MV7.ID = 'InvestmentObjectiveIND' and MV7.status in (1,2)
left join MasterValue MV8 on A.Nationality = MV8.Code and MV8.ID = 'SDICountry' and MV8.status in (1,2)
left join MasterValue MV9 on A.Pendidikan = MV9.Code and MV9.ID = 'EducationalBackground' and MV9.status in (1,2)
left join MasterValue MV10 on A.Agama = MV10.Code and MV10.ID = 'Religion' and MV10.status in (1,2)
left join MasterValue MV11 on A.OtherKodeKotaInd1 = MV11.Code and MV11.ID = 'CityRHB' and MV11.status in (1,2)
left join MasterValue MV12 on A.OtherPropinsiInd1 = MV12.Code and MV12.ID = 'SDIProvince' and MV12.status in (1,2)
left join MasterValue MV13 on A.KodeKotaInd2 = MV13.Code and MV13.ID = 'CityRHB' and MV13.status in (1,2)
left join MasterValue MV14 on A.KodeDomisiliPropinsi = MV14.Code and MV14.ID = 'SDIProvince' and MV14.status in (1,2)
left join MasterValue MV15 on A.KodeKotaInd1 = MV15.Code and MV15.ID = 'CityRHB' and MV15.status in (1,2)
left join MasterValue MV16 on A.Propinsi = MV16.Code and MV16.ID = 'SDIProvince' and MV16.status in (1,2)
where A.Status in (1,2)  " + _paramFundClient;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ProfileNasabah" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ProfileNasabah" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = null;


                                        int incRowExcel = 0;

                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ProfileNasabah> rList = new List<ProfileNasabah>();
                                        while (dr0.Read())
                                        {

                                            ProfileNasabah rSingle = new ProfileNasabah();
                                            rSingle.InvestorType = Convert.ToString(dr0["InvestorType"]);
                                            rSingle.InvestorTypeDesc = Convert.ToString(dr0["InvestorTypeDesc"]);

                                            rSingle.ClientID = Convert.ToString(dr0["ClientID"]);
                                            rSingle.NamaNasabah = Convert.ToString(dr0["NamaNasabah"]);
                                            rSingle.JenisKelamin = Convert.ToString(dr0["JenisKelamin"]);
                                            rSingle.StatusNasabah = Convert.ToString(dr0["StatusNasabah"]);
                                            rSingle.UnitHolderID = Convert.ToString(dr0["UnitHolderID"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.KodeBroker = Convert.ToString(dr0["KodeBroker"]);
                                            rSingle.NamaBroker = Convert.ToString(dr0["NamaBroker"]);
                                            rSingle.ParentAgent = Convert.ToString(dr0["ParentAgent"]);
                                            rSingle.NoID = Convert.ToString(dr0["NoID"]);

                                            rSingle.TglExpiredID = Convert.ToString(dr0["TglExpiredID"]);
                                            rSingle.NPWP = Convert.ToString(dr0["NPWP"]);
                                            rSingle.JenisNasabah = Convert.ToString(dr0["JenisNasabah"]);
                                            rSingle.TipeInvestor = Convert.ToString(dr0["TipeInvestor"]);
                                            rSingle.AlamatbyID = Convert.ToString(dr0["AlamatbyID"]);
                                            rSingle.KotamadyaByID = Convert.ToString(dr0["KotamadyaByID"]);
                                            rSingle.ProvinsiByID = Convert.ToString(dr0["ProvinsiByID"]);
                                            rSingle.KodePosByID = Convert.ToString(dr0["KodePosByID"]);
                                            rSingle.AlamatStay = Convert.ToString(dr0["AlamatStay"]);
                                            rSingle.KotamadyaStay = Convert.ToString(dr0["KotamadyaStay"]);

                                            rSingle.ProvinsiStay = Convert.ToString(dr0["ProvinsiStay"]);
                                            rSingle.NoTelp = Convert.ToString(dr0["NoTelp"]);
                                            rSingle.KodePosStay = Convert.ToString(dr0["KodePosStay"]);
                                            rSingle.JenisAlamatKorespondensi = Convert.ToString(dr0["JenisAlamatKorespondensi"]);
                                            rSingle.AlamatKorespondensi = Convert.ToString(dr0["AlamatKorespondensi"]);
                                            rSingle.RTRWKorespondensi = Convert.ToString(dr0["RTRWKorespondensi"]);
                                            rSingle.KotamadyaKorespondensi = Convert.ToString(dr0["KotamadyaKorespondensi"]);
                                            rSingle.ProvinsiKorespondensi = Convert.ToString(dr0["ProvinsiKorespondensi"]);
                                            rSingle.KodePosKorespondensi = Convert.ToString(dr0["KodePosKorespondensi"]);
                                            rSingle.NamaKantor = Convert.ToString(dr0["NamaKantor"]);

                                            rSingle.AlamatKantor = Convert.ToString(dr0["AlamatKantor"]);
                                            rSingle.KotamadyaKantor = Convert.ToString(dr0["KotamadyaKantor"]);
                                            rSingle.ProvinsiKantor = Convert.ToString(dr0["ProvinsiKantor"]);
                                            rSingle.KodePosKantor = Convert.ToString(dr0["KodePosKantor"]);
                                            rSingle.NoTelpKantor = Convert.ToString(dr0["NoTelpKantor"]);
                                            rSingle.FaxKantor = Convert.ToString(dr0["FaxKantor"]);
                                            rSingle.NoHP = Convert.ToString(dr0["NoHP"]);
                                            rSingle.EmailPribadi = Convert.ToString(dr0["EmailPribadi"]);
                                            rSingle.EmailKantor = Convert.ToString(dr0["EmailKantor"]);
                                            rSingle.PekerjaanBidangUsaha = Convert.ToString(dr0["PekerjaanBidangUsaha"]);

                                            rSingle.Jabatan = Convert.ToString(dr0["Jabatan"]);
                                            rSingle.Penghasilan = Convert.ToString(dr0["Penghasilan"]);
                                            rSingle.SumberDana = Convert.ToString(dr0["SumberDana"]);
                                            rSingle.TglLahir = Convert.ToString(dr0["TglLahir"]);
                                            rSingle.TempatLahir = Convert.ToString(dr0["TempatLahir"]);
                                            rSingle.Nationality = Convert.ToString(dr0["Nationality"]);
                                            rSingle.Pendidikan = Convert.ToString(dr0["Pendidikan"]);
                                            rSingle.Agama = Convert.ToString(dr0["Agama"]);
                                            rSingle.Bank = Convert.ToString(dr0["Bank"]);
                                            rSingle.NoAccountBank = Convert.ToString(dr0["NoAccountBank"]);

                                            rSingle.NamapadaRekening = Convert.ToString(dr0["NamapadaRekening"]);
                                            rSingle.TglPembukaanRekeningInvestasi = Convert.ToString(dr0["TglPembukaanRekeningInvestasi"]);
                                            rSingle.ClosingDate = Convert.ToString(dr0["ClosingDate"]);
                                            rSingle.EntryDate = Convert.ToString(dr0["EntryDate"]);
                                            rSingle.EntryUser = Convert.ToString(dr0["EntryUser"]);
                                            rSingle.EditDate = Convert.ToString(dr0["EditDate"]);
                                            rSingle.EditUser = Convert.ToString(dr0["EditUser"]);
                                            rSingle.ApproveDate = Convert.ToString(dr0["ApproveDate"]);
                                            rSingle.ApproveUser = Convert.ToString(dr0["ApproveUser"]);
                                            rSingle.NamaPasangan = Convert.ToString(dr0["NamaPasangan"]);

                                            rSingle.PekerjaanPasangan = Convert.ToString(dr0["PekerjaanPasangan"]);
                                            rSingle.PenghasilanPasangan = Convert.ToString(dr0["PenghasilanPasangan"]);
                                            rSingle.PerusahaanPasangan = Convert.ToString(dr0["PerusahaanPasangan"]);



                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                            from r in rList

                                                            group r by new { r.InvestorTypeDesc } into rGroup
                                                            select rGroup;




                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            worksheet = package.Workbook.Worksheets.Add(rsHeader.Key.InvestorTypeDesc);
                                            incRowExcel = 1;

                                            if (rsHeader.Key.InvestorTypeDesc == "Individu")
                                            {

                                                //worksheet.Cells[incRowExcel, 1].Value = "Profile Nasabah";


                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Profile Nasabah";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Size = 15;


                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Individu";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = "Client ID";
                                                worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                                worksheet.Cells[incRowExcel, 3].Value = "Jenis Kelamin";
                                                worksheet.Cells[incRowExcel, 4].Value = "Status Nasabah";
                                                worksheet.Cells[incRowExcel, 5].Value = "SID";
                                                worksheet.Cells[incRowExcel, 6].Value = "Kode Broker";
                                                worksheet.Cells[incRowExcel, 7].Value = "Nama Broker";
                                                worksheet.Cells[incRowExcel, 8].Value = "Parent Agent";
                                                worksheet.Cells[incRowExcel, 9].Value = "No ID";
                                                worksheet.Cells[incRowExcel, 10].Value = "Tgl Expired ID";

                                                worksheet.Cells[incRowExcel, 11].Value = "NPWP";
                                                worksheet.Cells[incRowExcel, 12].Value = "Jenis Nasabah";
                                                worksheet.Cells[incRowExcel, 13].Value = "Tipe Investor ";
                                                worksheet.Cells[incRowExcel, 14].Value = "Alamat by ID";
                                                worksheet.Cells[incRowExcel, 15].Value = "Kotamadya By ID";
                                                worksheet.Cells[incRowExcel, 16].Value = "Provinsi By ID";
                                                worksheet.Cells[incRowExcel, 17].Value = "Kode Pos By ID";
                                                worksheet.Cells[incRowExcel, 18].Value = "Alamat Stay";
                                                worksheet.Cells[incRowExcel, 19].Value = "Kotamadya Stay";
                                                worksheet.Cells[incRowExcel, 20].Value = "Provinsi Stay";

                                                worksheet.Cells[incRowExcel, 21].Value = "No. Telp";
                                                worksheet.Cells[incRowExcel, 22].Value = "Kode Pos Stay";
                                                worksheet.Cells[incRowExcel, 23].Value = "Jenis Alamat Korespondensi";
                                                worksheet.Cells[incRowExcel, 24].Value = "Alamat Korespondensi";
                                                worksheet.Cells[incRowExcel, 25].Value = "RT/RW Korespondensi";
                                                worksheet.Cells[incRowExcel, 26].Value = "Kotamadya Korespondensi";
                                                worksheet.Cells[incRowExcel, 27].Value = "Provinsi Korespondensi";
                                                worksheet.Cells[incRowExcel, 28].Value = "Kode Pos Korespondensi";
                                                worksheet.Cells[incRowExcel, 29].Value = "Nama Kantor";
                                                worksheet.Cells[incRowExcel, 30].Value = "Alamat Kantor";

                                                worksheet.Cells[incRowExcel, 31].Value = "Kotamadya Kantor";
                                                worksheet.Cells[incRowExcel, 32].Value = "Provinsi Kantor";
                                                worksheet.Cells[incRowExcel, 33].Value = "Kode Pos Kantor";
                                                worksheet.Cells[incRowExcel, 34].Value = "NoTelp Kantor";
                                                worksheet.Cells[incRowExcel, 35].Value = "Fax Kantor";
                                                worksheet.Cells[incRowExcel, 36].Value = "No HP";
                                                worksheet.Cells[incRowExcel, 37].Value = "Email Pribadi";
                                                worksheet.Cells[incRowExcel, 38].Value = "Email Kantor";
                                                worksheet.Cells[incRowExcel, 39].Value = "Pekerjaan/Bidang Usaha";
                                                worksheet.Cells[incRowExcel, 40].Value = "Jabatan";

                                                worksheet.Cells[incRowExcel, 41].Value = "Penghasilan";
                                                worksheet.Cells[incRowExcel, 42].Value = "Sumber Dana";
                                                worksheet.Cells[incRowExcel, 43].Value = "Tgl Lahir";
                                                worksheet.Cells[incRowExcel, 44].Value = "Tempat Lahir";
                                                worksheet.Cells[incRowExcel, 45].Value = "Nationality";
                                                worksheet.Cells[incRowExcel, 46].Value = "Pendidikan";
                                                worksheet.Cells[incRowExcel, 47].Value = "Agama";
                                                worksheet.Cells[incRowExcel, 48].Value = "Bank";
                                                worksheet.Cells[incRowExcel, 49].Value = "No Account Bank";
                                                worksheet.Cells[incRowExcel, 50].Value = "Nama pada Rekening";

                                                worksheet.Cells[incRowExcel, 51].Value = "Tgl Pembukaan Rekening Investasi";
                                                worksheet.Cells[incRowExcel, 52].Value = "Closing Date";
                                                worksheet.Cells[incRowExcel, 53].Value = "Entry Date";
                                                worksheet.Cells[incRowExcel, 54].Value = "Entry User";
                                                worksheet.Cells[incRowExcel, 55].Value = "Edit Date";
                                                worksheet.Cells[incRowExcel, 56].Value = "Edit User";
                                                worksheet.Cells[incRowExcel, 57].Value = "Approve Date";
                                                worksheet.Cells[incRowExcel, 58].Value = "Approve User";
                                                worksheet.Cells[incRowExcel, 59].Value = "Nama Pasangan";
                                                worksheet.Cells[incRowExcel, 60].Value = "Pekerjaan Pasangan";

                                                worksheet.Cells[incRowExcel, 61].Value = "Penghasilan Pasangan";
                                                worksheet.Cells[incRowExcel, 62].Value = "Perusahaan Pasangan";

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                worksheet.View.FreezePanes(4, 1);
                                            }

                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1].Value = "Profile Nasabah";
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Font.Size = 15;


                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Institusi";
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = "Client ID";
                                                worksheet.Cells[incRowExcel, 2].Value = "Nama Nasabah";
                                                worksheet.Cells[incRowExcel, 3].Value = "Status Nasabah";
                                                worksheet.Cells[incRowExcel, 4].Value = "Unit Holder ID";
                                                worksheet.Cells[incRowExcel, 5].Value = "Kode Broker";
                                                worksheet.Cells[incRowExcel, 6].Value = "Nama Broker";
                                                worksheet.Cells[incRowExcel, 7].Value = "Parent Agent";
                                                worksheet.Cells[incRowExcel, 8].Value = "NPWP";
                                                worksheet.Cells[incRowExcel, 9].Value = "Jenis Nasabah";
                                                worksheet.Cells[incRowExcel, 10].Value = "Tipe Investor ";

                                                worksheet.Cells[incRowExcel, 11].Value = "Alamat by ID";
                                                worksheet.Cells[incRowExcel, 12].Value = "Kotamadya By ID";
                                                worksheet.Cells[incRowExcel, 13].Value = "Provinsi By ID";
                                                worksheet.Cells[incRowExcel, 14].Value = "Kode Pos By ID";
                                                worksheet.Cells[incRowExcel, 15].Value = "Alamat Stay";
                                                worksheet.Cells[incRowExcel, 16].Value = "Kotamadya Stay";
                                                worksheet.Cells[incRowExcel, 17].Value = "Provinsi Stay";
                                                worksheet.Cells[incRowExcel, 18].Value = "No. Telp";
                                                worksheet.Cells[incRowExcel, 19].Value = "Kode Pos Stay";
                                                worksheet.Cells[incRowExcel, 20].Value = "Jenis Alamat Korespondensi";

                                                worksheet.Cells[incRowExcel, 21].Value = "Alamat Korespondensi";
                                                worksheet.Cells[incRowExcel, 22].Value = "Kotamadya Korespondensi";
                                                worksheet.Cells[incRowExcel, 23].Value = "Provinsi Korespondensi";
                                                worksheet.Cells[incRowExcel, 24].Value = "Kode Pos Korespondensi";
                                                worksheet.Cells[incRowExcel, 25].Value = "Nama Kantor";
                                                worksheet.Cells[incRowExcel, 26].Value = "Alamat Kantor";
                                                worksheet.Cells[incRowExcel, 27].Value = "Kotamadya Kantor";
                                                worksheet.Cells[incRowExcel, 28].Value = "Provinsi Kantor";
                                                worksheet.Cells[incRowExcel, 29].Value = "Kode Pos Kantor";
                                                worksheet.Cells[incRowExcel, 30].Value = "NoTelp Kantor";

                                                worksheet.Cells[incRowExcel, 31].Value = "Fax Kantor";
                                                worksheet.Cells[incRowExcel, 32].Value = "Email Kantor";
                                                worksheet.Cells[incRowExcel, 33].Value = "Pekerjaan/Bidang Usaha";
                                                worksheet.Cells[incRowExcel, 34].Value = "Penghasilan";
                                                worksheet.Cells[incRowExcel, 35].Value = "Sumber Dana";
                                                worksheet.Cells[incRowExcel, 36].Value = "Bank";
                                                worksheet.Cells[incRowExcel, 37].Value = "No Account Bank";
                                                worksheet.Cells[incRowExcel, 38].Value = "Nama pada Rekening";
                                                worksheet.Cells[incRowExcel, 39].Value = "Tgl Pembukaan Rekening Investasi";
                                                worksheet.Cells[incRowExcel, 40].Value = "Closing Date";

                                                worksheet.Cells[incRowExcel, 41].Value = "Entry Date";
                                                worksheet.Cells[incRowExcel, 42].Value = "Entry User";
                                                worksheet.Cells[incRowExcel, 43].Value = "Edit Date";
                                                worksheet.Cells[incRowExcel, 44].Value = "Edit User";
                                                worksheet.Cells[incRowExcel, 45].Value = "Approve Date";
                                                worksheet.Cells[incRowExcel, 46].Value = "Approve User";

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Font.Size = 12;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                                worksheet.View.FreezePanes(4, 1);
                                            }
                                            //int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                if (rsHeader.Key.InvestorTypeDesc == "Individu")
                                                {
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaNasabah;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.JenisKelamin;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.StatusNasabah;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.SID;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.KodeBroker;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.NamaBroker;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.ParentAgent;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.NoID;
                                                    if (Convert.ToDateTime(rsDetail.TglExpiredID).ToString("dd MMM yyyy") == "01 Jan 1900")
                                                    {
                                                        worksheet.Cells[incRowExcel, 10].Value = "";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 10].Value = Convert.ToDateTime(rsDetail.TglExpiredID).ToString("dd MMM yyyy");
                                                    }

                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.NPWP;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.JenisNasabah;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.TipeInvestor;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.AlamatbyID;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.KotamadyaByID;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.ProvinsiByID;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.KodePosByID;
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.AlamatStay;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.KotamadyaStay;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.ProvinsiStay;

                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.NoTelp;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.KodePosStay;
                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail.JenisAlamatKorespondensi;
                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail.AlamatKorespondensi;
                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail.RTRWKorespondensi;
                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail.KotamadyaKorespondensi;
                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail.ProvinsiKorespondensi;
                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail.KodePosKorespondensi;
                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail.NamaKantor;
                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail.AlamatKantor;

                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail.KotamadyaKantor;
                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail.ProvinsiKantor;
                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail.KodePosKantor;
                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail.NoTelpKantor;
                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail.FaxKantor;
                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail.NoHP;
                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail.EmailPribadi;
                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail.EmailKantor;
                                                    worksheet.Cells[incRowExcel, 39].Value = rsDetail.PekerjaanBidangUsaha;
                                                    worksheet.Cells[incRowExcel, 40].Value = rsDetail.Jabatan;

                                                    worksheet.Cells[incRowExcel, 41].Value = rsDetail.Penghasilan;
                                                    worksheet.Cells[incRowExcel, 42].Value = rsDetail.SumberDana;
                                                    if (Convert.ToDateTime(rsDetail.TglLahir).ToString("dd MMM yyyy") == "01 Jan 1900")
                                                    {
                                                        worksheet.Cells[incRowExcel, 43].Value = "";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 43].Value = Convert.ToDateTime(rsDetail.TglLahir).ToString("dd MMM yyyy");
                                                    }

                                                    worksheet.Cells[incRowExcel, 44].Value = rsDetail.TempatLahir;
                                                    worksheet.Cells[incRowExcel, 45].Value = rsDetail.Nationality;
                                                    worksheet.Cells[incRowExcel, 46].Value = rsDetail.Pendidikan;
                                                    worksheet.Cells[incRowExcel, 47].Value = rsDetail.Agama;
                                                    worksheet.Cells[incRowExcel, 48].Value = rsDetail.Bank;
                                                    worksheet.Cells[incRowExcel, 49].Value = rsDetail.NoAccountBank;
                                                    worksheet.Cells[incRowExcel, 50].Value = rsDetail.NamapadaRekening;

                                                    worksheet.Cells[incRowExcel, 51].Value = Convert.ToDateTime(rsDetail.TglPembukaanRekeningInvestasi).ToString("dd MMM yyy");
                                                    worksheet.Cells[incRowExcel, 52].Value = rsDetail.ClosingDate;
                                                    worksheet.Cells[incRowExcel, 53].Value = rsDetail.EntryDate;
                                                    worksheet.Cells[incRowExcel, 54].Value = rsDetail.EntryUser;
                                                    if (Convert.ToDateTime(rsDetail.EditDate).ToString("dd MMM yyyy") == "01 Jan 1900")
                                                    {
                                                        worksheet.Cells[incRowExcel, 55].Value = "";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 55].Value = Convert.ToDateTime(rsDetail.EditDate).ToString("dd MMM yyyy");
                                                    }
                                                    worksheet.Cells[incRowExcel, 56].Value = rsDetail.EditUser;
                                                    if (Convert.ToDateTime(rsDetail.ApproveDate).ToString("dd MMM yyyy") == "01 Jan 1900")
                                                    {
                                                        worksheet.Cells[incRowExcel, 57].Value = "";
                                                    }
                                                    else
                                                    {
                                                        worksheet.Cells[incRowExcel, 57].Value = Convert.ToDateTime(rsDetail.ApproveDate).ToString("dd MMM yyyy");
                                                    }
                                                    worksheet.Cells[incRowExcel, 58].Value = rsDetail.ApproveUser;
                                                    worksheet.Cells[incRowExcel, 59].Value = rsDetail.NamaPasangan;
                                                    worksheet.Cells[incRowExcel, 60].Value = rsDetail.PekerjaanPasangan;

                                                    worksheet.Cells[incRowExcel, 61].Value = rsDetail.PenghasilanPasangan;
                                                    worksheet.Cells[incRowExcel, 62].Value = rsDetail.PerusahaanPasangan;





                                                    //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd MMM yyyy";
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 62].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    no++;
                                                    _endRowDetail = incRowExcel;
                                                }
                                                else
                                                {
                                                    incRowExcel++;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 1].Value = rsDetail.ClientID;
                                                    worksheet.Cells[incRowExcel, 2].Value = rsDetail.NamaNasabah;
                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.StatusNasabah;
                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.UnitHolderID;
                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.KodeBroker;
                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.NamaBroker;
                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.ParentAgent;
                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail.NPWP;
                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail.JenisNasabah;
                                                    worksheet.Cells[incRowExcel, 10].Value = rsDetail.TipeInvestor;

                                                    worksheet.Cells[incRowExcel, 11].Value = rsDetail.AlamatbyID;
                                                    worksheet.Cells[incRowExcel, 12].Value = rsDetail.KotamadyaByID;
                                                    worksheet.Cells[incRowExcel, 13].Value = rsDetail.ProvinsiByID;
                                                    worksheet.Cells[incRowExcel, 14].Value = rsDetail.KodePosByID;
                                                    worksheet.Cells[incRowExcel, 15].Value = rsDetail.AlamatStay;
                                                    worksheet.Cells[incRowExcel, 16].Value = rsDetail.KotamadyaStay;
                                                    worksheet.Cells[incRowExcel, 17].Value = rsDetail.ProvinsiStay;
                                                    worksheet.Cells[incRowExcel, 18].Value = rsDetail.NoTelp;
                                                    worksheet.Cells[incRowExcel, 19].Value = rsDetail.KodePosStay;
                                                    worksheet.Cells[incRowExcel, 20].Value = rsDetail.JenisAlamatKorespondensi;

                                                    worksheet.Cells[incRowExcel, 21].Value = rsDetail.AlamatKorespondensi;
                                                    worksheet.Cells[incRowExcel, 22].Value = rsDetail.KotamadyaKorespondensi;
                                                    worksheet.Cells[incRowExcel, 23].Value = rsDetail.ProvinsiKorespondensi;
                                                    worksheet.Cells[incRowExcel, 24].Value = rsDetail.KodePosKorespondensi;
                                                    worksheet.Cells[incRowExcel, 25].Value = rsDetail.NamaKantor;
                                                    worksheet.Cells[incRowExcel, 26].Value = rsDetail.AlamatKantor;
                                                    worksheet.Cells[incRowExcel, 27].Value = rsDetail.KotamadyaKantor;
                                                    worksheet.Cells[incRowExcel, 28].Value = rsDetail.ProvinsiKantor;
                                                    worksheet.Cells[incRowExcel, 29].Value = rsDetail.KodePosKantor;
                                                    worksheet.Cells[incRowExcel, 30].Value = rsDetail.NoTelpKantor;

                                                    worksheet.Cells[incRowExcel, 31].Value = rsDetail.FaxKantor;
                                                    worksheet.Cells[incRowExcel, 32].Value = rsDetail.EmailKantor;
                                                    worksheet.Cells[incRowExcel, 33].Value = rsDetail.PekerjaanBidangUsaha;
                                                    worksheet.Cells[incRowExcel, 34].Value = rsDetail.Penghasilan;
                                                    worksheet.Cells[incRowExcel, 35].Value = rsDetail.SumberDana;
                                                    worksheet.Cells[incRowExcel, 36].Value = rsDetail.Bank;
                                                    worksheet.Cells[incRowExcel, 37].Value = rsDetail.NoAccountBank;
                                                    worksheet.Cells[incRowExcel, 38].Value = rsDetail.NamapadaRekening;
                                                    worksheet.Cells[incRowExcel, 39].Value = Convert.ToDateTime(rsDetail.TglPembukaanRekeningInvestasi).ToString("dd MMM yyy");
                                                    worksheet.Cells[incRowExcel, 40].Value = rsDetail.ClosingDate;

                                                    worksheet.Cells[incRowExcel, 41].Value = rsDetail.EntryDate;
                                                    worksheet.Cells[incRowExcel, 42].Value = rsDetail.EntryUser;
                                                    worksheet.Cells[incRowExcel, 43].Value = rsDetail.EditDate;
                                                    worksheet.Cells[incRowExcel, 44].Value = rsDetail.EditUser;
                                                    worksheet.Cells[incRowExcel, 45].Value = rsDetail.ApproveDate;
                                                    worksheet.Cells[incRowExcel, 46].Value = rsDetail.ApproveUser;





                                                    //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd MMM yyyy";
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 46].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                    no++;
                                                    _endRowDetail = incRowExcel;
                                                }
                                            }


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 62];
                                            //worksheet.Column(1).Width = 5;
                                            worksheet.Column(1).AutoFit();
                                            worksheet.Column(2).Width = 89;
                                            worksheet.Column(3).Width = 20;
                                            worksheet.Column(4).Width = 20;
                                            worksheet.Column(5).Width = 20;
                                            worksheet.Column(6).Width = 20;
                                            worksheet.Column(7).Width = 20;
                                            worksheet.Column(8).Width = 20;
                                            worksheet.Column(9).Width = 20;
                                            worksheet.Column(10).Width = 20;

                                            worksheet.Column(11).Width = 20;
                                            worksheet.Column(12).Width = 20;
                                            worksheet.Column(13).Width = 20;
                                            worksheet.Column(14).Width = 20;
                                            worksheet.Column(15).Width = 20;
                                            worksheet.Column(16).Width = 20;
                                            worksheet.Column(17).Width = 20;
                                            worksheet.Column(18).Width = 20;
                                            worksheet.Column(19).Width = 20;
                                            worksheet.Column(20).Width = 30;

                                            worksheet.Column(21).Width = 30;
                                            worksheet.Column(22).Width = 30;
                                            worksheet.Column(23).Width = 30;
                                            worksheet.Column(24).Width = 30;
                                            worksheet.Column(25).Width = 30;
                                            worksheet.Column(26).Width = 30;
                                            worksheet.Column(27).Width = 30;
                                            worksheet.Column(28).Width = 30;
                                            worksheet.Column(29).Width = 30;
                                            worksheet.Column(30).Width = 30;

                                            worksheet.Column(31).Width = 30;
                                            worksheet.Column(32).Width = 30;
                                            worksheet.Column(33).Width = 30;
                                            worksheet.Column(34).Width = 30;
                                            worksheet.Column(35).Width = 30;
                                            worksheet.Column(36).Width = 30;
                                            worksheet.Column(37).Width = 30;
                                            worksheet.Column(38).Width = 30;
                                            worksheet.Column(39).Width = 30;
                                            worksheet.Column(40).Width = 30;

                                            worksheet.Column(41).Width = 30;
                                            worksheet.Column(42).Width = 30;
                                            worksheet.Column(43).Width = 30;
                                            worksheet.Column(44).Width = 30;
                                            worksheet.Column(45).Width = 30;
                                            worksheet.Column(46).Width = 30;
                                            worksheet.Column(47).Width = 30;

                                            worksheet.Column(48).Width = 30;
                                            worksheet.Column(49).Width = 30;
                                            worksheet.Column(50).Width = 30;

                                            worksheet.Column(51).Width = 30;
                                            worksheet.Column(52).Width = 40;
                                            worksheet.Column(53).Width = 40;
                                            worksheet.Column(54).Width = 40;
                                            worksheet.Column(55).Width = 40;
                                            worksheet.Column(56).Width = 40;
                                            worksheet.Column(57).Width = 40;
                                            worksheet.Column(58).Width = 40;
                                            worksheet.Column(59).Width = 40;
                                            worksheet.Column(60).Width = 40;

                                            worksheet.Column(61).Width = 40;
                                            worksheet.Column(62).Width = 40;


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                            //worksheet.PrinterSettings.FitToPage = true;
                                            //worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            // worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");*/// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Profile Nasabah";


                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                            //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                            //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                            //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                            worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Profile Nasabah";

                                            //Image img = Image.FromFile(Tools.ReportImage);
                                            //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();
                                        }





                                        package.Save();
                                        //if (_unitRegistryRpt.DownloadMode == "PDF")
                                        //{
                                        //    Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        //}

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Customer Saldo
            if (_unitRegistryRpt.ReportName.Equals("Customer Saldo"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        decimal TotalUnit, TotalAUMIDR;
                        TotalUnit = 0;
                        TotalAUMIDR = 0;

                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And C.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }
                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And D.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText = @"
-- declare @Date date
--set @Date = '02/12/2020'


 declare @dateMinOne datetime
set @dateMinOne = dbo.FWorkingDay(@Date,-1)


select isnull(IFUACode,'') IFUA,isnull(B.Name,'') InvestorName,isnull(C.Name,'') ProductName,isnull(D.Name,'') AgentName,C.ID FundID,C.SInvestCode SInvestFundCode,B.SID SID,
isnull(UnitAmount,0) Unit,isnull(E.Nav,0) NAVperUnit,isnull(UnitAmount,0) * isnull(E.Nav,0) AUMOri,isnull(UnitAmount,0) * isnull(E.Nav,0) * isnull(F.Rate,1) AUMIDR from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join CloseNAV E on A.FundPK = E.FundPK and E.Date = 
(
select max(Date) from CloseNAV where FundPK = A.FundPK and Date <= @Date and status = 2
)

left join CurrencyRate F on C.CurrencyPK = F.CurrencyPK and F.status in (1,2) and F.Date =
(
select max(Date) from CurrencyRate where CurrencyPK = C.CurrencyPK and Date <= @Date and status = 2
)

where  A.Date = @dateMinOne and A.UnitAmount > 0 " + _paramFund + _paramAgent;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Date", _unitRegistryRpt.ValueDateFrom);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "CustomerSaldo" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "CustomerSaldo" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Customer Saldo");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<CustomerSaldo> rList = new List<CustomerSaldo>();
                                        while (dr0.Read())
                                        {

                                            CustomerSaldo rSingle = new CustomerSaldo();

                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.InvestorName = Convert.ToString(dr0["InvestorName"]);
                                            rSingle.ProductName = Convert.ToString(dr0["ProductName"]);
                                            rSingle.FundID = Convert.ToString(dr0["FundID"]);
                                            rSingle.SInvestFundCode = Convert.ToString(dr0["SInvestFundCode"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.NAVperUnit = Convert.ToDecimal(dr0["NAVperUnit"]);
                                            rSingle.AUMOri = Convert.ToDecimal(dr0["AUMOri"]);
                                            rSingle.AUMIDR = Convert.ToDecimal(dr0["AUMIDR"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ProductName } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "Customer Saldo";
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Italic = true;
                                        worksheet.Cells["H" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells["H" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 8].Value = "As Of : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["H" + incRowExcel + ":K" + incRowExcel].Merge = true;
                                        worksheet.Cells["H" + incRowExcel + ":K" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "No.";
                                        worksheet.Cells[incRowExcel, 2].Value = "SID";
                                        worksheet.Cells[incRowExcel, 3].Value = "IFUA";
                                        worksheet.Cells[incRowExcel, 4].Value = "Investor Name";
                                        worksheet.Cells[incRowExcel, 5].Value = "Product Name";
                                        worksheet.Cells[incRowExcel, 6].Value = "Fund ID";
                                        worksheet.Cells[incRowExcel, 7].Value = "S-Invest Fund Code";
                                        worksheet.Cells[incRowExcel, 8].Value = "Agent Name (SubSales)";
                                        worksheet.Cells[incRowExcel, 9].Value = "Unit";
                                        worksheet.Cells[incRowExcel, 10].Value = "NAV/Unit";
                                        worksheet.Cells[incRowExcel, 11].Value = "AUM ORI";
                                        worksheet.Cells[incRowExcel, 12].Value = "AUM IDR";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;

                                        foreach (var rsHeader in GroupByReference)
                                        {






                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ProductName;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Font.Bold = true;
                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 12].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.IFUA;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.InvestorName;
                                                worksheet.Cells[incRowExcel, 4].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.ProductName;
                                                worksheet.Cells[incRowExcel, 5].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.FundID;
                                                worksheet.Cells[incRowExcel, 6].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.SInvestFundCode;
                                                worksheet.Cells[incRowExcel, 7].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 8].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.Unit;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                TotalUnit = TotalUnit + rsDetail.Unit;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.NAVperUnit;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.00000000";

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.AUMOri;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.AUMIDR;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                TotalAUMIDR = TotalAUMIDR + rsDetail.AUMIDR;

                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Value = "Total " + rsHeader.Key.ProductName;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Calculate();
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;


                                            worksheet.Cells[incRowExcel, 12].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 12].Calculate();
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Value = "Grand Total";
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        worksheet.Cells[incRowExcel, 9].Value = TotalUnit;
                                        worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 12].Value = TotalAUMIDR;
                                        worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";

                                        worksheet.Cells[incRowExcel, 9, incRowExcel, 12].Style.Font.Bold = true;

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 12];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 25;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 50;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;
                                        worksheet.Column(8).Width = 25;
                                        worksheet.Column(9).Width = 15;
                                        worksheet.Column(10).Width = 15;
                                        worksheet.Column(11).Width = 18;
                                        worksheet.Column(12).Width = 18;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Customer Saldo";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Transaction History
            if (_unitRegistryRpt.ReportName.Equals("Transaction History"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        decimal TotalUnit, TotalAUMIDR;
                        TotalUnit = 0;
                        TotalAUMIDR = 0;

                        string _paramFundClient = "";
                        if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                        {
                            _paramFundClient = "And A.FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                        }
                        else
                        {
                            _paramFundClient = "";
                        }
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {


                            cmd.CommandText = @"



 -- Declare @ValueDateFrom datetime
--set @ValueDateFrom = '11/25/2020'
--Declare @ValueDateTo datetime
--set @ValueDateTo = '11/25/2020'


--DROP Table #HistoryTransaction 

Create Table #HistoryTransaction                  
(                   
FundClientPK int,
NavDate datetime,
FundPK int,
Type nvarchar(50),
CashAmount numeric(18,2),
Nav numeric(18,4),
UnitAmount numeric (18,4),
FeeAmount numeric (18,2),
UnitPosition numeric (18,4)
)      

CREATE CLUSTERED INDEX indx_HistoryTransaction  ON #HistoryTransaction (FundClientPK,NavDate,FundPK,Type,CashAmount,Nav,UnitAmount,FeeAmount,UnitPosition);


insert into #HistoryTransaction
select A.FundClientPK,NavDate,A.FundPK,'SUB',A.CashAmount,Nav,A.UnitAmount,SubscriptionFeeAmount,isnull(B.UnitAmount,0) from ClientSubscription A
left join FundClientPosition B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPK and Date = 
(
select max(Date) from FundClientPosition where FundClientPK = A.FundClientPK and FundPK = A.FundPK and Date <= A.NAVDate
)
where Type <> 3   and A.status = 2 and A.Posted = 1 and A.ValueDate between @ValueDateFrom and @ValueDateTo  " + _paramFundClient + @"


insert into #HistoryTransaction
select A.FundClientPK,NavDate,A.FundPK,'RED',A.CashAmount,Nav,A.UnitAmount,RedemptionFeeAmount,isnull(B.UnitAmount,0) from ClientRedemption A
left join FundClientPosition B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPK and Date = 
(
select max(Date) from FundClientPosition where FundClientPK = A.FundClientPK and FundPK = A.FundPK and Date <= A.NAVDate
)
where Type <> 3   and A.status = 2 and A.Posted = 1 and A.ValueDate between @ValueDateFrom and @ValueDateTo " + _paramFundClient + @"


insert into #HistoryTransaction
select A.FundClientPK,NavDate,A.FundPKFrom,'SWTOT',A.CashAmount,NAVFundFrom,A.UnitAmount,SwitchingFeeAmount,isnull(B.UnitAmount,0) from ClientSwitching A
left join FundClientPosition B on A.FundClientPK = B.FundClientPK and A.FundPKFrom = B.FundPK and Date = 
(
select max(Date) from FundClientPosition where FundClientPK = A.FundClientPK and FundPK = A.FundPKFrom and Date < A.NAVDate
)
where Type <> 3   and A.status = 2 and A.Posted = 1 and A.ValueDate between @ValueDateFrom and @ValueDateTo " + _paramFundClient + @"


insert into #HistoryTransaction
select A.FundClientPK,NavDate,A.FundPKFrom,'SWTIN',A.CashAmount,NAVFundFrom,A.UnitAmount,SwitchingFeeAmount,isnull(B.UnitAmount,0) from ClientSwitching A
left join FundClientPosition B on A.FundClientPK = B.FundClientPK and A.FundPKTo = B.FundPK and Date = 
(
select max(Date) from FundClientPosition where FundClientPK = A.FundClientPK and FundPK = A.FundPKTo and Date <= A.NAVDate
)
where Type <> 3  and A.status = 2 and A.Posted = 1 and A.ValueDate between @ValueDateFrom and @ValueDateTo " + _paramFundClient + @"


select case when B.InvestorType  = 1 then isnull(B.TeleponSelular,'') else isnull(B.TeleponKantor,'') end PhoneNo,case when B.InvestorType  = 1 then isnull(B.Fax,'') else isnull(B.Companyfax,'') end FaxNo,
isnull(B.SID,'') SID,isnull(B.IFUACode ,'') IFUA,B.Name,C.Name Product,NavDate,A.Type Transaksi,A.CashAmount Amount,A.Nav,A.UnitAmount Units,A.FeeAmount Fee,A.UnitPosition BalanceUnit from #HistoryTransaction A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPK = C.FundPK and C.status in (1,2)  
order by Name,Product,NavDate,Transaksi
                             ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "TransactionHistory" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "TransactionHistory" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Transaction History");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<TransactionHistory> rList = new List<TransactionHistory>();
                                        while (dr0.Read())
                                        {

                                            TransactionHistory rSingle = new TransactionHistory();


                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.Name = Convert.ToString(dr0["Name"]);
                                            rSingle.Product = Convert.ToString(dr0["Product"]);
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.Transaksi = Convert.ToString(dr0["Transaksi"]);
                                            rSingle.Amount = Convert.ToDecimal(dr0["Amount"]);
                                            rSingle.NAV = Convert.ToDecimal(dr0["NAV"]);
                                            rSingle.Units = Convert.ToDecimal(dr0["Units"]);
                                            rSingle.Fee = Convert.ToDecimal(dr0["Fee"]);
                                            rSingle.BalanceUnit = Convert.ToDecimal(dr0["BalanceUnit"]);


                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.Name, r.Product, r.SID, r.IFUA } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 7].Value = "Phone No : " + _host.Get_CompanyPhone();
                                        //incRowExcel++;
                                        //worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 7].Value = "Fax No : " + _host.Get_CompanyFax();

                                        //incRowExcel++;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Transaction History";
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Italic = true;
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                        incRowExcel = incRowExcel + 3;




                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel = incRowExcel + 2;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "SID : " + rsHeader.Key.SID;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "IFUA : " + rsHeader.Key.IFUA;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            //incRowExcel = incRowExcel + 2;
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Name : " + rsHeader.Key.Name;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Product : " + rsHeader.Key.Product;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "No.";
                                            worksheet.Cells[incRowExcel, 2].Value = "NAV Date";
                                            worksheet.Cells[incRowExcel, 3].Value = "Transaction";
                                            worksheet.Cells[incRowExcel, 4].Value = "Amount";
                                            worksheet.Cells[incRowExcel, 5].Value = "NAV";
                                            worksheet.Cells[incRowExcel, 6].Value = "Units";
                                            worksheet.Cells[incRowExcel, 7].Value = "Fee";
                                            worksheet.Cells[incRowExcel, 8].Value = "Balance Unit";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Fill.BackgroundColor.SetColor(Color.LightGray);




                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            ////worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = no;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NAVDate;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Transaksi;
                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Amount;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NAV;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Units;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Fee;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BalanceUnit;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }

                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 14;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 22;
                                        worksheet.Column(6).Width = 15;
                                        worksheet.Column(7).Width = 15;
                                        worksheet.Column(8).Width = 15;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Transaction History";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report NetSubs by Product
            else if (_unitRegistryRpt.ReportName.Equals("Report NetSubs by Product"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramFund = "";
                            string _paramFundFrom = "";
                            string _paramFundTo = "";
                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundFrom = "And A.FundPKFrom in ( " + _unitRegistryRpt.FundFrom + " ) ";
                                _paramFundTo = "And A.FundPKTo in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                                _paramFundFrom = "";
                                _paramFundTo = "";
                            }



                            cmd.CommandText =
                               // NON SWITCHING IDR
                               @"
                 
Declare @NetSubs table
(
FundPK int,
AgentPK int,
SubsCashAmount numeric(19,2),
RedCashAmount numeric(19,2)
)

insert into @NetSubs
select A.FundPK,A.AgentPK,sum(A.TotalCashAmount) SubsCashAmount,0  from ClientSubscription A -- SUBS
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 " + _paramFund + @"
group by A.FundPK,A.AgentPK

insert into @NetSubs
select A.FundPKFrom,A.AgentPK,sum(A.TotalCashAmountFundFrom) SubsCashAmount,0 from ClientSwitching A --SWITCH IN
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 " + _paramFundFrom + @"
group by A.FundPKFrom,A.AgentPK

insert into @NetSubs
select A.FundPK,A.AgentPK,0,sum(A.TotalCashAmount) RedCashAmount  from ClientRedemption A -- RED
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 " + _paramFund + @"
group by A.FundPK,A.AgentPK

insert into @NetSubs
select A.FundPKTo,A.AgentPK,0,sum(A.TotalCashAmountFundTo) RedCashAmount from ClientSwitching A --SWITCH OUT
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 " + _paramFundTo + @"
group by A.FundPKTo,A.AgentPK


select C.DescOne ProductCategory,B.Name Product,D.Name AgentName,sum(SubsCashAmount) Subs,sum(RedCashAmount) Redeem from @NetSubs A -- NETSUBS PAKAI RUMUS DI EXCEL AJA
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.Type = C.Code and C.status in (1,2) and C.ID = 'FundType'
left join Agent D on A.AgentPK = D.AgentPK and D.status in (1,2)
group by  C.DescOne,B.Name,D.Name
order by C.DescOne
";


                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNetSubsbyProduct" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNetSubsbyProduct" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report NetSubs by Product");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNetSubsbyProduct> rList = new List<ReportNetSubsbyProduct>();
                                        while (dr0.Read())
                                        {
                                            ReportNetSubsbyProduct rSingle = new ReportNetSubsbyProduct();
                                            rSingle.ProductCategory = Convert.ToString(dr0["ProductCategory"]);
                                            rSingle.Product = Convert.ToString(dr0["Product"]);
                                            rSingle.AgentName = Convert.ToString(dr0["AgentName"]);
                                            rSingle.Subs = Convert.ToDecimal(dr0["Subs"]);
                                            rSingle.Redeem = Convert.ToDecimal(dr0["Redeem"]);
                                            rList.Add(rSingle);

                                        }



                                        var QueryByFundID =
                                            from r in rList
                                            group r by new { r.ProductCategory, r.Product } into rGroup
                                            select rGroup;

                                        int incRowExcel = 1;
                                        int _colCurrency = 0;
                                        int _startRowDetail = incRowExcel;
                                        int _endRowDetail;
                                        incRowExcel++;


                                        incRowExcel++;

                                        var _productCategory = "";
                                        //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        //worksheet.Cells[incRowExcel, 1].Value = "rpt_NetSubs_byProduct";
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                        //incRowExcel++;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Product Category";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Subs";
                                        worksheet.Cells[incRowExcel, 5].Value = "Redeem";
                                        worksheet.Cells[incRowExcel, 6].Value = "NetSubs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGray);

                                        incRowExcel++;



                                        foreach (var rsHeader in QueryByFundID)
                                        {
                                            //incRowExcel++;

                                            //Bikin NON SWITCHING

                                            if (_productCategory != rsHeader.Key.ProductCategory)
                                            {
                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ProductCategory;
                                                worksheet.Cells[incRowExcel, 4].Value = Get_TotalNetSubsByProduct_Subs_ByProductCategory(rsHeader.Key.ProductCategory, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 5].Value = Get_TotalNetSubsByProduct_Red_ByProductCategory(rsHeader.Key.ProductCategory, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);

                                                worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-E" + incRowExcel + "";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                //untuk Hitung Grand Total
                                                worksheet.Cells[incRowExcel, 10].Value = Get_TotalNetSubsByProduct_Subs_ByProductCategory(rsHeader.Key.ProductCategory, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 11].Value = Get_TotalNetSubsByProduct_Red_ByProductCategory(rsHeader.Key.ProductCategory, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 12].Formula = "=D" + incRowExcel + "-E" + incRowExcel + "";
                                                worksheet.Cells[incRowExcel, 12].Calculate();
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 12].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                //

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightBlue);
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Product;
                                                worksheet.Cells[incRowExcel, 4].Value = Get_TotalNetSubsByProduct_Subs_ByProduct(rsHeader.Key.Product, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 5].Value = Get_TotalNetSubsByProduct_Red_ByProduct(rsHeader.Key.Product, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-E" + incRowExcel + "";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                            }
                                            else
                                            {
                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.Product;
                                                worksheet.Cells[incRowExcel, 4].Value = Get_TotalNetSubsByProduct_Subs_ByProduct(rsHeader.Key.Product, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 5].Value = Get_TotalNetSubsByProduct_Red_ByProduct(rsHeader.Key.Product, _unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo);
                                                worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-E" + incRowExcel + "";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                            }


                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Style.Font.Bold = true;
                                            incRowExcel++;
                                            //area header

                                            int _no = 1;
                                            //int _endRowDetail = 0;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                //ThickBox Border
                                                //area detail
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AgentName;
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Subs;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Redeem;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 6].Formula = "=D" + incRowExcel + "-E" + incRowExcel + "";
                                                worksheet.Cells[incRowExcel, 6].Calculate();
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                _no++;
                                                incRowExcel++;
                                                _productCategory = rsHeader.Key.ProductCategory;

                                            }



                                        }
                                        _endRowDetail = incRowExcel - 1;
                                        worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                        worksheet.Cells[incRowExcel, 4].Formula = "SUM(J" + _startRowDetail + ":J" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 5].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells[incRowExcel, 6].Formula = "SUM(L" + _startRowDetail + ":L" + _endRowDetail + ")";
                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                        worksheet.Cells["A" + incRowExcel + ":F" + incRowExcel].Style.Font.Bold = true;

                                        incRowExcel++;

                                        incRowExcel++;






                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 6];
                                        worksheet.Column(1).Width = 10;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 50;
                                        worksheet.Column(4).Width = 30;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 30;
                                        worksheet.Column(10).Width = 0;
                                        worksheet.Column(11).Width = 0;
                                        worksheet.Column(12).Width = 0;
                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                        worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B Report NetSubs by Product";




                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                        //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Customer Detail
            if (_unitRegistryRpt.ReportName.Equals("Report Customer Detail"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClient = "";

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClient = "And FundClientPK in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClient = "";
                            }

                            cmd.CommandText = @"


select A.FundClientPK,'Individu' CustomerType,isnull(SID,'') CIF,isnull(A.NamaDepanInd,'') FirstName,isnull(A.NamaTengahInd,'') MidleName,isnull(A.NamaBelakangInd,'') LastName,
isnull(A.ApprovedTime,'') DateofOpeningAccount,isnull(MV1.DescOne,'') IdentificationType,isnull(NoIdentitasInd1,'') IdentificationNumber,
isnull(ExpiredDateIdentitasInd1,'') ExpiredID,isnull(NPWP,'') NPWP,isnull(TempatLahir,'') PlaceOfBirth,isnull(TanggalLahir,'') BirthDate, isnull(MV2.DescOne,'') Gender,
isnull(MV3.DescOne,'') MaritalStatus,Case when A.Nationality = 'ID' then 'WNI' else 'WNA' end Citizenship,isnull(MV4.DescOne,'') Nationality,
isnull(MV5.DescOne,'') Occupation,isnull(MV6.DescOne,'') EducationLevel,isnull(MV7.DescOne,'') Religion,isnull(MV8.DescOne,'') SourceOfFund,isnull(MV9.DescOne,'') InvestmentPurposes,isnull(MV10.DescOne,'') Income,
isnull(OtherAlamatInd1,'') AddressID,isnull(MV11.DescOne,'') City,isnull(OtherKodePosInd1,'') PostalCode,isnull(AlamatInd1,'') CorrespondenceAddress,isnull(MV12.DescOne,'') CorrespondenceCity,isnull(KodePosInd1,'') CorrespondencePostalCode,
isnull(A.SID,'') SID,isnull(TeleponRumah,'') NoTelp,isnull(TeleponSelular,'') NoHP,isnull(Fax,'') NoFax,isnull(Email,'') Email,isnull(MotherMaidenName,'') MothersName,
isnull(SpouseName,'') SpouseName,isnull(Heir,'') HeirsName,isnull(B.Name,'') BankName,isnull(BankBranchName1,'') BranchName,isnull(C.ID,'') BankCurrency,'TABUNGAN' BankType,isnull(NomorRekening1,'') BankAccNo,isnull(NamaNasabah1,'') BankAccName
from FundClient A 
left join MasterValue MV1 on A.IdentitasInd1 = MV1.Code and MV1.ID = 'Identity' and MV1.status in (1,2)
left join MasterValue MV2 on A.JenisKelamin = MV2.Code and MV2.ID = 'Sex' and MV2.status in (1,2)
left join MasterValue MV3 on A.StatusPerkawinan = MV3.Code and MV3.ID = 'MaritalStatus' and MV3.status in (1,2)
left join MasterValue MV4 on A.Nationality = MV4.Code and MV4.ID = 'SDICountry' and MV4.status in (1,2)
left join MasterValue MV5 on A.Pekerjaan = MV5.Code and MV5.ID = 'Occupation' and MV5.status in (1,2)
left join MasterValue MV6 on A.Pendidikan = MV6.Code and MV6.ID = 'EducationalBackground' and MV6.status in (1,2)
left join MasterValue MV7 on A.Agama = MV7.Code and MV7.ID = 'Religion' and MV7.status in (1,2)
left join MasterValue MV8 on A.SumberDanaInd = MV8.Code and MV8.ID = 'IncomeSourceIND' and MV8.status in (1,2)
left join MasterValue MV9 on A.MaksudTujuanInd = MV9.Code and MV9.ID = 'InvestmentObjectivesIND' and MV9.status in (1,2)
left join MasterValue MV10 on A.PenghasilanInd = MV10.Code and MV10.ID = 'IncomeIND' and MV10.status in (1,2)
left join MasterValue MV11 on A.OtherKodeKotaInd1 = MV11.Code and MV11.ID = 'CityRHB' and MV11.status in (1,2)
left join MasterValue MV12 on A.KodeKotaInd1 = MV12.Code and MV12.ID = 'CityRHB' and MV12.status in (1,2)
left join Bank B on A.NamaBank1 = B.BankPK and B.status in (1,2)
left join Currency C on A.MataUang1 = C.CurrencyPK and C.status in (1,2)
where A.status in (1,2) and InvestorType = 1 " + _paramFundClient
;
                            cmd.CommandTimeout = 0;


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportCustomerDetail" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportCustomerDetail" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Customer Detail");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportCustomerDetail> rList = new List<ReportCustomerDetail>();
                                        while (dr0.Read())
                                        {

                                            ReportCustomerDetail rSingle = new ReportCustomerDetail();

                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.CustomerType = dr0["CustomerType"].ToString();
                                            rSingle.CIF = dr0["CIF"].ToString();
                                            rSingle.FirstName = dr0["FirstName"].ToString();
                                            rSingle.MidleName = dr0["MidleName"].ToString();
                                            rSingle.LastName = dr0["LastName"].ToString();
                                            rSingle.DateofOpeningAccount = dr0["DateofOpeningAccount"].ToString();
                                            rSingle.IdentificationType = dr0["IdentificationType"].ToString();
                                            rSingle.IdentificationNumber = dr0["IdentificationNumber"].ToString();
                                            rSingle.ExpiredID = dr0["ExpiredID"].ToString();
                                            rSingle.NPWP = dr0["NPWP"].ToString();
                                            rSingle.PlaceOfBirth = dr0["PlaceOfBirth"].ToString();
                                            rSingle.BirthDate = dr0["BirthDate"].ToString();
                                            rSingle.Gender = dr0["Gender"].ToString();
                                            rSingle.MaritalStatus = dr0["MaritalStatus"].ToString();
                                            rSingle.Citizenship = dr0["Citizenship"].ToString();
                                            rSingle.Nationality = dr0["Nationality"].ToString();
                                            rSingle.Occupation = dr0["Occupation"].ToString();
                                            rSingle.EducationLevel = dr0["EducationLevel"].ToString();
                                            rSingle.Religion = dr0["Religion"].ToString();
                                            rSingle.SourceOfFund = dr0["SourceOfFund"].ToString();
                                            rSingle.InvestmentPurposes = dr0["InvestmentPurposes"].ToString();
                                            rSingle.Income = dr0["Income"].ToString();
                                            rSingle.AddressID = dr0["AddressID"].ToString();
                                            rSingle.City = dr0["City"].ToString();
                                            rSingle.PostalCode = dr0["PostalCode"].ToString();
                                            rSingle.CorrespondenceAddress = dr0["CorrespondenceAddress"].ToString();
                                            rSingle.CorrespondenceCity = dr0["CorrespondenceCity"].ToString();
                                            rSingle.CorrespondencePostalCode = dr0["CorrespondencePostalCode"].ToString();
                                            rSingle.SID = dr0["SID"].ToString();
                                            rSingle.NoTelp = dr0["NoTelp"].ToString();
                                            rSingle.NoHP = dr0["NoHP"].ToString();
                                            rSingle.NoFax = dr0["NoFax"].ToString();
                                            rSingle.Email = dr0["Email"].ToString();
                                            rSingle.MothersName = dr0["MothersName"].ToString();
                                            rSingle.SpouseName = dr0["SpouseName"].ToString();
                                            rSingle.HeirsName = dr0["HeirsName"].ToString();
                                            rSingle.BankName = dr0["BankName"].ToString();
                                            rSingle.BranchName = dr0["BranchName"].ToString();
                                            rSingle.BankCurrency = dr0["BankCurrency"].ToString();
                                            rSingle.BankType = dr0["BankType"].ToString();
                                            rSingle.BankAccNo = dr0["BankAccNo"].ToString();
                                            rSingle.BankAccName = dr0["BankAccName"].ToString();
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.FundClientPK } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        incRowExcel++;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyName();
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        incRowExcel++;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.WrapText = true;
                                        worksheet.Cells[incRowExcel, 7].Value = _host.Get_CompanyAddress();
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        incRowExcel++;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "Phone No. :" + _host.Get_CompanyPhone();
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                        incRowExcel++;
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "Fax No. :" + _host.Get_CompanyFax();
                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;




                                        incRowExcel++;








                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Customer Detail Individu";
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            incRowExcel = incRowExcel + 2;

                                            int first = incRowExcel;

                                            int _startRowDetail = incRowExcel;


                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1].Value = "Customer Type";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CustomerType;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "CIF";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CIF;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "First Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FirstName;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Midle Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.MidleName;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Last Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.LastName;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Date of opening account";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.DateofOpeningAccount).ToString("dd MMM yyy");
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Identification Type";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.IdentificationType;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Identification Number";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.IdentificationNumber;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Expired ID";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.ExpiredID).ToString("dd MMM yyy");
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "NPWP";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NPWP;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Place Of Birth";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PlaceOfBirth;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Birth Date";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = Convert.ToDateTime(rsDetail.BirthDate).ToString("dd MMM yyy");
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Gender";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Gender;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Marital Status";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.MaritalStatus;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Citizenship";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Citizenship;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Nationality";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Nationality;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Occupation";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Occupation;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Education Level";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.EducationLevel;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Religion";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Religion;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Source Of Fund";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SourceOfFund;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Investment Purposes";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.InvestmentPurposes;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Income";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Income;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Address as in ID or passport";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.AddressID;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Row(incRowExcel).Height = 50;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "City";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.City;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Postal Code";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.PostalCode;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Correspondence Address";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CorrespondenceAddress;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                worksheet.Row(incRowExcel).Height = 50;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "City";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CorrespondenceCity;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Postal Code";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.CorrespondencePostalCode;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "SID";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SID;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No Telp";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NoTelp;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;

                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No HP";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NoHP;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "No Fax";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.NoFax;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Email";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Email;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Mother's Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.MothersName;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Spouse Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.SpouseName;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "Heirs Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 4].Value = ":";
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.HeirsName;
                                                worksheet.Cells["E" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = "BankName";
                                                worksheet.Cells[incRowExcel, 2].Value = "Branch";
                                                worksheet.Cells[incRowExcel, 5].Value = "Curr";
                                                worksheet.Cells[incRowExcel, 6].Value = "Type";
                                                worksheet.Cells[incRowExcel, 7].Value = "Acc No";
                                                worksheet.Cells[incRowExcel, 8].Value = "Acc Name";
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Font.Bold = true;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.BankName;
                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.BranchName;
                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.BankCurrency;
                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.BankType;
                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.BankAccNo;
                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.BankAccName;




                                            }
                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 7].Value = "OPR";
                                            worksheet.Cells[incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 8].Value = "SPV";
                                            worksheet.Cells[incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 7, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;




                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            incRowExcel = incRowExcel + 3;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 25;
                                        worksheet.Column(2).Width = 20;
                                        worksheet.Column(3).Width = 5;
                                        worksheet.Column(4).Width = 5;
                                        worksheet.Column(5).Width = 10;
                                        worksheet.Column(6).Width = 20;
                                        worksheet.Column(7).Width = 20;
                                        worksheet.Column(8).Width = 31;





                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                                                                                       //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Customer Detail";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Monthly Statement Periodik
            if (_unitRegistryRpt.ReportName.Equals("Monthly Statement Periodik"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundClientFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundClientFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundClientFrom))
                            {
                                _paramFundClientFrom = "And A.FundClientPK  in ( " + _unitRegistryRpt.FundClientFrom + " ) ";
                            }
                            else
                            {
                                _paramFundClientFrom = "";
                            }


                            string _paramFundFrom = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFundFrom = "And A.FundPK  in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFundFrom = "";
                            }



                            cmd.CommandText = @"
                            select distinct A.FundClientPK,B.Name FundClientName, case when B.InvestorType = 1 then isnull(B.AlamatInd1,'Correspondence Address is Null') else isnull(AlamatPerusahaan,'Company Address is Null') end Alamat from FundClientPosition A
                            left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
                            where Date =
                            (
                            select max(Date) from FundClientPosition where Date <= @DateFrom
                            )
                            and A.UnitAmount > 0" + _paramFundClientFrom;

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);

                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "MonthlyStatementPeriodik" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "MonthlyStatementPeriodik" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Monthly Statement Periodik");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<MonthlyStatementPeriodik> rList = new List<MonthlyStatementPeriodik>();
                                        while (dr0.Read())
                                        {

                                            MonthlyStatementPeriodik rSingle = new MonthlyStatementPeriodik();
                                            rSingle.FundClientPK = Convert.ToInt32(dr0["FundClientPK"]);
                                            rSingle.FundClientName = Convert.ToString(dr0["FundClientName"]);
                                            rSingle.Alamat = Convert.ToString(dr0["Alamat"]);
                                            rList.Add(rSingle);

                                        }





                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.FundClientPK, r.FundClientName, r.Alamat } into rGroup
                                                select rGroup;

                                        int incRowExcel = 1;

                                        incRowExcel++;


                                        foreach (var rsHeader in GroupByReference)
                                        {

                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Summary Account Statement";
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            incRowExcel = incRowExcel + 3;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = "Kepada Yth:";

                                            worksheet.Cells["E" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells[incRowExcel, 5].Value = "Laporan Kepemilikan Reksa Dana";
                                            incRowExcel++;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundClientName;

                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                            worksheet.Cells["E" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 5].Value = "Periode :" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMM yyy") + " - " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd MMM yyyy");



                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Open();
                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    cmd1.CommandText = @"
                                                   Select 
	                                                    isnull(D.Name,'') ClientName
	                                                    ,isnull(B.Name,'') ReksadanaName
	                                                    ,isnull(UnitAmount,0) UnitPenyertaan
	                                                    ,isnull(C.NAV,0) NABPerUnit
	                                                    ,isnull(UnitAmount,0) * isnull(C.NAV,0) NABRp, case when D.InvestorType = 1 then D.AlamatInd1 else AlamatPerusahaan end Alamat
                                                    From FundClientPosition A
                                                    left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                    left join CloseNAV C on A.FundPK = C.FundPK and C.status in (1,2) 
			                                                    and C.Date = @DateTo
                                                    left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
                                                    where A.Date = 
                                                    (
                                                        select max(Date) from FundClientPosition where Date <= @DateTo
                                                    )
                                                    and A.FundClientPK = @FundClientPK " + _paramFundFrom;

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@FundClientPK", rsHeader.Key.FundClientPK);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (!dr1.HasRows)
                                                        {
                                                            return false;
                                                        }
                                                        else
                                                        {

                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<MonthlyStatementPeriodik> rList1 = new List<MonthlyStatementPeriodik>();
                                                            while (dr1.Read())
                                                            {

                                                                MonthlyStatementPeriodik rSingle1 = new MonthlyStatementPeriodik();
                                                                rSingle1.ReksadanaName = Convert.ToString(dr1["ReksadanaName"]);
                                                                rSingle1.UnitPenyertaan = Convert.ToDecimal(dr1["UnitPenyertaan"]);
                                                                rSingle1.NABPerUnit = Convert.ToDecimal(dr1["NABPerUnit"]);
                                                                rSingle1.NABRp = Convert.ToDecimal(dr1["NABRp"]);
                                                                rSingle1.Alamat = Convert.ToString(dr1["Alamat"]);
                                                                rList1.Add(rSingle1);

                                                            }



                                                            var GroupByReference1 =
                                                            from r1 in rList1
                                                                //orderby r ascending
                                                            group r1 by new { r1.Alamat } into rGroup1
                                                            select rGroup1;





                                                            incRowExcel++;



                                                            foreach (var rsHeader1 in GroupByReference1)
                                                            {
                                                                int RowB = incRowExcel;
                                                                int RowG = incRowExcel + 1;




                                                                worksheet.Cells["E" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5].Value = "Kepemilikan Reksa Dana Principal - Tanggal : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd MMM yyyy");
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;



                                                                worksheet.Cells[RowB, 1].Value = rsHeader1.Key.Alamat;
                                                                worksheet.Cells[RowB, 1].Style.WrapText = true;
                                                                worksheet.Cells["A" + RowB + ":C" + RowG].Merge = true;
                                                                worksheet.Cells["A" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                                worksheet.Cells["A" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;


                                                                incRowExcel++;


                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 5].Value = "Reksa Dana";
                                                                worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                                worksheet.Cells[incRowExcel, 7].Value = "NAB per Unit";
                                                                worksheet.Cells[incRowExcel, 8].Value = "Unit Penyertaan";
                                                                worksheet.Cells[incRowExcel, 9].Value = "NAB (Rp)";


                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Font.Size = 12;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    incRowExcel++;
                                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.ReksadanaName;
                                                                    worksheet.Cells[incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                    worksheet.Cells["E" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail1.NABPerUnit;
                                                                    worksheet.Cells[incRowExcel, 8].Value = rsDetail1.UnitPenyertaan;
                                                                    worksheet.Cells[incRowExcel, 9].Value = rsDetail1.NABRp;

                                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00000000";
                                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";


                                                                }
                                                            }






                                                        }

                                                    }
                                                }
                                            }



                                            using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon2.Open();
                                                using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                {
                                                    cmd2.CommandText = @"
                                                    declare @DateMinOne datetime
                                                    set @DateMinOne = dbo.FWorkingDay(@datefrom,-1)
                                                    -- SALDO AWAL PERIODE
                                                    Select 
	                                                    isnull(D.Name,'') ClientName
	                                                    ,B.Name ReksadanaName
	                                                    ,D.IFUACode IFUA
	                                                    ,isnull(UnitAmount,0) UnitPenyertaan
	                                                    ,isnull(C.NAV,0) NABPerUnit
	                                                    ,isnull(UnitAmount,0) * isnull(C.NAV,0) NABRp
                                                    From FundClientPosition A
                                                    left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                                                    left join CloseNAV C on A.FundPK = C.FundPK and C.status in (1,2) 
			                                                    and C.Date = @DateFrom
                                                    left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
                                                    where A.Date = @DateMinOne and A.FundClientPK = @FundClientPK " + _paramFundFrom;

                                                    cmd2.CommandTimeout = 0;
                                                    cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd2.Parameters.AddWithValue("@FundClientPK", rsHeader.Key.FundClientPK);

                                                    using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                    {


                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<MonthlyStatementPeriodik> rList2 = new List<MonthlyStatementPeriodik>();
                                                        while (dr2.Read())
                                                        {

                                                            MonthlyStatementPeriodik rSingle2 = new MonthlyStatementPeriodik();
                                                            rSingle2.ReksaDanaCIMB = Convert.ToString(dr2["ReksadanaName"]);
                                                            rSingle2.IFUA = Convert.ToString(dr2["IFUA"]);
                                                            rSingle2.NABPerUnitCIMB = Convert.ToDecimal(dr2["NABPerUnit"]);
                                                            rSingle2.UnitPenyertaanCIMB = Convert.ToDecimal(dr2["UnitPenyertaan"]);
                                                            rSingle2.NABCIMB = Convert.ToDecimal(dr2["NABRp"]);
                                                            rList2.Add(rSingle2);

                                                        }



                                                        var GroupByReference2 =
                                                        from r2 in rList2
                                                            //orderby r.FundName ascending
                                                        group r2 by new { } into rGroup2
                                                        select rGroup2;

                                                        incRowExcel = incRowExcel + 3;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thick;
                                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Saldo Awal Periode - Tanggal :" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMM yyy");

                                                        incRowExcel++;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Reksa Dana";
                                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 5].Value = "IFUA";
                                                        worksheet.Cells[incRowExcel, 6].Value = "NAB per Unit";
                                                        worksheet.Cells[incRowExcel, 7].Value = "Unit Penyertaan";
                                                        worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 9].Value = "NAB (Rp)";


                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        foreach (var rsHeader2 in GroupByReference2)
                                                        {



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = 0;
                                                            int _no = 1;


                                                            //end area header
                                                            foreach (var rsDetail2 in rsHeader2)
                                                            {


                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail2.ReksaDanaCIMB;
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                                                worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail2.IFUA;
                                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail2.NABPerUnitCIMB;
                                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail2.UnitPenyertaanCIMB;
                                                                worksheet.Cells["G" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail2.NABCIMB;

                                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00000000";
                                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.0000";
                                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                _no++;
                                                                _endRowDetail = incRowExcel;



                                                            }

                                                        }








                                                    }
                                                }
                                            }


                                            using (SqlConnection DbCon3 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon3.Open();
                                                using (SqlCommand cmd3 = DbCon3.CreateCommand())
                                                {
                                                    cmd3.CommandText = @"

                                                    declare @DateMinOne datetime
                                                    set @DateMinOne = dbo.FWorkingDay(@DateFrom,-1)

                                                    Select A.FundPK,A.FundClientPK,A.Tanggal,A.Referensi,A.ClientName,A.ReksadanaName,A.Keterangan,
                                                    case when A.Keterangan = 'Subscription' then JumlahTransaksi else JumlahTransaksi * -1 end JumlahTransaksi,
                                                    case when A.Keterangan = 'Subscription' then JumlahTransaksiBersih else JumlahTransaksiBersih * -1 end JumlahTransaksiBersih, 
                                                    A.NABPerUnit,case when A.Keterangan = 'Subscription' then UnitPenyertaan else UnitPenyertaan * -1 end UnitPenyertaan,isnull(B.BegBalance,0) BegBalance
                                                    from 
                                                    (
	                                                    Select 
	                                                    A.FundPK
	                                                    ,A.FundClientPK
	                                                    ,A.NAVDate Tanggal
	                                                    ,'' Referensi
	                                                    ,C.Name ClientName
	                                                    ,B.Name ReksadanaName
	                                                    ,'Subscription' Keterangan
	                                                    ,isnull(A.CashAmount,0) JumlahTransaksi
	                                                    ,isnull(A.TotalCashAmount,0) JumlahTransaksiBersih
	                                                    ,isnull(A.NAV,0) NABPerUnit
	                                                    ,isnull(A.TotalUnitAmount,0) UnitPenyertaan
	                                                    From ClientSubscription A
	                                                    LEFT JOIN FUND B ON A.FundPK = B.FundPK and B.status in (1,2)
	                                                    left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                                                    Where A.NAVDate between @DateFrom and @DateTo
	                                                    and A.Posted = 1 and A.Revised = 0 and A.Status = 2

	                                                    UNION ALL

	                                                    Select 
	                                                    A.FundPK
	                                                    ,A.FundClientPK
	                                                    ,A.NAVDate Tanggal
	                                                    ,'' Referensi
	                                                    ,C.Name ClientName
	                                                    ,B.Name ReksadanaName
	                                                    ,'Redemption' Keterangan
	                                                    ,isnull(A.CashAmount,0) JumlahTransaksi
	                                                    ,isnull(A.TotalCashAmount,0) JumlahTransaksiBersih
	                                                    ,isnull(A.NAV,0) NABPerUnit
	                                                    ,isnull(A.UnitAmount,0) UnitPenyertaan
	                                                    From ClientRedemption A
	                                                    LEFT JOIN FUND B ON A.FundPK = B.FundPK and B.status in (1,2)
	                                                    left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                                                    Where A.NAVDate between @DateFrom and @DateTo
	                                                    and A.Posted = 1 and A.Revised = 0 and A.Status = 2

	                                                    UNION ALL

	                                                    Select 
	                                                    A.FundPKTo FundPK
	                                                    ,A.FundClientPK
	                                                    ,A.NAVDate Tanggal
	                                                    ,'Switch In' Referensi
	                                                    ,C.Name ClientName
	                                                    ,B.Name ReksadanaName
	                                                    ,'Subscription' Keterangan
	                                                    ,isnull(A.CashAmount,0) JumlahTransaksi
	                                                    ,isnull(A.TotalCashAmountFundTo,0) JumlahTransaksiBersih
	                                                    ,isnull(A.NAVFundTo,0) NABPerUnit
	                                                    ,isnull(A.TotalUnitAmountFundTo,0) UnitPenyertaan
	                                                    From ClientSwitching A
	                                                    LEFT JOIN FUND B ON A.FundPKTo = B.FundPK and B.status in (1,2)
	                                                    left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                                                    Where A.NAVDate between @DateFrom and @DateTo
	                                                    and A.Posted = 1 and A.Revised = 0 and A.Status = 2


	                                                    UNION ALL

	                                                    Select 
	                                                    A.FundPKFrom FundPK
	                                                    ,A.FundClientPK
	                                                    ,A.NAVDate Tanggal
	                                                    ,'Switch Out' Referensi
	                                                    ,C.Name ClientName
	                                                    ,B.Name ReksadanaName
	                                                    ,'Redemption' Keterangan
	                                                    ,isnull(A.CashAmount,0) JumlahTransaksi
	                                                    ,isnull(A.TotalCashAmountFundFrom,0) JumlahTransaksiBersih
	                                                    ,isnull(A.NAVFundFrom,0) NABPerUnit
	                                                    ,isnull(A.UnitAmount,0) UnitPenyertaan
	                                                    From ClientSwitching A
	                                                    LEFT JOIN FUND B ON A.FundPKFrom = B.FundPK and B.status in (1,2)
	                                                    left join FundClient C on A.FundClientPK = C.FundClientPK and C.status in (1,2)
	                                                    Where A.NAVDate between @DateFrom and @DateTo
	                                                    and A.Posted = 1 and A.Revised = 0 and A.Status = 2

                                                    )A 
                                                    LEFT JOIN (
		                                                    Select 
			                                                    A.FundPK,A.FundClientPK
			                                                    ,isnull(UnitAmount,0) BegBalance
		                                                    From FundClientPosition A
		                                                    left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
		                                                    left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
		                                                    where A.Date = @DateMinOne
                                                    )B on A.FUndPK = B.FundPK and A.FundClientPK = B.FundClientPK
                                                    where A.FundClientPK = @FundClientPK " + _paramFundFrom + @"
                                                    order by A.FundClientPK,A.FundPK,A.Tanggal asc ";

                                                    cmd3.CommandTimeout = 0;
                                                    cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd3.Parameters.AddWithValue("@FundClientPK", rsHeader.Key.FundClientPK);

                                                    using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                    {


                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<MonthlyStatementPeriodik> rList3 = new List<MonthlyStatementPeriodik>();
                                                        while (dr3.Read())
                                                        {

                                                            MonthlyStatementPeriodik rSingle3 = new MonthlyStatementPeriodik();
                                                            rSingle3.Tanggal = Convert.ToDateTime(dr3["Tanggal"]);
                                                            rSingle3.Product = Convert.ToString(dr3["ReksadanaName"]);
                                                            rSingle3.Referensi = Convert.ToString(dr3["Referensi"]);
                                                            rSingle3.Keterangan = Convert.ToString(dr3["Keterangan"]);
                                                            rSingle3.JumlahTransaksi = Convert.ToDecimal(dr3["JumlahTransaksi"]);
                                                            rSingle3.JumlahTransaksiBersih = Convert.ToDecimal(dr3["JumlahTransaksiBersih"]);
                                                            rSingle3.NABPerUnitReksa = Convert.ToDecimal(dr3["NABPerUnit"]);
                                                            rSingle3.UnitPenyertaan = Convert.ToDecimal(dr3["UnitPenyertaan"]);
                                                            rSingle3.BegBalance = Convert.ToDecimal(dr3["BegBalance"]);
                                                            rList3.Add(rSingle3);

                                                        }



                                                        int _begBalance;

                                                        var GroupByReference3 =
                                                        from r3 in rList3
                                                            //orderby r.FundName ascending
                                                        group r3 by new { r3.Product, r3.BegBalance } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 3;
                                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Transaksi Reksa Dana - Periode :" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd MMM yyy") + " - " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd MMM yyyy");

                                                        incRowExcel = incRowExcel + 1;

                                                        worksheet.Cells[incRowExcel, 2].Value = "";
                                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 8].Value = "Saldo Akhir";
                                                        worksheet.Cells["H" + incRowExcel + ":I" + incRowExcel].Merge = true;

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                        incRowExcel = incRowExcel + 1;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Tanggal";
                                                        //worksheet.Cells[incRowExcel, 2].Value = "Referensi";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Keterangan";
                                                        worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                        worksheet.Cells[incRowExcel, 4].Value = "Jumlah Transaksi";
                                                        worksheet.Cells[incRowExcel, 5].Value = "Jumlah Transaksi Bersih";
                                                        worksheet.Cells[incRowExcel, 6].Value = "NAB per Unit";
                                                        worksheet.Cells[incRowExcel, 7].Value = "Unit Penyertaan";
                                                        worksheet.Cells[incRowExcel, 8].Value = "Unit Penyertaan";
                                                        worksheet.Cells[incRowExcel, 9].Value = "NAB (Rp)";




                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                                        foreach (var rsHeader3 in GroupByReference3)
                                                        {



                                                            incRowExcel++;
                                                            worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Merge = true;
                                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader3.Key.Product;
                                                            worksheet.Cells[incRowExcel, 8].Value = rsHeader3.Key.BegBalance;
                                                            worksheet.Cells[incRowExcel, 8].Style.Font.Color.SetColor(Color.White);

                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = 0;
                                                            int _no = 1;

                                                            int _prev;
                                                            //end area header
                                                            foreach (var rsDetail3 in rsHeader3)
                                                            {

                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.Tanggal;
                                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd MMM yyyy";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                                //worksheet.Cells[incRowExcel, 2].Value = rsDetail3.Referensi;
                                                                //worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.Keterangan;
                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail3.JumlahTransaksi;
                                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail3.JumlahTransaksiBersih;
                                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail3.NABPerUnitReksa;
                                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail3.UnitPenyertaan;
                                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                if (dr3.HasRows)
                                                                {
                                                                    _prev = incRowExcel - 1;
                                                                    worksheet.Cells[incRowExcel, 8].Formula = "H" + _prev + "+G" + incRowExcel;
                                                                    worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                                    worksheet.Cells[incRowExcel, 9].Formula = "SUM(F" + incRowExcel + " * H" + incRowExcel + ")";
                                                                    worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                                                }


                                                                _no++;
                                                                _endRowDetail = incRowExcel;



                                                            }




                                                        }

                                                        incRowExcel = incRowExcel + 5;


                                                        worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;








                                                    }
                                                }
                                            }

                                        }


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 17;
                                        worksheet.Column(2).Width = 17;
                                        worksheet.Column(3).Width = 17;
                                        worksheet.Column(4).Width = 26;
                                        worksheet.Column(5).Width = 30;
                                        worksheet.Column(6).Width = 17;
                                        worksheet.Column(7).Width = 17;
                                        worksheet.Column(8).Width = 17;
                                        worksheet.Column(9).Width = 17;

                                        //worksheet.Column(10).AutoFit();
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&14 Monthly Statement Periodik";

                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);


                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();


                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Summary AUM
            else if (_unitRegistryRpt.ReportName.Equals("Report Summary AUM"))
            {
                try
                {
                    DateTime _dateTimeNow = DateTime.Now;
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _paramAgentLevelOne = "";
                            string _paramAgent = "";
                            bool _paramIsAgent = false;
                            bool _paramIsAgentLevelOne = false;


                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And B.SellingAgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            if (!_host.findString(_unitRegistryRpt.AgentLevelOneFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentLevelOneFrom))
                            {
                                _paramAgentLevelOne = "And A.AgentPK  in ( " + _unitRegistryRpt.AgentLevelOneFrom + " )";
                            }
                            else
                            {
                                _paramAgentLevelOne = "";
                            }
                            _paramIsAgent = _unitRegistryRpt.BitIsAgent;
                            _paramIsAgentLevelOne = _unitRegistryRpt.BitIsAgentLevelOne;

                            cmd.CommandText =

                            @"
                            CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo
    --GROUP BY A.SellingAgentPK
    --,B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    --B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9   ,A.FundClientPK, A.FundPK
)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
    OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
    OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
    OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



    insert into #AgentLevelOne
	select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


    select FundType, FundName, isnull(C.Name, 'PRINCIPAL') AgentLevelOne,AgentSubSales,A.AgentPK,MFee,AUM,Unit,A.Levels,A.Depth,A.Groups,A.SellingAgentPK,FundClientPK,FundClient from #Agent A -- 21129
	left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
	left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
    where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne;




                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportSummaryAUM" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportSummaryAUM" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Summary AUM");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportSummaryAUM> rList = new List<ReportSummaryAUM>();
                                        while (dr0.Read())
                                        {
                                            ReportSummaryAUM rSingle = new ReportSummaryAUM();
                                            rSingle.FundType = Convert.ToString(dr0["FundType"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.AgentLevelOne = Convert.ToString(dr0["AgentLevelOne"]);
                                            rSingle.AgentSubSales = Convert.ToString(dr0["AgentSubSales"]);
                                            rSingle.FundClient = Convert.ToString(dr0["FundClient"]);
                                            rSingle.Unit = Convert.ToDecimal(dr0["Unit"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rList.Add(rSingle);

                                        }
                                        if (_paramIsAgent == true && _paramIsAgentLevelOne == true)
                                        {
                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;
                                            int _colCurrency = 0;

                                            incRowExcel++;


                                            incRowExcel++;

                                            var _fundType = "";
                                            var _fundName = "";
                                            var _agentLevelOne = "";
                                            var _agentSubSales = "";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "rpt_NetSubs_byProduct";
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Agent Level One";
                                            worksheet.Cells[incRowExcel, 4].Value = "Agent Sub Sales";
                                            worksheet.Cells[incRowExcel, 5].Value = "Fund Client";
                                            worksheet.Cells[incRowExcel, 6].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 7].Value = "AUM (IDR)";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            int _rowStart, _rowEnd = 0;


                                            foreach (var rsHeader in QueryByFundID)
                                            {
                                                incRowExcel++;

                                                //Bikin NON SWITCHING

                                                if (_fundType != rsHeader.Key.FundType)
                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundType;
                                                if (_fundName != rsHeader.Key.FundName)
                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                                if (_agentLevelOne != rsHeader.Key.AgentLevelOne)
                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentLevelOne;
                                                //if (_agentSubSales != rsHeader.Key.AgentSubSales)
                                                worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.AgentSubSales;


                                                int _startRowDetail = incRowExcel;
                                                int _endRowDetail = 0;

                                                _rowStart = incRowExcel;


                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border
                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundClient;
                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail.Unit;
                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 7].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    incRowExcel++;
                                                    _endRowDetail = incRowExcel - 1;
                                                    _fundType = rsHeader.Key.FundType;
                                                    _fundName = rsHeader.Key.FundName;
                                                    _agentLevelOne = rsHeader.Key.AgentLevelOne;
                                                    _agentSubSales = rsHeader.Key.AgentSubSales;

                                                }



                                                _rowEnd = incRowExcel;

                                                worksheet.Cells[incRowExcel, 1].Value = "Total AUM Level Agent";
                                                worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 7].Calculate();

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd1 = DbCon.CreateCommand())
                                            {


                                                cmd1.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType, FundName,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType,FundName ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList1 = new List<ReportSummaryAUM>();
                                                        while (dr1.Read())
                                                        {

                                                            ReportSummaryAUM rSingle1 = new ReportSummaryAUM();
                                                            rSingle1.FundType = Convert.ToString(dr1["FundType"]);
                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                            rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                            rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);



                                                            rList1.Add(rSingle1);

                                                        }



                                                        var GroupByReference1 =
                                                        from r in rList1
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 4].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader1 in GroupByReference1)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING

                                                            if (_fundType != rsHeader1.Key.FundType)
                                                            {
                                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.FundType;
                                                            }
                                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.FundName;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail1 in rsHeader1)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader1.Key.FundType;
                                                                _fundName = rsHeader1.Key.FundName;
                                                                _agentLevelOne = rsHeader1.Key.AgentLevelOne;
                                                                _agentSubSales = rsHeader1.Key.AgentSubSales;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd2 = DbCon.CreateCommand())
                                            {


                                                cmd2.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {
                                                    if (!dr2.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList2 = new List<ReportSummaryAUM>();
                                                        while (dr2.Read())
                                                        {

                                                            ReportSummaryAUM rSingle2 = new ReportSummaryAUM();
                                                            rSingle2.FundType = Convert.ToString(dr2["FundType"]);
                                                            rSingle2.Unit = Convert.ToDecimal(dr2["Unit"]);
                                                            rSingle2.AUM = Convert.ToDecimal(dr2["AUM"]);



                                                            rList2.Add(rSingle2);

                                                        }



                                                        var GroupByReference2 =
                                                        from r in rList2
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 3].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader2 in GroupByReference2)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING


                                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.FundType;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail2 in rsHeader2)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.Unit;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.AUM;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader2.Key.FundType;
                                                                _fundName = rsHeader2.Key.FundName;
                                                                _agentLevelOne = rsHeader2.Key.AgentLevelOne;
                                                                _agentSubSales = rsHeader2.Key.AgentSubSales;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd3 = DbCon.CreateCommand())
                                            {


                                                cmd3.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {
                                                    if (!dr3.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList3 = new List<ReportSummaryAUM>();
                                                        while (dr3.Read())
                                                        {

                                                            ReportSummaryAUM rSingle3 = new ReportSummaryAUM();
                                                            rSingle3.Unit = Convert.ToDecimal(dr3["Unit"]);
                                                            rSingle3.AUM = Convert.ToDecimal(dr3["AUM"]);



                                                            rList3.Add(rSingle3);

                                                        }



                                                        var GroupByReference3 =
                                                        from r in rList3
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "All Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 2].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader3 in GroupByReference3)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING



                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail3 in rsHeader3)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.Unit;
                                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.AUM;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader3.Key.FundType;
                                                                _fundName = rsHeader3.Key.FundName;
                                                                _agentLevelOne = rsHeader3.Key.AgentLevelOne;
                                                                _agentSubSales = rsHeader3.Key.AgentSubSales;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 7];

                                            worksheet.Column(1).Width = 35;
                                            worksheet.Column(2).Width = 80;
                                            worksheet.Column(3).Width = 21;
                                            worksheet.Column(4).Width = 28;

                                            worksheet.Column(5).Width = 33;
                                            worksheet.Column(6).Width = 21;
                                            worksheet.Column(7).Width = 21;

                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                            //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                            worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B Report Summary AUM";




                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            Image img = Image.FromFile(Tools.ReportImage);
                                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                            package.Save();
                                            if (_unitRegistryRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }

                                            return true;
                                        }

                                        else if (_paramIsAgent == true && _paramIsAgentLevelOne == false)
                                        {
                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.FundType, r.FundName, r.AgentSubSales
                                                group r by new { r.FundType, r.FundName, r.AgentSubSales } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;

                                            incRowExcel++;


                                            incRowExcel++;

                                            var _fundType = "";
                                            var _fundName = "";
                                            var _agentSubSales = "";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "rpt_NetSubs_byProduct";
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Agent Sub Sales";
                                            worksheet.Cells[incRowExcel, 4].Value = "AUM (IDR)";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            int _rowStart, _rowEnd = 0;


                                            foreach (var rsHeader in QueryByFundID)
                                            {
                                                incRowExcel++;

                                                //Bikin NON SWITCHING

                                                if (_fundType != rsHeader.Key.FundType)
                                                {
                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundType;
                                                }
                                                if (_fundName != rsHeader.Key.FundName)
                                                {
                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                                }




                                                int _startRowDetail = incRowExcel;
                                                int _endRowDetail = 0;

                                                _rowStart = incRowExcel;


                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border
                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentSubSales;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    incRowExcel++;
                                                    _endRowDetail = incRowExcel - 1;
                                                    _fundType = rsHeader.Key.FundType;
                                                    _fundName = rsHeader.Key.FundName;
                                                    _agentSubSales = rsHeader.Key.AgentSubSales;

                                                }



                                                _rowEnd = incRowExcel;

                                                worksheet.Cells[incRowExcel, 1].Value = "Total AUM per Fund Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4].Calculate();

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            }
                                            //worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd1 = DbCon.CreateCommand())
                                            {


                                                cmd1.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType, FundName,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType,FundName ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList1 = new List<ReportSummaryAUM>();
                                                        while (dr1.Read())
                                                        {

                                                            ReportSummaryAUM rSingle1 = new ReportSummaryAUM();
                                                            rSingle1.FundType = Convert.ToString(dr1["FundType"]);
                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                            rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                            rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);



                                                            rList1.Add(rSingle1);

                                                        }



                                                        var GroupByReference1 =
                                                        from r in rList1
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 4].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader1 in GroupByReference1)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING

                                                            if (_fundType != rsHeader1.Key.FundType)
                                                            {
                                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.FundType;
                                                            }
                                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.FundName;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail1 in rsHeader1)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader1.Key.FundType;
                                                                _fundName = rsHeader1.Key.FundName;
                                                                _agentSubSales = rsHeader1.Key.AgentSubSales;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd2 = DbCon.CreateCommand())
                                            {


                                                cmd2.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {
                                                    if (!dr2.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList2 = new List<ReportSummaryAUM>();
                                                        while (dr2.Read())
                                                        {

                                                            ReportSummaryAUM rSingle2 = new ReportSummaryAUM();
                                                            rSingle2.FundType = Convert.ToString(dr2["FundType"]);
                                                            rSingle2.Unit = Convert.ToDecimal(dr2["Unit"]);
                                                            rSingle2.AUM = Convert.ToDecimal(dr2["AUM"]);



                                                            rList2.Add(rSingle2);

                                                        }



                                                        var GroupByReference2 =
                                                        from r in rList2
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 3].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader2 in GroupByReference2)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING


                                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.FundType;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail2 in rsHeader2)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.Unit;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.AUM;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader2.Key.FundType;
                                                                _fundName = rsHeader2.Key.FundName;
                                                                _agentSubSales = rsHeader2.Key.AgentSubSales;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd3 = DbCon.CreateCommand())
                                            {


                                                cmd3.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {
                                                    if (!dr3.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList3 = new List<ReportSummaryAUM>();
                                                        while (dr3.Read())
                                                        {

                                                            ReportSummaryAUM rSingle3 = new ReportSummaryAUM();
                                                            rSingle3.Unit = Convert.ToDecimal(dr3["Unit"]);
                                                            rSingle3.AUM = Convert.ToDecimal(dr3["AUM"]);



                                                            rList3.Add(rSingle3);

                                                        }



                                                        var GroupByReference3 =
                                                        from r in rList3
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "All Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 2].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader3 in GroupByReference3)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING



                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail3 in rsHeader3)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.Unit;
                                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.AUM;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader3.Key.FundType;
                                                                _fundName = rsHeader3.Key.FundName;
                                                                _agentSubSales = rsHeader3.Key.AgentSubSales;


                                                            }

                                                        }



                                                    }

                                                }
                                            }






                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 4];

                                            worksheet.Column(1).Width = 35;
                                            worksheet.Column(2).Width = 80;
                                            worksheet.Column(3).Width = 50;
                                            worksheet.Column(4).Width = 21;


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                            //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                            worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B Report Summary AUM";




                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            Image img = Image.FromFile(Tools.ReportImage);
                                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                            package.Save();
                                            if (_unitRegistryRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }

                                            return true;
                                        }
                                        else if (_paramIsAgent == false && _paramIsAgentLevelOne == true)
                                        {
                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.FundType, r.FundName, r.AgentLevelOne
                                                group r by new { r.FundType, r.FundName, r.AgentLevelOne } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;
                                            int _colCurrency = 0;

                                            incRowExcel++;


                                            incRowExcel++;

                                            var _fundType = "";
                                            var _fundName = "";
                                            var _agentLevelOne = "";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "rpt_NetSubs_byProduct";
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Agent Level One";
                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 5].Value = "AUM (IDR)";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            int _rowStart, _rowEnd = 0;


                                            foreach (var rsHeader in QueryByFundID)
                                            {
                                                incRowExcel++;

                                                //Bikin NON SWITCHING

                                                if (_fundType != rsHeader.Key.FundType)
                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundType;
                                                if (_fundName != rsHeader.Key.FundName)
                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;
                                                //if (_agentLevelOne != rsHeader.Key.AgentLevelOne)



                                                int _startRowDetail = incRowExcel;
                                                int _endRowDetail = 0;

                                                _rowStart = incRowExcel;


                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border
                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader.Key.AgentLevelOne;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    incRowExcel++;
                                                    _endRowDetail = incRowExcel - 1;
                                                    _fundType = rsHeader.Key.FundType;
                                                    _fundName = rsHeader.Key.FundName;
                                                    _agentLevelOne = rsHeader.Key.AgentLevelOne;

                                                }



                                                _rowEnd = incRowExcel;

                                                worksheet.Cells[incRowExcel, 1].Value = "Total Unit & AUM by Fund Name";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":R" + _endRowDetail + ")";

                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Calculate();

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            }
                                            //worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd1 = DbCon.CreateCommand())
                                            {


                                                cmd1.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType, FundName,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType,FundName ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList1 = new List<ReportSummaryAUM>();
                                                        while (dr1.Read())
                                                        {

                                                            ReportSummaryAUM rSingle1 = new ReportSummaryAUM();
                                                            rSingle1.FundType = Convert.ToString(dr1["FundType"]);
                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                            rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                            rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);



                                                            rList1.Add(rSingle1);

                                                        }



                                                        var GroupByReference1 =
                                                        from r in rList1
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 4].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader1 in GroupByReference1)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING

                                                            if (_fundType != rsHeader1.Key.FundType)
                                                            {
                                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.FundType;
                                                            }
                                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.FundName;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail1 in rsHeader1)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader1.Key.FundType;
                                                                _fundName = rsHeader1.Key.FundName;
                                                                _agentLevelOne = rsHeader1.Key.AgentLevelOne;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd2 = DbCon.CreateCommand())
                                            {


                                                cmd2.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {
                                                    if (!dr2.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList2 = new List<ReportSummaryAUM>();
                                                        while (dr2.Read())
                                                        {

                                                            ReportSummaryAUM rSingle2 = new ReportSummaryAUM();
                                                            rSingle2.FundType = Convert.ToString(dr2["FundType"]);
                                                            rSingle2.Unit = Convert.ToDecimal(dr2["Unit"]);
                                                            rSingle2.AUM = Convert.ToDecimal(dr2["AUM"]);



                                                            rList2.Add(rSingle2);

                                                        }



                                                        var GroupByReference2 =
                                                        from r in rList2
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 3].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader2 in GroupByReference2)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING


                                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.FundType;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail2 in rsHeader2)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.Unit;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.AUM;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader2.Key.FundType;
                                                                _fundName = rsHeader2.Key.FundName;
                                                                _agentLevelOne = rsHeader2.Key.AgentLevelOne;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd3 = DbCon.CreateCommand())
                                            {


                                                cmd3.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {
                                                    if (!dr3.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList3 = new List<ReportSummaryAUM>();
                                                        while (dr3.Read())
                                                        {

                                                            ReportSummaryAUM rSingle3 = new ReportSummaryAUM();
                                                            rSingle3.Unit = Convert.ToDecimal(dr3["Unit"]);
                                                            rSingle3.AUM = Convert.ToDecimal(dr3["AUM"]);



                                                            rList3.Add(rSingle3);

                                                        }



                                                        var GroupByReference3 =
                                                        from r in rList3
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "All Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 2].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader3 in GroupByReference3)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING



                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail3 in rsHeader3)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.Unit;
                                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.AUM;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader3.Key.FundType;
                                                                _fundName = rsHeader3.Key.FundName;
                                                                _agentLevelOne = rsHeader3.Key.AgentLevelOne;


                                                            }

                                                        }



                                                    }

                                                }
                                            }





                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];

                                            worksheet.Column(1).Width = 35;
                                            worksheet.Column(2).Width = 80;
                                            worksheet.Column(3).Width = 50;
                                            worksheet.Column(4).Width = 21;
                                            worksheet.Column(5).Width = 21;


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                            //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                            worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B Report Summary AUM";




                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            Image img = Image.FromFile(Tools.ReportImage);
                                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                            package.Save();
                                            if (_unitRegistryRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }

                                            return true;
                                        }

                                        else
                                        {
                                            var QueryByFundID =
                                                from r in rList
                                                orderby r.FundType, r.FundName
                                                group r by new { r.FundType, r.FundName } into rGroup
                                                select rGroup;

                                            int incRowExcel = 1;
                                            int _colCurrency = 0;

                                            incRowExcel++;


                                            incRowExcel++;

                                            var _fundType = "";
                                            var _fundName = "";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "rpt_NetSubs_byProduct";
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                            //worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 4].Value = "Period : " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " Until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                            //worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                            worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                            worksheet.Cells[incRowExcel, 3].Value = "Fund Client";
                                            worksheet.Cells[incRowExcel, 4].Value = "Unit";
                                            worksheet.Cells[incRowExcel, 5].Value = "AUM (IDR)";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            int _rowStart, _rowEnd = 0;


                                            foreach (var rsHeader in QueryByFundID)
                                            {
                                                incRowExcel++;

                                                //Bikin NON SWITCHING

                                                if (_fundType != rsHeader.Key.FundType)
                                                    worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.FundType;
                                                if (_fundName != rsHeader.Key.FundName)
                                                    worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.FundName;


                                                int _startRowDetail = incRowExcel;
                                                int _endRowDetail = 0;

                                                _rowStart = incRowExcel;


                                                foreach (var rsDetail in rsHeader)
                                                {

                                                    //ThickBox Border
                                                    //area detail
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail.FundClient;
                                                    worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail.Unit;
                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail.AUM;
                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                    incRowExcel++;
                                                    _endRowDetail = incRowExcel - 1;
                                                    _fundType = rsHeader.Key.FundType;
                                                    _fundName = rsHeader.Key.FundName;

                                                }



                                                _rowEnd = incRowExcel;

                                                worksheet.Cells[incRowExcel, 1].Value = "Total AUM Level Fund Type";
                                                worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;


                                                worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Calculate();

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Bold = true;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            }
                                            //worksheet.Cells[incRowExcel, 1].Value = "TOTAL";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.AliceBlue);
                                            //worksheet.Cells[incRowExcel, 7].Value = Get_TotalCashAmountSubsRedempByDateFromToGroupByCurrencyID(_unitRegistryRpt.ValueDateFrom, _unitRegistryRpt.ValueDateTo, _currency, _unitRegistryRpt.Status);
                                            //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells["A" + incRowExcel + ":G" + incRowExcel].Style.Font.Bold = true;

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd1 = DbCon.CreateCommand())
                                            {


                                                cmd1.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType, FundName,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType,FundName ";

                                                cmd1.CommandTimeout = 0;
                                                cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                {
                                                    if (!dr1.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList1 = new List<ReportSummaryAUM>();
                                                        while (dr1.Read())
                                                        {

                                                            ReportSummaryAUM rSingle1 = new ReportSummaryAUM();
                                                            rSingle1.FundType = Convert.ToString(dr1["FundType"]);
                                                            rSingle1.FundName = Convert.ToString(dr1["FundName"]);
                                                            rSingle1.Unit = Convert.ToDecimal(dr1["Unit"]);
                                                            rSingle1.AUM = Convert.ToDecimal(dr1["AUM"]);



                                                            rList1.Add(rSingle1);

                                                        }



                                                        var GroupByReference1 =
                                                        from r in rList1
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Fund Name";
                                                        worksheet.Cells[incRowExcel, 3].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 4].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader1 in GroupByReference1)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING

                                                            if (_fundType != rsHeader1.Key.FundType)
                                                            {
                                                                worksheet.Cells[incRowExcel, 1].Value = rsHeader1.Key.FundType;
                                                            }
                                                            worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.FundName;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail1 in rsHeader1)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail1.Unit;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail1.AUM;
                                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader1.Key.FundType;
                                                                _fundName = rsHeader1.Key.FundName;


                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd2 = DbCon.CreateCommand())
                                            {


                                                cmd2.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd2.CommandTimeout = 0;
                                                cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                {
                                                    if (!dr2.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList2 = new List<ReportSummaryAUM>();
                                                        while (dr2.Read())
                                                        {

                                                            ReportSummaryAUM rSingle2 = new ReportSummaryAUM();
                                                            rSingle2.FundType = Convert.ToString(dr2["FundType"]);
                                                            rSingle2.Unit = Convert.ToDecimal(dr2["Unit"]);
                                                            rSingle2.AUM = Convert.ToDecimal(dr2["AUM"]);



                                                            rList2.Add(rSingle2);

                                                        }



                                                        var GroupByReference2 =
                                                        from r in rList2
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "Per Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Fund Type";
                                                        worksheet.Cells[incRowExcel, 2].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 3].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader2 in GroupByReference2)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING


                                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader2.Key.FundType;


                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail2 in rsHeader2)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail2.Unit;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail2.AUM;
                                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader2.Key.FundType;
                                                                _fundName = rsHeader2.Key.FundName;

                                                            }

                                                        }



                                                    }

                                                }
                                            }

                                            DbCon.Close();
                                            DbCon.Open();
                                            using (SqlCommand cmd3 = DbCon.CreateCommand())
                                            {


                                                cmd3.CommandText = @"
                                                CREATE TABLE #Agent
(
FundType nvarchar(200),
FundName nvarchar(200),
AgentLevelOne nvarchar(200),
AgentSubSales nvarchar(200),
AgentPK int,
AgentID  nvarchar(200),
Mfee numeric(19, 8),
AUM numeric(22, 6),
Unit numeric(19, 8),
Levels int,
Depth int,
Groups bit,
SellingAgentPK int,
FundClientPK int,
FundClient nvarchar(200)
)


CREATE TABLE #AgentLevelOne
(
AgentPK int,
SellingAgentPK int
)



insert into #Agent
Select
MV1.DescOne FundType,
C.Name FundName,
A.Name AgentLevelOne,
D.Name AgentSubSales,
A.AgentPK,
A.ID,
B.Mfee Mfee,
B.AUM AUM,
B.AgentFee Unit,
A.Levels,
A.Depth,
A.Groups,
B.SellingAgentPK,
B.FundClientPK,
E.Name FundClient
From Agent A,
(
    Select A.SellingAgentPK,A.MFee Mfee, A.AUM AUM, A.AgentFee AgentFee
      , B.ParentPK1, B.ParentPK2, B.ParentPK3, B.ParentPK4, B.ParentPK5,      
    B.ParentPK6, B.ParentPK7, B.ParentPK8, B.ParentPK9    ,A.FundClientPK, A.FundPK
    From DailyDataForCommissionRptNew A

    INNER JOIN Agent B on A.SellingAgentPK = B.AgentPK and B.status in (1,2)
	WHERE A.MFeeDate between @DateFrom and @DateTo

)AS B
left join Fund C on B.FundPK = C.FundPK and C.status in (1,2)
left join Agent D on B.SellingAgentPK = D.AgentPK and D.status in (1,2)
left join FundClient E on B.FundClientPK = E.FundClientPK and E.status in (1,2)
left join MasterValue MV1 on C.Type = MV1.Code and MV1.ID = 'FundType' and MV1.status in (1,2)

WHERE(B.SellingAgentPK = A.AgentPK OR B.ParentPK1 = A.AgentPK OR B.ParentPK2 = A.AgentPK
OR B.ParentPK3 = A.AgentPK OR B.ParentPK4 = A.AgentPK OR B.ParentPK5 = A.AgentPK
OR B.ParentPK6 = A.AgentPK OR B.ParentPK7 = A.AgentPK OR B.ParentPK8 = A.AgentPK
OR B.ParentPK9 = A.AgentPK)       and A.Status = 2 " + _paramAgent + _paramAgentLevelOne + @"



insert into #AgentLevelOne
select distinct AgentPK,SellingAgentPK from #Agent where levels = 1


select FundType,sum(AUM) AUM,sum(Unit) Unit from #Agent A -- 21129
left join #AgentLevelOne B on A.SellingAgentPK = B.SellingAgentPK
left join Agent C on B.AgentPK = C.AgentPK and C.Status in (1,2) 
where A.Groups <> 1 " + _paramAgent + _paramAgentLevelOne +
@"group by FundType ";

                                                cmd3.CommandTimeout = 0;
                                                cmd3.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                cmd3.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);

                                                using (SqlDataReader dr3 = cmd3.ExecuteReader())
                                                {
                                                    if (!dr3.HasRows)
                                                    {
                                                        return false;
                                                    }
                                                    else
                                                    {

                                                        //ATUR DATA GROUPINGNYA DULU
                                                        List<ReportSummaryAUM> rList3 = new List<ReportSummaryAUM>();
                                                        while (dr3.Read())
                                                        {

                                                            ReportSummaryAUM rSingle3 = new ReportSummaryAUM();
                                                            rSingle3.Unit = Convert.ToDecimal(dr3["Unit"]);
                                                            rSingle3.AUM = Convert.ToDecimal(dr3["AUM"]);



                                                            rList3.Add(rSingle3);

                                                        }



                                                        var GroupByReference3 =
                                                        from r in rList3
                                                        orderby r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales
                                                        group r by new { r.FundType, r.FundName, r.AgentLevelOne, r.AgentSubSales } into rGroup
                                                        select rGroup;

                                                        incRowExcel = incRowExcel + 2;
                                                        worksheet.Cells[incRowExcel, 1].Value = "All Fund Type Level";
                                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                                        incRowExcel++;
                                                        _fundType = "";
                                                        _fundName = "";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                        worksheet.Cells[incRowExcel, 1].Value = "Unit";
                                                        worksheet.Cells[incRowExcel, 2].Value = "AUM (IDR)";

                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Font.Size = 12;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                                        //int _rowStart, _rowEnd = 0;
                                                        foreach (var rsHeader3 in GroupByReference3)
                                                        {


                                                            incRowExcel++;

                                                            //Bikin NON SWITCHING



                                                            //int _startRowDetail = incRowExcel;
                                                            //int _endRowDetail = 0;



                                                            int _startRowDetail = incRowExcel;
                                                            int _endRowDetail = incRowExcel;


                                                            //end area header
                                                            foreach (var rsDetail3 in rsHeader3)
                                                            {

                                                                //incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail3.Unit;
                                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail3.AUM;
                                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                                _endRowDetail = incRowExcel - 1;
                                                                _fundType = rsHeader3.Key.FundType;
                                                                _fundName = rsHeader3.Key.FundName;


                                                            }

                                                        }



                                                    }

                                                }
                                            }





                                            worksheet.PrinterSettings.FitToPage = true;
                                            worksheet.PrinterSettings.FitToWidth = 1;
                                            worksheet.PrinterSettings.FitToHeight = 0;
                                            worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel - 1, 5];

                                            worksheet.Column(1).Width = 35;
                                            worksheet.Column(2).Width = 80;
                                            worksheet.Column(3).Width = 50;
                                            worksheet.Column(4).Width = 21;
                                            worksheet.Column(5).Width = 21;


                                            // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                            //worksheet.Cells["A3:I14"].AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                            //worksheetApproved.Cells["A3:E3"].AutoFitColumns();
                                            worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                            worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN

                                            worksheet.HeaderFooter.OddHeader.CenteredText = "\n \n \n  &18&B Report Summary AUM";




                                            // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                            worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                            worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                            worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                            worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                            Image img = Image.FromFile(Tools.ReportImage);
                                            worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);
                                            //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                            //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();
                                            //worksheet.HeaderFooter.OddHeader.RightAlignedText = Tools.DefaultReportHeaderRightText();

                                            worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                            string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                            ////worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                            //worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();



                                            package.Save();
                                            if (_unitRegistryRpt.DownloadMode == "PDF")
                                            {
                                                Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                            }

                                            return true;
                                        }
                                    }
                                }
                            }

                        }

                    }
                }
                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region NAV List
            if (_unitRegistryRpt.ReportName.Equals("NAV List"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And A.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }



                            cmd.CommandText = @"
                            --declare @datefrom datetime
                            --declare @dateto datetime

                            --set @datefrom = '10/01/2020'
                            --set @dateto = '10/31/2020'

                            select isnull(B.Name,'') ProductName,isnull(B.ID,'') Code,A.Date NAVDate,isnull(A.AUM,0) AUM,sum(isnull(C.UnitAmount,0)) Units,isnull(A.Nav,0) NAVperUnit from CloseNAV A
                            left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
                            left join FundClientPosition C on A.FundPK = C.FundPK and A.Date = C.Date
                            where A.date between @ValueDateFrom and @ValueDateTo and A.status in (1,2) " + _paramFund + @"
                            group by B.Name,B.ID,A.Date,A.AUM,A.Nav
                            order by A.Date,B.ID
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@ValueDateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@ValueDateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "NAVList" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "NAVList" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("NAV List");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<NAVList> rList = new List<NAVList>();
                                        while (dr0.Read())
                                        {

                                            NAVList rSingle = new NAVList();
                                            rSingle.ProductName = dr0["ProductName"].ToString();
                                            rSingle.Code = dr0["Code"].ToString();
                                            rSingle.NAVDate = Convert.ToDateTime(dr0["NAVDate"]);
                                            rSingle.AUM = Convert.ToDecimal(dr0["AUM"]);
                                            rSingle.Units = Convert.ToDecimal(dr0["Units"]);
                                            rSingle.NAVperUnit = Convert.ToDecimal(dr0["NAVperUnit"]);
                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 2;


                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "Period :" + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells["D" + incRowExcel + ":F" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Product Name";
                                            worksheet.Cells[incRowExcel, 2].Value = "Code";
                                            worksheet.Cells[incRowExcel, 3].Value = "NAV Date";
                                            worksheet.Cells[incRowExcel, 4].Value = "AUM";
                                            worksheet.Cells[incRowExcel, 5].Value = "Units";
                                            worksheet.Cells[incRowExcel, 6].Value = "NAV Per Unit";

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.ProductName;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.Code;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.NAVDate;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "dd-MMM-yyyy";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.AUM;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Units;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.NAVperUnit;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";


                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).AutoFit();
                                        worksheet.Column(2).AutoFit();
                                        worksheet.Column(3).AutoFit();
                                        worksheet.Column(4).AutoFit();
                                        worksheet.Column(5).AutoFit();
                                        worksheet.Column(6).AutoFit();




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Portrait; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.LeftAlignedText = "&16 NAV List Report";


                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily NCF Report
            if (_unitRegistryRpt.ReportName.Equals("Daily NCF Report"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {



                            cmd.CommandText = @"
                            --declare @datefrom date
                            --declare @dateto date

                            --set @datefrom = '2020-03-01'
                            --set @dateto = '2020-03-10'

                            --DROP TABLE #Trx

                            declare @yesterdayfrom date
                            declare @yesterdayTo date

                            set @yesterdayfrom = dbo.FWorkingDay(@datefrom,-1)
                            set @yesterdayTo = dbo.FWorkingDay(@dateto,-1)


                            CREATE TABLE #Trx
                            (
	                            ValueDate datetime,
	                            Sales numeric(19,4),
	                            Redemption numeric(19,4)
                            )

                            insert into #Trx
                            select Date,sum(Sales),sum(Redemption) from (
                            select A.ValueDate Date, sum(A.CashAmount * isnull(C.Rate,1) ) Sales,0 Redemption from ClientSubscription A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.status in (1,2)
                            where A.ValueDate between @DateFrom and @DateTo and A.status = 2 and A.Posted = 1
                            group by A.ValueDate
                            union all
                            select A.ValueDate Date, sum(A.CashAmount * isnull(C.Rate,1)) Sales,0 from ClientSwitching A
                            left join Fund B on A.FundPKTo = B.FundPK and B.status = 2
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.status in (1,2)
                            where A.ValueDate between @DateFrom and @DateTo and A.status = 2 and A.Posted = 1
                            group by A.ValueDate
                            union all
                            select A.ValueDate Date,0, sum(A.CashAmount * isnull(C.Rate,1)) Redemption from ClientRedemption A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.status in (1,2)
                            where A.ValueDate between @DateFrom and @DateTo and A.status = 2 and A.Posted = 1
                            group by A.ValueDate
                            union all
                            select A.ValueDate Date,0, sum(A.CashAmount * isnull(C.Rate,1)) Redemption from ClientSwitching A
                            left join Fund B on A.FundPKFrom = B.FundPK and B.status = 2
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.status in (1,2)
                            where A.ValueDate between @DateFrom and @DateTo and A.status = 2 and A.Posted = 1
                            group by A.ValueDate
                            ) D
                            group by D.Date


                            select A.date,sum(AUM * isnull(C.Rate,1)) AumAfter, isnull(D.AumBefore,0) AumBefore,E.Sales,E.Redemption from CloseNAV A
                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.Date
                            left join (
	                            select dbo.Fworkingday(A.date,1) date,sum(AUM * isnull(C.Rate,1)) AumBefore from CloseNAV A
	                            left join Fund B on A.FundPK = B.FundPK and B.status = 2
	                            left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.Date
	                            where A.Date between @yesterdayfrom and @yesterdayto
	                            group by A.Date
                            ) D on A.Date = D.Date
                            left join #Trx E on A.Date = E.ValueDate
                            where A.Date between @datefrom and @dateto and A.status in (1,2)
                            group by A.Date,D.AumBefore,E.Sales,E.Redemption
                            order by A.Date






                           ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@datefrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@dateto", _unitRegistryRpt.ValueDateTo);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailyNCFReport" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyNCFReport" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily NCF Report");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyNCFReport> rList = new List<DailyNCFReport>();
                                        while (dr0.Read())
                                        {

                                            DailyNCFReport rSingle = new DailyNCFReport();
                                            rSingle.Date = Convert.ToDateTime(dr0["date"]);
                                            rSingle.AUMBefore = Convert.ToDecimal(dr0["AUMBefore"]);
                                            rSingle.Sales = Convert.ToDecimal(dr0["Sales"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["Redemption"]);
                                            rSingle.AUMAfter = Convert.ToDecimal(dr0["AUMAfter"]);




                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Daily NCF Report";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To     :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Daily NCF";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Date";
                                            worksheet.Cells[incRowExcel, 2].Value = "AUM Before";
                                            worksheet.Cells[incRowExcel, 3].Value = "Sales";
                                            worksheet.Cells[incRowExcel, 4].Value = "Redemption";
                                            worksheet.Cells[incRowExcel, 5].Value = "NCF";
                                            worksheet.Cells[incRowExcel, 6].Value = "Delta AUM        (Market Movement)";
                                            worksheet.Cells[incRowExcel, 6].Style.WrapText = true;
                                            worksheet.Cells[incRowExcel, 7].Value = "AUM After";
                                            worksheet.Cells[incRowExcel, 8].Value = "%";

                                            worksheet.Row(incRowExcel).Height = 37;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.VerticalAlignment = ExcelVerticalAlignment.Center;



                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 8].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.Date;
                                                worksheet.Cells[incRowExcel, 1].Style.Numberformat.Format = "dd-MMM-yy";

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.AUMBefore;
                                                worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.Sales;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Sales - rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.AUMAfter - rsDetail.AUMBefore;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 6].Calculate();

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AUMAfter;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUMAfter / rsDetail.AUMBefore - 1;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#0\\.00%";

                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;



                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 8];
                                        worksheet.Column(1).Width = 21;
                                        worksheet.Column(2).Width = 22;
                                        worksheet.Column(3).Width = 22;
                                        worksheet.Column(4).Width = 22;
                                        worksheet.Column(5).Width = 22;
                                        worksheet.Column(6).Width = 22;
                                        worksheet.Column(7).Width = 22;
                                        worksheet.Column(8).Width = 22;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Daily NCF Per Asset Class
            if (_unitRegistryRpt.ReportName.Equals("Daily NCF Per Asset Class"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {




                            cmd.CommandText = @"
--declare @datefrom date
--declare @dateto date

--set @datefrom = '2020-03-2'
--set @dateto = '2020-03-10'
--DROP TABLE #Trx

declare @yesterdayfrom date
declare @yesterdayTo date

set @yesterdayfrom = dbo.FWorkingDay(@datefrom,-1)
set @yesterdayTo = dbo.FWorkingDay(@dateto,-1)

select @datefrom = case when dbo.CheckTodayIsHoliday(@datefrom) = 1 then dbo.FWorkingDay(@datefrom,-1) else @datefrom end

CREATE TABLE #Trx
(
	AssetClass int,
	Sales numeric(19,4),
	Redemption numeric(19,4)
)

insert into #Trx
select AssetClass,sum(Sales),sum(Redemption) from (
select B.Type AssetClass, sum(A.CashAmount * isnull(C.Rate,1) ) Sales,0 Redemption from ClientSubscription A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.Status = 2
where A.ValueDate between @DateFrom and @yesterdayTo and A.status = 2 and A.Posted = 1
group by B.Type
union all
select B.Type AssetClass, sum(A.CashAmount * isnull(C.Rate,1)) Sales,0 from ClientSwitching A
left join Fund B on A.FundPKTo = B.FundPK and B.status = 2
left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.Status = 2
where A.ValueDate between @DateFrom and @yesterdayTo and A.status = 2 and A.Posted = 1
group by B.Type
union all
select B.Type AssetClass,0, sum(A.CashAmount * isnull(C.Rate,1)) Redemption from ClientRedemption A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.Status = 2
where A.ValueDate between @DateFrom and @yesterdayTo and A.status = 2 and A.Posted = 1
group by B.Type
union all
select B.Type AssetClass,0, sum(A.CashAmount * isnull(C.Rate,1)) Redemption from ClientSwitching A
left join Fund B on A.FundPKFrom = B.FundPK and B.status = 2
left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.ValueDate and C.Status = 2
where A.ValueDate between @DateFrom and @yesterdayTo and A.status = 2 and A.Posted = 1
group by B.Type
) D
group by D.AssetClass


select isnull(B.Type,'') Type,isnull(G.DescOne,'') AssetClass,COUNT(*) NumberOfFunds,sum(AUM * isnull(C.Rate,1)) AumAfter, isnull(D.AumBefore,0) AumBefore,E.Sales,E.Redemption from CloseNAV A
left join Fund B on A.FundPK = B.FundPK and B.status = 2
left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.Date and C.Status = 2
left join (
	select B.Type AssetClass,sum(AUM * isnull(C.Rate,1)) AumBefore from CloseNAV A
	left join Fund B on A.FundPK = B.FundPK and B.status = 2
	left join CurrencyRate C on B.CurrencyPK = C.CurrencyPK and C.Date = A.Date and C.Status = 2
	where A.Date = @datefrom	
	group by B.Type
) D on B.Type = D.AssetClass
left join #Trx E on B.Type = E.AssetClass
left join MasterValue G on B.Type = G.Code and G.status in (1,2) and G.ID = 'FundType'
where A.Date = @yesterdayTo
group by B.Type,G.DescOne,D.AumBefore,E.Sales,E.Redemption


                           ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);



                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "DailyNCFperAssetClass" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "DailyNCFperAssetClass" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Daily NCF per Asset Class");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<DailyNCFPerAssetClass> rList = new List<DailyNCFPerAssetClass>();
                                        while (dr0.Read())
                                        {

                                            DailyNCFPerAssetClass rSingle = new DailyNCFPerAssetClass();
                                            rSingle.AssetClass = dr0["AssetClass"].ToString();
                                            rSingle.NumberOfFunds = Convert.ToDecimal(dr0["NumberOfFunds"]);
                                            rSingle.AUMBeforeAmount = Convert.ToDecimal(dr0["AUMBefore"]);
                                            rSingle.Sales = Convert.ToDecimal(dr0["Sales"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["Redemption"]);
                                            rSingle.AUMAfterAmount = Convert.ToDecimal(dr0["AUMAfter"]);



                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Size = 16;
                                        worksheet.Cells[incRowExcel, 1].Value = "Daily NCF per Asset Class";

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date From :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Date To     :";
                                        worksheet.Cells[incRowExcel, 2].Value = Convert.ToDateTime(_unitRegistryRpt.ValueDateTo);
                                        worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "dd-MMM-yyyy";
                                        worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel++;

                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Instrument :";
                                            //worksheet.Cells[incRowExcel, 2].Value = rsHeader.Key.InstrumentID;

                                            incRowExcel = incRowExcel + 2;

                                            worksheet.Cells[incRowExcel, 1].Value = "Daily NCF per Asset Class";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Size = 12;
                                            worksheet.Cells["A" + incRowExcel + ":I" + incRowExcel].Merge = true;
                                            worksheet.Cells[incRowExcel, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            incRowExcel++;

                                            int RowG = incRowExcel + 1;
                                            worksheet.Cells[incRowExcel, 1, RowG, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowG, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowG, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, RowG, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "ASSET CLASS";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + incRowExcel + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "NUMBER OF FUNDS";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + incRowExcel + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "AUM BEFORE";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + RowG].Merge = true;
                                            worksheet.Cells["C" + incRowExcel + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + incRowExcel + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 3].Value = "Date";
                                            worksheet.Cells[RowG, 3].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 4].Value = "%";
                                            worksheet.Cells[RowG, 4].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "SALES";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + incRowExcel + ":E" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells["E" + incRowExcel + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + incRowExcel + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + incRowExcel + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "REDEMPTION";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + incRowExcel + ":F" + incRowExcel].Style.WrapText = true;
                                            worksheet.Cells["F" + incRowExcel + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + incRowExcel + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + incRowExcel + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "NCF";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + incRowExcel + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + incRowExcel + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "AUM AFTER";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + incRowExcel + ":I" + RowG].Merge = true;
                                            worksheet.Cells["H" + incRowExcel + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + incRowExcel + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowG, 8].Value = "Date";
                                            worksheet.Cells[RowG, 8].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[RowG, 9].Value = "%";
                                            worksheet.Cells[RowG, 9].Style.Font.Bold = true;
                                            worksheet.Cells[RowG, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;


                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Font.Size = 12;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                                            incRowExcel++;

                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 9].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.AssetClass;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.NumberOfFunds;
                                                worksheet.Cells[incRowExcel, 2].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUMBeforeAmount;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 4].Formula = "=(C" + incRowExcel + "/C1)" + "* 100";
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#0\\.00%";

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.Sales;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Redemption;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.Sales - rsDetail.Redemption; ;
                                                worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.AUMAfterAmount;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";

                                                worksheet.Cells[incRowExcel, 9].Formula = "=(H" + incRowExcel + "/D1)" + "* 100";
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#0\\.00%";

                                                no++;
                                                _endRowDetail = incRowExcel;


                                            }
                                            incRowExcel++;


                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;
                                            worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 5].Formula = "SUM(E" + _startRowDetail + ":E" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 6].Formula = "SUM(F" + _startRowDetail + ":F" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 7].Formula = "SUM(G" + _startRowDetail + ":G" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 8].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";

                                            worksheet.Cells[1, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            worksheet.Cells[1, 3].Style.Font.Color.SetColor(Color.White);
                                            worksheet.Cells[1, 4].Formula = "SUM(H" + _startRowDetail + ":H" + _endRowDetail + ")";
                                            worksheet.Cells[1, 4].Style.Font.Color.SetColor(Color.White);

                                            worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#0\\.00%";
                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 8].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#0\\.00%";
                                            worksheet.Cells[incRowExcel, 2, incRowExcel, 9].Calculate();


                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 9];
                                        worksheet.Column(1).Width = 32;
                                        worksheet.Column(2).Width = 22;
                                        worksheet.Column(3).Width = 22;
                                        worksheet.Column(4).Width = 22;
                                        worksheet.Column(5).Width = 22;
                                        worksheet.Column(6).Width = 22;
                                        worksheet.Column(7).Width = 22;
                                        worksheet.Column(8).Width = 22;
                                        worksheet.Column(9).Width = 22;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        //worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Equity Summary";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Switching List
            if (_unitRegistryRpt.ReportName.Equals("Switching List"))
            {
                try
                {

                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {
                            string _statusSubs = "";
                            string _paramFund = "";

                            if (!_host.findString(_unitRegistryRpt.FundFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundFrom))
                            {
                                _paramFund = "And C.FundPK in ( " + _unitRegistryRpt.FundFrom + " ) ";
                            }
                            else
                            {
                                _paramFund = "";
                            }

                            if (_unitRegistryRpt.Status == 1)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 2)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 1 and A.Revised = 1 ";
                            }
                            else if (_unitRegistryRpt.Status == 3)
                            {
                                _statusSubs = "  A.Status = 2 and A.Posted = 0 and A.Revised = 0 ";
                            }
                            else if (_unitRegistryRpt.Status == 4)
                            {
                                _statusSubs = "  A.Status = 1  ";
                            }
                            else if (_unitRegistryRpt.Status == 5)
                            {
                                _statusSubs = "  A.Status = 3  ";
                            }
                            else if (_unitRegistryRpt.Status == 6)
                            {
                                _statusSubs = "  (A.Status = 2 or A.Posted = 1) and A.Revised = 0  ";
                            }
                            else if (_unitRegistryRpt.Status == 7)
                            {
                                _statusSubs = "  (A.Status = 1 Or A.Status = 2 or A.Posted = 1) and  A.Revised = 0  ";
                            }

                            cmd.CommandText = @"
select B.Name NamaInvestor,isnull(B.SID,'') SID, isnull(B.IFUACode,'') IFUA,E.Name FundNameFrom,E.Name FundNameTo,A.ValueDate Tanggal,A.TotalCashAmountFundFrom AmountOut,
A.NAVFundFrom NAVOut,A.TotalUnitAmountFundFrom UnitOut,A.SwitchingFeePercent FeePercentOut,A.SwitchingFeeAmount FeeAmountOut,A.TotalCashAmountFundTo AmountIn,A.NAVFundTo NAVIn,A.TotalUnitAmountFundTo UnitIn,A.SwitchingFeePercent FeePercentIn,A.SwitchingFeeAmount FeeAmountIn 
 from ClientSwitching A 
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Fund C on A.FundPKTo  = C.FundPK and C.status in (1,2)
left join Fund E on A.FundPKFrom  = E.FundPK and E.status in (1,2)
left join CurrencyRate D on C.CurrencyPK = D.CurrencyPK and D.status in (1,2) and Date = 
(
	select max(date) from CurrencyRate where CurrencyPK = C.CurrencyPK and date <= A.ValueDate and status = 2
)

where A.Type <> 3 and  A.ValueDate between @Datefrom and @Dateto

order by A.ValueDate,B.Name,C.ID 

";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@Datefrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@Dateto", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "SwitchingList" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "SwitchingList" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("SwitchingList");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<SwitchingList> rList = new List<SwitchingList>();
                                        while (dr0.Read())
                                        {

                                            SwitchingList rSingle = new SwitchingList();

                                            rSingle.NamaInvestor = Convert.ToString(dr0["NamaInvestor"]);
                                            rSingle.SID = Convert.ToString(dr0["SID"]);
                                            rSingle.IFUA = Convert.ToString(dr0["IFUA"]);
                                            rSingle.FundNameFrom = Convert.ToString(dr0["FundNameFrom"]);
                                            rSingle.FundNameTo = Convert.ToString(dr0["FundNameTo"]);
                                            rSingle.Tanggal = Convert.ToDateTime(dr0["Tanggal"]);
                                            rSingle.AmountOut = Convert.ToDecimal(dr0["AmountOut"]);
                                            rSingle.NAVOut = Convert.ToDecimal(dr0["NAVOut"]);
                                            rSingle.UnitOut = Convert.ToDecimal(dr0["UnitOut"]);
                                            rSingle.FeePercentOut = Convert.ToDecimal(dr0["FeePercentOut"]);
                                            rSingle.FeeAmountOut = Convert.ToDecimal(dr0["FeeAmountOut"]);
                                            rSingle.AmountIn = Convert.ToDecimal(dr0["AmountIn"]);
                                            rSingle.NAVIn = Convert.ToDecimal(dr0["NAVIn"]);
                                            rSingle.UnitIn = Convert.ToDecimal(dr0["UnitIn"]);
                                            rSingle.FeePercentIn = Convert.ToDecimal(dr0["FeePercentIn"]);
                                            rSingle.FeeAmountIn = Convert.ToDecimal(dr0["FeeAmountIn"]);


                                            rList.Add(rSingle);

                                        }

                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 7].Value = "Switching List";
                                        worksheet.Cells[incRowExcel, 7].Style.Font.Italic = true;
                                        worksheet.Cells["G" + incRowExcel + ":L" + incRowExcel].Merge = true;
                                        worksheet.Cells["G" + incRowExcel + ":L" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells["G" + incRowExcel + ":L" + incRowExcel].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells["G" + incRowExcel + ":L" + incRowExcel].Style.Fill.BackgroundColor.SetColor(Color.LightGray);




                                        incRowExcel = incRowExcel + 2;


                                        foreach (var rsHeader in GroupByReference)
                                        {


                                            int RowB = incRowExcel;
                                            int RowG = incRowExcel + 1;



                                            worksheet.Cells[RowB, 1, RowG, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[RowB, 1, RowG, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = "Nama Investor";
                                            worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Merge = true;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["A" + RowB + ":A" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 2].Value = "SID";
                                            worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Merge = true;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["B" + RowB + ":B" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 3].Value = "IFUA";
                                            worksheet.Cells[incRowExcel, 3].Style.Font.Bold = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Merge = true;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["C" + RowB + ":C" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 4].Value = "Fund Name From";
                                            worksheet.Cells[incRowExcel, 4].Style.Font.Bold = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Merge = true;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["D" + RowB + ":D" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 5].Value = "Fund Name To";
                                            worksheet.Cells[incRowExcel, 5].Style.Font.Bold = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Merge = true;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["E" + RowB + ":E" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 6].Value = "Date";
                                            worksheet.Cells[incRowExcel, 6].Style.Font.Bold = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Merge = true;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["F" + RowB + ":F" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 7].Value = "Amount Out";
                                            worksheet.Cells[incRowExcel, 7].Style.Font.Bold = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Merge = true;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["G" + RowB + ":G" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 8].Value = "Nav Out";
                                            worksheet.Cells[incRowExcel, 8].Style.Font.Bold = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Merge = true;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["H" + RowB + ":H" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 9].Value = "Unit Out";
                                            worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Merge = true;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["I" + RowB + ":I" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;



                                            worksheet.Cells[incRowExcel, 10].Value = "Fee % Out";
                                            worksheet.Cells[incRowExcel, 10].Style.Font.Bold = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Merge = true;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["J" + RowB + ":J" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 11].Value = "Fee Amount Out";
                                            worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Merge = true;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["K" + RowB + ":K" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 12].Value = "Amount In";
                                            worksheet.Cells[incRowExcel, 12].Style.Font.Bold = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Merge = true;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["L" + RowB + ":L" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 13].Value = "Nav In";
                                            worksheet.Cells[incRowExcel, 13].Style.Font.Bold = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Merge = true;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["M" + RowB + ":M" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 14].Value = "Unit In";
                                            worksheet.Cells[incRowExcel, 14].Style.Font.Bold = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Merge = true;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["N" + RowB + ":N" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 15].Value = "Fee % In";
                                            worksheet.Cells[incRowExcel, 15].Style.Font.Bold = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Merge = true;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["O" + RowB + ":O" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[incRowExcel, 16].Value = "Fee Amount In";
                                            worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Merge = true;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                            worksheet.Cells["P" + RowB + ":P" + RowG].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                            worksheet.Cells[RowB, 1, RowG, 16].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[RowB, 1, RowG, 16].Style.Fill.BackgroundColor.SetColor(Color.LightGray);


                                            incRowExcel++;


                                            int first = incRowExcel;

                                            int no = 1;
                                            int _startRowDetail = incRowExcel;
                                            int _endRowDetail = 0;

                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 16].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                worksheet.Cells[incRowExcel, 1].Value = rsDetail.NamaInvestor;
                                                worksheet.Cells[incRowExcel, 1].Style.WrapText = true;

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.SID;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.IFUA;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.FundNameFrom;

                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.FundNameTo;

                                                worksheet.Cells[incRowExcel, 6].Value = rsDetail.Tanggal;
                                                worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "dd MMM yyyy";
                                                worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

                                                worksheet.Cells[incRowExcel, 7].Value = rsDetail.AmountOut;

                                                worksheet.Cells[incRowExcel, 8].Value = rsDetail.NAVOut;
                                                worksheet.Cells[incRowExcel, 8].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 8, incRowExcel, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 9].Value = rsDetail.UnitOut;
                                                worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 9, incRowExcel, 9].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 10].Value = rsDetail.FeePercentOut;
                                                worksheet.Cells[incRowExcel, 10].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 10, incRowExcel, 10].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 11].Value = rsDetail.FeeAmountOut;
                                                worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 11, incRowExcel, 11].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 12].Value = rsDetail.AmountIn;
                                                worksheet.Cells[incRowExcel, 12].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 12, incRowExcel, 12].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 13].Value = rsDetail.NAVIn;
                                                worksheet.Cells[incRowExcel, 13].Style.Numberformat.Format = "#,##0.0000";
                                                worksheet.Cells[incRowExcel, 13, incRowExcel, 13].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                                                worksheet.Cells[incRowExcel, 14].Value = rsDetail.UnitIn;
                                                worksheet.Cells[incRowExcel, 14, incRowExcel, 14].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 14].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 15].Value = rsDetail.FeePercentIn;
                                                //worksheet.Cells[incRowExcel, 15].Style.WrapText = true;
                                                worksheet.Cells[incRowExcel, 15, incRowExcel, 15].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 15].Style.Numberformat.Format = "#,##0.0000";

                                                worksheet.Cells[incRowExcel, 16].Value = rsDetail.FeeAmountIn;
                                                worksheet.Cells[incRowExcel, 16, incRowExcel, 16].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.0000";



                                                no++;
                                                _endRowDetail = incRowExcel;

                                            }

                                            //incRowExcel++;
                                            //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            //worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                            //worksheet.Cells["A" + incRowExcel + ":H" + incRowExcel].Merge = true;



                                            //worksheet.Cells[incRowExcel, 9].Formula = "SUM(I" + _startRowDetail + ":I" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 9].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 9].Calculate();
                                            //worksheet.Cells[incRowExcel, 9].Style.Font.Bold = true;


                                            //worksheet.Cells[incRowExcel, 11].Formula = "SUM(K" + _startRowDetail + ":K" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 11].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 11].Calculate();
                                            //worksheet.Cells[incRowExcel, 11].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 16].Formula = "SUM(P" + _startRowDetail + ":P" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 16].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 16].Calculate();
                                            //worksheet.Cells[incRowExcel, 16].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 17].Formula = "SUM(Q" + _startRowDetail + ":Q" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 17].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 17].Calculate();
                                            //worksheet.Cells[incRowExcel, 17].Style.Font.Bold = true;

                                            worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 16];
                                        worksheet.Column(1).Width = 40;
                                        worksheet.Column(2).Width = 12;
                                        worksheet.Column(3).Width = 18;
                                        worksheet.Column(4).Width = 50;
                                        worksheet.Column(5).Width = 50;
                                        worksheet.Column(6).Width = 21;
                                        worksheet.Column(7).Width = 30;
                                        worksheet.Column(8).Width = 30;
                                        worksheet.Column(9).Width = 30;
                                        worksheet.Column(10).Width = 30;
                                        worksheet.Column(11).Width = 20;
                                        worksheet.Column(12).Width = 30;
                                        worksheet.Column(13).Width = 30;
                                        worksheet.Column(14).Width = 30;
                                        worksheet.Column(15).Width = 30;
                                        worksheet.Column(16).Width = 20;




                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Switching List";



                                        Image img = Image.FromFile(Tools.ReportImage);
                                        worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Right);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Net Subs Monthly by distributor JWD Simple Range
            if (_unitRegistryRpt.ReportName.Equals("Report Net Subs Monthly by distributor JWD Simple Range"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And E.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText = @"
--declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'


--drop table #TempNetSubs
--drop table #TempTotalProductCategory


create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK int,
	SUB numeric (18,2),
	RED numeric (18,2),
	SwitchIN numeric (18,2),
	SwitchOUT numeric (18,2)
)

create table #TempTotalProductCategory
(
	ProductCategory nvarchar(100),
	FundName nvarchar(100),
	TotalSUB numeric (18,2),
	TotalRED numeric (18,2),
	TotalNetSubs numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK)
select distinct A.FundClientPK,A.FundPK,B.Type,C.SellingAgentPK  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select distinct FundClientPK,FundPKTo From ClientSwitching  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPKFrom From ClientSwitching where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK 
where C.Status in(1,2)

--select * from #TempNetSubs

Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set SwitchIN = isnull(B.SumCashAmountSwitchIN,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKTo,Sum(CashAmount) SumCashAmountSwitchIN From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKTo
)B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPKTo

Update A set SwitchOUT = isnull(B.SumCashAmountSwitchOUT,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKFrom,Sum(CashAmount) SumCashAmountSwitchOUT From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKFrom
)B on A.FundClientPK = B.FundClientPK and A.FundPK = FundPKFrom


insert into #TempTotalProductCategory(ProductCategory,FundName,TotalSUB,TotalRED,TotalNetSubs)
select B.Name ProductCategory,C.Name FundName,
sum(isnull(SUB,0)+ isnull(SwitchIN,0)) SUB
,sum(isnull(RED,0) + isnull(SwitchOUT,0)) RED
,sum(isnull(SUB,0)+ isnull(SwitchIN,0)) - sum(isnull(RED,0) + isnull(SwitchOUT,0)) NetSubscription 
From #TempNetSubs A
Left Join  Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
Left Join  Agent E on B.ParentPK = E.AgentPK and E.status in (1,2)--ParentAgent
Left Join  Fund C on A.FundPK = C.FundPK 
where C.Status in (1,2)  " + _paramAgent + @"
group by C.Name,B.Name

select * from #TempTotalProductCategory
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNetSubsMonthlybydistributorJWDSimpleRange" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNetSubsMonthlybydistributorJWDSimpleRange" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Net Subs Monthly by distributor JWD Simple Range");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNetSubsMonthlybydistributorJWDSimpleRange> rList = new List<ReportNetSubsMonthlybydistributorJWDSimpleRange>();
                                        while (dr0.Read())
                                        {

                                            ReportNetSubsMonthlybydistributorJWDSimpleRange rSingle = new ReportNetSubsMonthlybydistributorJWDSimpleRange();

                                            rSingle.ProductCategory = Convert.ToString(dr0["ProductCategory"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.TotalSUB = Convert.ToDecimal(dr0["TotalSUB"]);
                                            rSingle.TotalRED = Convert.ToDecimal(dr0["TotalRED"]);
                                            rSingle.TotalNetSubs = Convert.ToDecimal(dr0["TotalNetSubs"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ProductCategory } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        int rowstart = 0;
                                        int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period: " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Asal Transaksi";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Subs";
                                        worksheet.Cells[incRowExcel, 4].Value = "Redeem";
                                        worksheet.Cells[incRowExcel, 5].Value = "Net Subs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(0, 51, 102));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ProductCategory;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(51, 102, 153));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);

                                            //int first = incRowExcel;

                                            //int no = 1;
                                            //int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            rowstart = incRowExcel + 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);
                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TotalSUB;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalsubs = totalsubs + rsDetail.TotalSUB;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalRED;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalredemp = totalredemp + rsDetail.TotalRED;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TotalNetSubs;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalnetsubs = totalnetsubs + rsDetail.TotalNetSubs;



                                                //no++;
                                                //_endRowDetail = incRowExcel;
                                                rowend = incRowExcel;
                                            }


                                            worksheet.Cells[rowheader, 3].Formula = "SUM(C" + rowstart + ":C" + rowend + ")";
                                            worksheet.Cells[rowheader, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 3].Calculate();

                                            worksheet.Cells[rowheader, 4].Formula = "SUM(D" + rowstart + ":D" + rowend + ")";
                                            worksheet.Cells[rowheader, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 4].Calculate();

                                            worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                            worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 5].Calculate();
                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 2].Calculate();

                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 3].Calculate();

                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();


                                            //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 4].Value = totalredemp;
                                        worksheet.Cells[incRowExcel, 5].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Net Subs Monthly by distributor JWD Simple Range";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Net subs monthly JWD BOD Range
            if (_unitRegistryRpt.ReportName.Equals("Report Net subs monthly JWD BOD Range"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramFundType = "";

                            if (!_host.findString(_unitRegistryRpt.FundTypeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundTypeFrom))
                            {
                                _paramFundType = "and C.Type in ( " + _unitRegistryRpt.FundTypeFrom + " ) ";
                            }
                            else
                            {
                                _paramFundType = "";

                            }
                            cmd.CommandText = @"

--declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'

--declare @ProductCategory nvarchar(50)
--set @ProductCategory = 'EQUITY FUND'

--drop table #TempNetSubs
--drop table #TempTotalProductCategory


create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK int,
	SUB numeric (18,2),
	RED numeric (18,2),
	SwitchIN numeric (18,2),
	SwitchOUT numeric (18,2)
)

create table #TempTotalProductCategory
(
	ProductCategory nvarchar(100),
	FundName nvarchar(100),
	TotalSUB numeric (18,2),
	TotalRED numeric (18,2),
	TotalNetSubs numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK)
select distinct A.FundClientPK,A.FundPK,B.Type,C.SellingAgentPK  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select distinct FundClientPK,FundPKTo From ClientSwitching  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPKFrom From ClientSwitching where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK 
where C.Status in(1,2)

--select * from #TempNetSubs

Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set SwitchIN = isnull(B.SumCashAmountSwitchIN,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKTo,Sum(CashAmount) SumCashAmountSwitchIN From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKTo
)B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPKTo

Update A set SwitchOUT = isnull(B.SumCashAmountSwitchOUT,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKFrom,Sum(CashAmount) SumCashAmountSwitchOUT From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKFrom
)B on A.FundClientPK = B.FundClientPK and A.FundPK = FundPKFrom


insert into #TempTotalProductCategory(ProductCategory,FundName,TotalSUB,TotalRED,TotalNetSubs)
select D.DescOne ProductCategory,C.Name FundName,
sum(isnull(SUB,0)+ isnull(SwitchIN,0)) SUB
,sum(isnull(RED,0) + isnull(SwitchOUT,0)) RED
,sum(isnull(SUB,0)+ isnull(SwitchIN,0)) - sum(isnull(RED,0) + isnull(SwitchOUT,0)) NetSubscription 
From #TempNetSubs A
Left Join  Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
Left Join  Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
Left Join  MasterValue D on A.Type = D.Code and D.ID = 'FundType' --and D.Status in (1,2)
where D.Status in (1,2)  " + _paramFundType + @"
group by C.Name,D.DescOne

select * from #TempTotalProductCategory

                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNetsubsmonthlyJWDBODRange" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNetsubsmonthlyJWDBODRange" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Net subs monthly JWD BOD Range");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNetsubsmonthlyJWDBODRange> rList = new List<ReportNetsubsmonthlyJWDBODRange>();
                                        while (dr0.Read())
                                        {

                                            ReportNetsubsmonthlyJWDBODRange rSingle = new ReportNetsubsmonthlyJWDBODRange();

                                            rSingle.ProductCategory = Convert.ToString(dr0["ProductCategory"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.TotalSUB = Convert.ToDecimal(dr0["TotalSUB"]);
                                            rSingle.TotalRED = Convert.ToDecimal(dr0["TotalRED"]);
                                            rSingle.TotalNetSubs = Convert.ToDecimal(dr0["TotalNetSubs"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ProductCategory } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        int rowstart = 0;
                                        int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "Period: " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy") + " until " + Convert.ToDateTime(_unitRegistryRpt.ValueDateTo).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Category";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "Subs";
                                        worksheet.Cells[incRowExcel, 4].Value = "Redeem";
                                        worksheet.Cells[incRowExcel, 5].Value = "Net Subs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(153, 0, 51));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ProductCategory;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 102, 102));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);

                                            //int first = incRowExcel;

                                            //int no = 1;
                                            //int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            rowstart = incRowExcel + 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.TotalSUB;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalsubs = totalsubs + rsDetail.TotalSUB;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.TotalRED;
                                                worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalredemp = totalredemp + rsDetail.TotalRED;


                                                worksheet.Cells[incRowExcel, 5].Value = rsDetail.TotalNetSubs;
                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalnetsubs = totalnetsubs + rsDetail.TotalNetSubs;



                                                //no++;
                                                //_endRowDetail = incRowExcel;
                                                rowend = incRowExcel;
                                            }


                                            worksheet.Cells[rowheader, 3].Formula = "SUM(C" + rowstart + ":C" + rowend + ")";
                                            worksheet.Cells[rowheader, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 3].Calculate();

                                            worksheet.Cells[rowheader, 4].Formula = "SUM(D" + rowstart + ":D" + rowend + ")";
                                            worksheet.Cells[rowheader, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 4].Calculate();

                                            worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                            worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 5].Calculate();
                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 2].Calculate();

                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 3].Calculate();

                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();


                                            //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2, incRowExcel, 5].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 4].Value = totalredemp;
                                        worksheet.Cells[incRowExcel, 5].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 3, incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Net subs monthly JWD BOD Range";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Summary AUM by Distributor JWD Simple
            if (_unitRegistryRpt.ReportName.Equals("Report Summary AUM by Distributor JWD Simple"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And D.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText = @"

--declare @DateFrom date
--set @DateFrom = '05/29/20'

declare @DateFCP date
select @DateFCP = DTM1 from dbo.ZDT_WorkingDays where date = @DateFrom

--select @DateFCP DateFCP,@DateFrom DateFrom

--drop table #TempFCP
create table #TempFCP
(
AgentPK1 int,
AgentPK2 int,
FundClientPK int,
FundPK int,
AUMIDR numeric(18,2),
[Count] int
)

insert into #TempFCP(AgentPK1,AgentPK2,FundClientPK,FundPK,AUMIDR,[Count])
select D.AgentPK AgentPK1,C.AgentPK AgentPK2,B.FundClientPK,E.FundPK,isnull(F.Nav,0) * isnull(A.UnitAmount,0) AUMIDR, 1 [Count] from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join Agent D on C.ParentPK = D.AgentPK and D.Status in (1,2) 
left join Fund E on A.FundPK = E.FundPK and E.Status in (1,2)
left join (
select FundPK,Nav from CloseNAV where date = @DateFrom and status in (1,2)
)F on A.FundPK = F.FundPK
where date = @DateFCP " + _paramAgent + @"

select C.Name AgentName2
,E.Name FundName
,sum(AUMIDR)AUMIDR
, sum([Count]) [Count] 
from #TempFCP A
left join Agent B on A.AgentPK1 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK2 = C.AgentPK and C.status in (1,2)
left join fund E on A.FundPK = E.FundPK and E.status in (1,2)
--where C.Name = @AgentName2
group by C.Name,E.Name

                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportSummaryAUMbyDistributorJWDSimple" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportSummaryAUMbyDistributorJWDSimple" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Summary AUM by Distributor JWD Simple");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportSummaryAUMbyDistributorJWDSimple> rList = new List<ReportSummaryAUMbyDistributorJWDSimple>();
                                        while (dr0.Read())
                                        {

                                            ReportSummaryAUMbyDistributorJWDSimple rSingle = new ReportSummaryAUMbyDistributorJWDSimple();


                                            rSingle.AgentName2 = Convert.ToString(dr0["AgentName2"]);
                                            rSingle.FundName = Convert.ToString(dr0["FundName"]);
                                            rSingle.AUMIDR = Convert.ToDecimal(dr0["AUMIDR"]);
                                            rSingle.Count = Convert.ToInt32(dr0["Count"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.AgentName2 } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        int rowstart = 0;
                                        int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        //decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "As of: " + Convert.ToDateTime(_unitRegistryRpt.ValueDateFrom).ToString("dd-MMM-yyyy");
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                        incRowExcel = incRowExcel + 2;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Asal Transaksi";
                                        worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 3].Value = "AUM IDR";
                                        worksheet.Cells[incRowExcel, 4].Value = "Count";
                                        //worksheet.Cells[incRowExcel, 5].Value = "Net Subs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(153, 0, 51));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Color.SetColor(Color.White);
                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.AgentName2;
                                            worksheet.Cells["A" + incRowExcel + ":B" + incRowExcel].Merge = true;
                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 102, 102));
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Color.SetColor(Color.White);

                                            //int first = incRowExcel;

                                            //int no = 1;
                                            //int _startRowDetail = incRowExcel;
                                            //int _endRowDetail = 0;
                                            rowstart = incRowExcel + 1;
                                            foreach (var rsDetail in rsHeader)
                                            {
                                                incRowExcel++;

                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                //worksheet.Cells[incRowExcel, 2, incRowExcel, 4].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                worksheet.Cells[incRowExcel, 2].Value = rsDetail.FundName;

                                                worksheet.Cells[incRowExcel, 3].Value = rsDetail.AUMIDR;
                                                worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 3, incRowExcel, 3].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalsubs = totalsubs + rsDetail.AUMIDR;

                                                worksheet.Cells[incRowExcel, 4].Value = rsDetail.Count;
                                                //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                totalredemp = totalredemp + rsDetail.Count;


                                                //worksheet.Cells[incRowExcel, 5].Value = rsDetail.NetSubscription;
                                                //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                //worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                //totalnetsubs = totalnetsubs + rsDetail.NetSubscription;



                                                //no++;
                                                //_endRowDetail = incRowExcel;
                                                rowend = incRowExcel;
                                            }


                                            worksheet.Cells[rowheader, 3].Formula = "SUM(C" + rowstart + ":C" + rowend + ")";
                                            worksheet.Cells[rowheader, 3].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 3].Calculate();

                                            worksheet.Cells[rowheader, 4].Formula = "SUM(D" + rowstart + ":D" + rowend + ")";
                                            //worksheet.Cells[rowheader, 4].Style.Numberformat.Format = "#,##0.00";
                                            worksheet.Cells[rowheader, 4].Calculate();

                                            //worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                            //worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[rowheader, 5].Calculate();
                                            //incRowExcel++;

                                            //worksheet.Cells[incRowExcel, 1].Value = "Total";
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Font.Bold = true;

                                            //worksheet.Cells[incRowExcel, 2].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 2].Formula = "SUM(B" + _startRowDetail + ":B" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 2].Calculate();

                                            //worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 3].Formula = "SUM(C" + _startRowDetail + ":C" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 3].Calculate();

                                            //worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                            //worksheet.Cells[incRowExcel, 4].Formula = "SUM(D" + _startRowDetail + ":D" + _endRowDetail + ")";
                                            //worksheet.Cells[incRowExcel, 4].Calculate();


                                            //worksheet.Row(incRowExcel).PageBreak = _unitRegistryRpt.PageBreak;

                                            //foreach (var rsHeader in GroupByReference)
                                            //{

                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 3].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 4].Value = totalredemp;
                                        //worksheet.Cells[incRowExcel, 5].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 3].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 4];
                                        worksheet.Column(1).Width = 5;
                                        worksheet.Column(2).Width = 45;
                                        worksheet.Column(3).Width = 25;
                                        worksheet.Column(4).Width = 10;
                                        //worksheet.Column(5).Width = 25;



                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Summary AUM by Distributor JWD Simple";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Summary AUM by Distributor JWD NOC
            if (_unitRegistryRpt.ReportName.Equals("Report Summary AUM by Distributor JWD NOC"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _nameSheet = "";
                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And D.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            cmd.CommandText = @"
--declare @DateFrom date
--set @DateFrom = '05/29/20'

declare @DateFCP date
select @DateFCP = DTM1 from dbo.ZDT_WorkingDays where date = @DateFrom

--select @DateFCP DateFCP,@DateFrom DateFrom

--drop table #TempFCP
create table #TempFCP
(
	AgentPK1 int,
	AgentPK2 int,
	FundClientPK int,
	FundPK int,
	AUMIDR numeric(18,2),
	[Count] int
)

insert into #TempFCP(AgentPK1,AgentPK2,FundClientPK,FundPK,AUMIDR,[Count])
select D.AgentPK AgentPK1,C.AgentPK AgentPK2,B.FundClientPK,E.FundPK,isnull(F.Nav,0) * isnull(A.UnitAmount,0) AUMIDR, 1 [Count] from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join Agent D on C.ParentPK = D.AgentPK and D.Status in (1,2) 
left join Fund E on A.FundPK = E.FundPK and E.Status in (1,2)
left join (
select FundPK,Nav from CloseNAV where date = @DateFrom and status in (1,2)
)F on A.FundPK = F.FundPK
where date = @DateFCP " + _paramAgent + @"

select B.Name AgentName1,sum(AUMIDR)AUMIDR, sum([Count]) [Count] from #TempFCP A
left join Agent B on A.AgentPK1 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK2 = C.AgentPK and C.status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join fund E on A.FundPK = E.FundPK and E.status in (1,2)
group by B.Name
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportSummaryAUMbyDistributorJWDNOC" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportSummaryAUMbyDistributorJWDNOC" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Nett Subs by Product");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportSummaryAUMbyDistributorJWDNOC> rList = new List<ReportSummaryAUMbyDistributorJWDNOC>();
                                        while (dr0.Read())
                                        {

                                            ReportSummaryAUMbyDistributorJWDNOC rSingle = new ReportSummaryAUMbyDistributorJWDNOC();

                                            rSingle.AgentName1 = Convert.ToString(dr0["AgentName1"]);
                                            rSingle.AUMIDR = Convert.ToDecimal(dr0["AUMIDR"]);
                                            rSingle.Count = Convert.ToInt32(dr0["Count"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.AgentName1, r.AUMIDR, r.Count } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        //int rowstart = 0;
                                        //int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        //decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Asal Transaksi";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "AUM IDR";
                                        worksheet.Cells[incRowExcel, 5].Value = "Count";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(153, 0, 51));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.AgentName1;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.AUMIDR;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Count;

                                            worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";

                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 102, 102));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Font.Color.SetColor(Color.White);
                                            //incRowExcel++;


                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Close();
                                                DbCon1.Open();

                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {


                                                    cmd1.CommandText = @"
 --declare @DateFrom date
--set @DateFrom = '05/29/20'

declare @DateFCP date
select @DateFCP = DTM1 from dbo.ZDT_WorkingDays where date = @DateFrom

--select @DateFCP DateFCP,@DateFrom DateFrom

--drop table #TempFCP
create table #TempFCP
(
AgentPK1 int,
AgentPK2 int,
FundClientPK int,
FundPK int,
AUMIDR numeric(18,2),
[Count] int
)

insert into #TempFCP(AgentPK1,AgentPK2,FundClientPK,FundPK,AUMIDR,[Count])
select D.AgentPK AgentPK1,C.AgentPK AgentPK2,B.FundClientPK,E.FundPK,isnull(F.Nav,0) * isnull(A.UnitAmount,0) AUMIDR, 1 [Count] from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join Agent D on C.ParentPK = D.AgentPK and D.Status in (1,2) 
left join Fund E on A.FundPK = E.FundPK and E.Status in (1,2)
left join (
select FundPK,Nav from CloseNAV where date = @DateFrom and status in (1,2)
)F on A.FundPK = F.FundPK
where date = @DateFCP

select B.Name AgentName1,C.Name AgentName2,D.Name FundClientName,sum(AUMIDR) AUMIDR, [Count] from #TempFCP A
left join Agent B on A.AgentPK1 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK2 = C.AgentPK and C.status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join fund E on A.FundPK = E.FundPK and E.status in (1,2)
where B.Name = @AgentName1
group by D.Name,B.Name,C.Name,Count
                                                               ";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    //cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@AgentName1", rsHeader.Key.AgentName1);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (!dr1.HasRows)
                                                        {
                                                            return false;
                                                        }
                                                        else
                                                        {


                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<ReportSummaryAUMbyDistributorJWDNOC> rList1 = new List<ReportSummaryAUMbyDistributorJWDNOC>();
                                                            while (dr1.Read())
                                                            {

                                                                ReportSummaryAUMbyDistributorJWDNOC rSingle1 = new ReportSummaryAUMbyDistributorJWDNOC();

                                                                rSingle1.AgentName1 = Convert.ToString(dr1["AgentName1"]);
                                                                rSingle1.AgentName2 = Convert.ToString(dr1["AgentName2"]);
                                                                rSingle1.FundClientName = Convert.ToString(dr1["FundClientName"]);
                                                                rSingle1.AUMIDR = Convert.ToDecimal(dr1["AUMIDR"]);
                                                                rSingle1.Count = Convert.ToInt32(dr1["Count"]);

                                                                rList1.Add(rSingle1);

                                                            }

                                                            var GroupByReference1 =
                                                                from r1 in rList1
                                                                    //orderby r ascending
                                                                group r1 by new { r1.AgentName2 } into rGroup1
                                                                select rGroup1;


                                                            int rowstart = 0;
                                                            int rowend = 0;


                                                            foreach (var rsHeader1 in GroupByReference1)
                                                            {
                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.AgentName2;
                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                rowheader = incRowExcel;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 153, 153));



                                                                rowstart = incRowExcel + 1;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    incRowExcel++;

                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.FundClientName;

                                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.AUMIDR;
                                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    totalsubs = totalsubs + rsDetail1.AUMIDR;

                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Count;
                                                                    //worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    totalredemp = totalredemp + rsDetail1.Count;


                                                                    //worksheet.Cells[incRowExcel, 6].Value = rsDetail1.NetSubscription;
                                                                    //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    //worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    //totalnetsubs = totalnetsubs + rsDetail1.NetSubscription;



                                                                    //no++;
                                                                    //_endRowDetail = incRowExcel;
                                                                    rowend = incRowExcel;
                                                                }


                                                                worksheet.Cells[rowheader, 4].Formula = "SUM(D" + rowstart + ":D" + rowend + ")";
                                                                worksheet.Cells[rowheader, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[rowheader, 4].Calculate();

                                                                worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                                                //worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[rowheader, 5].Calculate();

                                                                //worksheet.Cells[rowheader, 6].Formula = "SUM(F" + rowstart + ":F" + rowend + ")";
                                                                //worksheet.Cells[rowheader, 6].Style.Numberformat.Format = "#,##0.00";
                                                                //worksheet.Cells[rowheader, 6].Calculate();
                                                                //incRowExcel++;



                                                            }




                                                        }
                                                    }
                                                }
                                            }






                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 5].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 5].Value = totalredemp;
                                        //worksheet.Cells[incRowExcel, 6].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 5];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 75;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        //worksheet.Column(6).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Summary AUM by Distributor JWD NOC";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Summary AUM by Distributor JWD
            if (_unitRegistryRpt.ReportName.Equals("Report Summary AUM by Distributor JWD"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _nameSheet = "";
                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And D.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }

                            cmd.CommandText = @"
--declare @DateFrom date
--set @DateFrom = '05/29/20'

declare @DateFCP date
select @DateFCP = DTM1 from dbo.ZDT_WorkingDays where date = @DateFrom

--select @DateFCP DateFCP,@DateFrom DateFrom

--drop table #TempFCP
create table #TempFCP
(
	AgentPK1 int,
	AgentPK2 int,
	FundClientPK int,
	FundPK int,
	AUMIDR numeric(18,2),
	[Count] int
)

insert into #TempFCP(AgentPK1,AgentPK2,FundClientPK,FundPK,AUMIDR,[Count])
select D.AgentPK AgentPK1,C.AgentPK AgentPK2,B.FundClientPK,E.FundPK,isnull(F.Nav,0) * isnull(A.UnitAmount,0) AUMIDR, 1 [Count] from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join Agent D on C.ParentPK = D.AgentPK and D.Status in (1,2) 
left join Fund E on A.FundPK = E.FundPK and E.Status in (1,2)
left join (
select FundPK,Nav from CloseNAV where date = @DateFrom and status in (1,2)
)F on A.FundPK = F.FundPK
where date = @DateFCP " + _paramAgent + @"

select B.Name AgentName1,sum(AUMIDR)AUMIDR, sum([Count]) [Count] from #TempFCP A
left join Agent B on A.AgentPK1 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK2 = C.AgentPK and C.status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join fund E on A.FundPK = E.FundPK and E.status in (1,2)
group by B.Name
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            //cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportSummaryAUMbyDistributorJWD" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportSummaryAUMbyDistributorJWD" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Summary AUM by Distributor JWD");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportSummaryAUMbyDistributorJWD> rList = new List<ReportSummaryAUMbyDistributorJWD>();
                                        while (dr0.Read())
                                        {

                                            ReportSummaryAUMbyDistributorJWD rSingle = new ReportSummaryAUMbyDistributorJWD();

                                            rSingle.AgentName1 = Convert.ToString(dr0["AgentName1"]);
                                            rSingle.AUMIDR = Convert.ToDecimal(dr0["AUMIDR"]);
                                            rSingle.Count = Convert.ToInt32(dr0["Count"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.AgentName1, r.AUMIDR, r.Count } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        //int rowstart = 0;
                                        //int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        //decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Asal Transaksi";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "AUM IDR";
                                        worksheet.Cells[incRowExcel, 6].Value = "Count";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(153, 0, 51));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Color.SetColor(Color.White);

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.AgentName1;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.AUMIDR;
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.Count;

                                            worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 102, 102));
                                            //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Color.SetColor(Color.White);
                                            //incRowExcel++;


                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Close();
                                                DbCon1.Open();

                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    //_nameSheet = rsHeader.Key.ProductCategory;

                                                    cmd1.CommandText = @"
                                                   --declare @DateFrom date
--set @DateFrom = '05/29/20'

declare @DateFCP date
select @DateFCP = DTM1 from dbo.ZDT_WorkingDays where date = @DateFrom

--select @DateFCP DateFCP,@DateFrom DateFrom

--drop table #TempFCP
create table #TempFCP
(
	AgentPK1 int,
	AgentPK2 int,
	FundClientPK int,
	FundPK int,
	AUMIDR numeric(18,2),
	[Count] int
)

insert into #TempFCP(AgentPK1,AgentPK2,FundClientPK,FundPK,AUMIDR,[Count])
select D.AgentPK AgentPK1,C.AgentPK AgentPK2,B.FundClientPK,E.FundPK,isnull(F.Nav,0) * isnull(A.UnitAmount,0) AUMIDR, 1 [Count] from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join Agent D on C.ParentPK = D.AgentPK and D.Status in (1,2) 
left join Fund E on A.FundPK = E.FundPK and E.Status in (1,2)
left join (
select FundPK,Nav from CloseNAV where date = @DateFrom and status in (1,2)
)F on A.FundPK = F.FundPK
where date = @DateFCP

select C.Name AgentName2,sum(AUMIDR)AUMIDR, sum([Count]) [Count] from #TempFCP A
left join Agent B on A.AgentPK1 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK2 = C.AgentPK and C.status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join fund E on A.FundPK = E.FundPK and E.status in (1,2)
where B.Name = @AgentName1
group by C.Name
                                                    ";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    //cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@AgentName1", rsHeader.Key.AgentName1);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (!dr1.HasRows)
                                                        {
                                                            return false;
                                                        }
                                                        else
                                                        {


                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<ReportSummaryAUMbyDistributorJWD> rList1 = new List<ReportSummaryAUMbyDistributorJWD>();
                                                            while (dr1.Read())
                                                            {

                                                                ReportSummaryAUMbyDistributorJWD rSingle1 = new ReportSummaryAUMbyDistributorJWD();

                                                                rSingle1.AgentName2 = Convert.ToString(dr1["AgentName2"]);
                                                                rSingle1.AUMIDR = Convert.ToDecimal(dr1["AUMIDR"]);
                                                                rSingle1.Count = Convert.ToInt32(dr1["Count"]);

                                                                rList1.Add(rSingle1);

                                                            }

                                                            var GroupByReference1 =
                                                                from r1 in rList1
                                                                    //orderby r ascending
                                                                group r1 by new { r1.AgentName2, r1.AUMIDR, r1.Count } into rGroup1
                                                                select rGroup1;




                                                            foreach (var rsHeader1 in GroupByReference1)
                                                            {
                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.AgentName2;
                                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                                worksheet.Cells[incRowExcel, 5].Value = rsHeader1.Key.AUMIDR;
                                                                worksheet.Cells[incRowExcel, 6].Value = rsHeader1.Key.Count;

                                                                worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";

                                                                rowheader = incRowExcel;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 153, 153));
                                                                //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Color.SetColor(Color.White);



                                                                using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                                {
                                                                    DbCon2.Close();
                                                                    DbCon2.Open();

                                                                    using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                                    {
                                                                        //_nameSheet = rsHeader.Key.ProductCategory;

                                                                        cmd2.CommandText = @"
                                                    --declare @DateFrom date
--set @DateFrom = '05/29/20'

declare @DateFCP date
select @DateFCP = DTM1 from dbo.ZDT_WorkingDays where date = @DateFrom

--select @DateFCP DateFCP,@DateFrom DateFrom

--drop table #TempFCP
create table #TempFCP
(
AgentPK1 int,
AgentPK2 int,
FundClientPK int,
FundPK int,
AUMIDR numeric(18,2),
[Count] int
)

insert into #TempFCP(AgentPK1,AgentPK2,FundClientPK,FundPK,AUMIDR,[Count])
select D.AgentPK AgentPK1,C.AgentPK AgentPK2,B.FundClientPK,E.FundPK,isnull(F.Nav,0) * isnull(A.UnitAmount,0) AUMIDR, 1 [Count] from FundClientPosition A
left join FundClient B on A.FundClientPK = B.FundClientPK and B.status in (1,2)
left join Agent C on B.SellingAgentPK = C.AgentPK and C.status in (1,2)
left join Agent D on C.ParentPK = D.AgentPK and D.Status in (1,2) 
left join Fund E on A.FundPK = E.FundPK and E.Status in (1,2)
left join (
select FundPK,Nav from CloseNAV where date = @DateFrom and status in (1,2)
)F on A.FundPK = F.FundPK
where date = @DateFCP

select B.Name AgentName1,C.Name AgentName2,D.Name FundClientName, E.Name FundName,AUMIDR, [Count] from #TempFCP A
left join Agent B on A.AgentPK1 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK2 = C.AgentPK and C.status in (1,2)
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
left join fund E on A.FundPK = E.FundPK and E.status in (1,2)
where C.Name = @AgentName2
                                                                        ";

                                                                        cmd2.CommandTimeout = 0;
                                                                        cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                                        //cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                                        cmd2.Parameters.AddWithValue("@AgentName2", rsHeader1.Key.AgentName2);

                                                                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                                        {
                                                                            if (!dr2.HasRows)
                                                                            {
                                                                                return false;
                                                                            }
                                                                            else
                                                                            {


                                                                                //ATUR DATA GROUPINGNYA DULU
                                                                                List<ReportSummaryAUMbyDistributorJWD> rList2 = new List<ReportSummaryAUMbyDistributorJWD>();
                                                                                while (dr2.Read())
                                                                                {

                                                                                    ReportSummaryAUMbyDistributorJWD rSingle2 = new ReportSummaryAUMbyDistributorJWD();

                                                                                    rSingle2.AgentName1 = Convert.ToString(dr2["AgentName1"]);
                                                                                    rSingle2.AgentName2 = Convert.ToString(dr2["AgentName2"]);
                                                                                    rSingle2.FundClientName = Convert.ToString(dr2["FundClientName"]);
                                                                                    rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                                                    rSingle2.AUMIDR = Convert.ToDecimal(dr2["AUMIDR"]);
                                                                                    rSingle2.Count = Convert.ToInt32(dr2["Count"]);

                                                                                    rList2.Add(rSingle2);

                                                                                }

                                                                                var GroupByReference2 =
                                                                                    from r2 in rList2
                                                                                        //orderby r ascending
                                                                                    group r2 by new { r2.FundClientName } into rGroup2
                                                                                    select rGroup2;


                                                                                int rowstart = 0;
                                                                                int rowend = 0;


                                                                                foreach (var rsHeader2 in GroupByReference2)
                                                                                {
                                                                                    incRowExcel++;
                                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader2.Key.FundClientName;
                                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                                    rowheader = incRowExcel;
                                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(102, 153, 255));



                                                                                    rowstart = incRowExcel + 1;
                                                                                    foreach (var rsDetail2 in rsHeader2)
                                                                                    {
                                                                                        incRowExcel++;

                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail2.FundName;

                                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail2.AUMIDR;
                                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                                        worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                        totalsubs = totalsubs + rsDetail2.AUMIDR;

                                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Count;
                                                                                        //worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0";
                                                                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                        totalredemp = totalredemp + rsDetail2.Count;


                                                                                        //worksheet.Cells[incRowExcel, 7].Value = rsDetail2.NetSubscription;
                                                                                        //worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                                        //worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                        //totalnetsubs = totalnetsubs + rsDetail2.NetSubscription;



                                                                                        //no++;
                                                                                        //_endRowDetail = incRowExcel;
                                                                                        rowend = incRowExcel;
                                                                                    }


                                                                                    worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                                                                    worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                                                                    worksheet.Cells[rowheader, 5].Calculate();

                                                                                    worksheet.Cells[rowheader, 6].Formula = "SUM(F" + rowstart + ":F" + rowend + ")";
                                                                                    //worksheet.Cells[rowheader, 6].Style.Numberformat.Format = "#,##0";
                                                                                    worksheet.Cells[rowheader, 6].Calculate();

                                                                                    //worksheet.Cells[rowheader, 7].Formula = "SUM(G" + rowstart + ":G" + rowend + ")";
                                                                                    //worksheet.Cells[rowheader, 7].Style.Numberformat.Format = "#,##0.00";
                                                                                    //worksheet.Cells[rowheader, 7].Calculate();
                                                                                    //incRowExcel++;



                                                                                }




                                                                            }
                                                                        }
                                                                    }
                                                                }



                                                            }




                                                        }
                                                    }
                                                }
                                            }



                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 6].Value = totalredemp;
                                        //worksheet.Cells[incRowExcel, 7].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 7;
                                        worksheet.Column(4).Width = 75;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 15;
                                        //worksheet.Column(7).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Summary AUM by Distributor JWD";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Net subs monthly by distributor jwd range
            if (_unitRegistryRpt.ReportName.Equals("Report Net subs monthly by distributor jwd range"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            //string _nameSheet = "";
                            string _paramAgent = "";

                            if (!_host.findString(_unitRegistryRpt.AgentFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.AgentFrom))
                            {
                                _paramAgent = "And C.AgentPK  in ( " + _unitRegistryRpt.AgentFrom + " ) ";
                            }
                            else
                            {
                                _paramAgent = "";
                            }


                            cmd.CommandText = @"
--declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'

--drop table #TempNetSubs

create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK1 int,
	AgentPK2 int,
	SUB numeric (18,2),
	RED numeric (18,2),
	SwitchIN numeric (18,2),
	SwitchOUT numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK1,AgentPK2)
select distinct A.FundClientPK,A.FundPK,B.Type,D.AgentPK AgentPK2, E.AgentPK AgentPK1  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select distinct FundClientPK,FundPKTo From ClientSwitching  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPKFrom From ClientSwitching where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK and C.Status in(1,2)
Left Join Agent D on C.SellingAgentPK = D.AgentPK and D.Status in(1,2)
left join Agent E on D.ParentPK = E.AgentPK and E.Status in (1,2) 

--select * from #TempNetSubs

Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set SwitchIN = isnull(B.SumCashAmountSwitchIN,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKTo,Sum(CashAmount) SumCashAmountSwitchIN From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKTo
)B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPKTo

Update A set SwitchOUT = isnull(B.SumCashAmountSwitchOUT,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKFrom,Sum(CashAmount) SumCashAmountSwitchOUT From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKFrom
)B on A.FundClientPK = B.FundClientPK and A.FundPK = FundPKFrom


select C.Name ParentAgentName,sum(isnull(SUB,0)+ isnull(SwitchIN,0)) Subscription
,sum(isnull(RED,0) + isnull(SwitchOUT,0)) Redemption
,sum(isnull(SUB,0)+ isnull(SwitchIN,0)) - sum(isnull(RED,0) + isnull(SwitchOUT,0)) NetSubscription 
From #TempNetSubs A
Left Join Agent B on A.AgentPK2 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK1 = C.AgentPK and C.status in (1,2)
left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK --and E.status in (1,2)
where E.status in (1,2) " + _paramAgent + @"
group by C.Name
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNetsubsmonthlybydistributorjwdrange" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNetsubsmonthlybydistributorjwdrange" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Net subs monthly by distributor jwd range");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNetsubsmonthlybydistributorjwdrange> rList = new List<ReportNetsubsmonthlybydistributorjwdrange>();
                                        while (dr0.Read())
                                        {

                                            ReportNetsubsmonthlybydistributorjwdrange rSingle = new ReportNetsubsmonthlybydistributorjwdrange();

                                            rSingle.ParentAgentName = Convert.ToString(dr0["ParentAgentName"]);
                                            rSingle.Subscription = Convert.ToDecimal(dr0["Subscription"]);
                                            rSingle.Redemption = Convert.ToDecimal(dr0["Redemption"]);
                                            rSingle.NetSubscription = Convert.ToDecimal(dr0["NetSubscription"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ParentAgentName, r.Subscription, r.Redemption, r.NetSubscription } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        //int rowstart = 0;
                                        //int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Asal Transaksi";
                                        worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 5].Value = "Subs";
                                        worksheet.Cells[incRowExcel, 6].Value = "Redeem";
                                        worksheet.Cells[incRowExcel, 7].Value = "Net Subs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(0, 51, 102));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Color.SetColor(Color.White);

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ParentAgentName;
                                            worksheet.Cells["A" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.Subscription;
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.Redemption;
                                            worksheet.Cells[incRowExcel, 7].Value = rsHeader.Key.NetSubscription;

                                            worksheet.Cells[incRowExcel, 5, incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(51, 102, 153));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Color.SetColor(Color.White);
                                            //incRowExcel++;


                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Close();
                                                DbCon1.Open();

                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    //_nameSheet = rsHeader.Key.ProductCategory;

                                                    cmd1.CommandText = @"
                                                   --declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'

--drop table #TempNetSubs

create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK1 int,
	AgentPK2 int,
	SUB numeric (18,2),
	RED numeric (18,2),
	SwitchIN numeric (18,2),
	SwitchOUT numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK1,AgentPK2)
select distinct A.FundClientPK,A.FundPK,B.Type,D.AgentPK AgentPK2, E.AgentPK AgentPK1  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select distinct FundClientPK,FundPKTo From ClientSwitching  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPKFrom From ClientSwitching where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK and C.Status in(1,2)
Left Join Agent D on C.SellingAgentPK = D.AgentPK and D.Status in(1,2)
left join Agent E on D.ParentPK = E.AgentPK and E.Status in (1,2) 

--select * from #TempNetSubs

Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set SwitchIN = isnull(B.SumCashAmountSwitchIN,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKTo,Sum(CashAmount) SumCashAmountSwitchIN From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKTo
)B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPKTo

Update A set SwitchOUT = isnull(B.SumCashAmountSwitchOUT,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKFrom,Sum(CashAmount) SumCashAmountSwitchOUT From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKFrom
)B on A.FundClientPK = B.FundClientPK and A.FundPK = FundPKFrom


select B.Name AgentName,sum(isnull(SUB,0)) Subscription, sum(isnull(RED,0)) Redemption, sum(isnull(RED,0))-sum(isnull(SUB,0)) NetSubscription From #TempNetSubs A
Left Join Agent B on A.AgentPK2 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK1 = C.AgentPK and C.status in (1,2)
left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
where C.Name = @ParentAgentName
group by B.Name
                                                    ";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@ParentAgentName", rsHeader.Key.ParentAgentName);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (!dr1.HasRows)
                                                        {
                                                            return false;
                                                        }
                                                        else
                                                        {


                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<ReportNetsubsmonthlybydistributorjwdrange> rList1 = new List<ReportNetsubsmonthlybydistributorjwdrange>();
                                                            while (dr1.Read())
                                                            {

                                                                ReportNetsubsmonthlybydistributorjwdrange rSingle1 = new ReportNetsubsmonthlybydistributorjwdrange();

                                                                rSingle1.AgentName = Convert.ToString(dr1["AgentName"]);
                                                                rSingle1.Subscription = Convert.ToDecimal(dr1["Subscription"]);
                                                                rSingle1.Redemption = Convert.ToDecimal(dr1["Redemption"]);
                                                                rSingle1.NetSubscription = Convert.ToDecimal(dr1["NetSubscription"]);

                                                                rList1.Add(rSingle1);

                                                            }

                                                            var GroupByReference1 =
                                                                from r1 in rList1
                                                                    //orderby r ascending
                                                                group r1 by new { r1.AgentName, r1.Subscription, r1.Redemption, r1.NetSubscription } into rGroup1
                                                                select rGroup1;




                                                            foreach (var rsHeader1 in GroupByReference1)
                                                            {
                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;


                                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.AgentName;
                                                                worksheet.Cells["B" + incRowExcel + ":D" + incRowExcel].Merge = true;

                                                                worksheet.Cells[incRowExcel, 5].Value = rsHeader1.Key.Subscription;
                                                                worksheet.Cells[incRowExcel, 6].Value = rsHeader1.Key.Redemption;
                                                                worksheet.Cells[incRowExcel, 7].Value = rsHeader1.Key.NetSubscription;

                                                                worksheet.Cells[incRowExcel, 5, incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";

                                                                rowheader = incRowExcel;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(102, 153, 255));
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Font.Color.SetColor(Color.White);



                                                                using (SqlConnection DbCon2 = new SqlConnection(Tools.conString))
                                                                {
                                                                    DbCon2.Close();
                                                                    DbCon2.Open();

                                                                    using (SqlCommand cmd2 = DbCon2.CreateCommand())
                                                                    {
                                                                        //_nameSheet = rsHeader.Key.ProductCategory;

                                                                        cmd2.CommandText = @"
                                                    --declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'

--drop table #TempNetSubs

create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK1 int,
	AgentPK2 int,
	SUB numeric (18,2),
	RED numeric (18,2),
	SwitchIN numeric (18,2),
	SwitchOUT numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK1,AgentPK2)
select distinct A.FundClientPK,A.FundPK,B.Type,D.AgentPK AgentPK2, E.AgentPK AgentPK1  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select distinct FundClientPK,FundPKTo From ClientSwitching  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPKFrom From ClientSwitching where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK and C.Status in(1,2)
Left Join Agent D on C.SellingAgentPK = D.AgentPK and D.Status in(1,2)
left join Agent E on D.ParentPK = E.AgentPK and E.Status in (1,2) 

--select * from #TempNetSubs

Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set SwitchIN = isnull(B.SumCashAmountSwitchIN,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKTo,Sum(CashAmount) SumCashAmountSwitchIN From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKTo
)B on A.FundClientPK = B.FundClientPK and A.FundPK = B.FundPKTo

Update A set SwitchOUT = isnull(B.SumCashAmountSwitchOUT,0)
From #TempNetSubs A left join (
select FundClientPK,FundPKFrom,Sum(CashAmount) SumCashAmountSwitchOUT From ClientSwitching
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK,FundPKFrom
)B on A.FundClientPK = B.FundClientPK and A.FundPK = FundPKFrom


select C.Name ParentAgentName,B.Name AgentName,E.Name ClientName,D.Name FundName,sum(isnull(SUB,0)) Subscription, sum(isnull(RED,0)) Redemption, sum(isnull(RED,0))-sum(isnull(SUB,0)) NetSubscription From #TempNetSubs A
Left Join Agent B on A.AgentPK2 = B.AgentPK and B.status in (1,2)
left join Agent C on A.AgentPK1 = C.AgentPK and C.status in (1,2)
left join Fund D on A.FundPK = D.FundPK and D.status in (1,2)
left join FundClient E on A.FundClientPK = E.FundClientPK and E.status in (1,2)
where B.Name = @AgentName
group by D.Name,E.Name,B.Name,C.Name
--where D.DescOne = @ProductCategory
                                                                        ";

                                                                        cmd2.CommandTimeout = 0;
                                                                        cmd2.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                                        cmd2.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                                        cmd2.Parameters.AddWithValue("@AgentName", rsHeader1.Key.AgentName);

                                                                        using (SqlDataReader dr2 = cmd2.ExecuteReader())
                                                                        {
                                                                            if (!dr2.HasRows)
                                                                            {
                                                                                return false;
                                                                            }
                                                                            else
                                                                            {


                                                                                //ATUR DATA GROUPINGNYA DULU
                                                                                List<ReportNetsubsmonthlybydistributorjwdrange> rList2 = new List<ReportNetsubsmonthlybydistributorjwdrange>();
                                                                                while (dr2.Read())
                                                                                {

                                                                                    ReportNetsubsmonthlybydistributorjwdrange rSingle2 = new ReportNetsubsmonthlybydistributorjwdrange();

                                                                                    rSingle2.ParentAgentName = Convert.ToString(dr2["ParentAgentName"]);
                                                                                    rSingle2.AgentName = Convert.ToString(dr2["AgentName"]);
                                                                                    rSingle2.ClientName = Convert.ToString(dr2["ClientName"]);
                                                                                    rSingle2.FundName = Convert.ToString(dr2["FundName"]);
                                                                                    rSingle2.Subscription = Convert.ToDecimal(dr2["Subscription"]);
                                                                                    rSingle2.Redemption = Convert.ToDecimal(dr2["Redemption"]);
                                                                                    rSingle2.NetSubscription = Convert.ToDecimal(dr2["NetSubscription"]);

                                                                                    rList2.Add(rSingle2);

                                                                                }

                                                                                var GroupByReference2 =
                                                                                    from r2 in rList2
                                                                                        //orderby r ascending
                                                                                    group r2 by new { r2.ClientName } into rGroup2
                                                                                    select rGroup2;


                                                                                int rowstart = 0;
                                                                                int rowend = 0;


                                                                                foreach (var rsHeader2 in GroupByReference2)
                                                                                {
                                                                                    incRowExcel++;
                                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 3].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 4].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                                    worksheet.Cells[incRowExcel, 3].Value = rsHeader2.Key.ClientName;
                                                                                    worksheet.Cells["C" + incRowExcel + ":D" + incRowExcel].Merge = true;
                                                                                    rowheader = incRowExcel;
                                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(102, 153, 255));



                                                                                    rowstart = incRowExcel + 1;
                                                                                    foreach (var rsDetail2 in rsHeader2)
                                                                                    {
                                                                                        incRowExcel++;

                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                                        //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                                                        worksheet.Cells[incRowExcel, 4].Value = rsDetail2.FundName;

                                                                                        worksheet.Cells[incRowExcel, 5].Value = rsDetail2.Subscription;
                                                                                        worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                                        worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                        totalsubs = totalsubs + rsDetail2.Subscription;

                                                                                        worksheet.Cells[incRowExcel, 6].Value = rsDetail2.Redemption;
                                                                                        worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                                        worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                        totalredemp = totalredemp + rsDetail2.Redemption;


                                                                                        worksheet.Cells[incRowExcel, 7].Value = rsDetail2.NetSubscription;
                                                                                        worksheet.Cells[incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";
                                                                                        worksheet.Cells[incRowExcel, 7, incRowExcel, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                                        totalnetsubs = totalnetsubs + rsDetail2.NetSubscription;



                                                                                        //no++;
                                                                                        //_endRowDetail = incRowExcel;
                                                                                        rowend = incRowExcel;
                                                                                    }


                                                                                    worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                                                                    worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                                                                    worksheet.Cells[rowheader, 5].Calculate();

                                                                                    worksheet.Cells[rowheader, 6].Formula = "SUM(F" + rowstart + ":F" + rowend + ")";
                                                                                    worksheet.Cells[rowheader, 6].Style.Numberformat.Format = "#,##0.00";
                                                                                    worksheet.Cells[rowheader, 6].Calculate();

                                                                                    worksheet.Cells[rowheader, 7].Formula = "SUM(G" + rowstart + ":G" + rowend + ")";
                                                                                    worksheet.Cells[rowheader, 7].Style.Numberformat.Format = "#,##0.00";
                                                                                    worksheet.Cells[rowheader, 7].Calculate();
                                                                                    //incRowExcel++;



                                                                                }




                                                                            }
                                                                        }
                                                                    }
                                                                }



                                                            }




                                                        }
                                                    }
                                                }
                                            }



                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 7].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 5].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 6].Value = totalredemp;
                                        worksheet.Cells[incRowExcel, 7].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 5, incRowExcel, 7].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 7];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 7;
                                        worksheet.Column(4).Width = 75;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;
                                        worksheet.Column(7).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Net subs monthly by distributor jwd range";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            #region Report Nett Subs by Product
            if (_unitRegistryRpt.ReportName.Equals("Report Nett Subs by Product"))
            {
                try
                {
                    using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                    {
                        DbCon.Open();
                        using (SqlCommand cmd = DbCon.CreateCommand())
                        {

                            string _nameSheet = "";
                            string _paramFundType = "";

                            if (!_host.findString(_unitRegistryRpt.FundTypeFrom.ToLower(), "0", ",") && !string.IsNullOrEmpty(_unitRegistryRpt.FundTypeFrom))
                            {
                                _paramFundType = "and C.Type in ( " + _unitRegistryRpt.FundTypeFrom + " ) ";
                            }
                            else
                            {
                                _paramFundType = "";

                            }


                            cmd.CommandText = @"
--declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'

--declare @ProductCategory nvarchar(50)
--set @ProductCategory = 'EQUITY FUND'

--drop table #TempNetSubs
--drop table #TempTotalProductCategory


create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK int,
	SUB numeric (18,2),
	RED numeric (18,2)
)

create table #TempTotalProductCategory
(
	ProductCategory nvarchar(100),
	TotalSUB numeric (18,2),
	TotalRED numeric (18,2),
	TotalNetSubs numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK)
select distinct A.FundClientPK,A.FundPK,B.Type,C.SellingAgentPK  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK 
where C.Status in(1,2)

--select * from #TempNetSubs

Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK


insert into #TempTotalProductCategory(ProductCategory,TotalSUB,TotalRED,TotalNetSubs)
select D.DescOne ProductCategory,sum(isnull(SUB,0)) TotalSUB, sum(isnull(RED,0)) TotalRED, sum(isnull(RED,0)) - sum(isnull(SUB,0)) NetSubscription From #TempNetSubs A
Left Join  Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
Left Join  Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
Left Join  MasterValue D on A.Type = D.Code and D.ID = 'FundType' --and D.Status in (1,2)
where D.Status in (1,2)  " + _paramFundType + @"
group by D.DescOne

select * from #TempTotalProductCategory
                            ";

                            cmd.CommandTimeout = 0;
                            cmd.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                            cmd.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);


                            using (SqlDataReader dr0 = cmd.ExecuteReader())
                            {
                                if (!dr0.HasRows)
                                {
                                    return false;
                                }
                                else
                                {
                                    string filePath = Tools.ReportsPath + "ReportNettSubsbyProduct" + "_" + _userID + ".xlsx";
                                    string pdfPath = Tools.ReportsPath + "ReportNettSubsbyProduct" + "_" + _userID + ".pdf";
                                    FileInfo excelFile = new FileInfo(filePath);
                                    if (excelFile.Exists)
                                    {
                                        excelFile.Delete();  // MASTIIN INI FILE BARU, JADI KITA HAPUS YANG LAMA
                                        excelFile = new FileInfo(filePath);
                                    }

                                    // SETUP EXCEL FILENYA DAN KASI NILAI KE PROPERTIES
                                    using (ExcelPackage package = new ExcelPackage(excelFile))
                                    {
                                        package.Workbook.Properties.Title = "UnitRegistryReport";
                                        package.Workbook.Properties.Author = Tools.DefaultReportAuthor();
                                        package.Workbook.Properties.Comments = Tools.DefaultReportComments();
                                        package.Workbook.Properties.Company = Tools.DefaultReportCompany();
                                        package.Workbook.Properties.SetCustomPropertyValue("Checked by", _userID);
                                        package.Workbook.Properties.SetCustomPropertyValue("AssemblyName", Tools.DefaultReportAssemblyName());

                                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Report Nett Subs by Product");


                                        //ATUR DATA GROUPINGNYA DULU
                                        List<ReportNettSubsbyProduct> rList = new List<ReportNettSubsbyProduct>();
                                        while (dr0.Read())
                                        {

                                            ReportNettSubsbyProduct rSingle = new ReportNettSubsbyProduct();

                                            rSingle.ProductCategory = Convert.ToString(dr0["ProductCategory"]);
                                            rSingle.TotalSUB = Convert.ToDecimal(dr0["TotalSUB"]);
                                            rSingle.TotalRED = Convert.ToDecimal(dr0["TotalRED"]);
                                            rSingle.TotalNetSubs = Convert.ToDecimal(dr0["TotalNetSubs"]);

                                            rList.Add(rSingle);

                                        }



                                        var GroupByReference =
                                                from r in rList
                                                    //orderby r ascending
                                                group r by new { r.ProductCategory, r.TotalSUB, r.TotalRED, r.TotalNetSubs } into rGroup
                                                select rGroup;

                                        int incRowExcel = 0;
                                        int rowheader = 0;
                                        //int rowstart = 0;
                                        //int rowend = 0;
                                        decimal totalsubs = 0;
                                        decimal totalredemp = 0;
                                        decimal totalnetsubs = 0;

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 1].Value = "";
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Merge = true;
                                        worksheet.Cells["A" + incRowExcel + ":E" + incRowExcel].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                                        incRowExcel++;

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                        worksheet.Cells[incRowExcel, 1].Value = "Product Cat";
                                        worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                        worksheet.Cells[incRowExcel, 4].Value = "SUBS";
                                        worksheet.Cells[incRowExcel, 5].Value = "REDEEM";
                                        worksheet.Cells[incRowExcel, 6].Value = "Net Subs";

                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Size = 12;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(0, 51, 102));
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Color.SetColor(Color.White);

                                        foreach (var rsHeader in GroupByReference)
                                        {
                                            incRowExcel++;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 2].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                            worksheet.Cells[incRowExcel, 1].Value = rsHeader.Key.ProductCategory;
                                            worksheet.Cells["A" + incRowExcel + ":C" + incRowExcel].Merge = true;

                                            worksheet.Cells[incRowExcel, 4].Value = rsHeader.Key.TotalSUB;
                                            worksheet.Cells[incRowExcel, 5].Value = rsHeader.Key.TotalRED;
                                            worksheet.Cells[incRowExcel, 6].Value = rsHeader.Key.TotalNetSubs;

                                            worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";

                                            rowheader = incRowExcel;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(51, 102, 153));
                                            worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Font.Color.SetColor(Color.White);
                                            //incRowExcel++;


                                            using (SqlConnection DbCon1 = new SqlConnection(Tools.conString))
                                            {
                                                DbCon1.Close();
                                                DbCon1.Open();

                                                using (SqlCommand cmd1 = DbCon1.CreateCommand())
                                                {
                                                    _nameSheet = rsHeader.Key.ProductCategory;

                                                    cmd1.CommandText = @"
--declare @Datefrom date
--declare @Dateto date
--set @Datefrom = '01/03/20'
--set @Dateto = '04/30/20'
--drop table #TempNetSubs
create table #TempNetSubs
(
	FundClientPK int,
	FundPK int, 
	Type int,
	AgentPK int,
	SUB numeric (18,2),
	RED numeric (18,2)
)


Insert Into #TempNetSubs(FundClientPK,FundPK,Type,AgentPK)
select distinct A.FundClientPK,A.FundPK,B.Type,C.SellingAgentPK  From (
Select distinct FundClientPK,FundPK From ClientSubscription  where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
union All
Select Distinct FundClientPK,FundPK From ClientRedemption where Status in(1,2) and Type not in(3) And ValueDate Between @DateFrom and @DateTo
) A
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
Left Join FundClient C on A.FundClientPK = C.FundClientPK 
where C.Status in(1,2)

--select * from #TempNetSubs



Update A set SUB = isnull(B.SumCashAmountSubs,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountSubs From ClientSubscription 
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK

Update A set RED = isnull(B.SumCashAmountRedemp,0)
From #TempNetSubs A left join (
select FundClientPK,Sum(CashAmount) SumCashAmountRedemp From ClientRedemption
Where ValueDate Between @DateFrom and @DateTo and Type not in(3)
group by FundClientPK
)B on A.FundClientPK = B.FundClientPK



select D.DescOne ProductCategory,C.Name ProductName,B.Name AgentName,sum(isnull(SUB,0)) Subscription, sum(isnull(RED,0)) Redemption, sum(isnull(RED,0))-sum(isnull(SUB,0)) NetSubscription From #TempNetSubs A
Left Join  Agent B on A.AgentPK = B.AgentPK and B.status in (1,2)
Left Join  Fund C on A.FundPK = C.FundPK and C.Status in (1,2)
Left Join  MasterValue D on A.Type = D.Code and D.ID = 'FundType' and D.Status in (1,2)
where D.DescOne = @ProductCategory
group by B.Name,D.DescOne,C.Name
                            ";

                                                    cmd1.CommandTimeout = 0;
                                                    cmd1.Parameters.AddWithValue("@DateFrom", _unitRegistryRpt.ValueDateFrom);
                                                    cmd1.Parameters.AddWithValue("@DateTo", _unitRegistryRpt.ValueDateTo);
                                                    cmd1.Parameters.AddWithValue("@ProductCategory", rsHeader.Key.ProductCategory);

                                                    using (SqlDataReader dr1 = cmd1.ExecuteReader())
                                                    {
                                                        if (!dr1.HasRows)
                                                        {
                                                            return false;
                                                        }
                                                        else
                                                        {


                                                            //ATUR DATA GROUPINGNYA DULU
                                                            List<ReportNettSubsbyProduct> rList1 = new List<ReportNettSubsbyProduct>();
                                                            while (dr1.Read())
                                                            {

                                                                ReportNettSubsbyProduct rSingle1 = new ReportNettSubsbyProduct();

                                                                rSingle1.ProductCategory = Convert.ToString(dr1["ProductCategory"]);
                                                                rSingle1.ClientName = Convert.ToString(dr1["AgentName"]);
                                                                rSingle1.ProductName = Convert.ToString(dr1["ProductName"]);
                                                                rSingle1.Subscription = Convert.ToDecimal(dr1["Subscription"]);
                                                                rSingle1.Redemption = Convert.ToDecimal(dr1["Redemption"]);
                                                                rSingle1.NetSubscription = Convert.ToDecimal(dr1["NetSubscription"]);

                                                                rList1.Add(rSingle1);

                                                            }

                                                            var GroupByReference1 =
                                                                from r1 in rList1
                                                                    //orderby r ascending
                                                                    group r1 by new { r1.ProductName } into rGroup1
                                                                select rGroup1;


                                                            int rowstart = 0;
                                                            int rowend = 0;


                                                            foreach (var rsHeader1 in GroupByReference1)
                                                            {
                                                                incRowExcel++;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 1].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 3].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                                                worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                worksheet.Cells[incRowExcel, 2].Value = rsHeader1.Key.ProductName;
                                                                worksheet.Cells["B" + incRowExcel + ":C" + incRowExcel].Merge = true;
                                                                rowheader = incRowExcel;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(102, 153, 255));



                                                                rowstart = incRowExcel + 1;
                                                                foreach (var rsDetail1 in rsHeader1)
                                                                {
                                                                    incRowExcel++;

                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                                                    worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;

                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.PatternType = ExcelFillStyle.Solid;
                                                                    //worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Fill.BackgroundColor.SetColor(Color.LightGreen);

                                                                    worksheet.Cells[incRowExcel, 3].Value = rsDetail1.ClientName;

                                                                    worksheet.Cells[incRowExcel, 4].Value = rsDetail1.Subscription;
                                                                    worksheet.Cells[incRowExcel, 4].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 4, incRowExcel, 4].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    totalsubs = totalsubs + rsDetail1.Subscription;

                                                                    worksheet.Cells[incRowExcel, 5].Value = rsDetail1.Redemption;
                                                                    worksheet.Cells[incRowExcel, 5].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 5, incRowExcel, 5].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    totalredemp = totalredemp + rsDetail1.Redemption;


                                                                    worksheet.Cells[incRowExcel, 6].Value = rsDetail1.NetSubscription;
                                                                    worksheet.Cells[incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";
                                                                    worksheet.Cells[incRowExcel, 6, incRowExcel, 6].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;
                                                                    totalnetsubs = totalnetsubs + rsDetail1.NetSubscription;



                                                                    //no++;
                                                                    //_endRowDetail = incRowExcel;
                                                                    rowend = incRowExcel;
                                                                }


                                                                worksheet.Cells[rowheader, 4].Formula = "SUM(D" + rowstart + ":D" + rowend + ")";
                                                                worksheet.Cells[rowheader, 4].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[rowheader, 4].Calculate();

                                                                worksheet.Cells[rowheader, 5].Formula = "SUM(E" + rowstart + ":E" + rowend + ")";
                                                                worksheet.Cells[rowheader, 5].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[rowheader, 5].Calculate();

                                                                worksheet.Cells[rowheader, 6].Formula = "SUM(F" + rowstart + ":F" + rowend + ")";
                                                                worksheet.Cells[rowheader, 6].Style.Numberformat.Format = "#,##0.00";
                                                                worksheet.Cells[rowheader, 6].Calculate();
                                                                //incRowExcel++;



                                                            }




                                                        }
                                                    }
                                                }
                                            }






                                        }

                                        incRowExcel++;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 1, incRowExcel, 6].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                                        worksheet.Cells[incRowExcel, 2].Value = "Total";
                                        worksheet.Cells[incRowExcel, 2].Style.Font.Bold = true;
                                        worksheet.Cells[incRowExcel, 4].Value = totalsubs;
                                        worksheet.Cells[incRowExcel, 5].Value = totalredemp;
                                        worksheet.Cells[incRowExcel, 6].Value = totalnetsubs;
                                        worksheet.Cells[incRowExcel, 4, incRowExcel, 6].Style.Numberformat.Format = "#,##0.00";


                                        worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.FitToWidth = 1;
                                        worksheet.PrinterSettings.FitToHeight = 0;
                                        worksheet.PrinterSettings.PrintArea = worksheet.Cells[1, 1, incRowExcel, 6];
                                        worksheet.Column(1).Width = 7;
                                        worksheet.Column(2).Width = 7;
                                        worksheet.Column(3).Width = 75;
                                        worksheet.Column(4).Width = 25;
                                        worksheet.Column(5).Width = 25;
                                        worksheet.Column(6).Width = 25;


                                        // BAGIAN INI DI EDIT MANUAL PER REPORT SESUAI KEBUTUHAN
                                        //worksheet.Cells.AutoFitColumns(); // UNTUK AUTO FIT UKURAN TULISAN DENGAN KOLOM, KEBETULAN INI BUAT HEADER AJA DIPAKENYA
                                        //worksheet.PrinterSettings.FitToPage = true;
                                        worksheet.PrinterSettings.Orientation = eOrientation.Landscape; // INI PER REPORT BEDA2 KEBUTUHANNYA JADI DI CEK WAKTU DESIGN REPORTNYA
                                        worksheet.PrinterSettings.RepeatRows = new ExcelAddress("1:1");// INI PERLU AGAR BARIS 1 MUNCUL TERUS WAKTU PRINT DI TIAP HALAMAN
                                        worksheet.HeaderFooter.OddHeader.CenteredText = "&12 Report Nett Subs by Product";


                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        // BAGIAN INI BIASANYA AMBIL DARI DEFAULT SETTING DI TOOLS, TPI BISA DIUBAH SENDIRI SESUAI KEBUTUHAN PER REPORT
                                        //ExcelWorksheet ws = package.Workbook.Worksheets.Add("Demo");

                                        //worksheet.PrinterSettings.TopMargin = (decimal).5 / 2.54M; // narrow border
                                        //worksheet.PrinterSettings.RightMargin = (decimal).5 / 2.54M; //narrow borderExcelWorksheet ws = pck.Workbook.Worksheets.Add("Demo");
                                        //worksheet.PrinterSettings.LeftMargin = (decimal).5 / 2.54M; // narrow border

                                        worksheet.PrinterSettings.TopMargin = Tools.DefaultReportTopMargin();
                                        worksheet.PrinterSettings.PaperSize = Tools.DefaultReportPaperSize();
                                        worksheet.View.PageLayoutView = Tools.DefaultReportPageLayoutView();
                                        worksheet.View.ShowGridLines = Tools.DefaultReportShowGridLines();

                                        //Image img = Image.FromFile(Tools.ReportImage);
                                        //worksheet.HeaderFooter.OddHeader.InsertPicture(img, PictureAlignment.Left);

                                        //worksheet.HeaderFooter.OddHeader.CenteredText = Tools.DefaultReportHeaderCenterText();
                                        //worksheet.HeaderFooter.OddHeader.LeftAlignedText = Tools.DefaultReportHeaderLeftText();

                                        worksheet.HeaderFooter.OddFooter.RightAlignedText =
                                        string.Format("Page {0} of {1}", ExcelHeaderFooter.PageNumber, ExcelHeaderFooter.NumberOfPages);

                                        //worksheet.HeaderFooter.OddFooter.CenteredText = Tools.DefaultReportFooterCenterText();
                                        worksheet.HeaderFooter.OddFooter.LeftAlignedText = Tools.DefaultReportFooterLeftText();

                                        package.Save();
                                        if (_unitRegistryRpt.DownloadMode == "PDF")
                                        {
                                            Tools.ExportFromExcelToPDF(filePath, pdfPath);
                                        }

                                        return true;
                                    }

                                }
                            }
                        }
                    }
                }

                catch (Exception err)
                {
                    return false;
                    throw err;
                }

            }
            #endregion

            else
            {
                return false;
            }
        }


        public decimal Get_TotalNetSubsByProduct_Subs_ByProduct(string _product, string _dateFrom, string _dateTo)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                       




Declare @NetSubs table
(
FundPK int,
FundClientPK int,
SubsCashAmount numeric(19,2),
RedCashAmount numeric(19,2)
)

insert into @NetSubs
select A.FundPK,A.FundClientPK,sum(A.TotalCashAmount) SubsCashAmount,0  from ClientSubscription A -- SUBS
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKFrom,A.FundClientPK,sum(A.TotalCashAmountFundFrom) SubsCashAmount,0 from ClientSwitching A --SWITCH IN
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKFrom,A.FundClientPK

insert into @NetSubs
select A.FundPK,A.FundClientPK,0,sum(A.TotalCashAmount) RedCashAmount  from ClientRedemption A -- RED
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKTo,A.FundClientPK,0,sum(A.TotalCashAmountFundTo) RedCashAmount from ClientSwitching A --SWITCH OUT
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKTo,A.FundClientPK


select C.DescOne ProductCategory,B.Name Product,sum(SubsCashAmount) Subs,sum(RedCashAmount) Redeem from @NetSubs A -- NETSUBS PAKAI RUMUS DI EXCEL AJA
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.Type = C.Code and C.status in (1,2) and C.ID = 'FundType'
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
where B.Name = @Product
group by  C.DescOne,B.Name
order by C.DescOne

                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@Product", _product);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                return Convert.ToDecimal(dr["Subs"]);
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Subs"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public decimal Get_TotalNetSubsByProduct_Red_ByProduct(string _product, string _dateFrom, string _dateTo)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                       




Declare @NetSubs table
(
FundPK int,
FundClientPK int,
SubsCashAmount numeric(19,2),
RedCashAmount numeric(19,2)
)

insert into @NetSubs
select A.FundPK,A.FundClientPK,sum(A.TotalCashAmount) SubsCashAmount,0  from ClientSubscription A -- SUBS
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKFrom,A.FundClientPK,sum(A.TotalCashAmountFundFrom) SubsCashAmount,0 from ClientSwitching A --SWITCH IN
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKFrom,A.FundClientPK

insert into @NetSubs
select A.FundPK,A.FundClientPK,0,sum(A.TotalCashAmount) RedCashAmount  from ClientRedemption A -- RED
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKTo,A.FundClientPK,0,sum(A.TotalCashAmountFundTo) RedCashAmount from ClientSwitching A --SWITCH OUT
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKTo,A.FundClientPK


select C.DescOne ProductCategory,B.Name Product,sum(SubsCashAmount) Subs,sum(RedCashAmount) Redeem from @NetSubs A -- NETSUBS PAKAI RUMUS DI EXCEL AJA
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.Type = C.Code and C.status in (1,2) and C.ID = 'FundType'
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
where B.Name = @Product
group by  C.DescOne,B.Name
order by C.DescOne

                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@Product", _product);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                return Convert.ToDecimal(dr["Redeem"]);
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Redeem"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public decimal Get_TotalNetSubsByProduct_Subs_ByProductCategory(string _category, string _dateFrom, string _dateTo)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 
                       




Declare @NetSubs table
(
FundPK int,
FundClientPK int,
SubsCashAmount numeric(19,2),
RedCashAmount numeric(19,2)
)

insert into @NetSubs
select A.FundPK,A.FundClientPK,sum(A.TotalCashAmount) SubsCashAmount,0  from ClientSubscription A -- SUBS
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKFrom,A.FundClientPK,sum(A.TotalCashAmountFundFrom) SubsCashAmount,0 from ClientSwitching A --SWITCH IN
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKFrom,A.FundClientPK

insert into @NetSubs
select A.FundPK,A.FundClientPK,0,sum(A.TotalCashAmount) RedCashAmount  from ClientRedemption A -- RED
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKTo,A.FundClientPK,0,sum(A.TotalCashAmountFundTo) RedCashAmount from ClientSwitching A --SWITCH OUT
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKTo,A.FundClientPK


select C.DescOne ProductCategory,sum(SubsCashAmount) Subs,sum(RedCashAmount) Redeem from @NetSubs A -- NETSUBS PAKAI RUMUS DI EXCEL AJA
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.Type = C.Code and C.status in (1,2) and C.ID = 'FundType'
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
where C.DescOne = @Category
group by  C.DescOne
order by C.DescOne


                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@Category", _category);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                return Convert.ToDecimal(dr["Subs"]);
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Subs"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public decimal Get_TotalNetSubsByProduct_Red_ByProductCategory(string __Category, string _dateFrom, string _dateTo)
        {
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {

                        cmd.CommandText = @" 



Declare @NetSubs table
(
FundPK int,
FundClientPK int,
SubsCashAmount numeric(19,2),
RedCashAmount numeric(19,2)
)

insert into @NetSubs
select A.FundPK,A.FundClientPK,sum(A.TotalCashAmount) SubsCashAmount,0  from ClientSubscription A -- SUBS
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKFrom,A.FundClientPK,sum(A.TotalCashAmountFundFrom) SubsCashAmount,0 from ClientSwitching A --SWITCH IN
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKFrom,A.FundClientPK

insert into @NetSubs
select A.FundPK,A.FundClientPK,0,sum(A.TotalCashAmount) RedCashAmount  from ClientRedemption A -- RED
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPK,A.FundClientPK

insert into @NetSubs
select A.FundPKTo,A.FundClientPK,0,sum(A.TotalCashAmountFundTo) RedCashAmount from ClientSwitching A --SWITCH OUT
where Type <> 3 and ValueDate between @Datefrom and @Dateto and A.status = 2 and A.Posted = 1 -- PARAMETER
group by A.FundPKTo,A.FundClientPK


select C.DescOne ProductCategory,sum(SubsCashAmount) Subs,sum(RedCashAmount) Redeem from @NetSubs A -- NETSUBS PAKAI RUMUS DI EXCEL AJA
left join Fund B on A.FundPK = B.FundPK and B.status in (1,2)
left join MasterValue C on B.Type = C.Code and C.status in (1,2) and C.ID = 'FundType'
left join FundClient D on A.FundClientPK = D.FundClientPK and D.status in (1,2)
where C.DescOne = @Category
group by  C.DescOne
order by C.DescOne


                        ";
                        cmd.Parameters.AddWithValue("@DateFrom", _dateFrom);
                        cmd.Parameters.AddWithValue("@DateTo", _dateTo);
                        cmd.Parameters.AddWithValue("@Category", __Category);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                return Convert.ToDecimal(dr["Redeem"]);
                            }
                            else
                            {
                                return Convert.ToDecimal(dr["Redeem"]);
                            }
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        public string SIDImport(string _fileSource, string _userID)
        {
            string _msg;
            DateTime _dateTime = DateTime.Now;
            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        //delete data yang lama
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText = "truncate table UpdateSIDIFUACodeTemp";
                                cmd1.ExecuteNonQuery();
                            }
                        }

                        // import data ke temp dulu
                        using (SqlBulkCopy bulkCopy = new SqlBulkCopy(Tools.conString, SqlBulkCopyOptions.TableLock))
                        {
                            bulkCopy.DestinationTableName = "dbo.UpdateSIDIFUACodeTemp";
                            bulkCopy.WriteToServer(CreateDataTableFromSIDTempExcelFile(_fileSource));
                            _msg = "Update SID/IFUA Success";
                        }

                        // logic kalo Reconcile success
                        using (SqlConnection conn = new SqlConnection(Tools.conString))
                        {
                            conn.Open();
                            using (SqlCommand cmd1 = conn.CreateCommand())
                            {
                                cmd1.CommandText =
                                @"  
                                   
                               
                                Truncate table [IFUASIDFromSinvestUploadLog]
                                insert into [IFUASIDFromSinvestUploadLog]
                                Select A.SID,A.IFUACode,B.FrontID,A.OpeningDateSinvest,GETDATE() from UpdateSIDIFUACodeTemp A 
                                INNER JOIN FundClient B on A.ClientCode = B.ID
                                where isnull(A.IFUACode,'') not in
                                (
	                                Select distinct isnull(IFUACode,'') from FundClient where status in (1,2)
                                ) 
                                and B.status in (1,2)
                                and isnull(B.FrontID,'') <> ''


                                update B set B.IFUACode = A.IFUACode, B.SID = A.SID,B.frontSync = 0, B.OpeningDateSinvest = A.OpeningDateSinvest
                                ,B.LastUpdate = @Lastupdate,B.UpdateTime = @Lastupdate,B.UpdateUsersID = @EntryUsersID 
                                from UpdateSIDIFUACodeTemp A 
                                left join FundClient B on A.ClientCode = B.ID
                                where isnull(A.IFUACode,'') not in
                                (
	                                Select distinct isnull(IFUACode,'') from FundClient where status in (1,2)
                                ) 
                                and B.status in (1,2)


                                ";
                                cmd1.CommandTimeout = 0;
                                cmd1.Parameters.AddWithValue("@EntryUsersID", _userID);
                                cmd1.Parameters.AddWithValue("@LastUpdate", _dateTime);
                                cmd1.ExecuteNonQuery();
                            }
                            _msg = "Import SID IFUA Done";

                        }



                    }
                }
                return _msg;
            }
            catch (Exception err)
            {
                throw err;
            }
        }

        private DataTable CreateDataTableFromSIDTempExcelFile(string _fileName)
        {
            DataTable dt = new DataTable();
            DataColumn dc;
            DataRow dr;

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.Int32");
            dc.ColumnName = "UpdateSIDIFUACodeTempPK";
            dc.Unique = false;
            dc.AutoIncrement = true;
            dc.AutoIncrementSeed = 1;
            dc.AutoIncrementStep = 1;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "SID";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "IFUACode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "ClientCode";
            dc.Unique = false;
            dt.Columns.Add(dc);

            dc = new DataColumn();
            dc.DataType = System.Type.GetType("System.String");
            dc.ColumnName = "OpeningDateSinvest";
            dc.Unique = false;
            dt.Columns.Add(dc);

            StreamReader sr = new StreamReader(Tools.TxtFilePath + _fileName);
            string input;

            sr.ReadLine();
            while ((input = sr.ReadLine()) != null)
            {
                string[] s = input.Split(new char[] { '|' });
                dr = dt.NewRow();
                dr["SID"] = s[2];
                dr["IFUACode"] = s[3];
                dr["ClientCode"] = s[5];
                dr["OpeningDateSinvest"] = s[53];
                dt.Rows.Add(dr);
            }
            sr.Close();
            return dt;
        }

        public List<FundClientCombo> GetBankRecipientCombo_ByFundClientPK(int _fundClientPK)
        {

            try
            {
                using (SqlConnection DbCon = new SqlConnection(Tools.conString))
                {
                    DbCon.Open();
                    List<FundClientCombo> L_FundClient = new List<FundClientCombo>();
                    using (SqlCommand cmd = DbCon.CreateCommand())
                    {
                        cmd.CommandText = @"
                        
                        select C.BankRecipientPK BankRecipientPK,C.Bank +  ' - ' + C.B + ' - ' + C.C as AccountNo from (  
                            select 1 BankRecipientPK,B.Name Bank,nomorrekening1 B,NamaNasabah1 C from fundclient FC   
                            left join Bank B on FC.namabank1 = B.BankPK where fundclientpk = @FundClientPK and FC.status  = 2 and B.Status = 2    
                            union all    
                            select 2 BankRecipientPK,B.Name Bank,nomorrekening2,NamaNasabah2 C from fundclient FC   
                            left join Bank B on FC.namabank2 = B.BankPK where fundclientpk = @FundClientPK and FC.status  = 2 and B.Status = 2   
                            union all    
                            select 3 BankRecipientPK,B.Name Bank,nomorrekening3,NamaNasabah3 C from fundclient FC   
                            left join Bank B on FC.namabank3 = B.BankPK where fundclientpk = @FundClientPK and FC.status  = 2 and B.Status = 2    
                            )C 
                        UNION ALL

                        Select NoBank BankRecipientPK, B.Name + ' - ' + A.AccountNo + ' - ' + A.AccountName from FundClientBankList A
                        left join Bank B on A.BankPK = B.BankPK and B.status in (1,2)
                        where fundClientPK = @FundClientPK and A.status = 2


                        ";
                        cmd.Parameters.AddWithValue("@FundClientPK", _fundClientPK);
                        using (SqlDataReader dr = cmd.ExecuteReader())
                        {
                            if (dr.HasRows)
                            {
                                while (dr.Read())
                                {
                                    FundClientCombo M_FundClient = new FundClientCombo();
                                    M_FundClient.BankRecipientPK = Convert.ToInt32(dr["BankRecipientPK"]);
                                    M_FundClient.AccountNo = Convert.ToString(dr["AccountNo"]);
                                    L_FundClient.Add(M_FundClient);
                                }

                            }
                            return L_FundClient;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                throw err;
            }


        }


    }
}
